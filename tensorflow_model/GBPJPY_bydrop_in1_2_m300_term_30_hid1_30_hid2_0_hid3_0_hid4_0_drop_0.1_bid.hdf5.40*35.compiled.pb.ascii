node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8323979
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: ">\203\205\276\"\t@\275{\260H\275EE\271=\222\\\361\274\243\247\365=\016\247\014\275\350\213\002\275\332{\247\275o\036\214=\270\311}=\307\315\035\274b\2744\275@\020\255;\247`H\275b\270\250<\263K\030\2724%\267=}\243\311=C\207L\275,ox\276\307,i>\331o\016=\316\220\376\274>\324\230\275\265\333\003<!\242\006>\017\371{=\371F\321<.={\275Z\230\310=\202\215\241<\371\356+>\257A\277=\241\363\310=\027\353\354\275r\007\355=.\225K<\"n\001>:\225\265\275\tg)\273\331\234o\274\222\263\205;\245\352\243\275\353\277\371\2752\333\203=\361\027\354\274\204k\253=\320\307U>m\010\346;\327t\207\274\272\277\000\276\344r?=\204\255V\275\204\222\350\275\t_\267=\316\232\213\275\216\303\027> \365\301\274z\252\330\275\276\007\246=\303LW\275b\354*=\267,\320<3\207\032>\016Q\306\275\256s\202=\303\366\212=\356\276\375\275\214\023b\275-\206|\275!\344\200=\\d\007>\240\200\305\275\265\200\260\275\245\'\027\275\271\331\215\276\226\364\037\274\256{\336=L\317\241=\000h\216=Z\020\213<H\305H\275_\277\212\273\350\326\261=p\363s\275U\237p\275\034\243[=!\262\240=\016\344\017\275{\216\274=<U\345\275\r\330\266=\352\236A<\207\374\363=\264\244\226<\332\003E\275\226^\240\275\205\277\301;@\251\354=\377\033$\276\21626>\253\343\334=%}\026\275\031\351\355=\210\253\315=\223%\001= ~%\276\242\024\010=\\i}\274\272\256\252=\251\325\237=\030e\240\274=[\361;\3235\272\274\351\260\207\275Nvr\275\212\036\022\275q\343\312:\3625\201<\274R@=a-\014\276\257~\265;\322\275\367<\273\245\033>\004\205\013\276\256f\364<m\232o=\300\372\226=\025\300s=D\312\312\275)\030\003=7m\233=\301\002\324\275Q\277\354\274N\004`\274<!l\275\254\236\014>\366\264H\274\370\315p\273\253\377\370;\343\035\205\273X\236\006>\321\320V<q\253[\2742^\215=AC\337<\224\215\233\275\224\3372\276wD\2228F\026b\274\250\0104>\035\237\016=1\346 ;\263}\001\276\237\322&\276\347\272\314\275\236\335\\>G\030\000=\2677\013\275\241c\250\2743\204\310=\216\223;\272\347\311\257=\336\240\266<p~\340\275n\272\205\275\272\013\301\275\214\231/>\210h\360\274 \234J\275\2319\207\275\227\362\240=KP\030\274`{~\275\034\352w\275o\224.>\353\313\234=\257Z\026\275SfA=\256H\340=e\2274=)v\306\275\223\"\241\275\276\177\254\275f\364/=\013\226\001=\373U(=\350)\200\275\016\\\267\275\013-\335=\331\354;<\004\344\240=@\000\260\275\001<\244=<\311\013>\313\202\365\273\270T\024\275liU=\365!\256\275\2327\226=U \035\275\006\331\007>b\022\233\276@Cy\275\363\345<<qM\210\275\255\351\234=7\301\006\2761\251m=B\027c>\216\274\013=\305\207\252\274\312@\226\275\007r\222\275\270\370\000\275\274\035 \275\231/8\275\035~\014\276\347\216\232<\311\023F=D\006r\274,\307\273=\017\021\264\275(\0004=uA\240=\254\023/>\264\352\014>\340\341\351=&\'-\276\352\330\016=\371\241\005\274\032\251\263\275\006\000B=\221X\347=\310c\031>\271\022\356=\344\027\025=f\376G=\347\326\001>\267\362\203=e\212\257\275\006\356\203\274\275\341\242\275\351\251\004\276*\234\262\275\337>\313<y\313V<0\300a=f\311\005\275\245u\255;\235\'\257=\037\237\322=\001<[=\324O\223\274\265\314T<\035\233\252=\341\355>\276\\\252\035=\215\001\n\276\030\263o\276w\013\002\276\303\200{\274\nu/<\277n@=@gf\275\327i\250\275A1\267=q\274<\274t\340\020\276aC\213=\301\324b=*\352\t>\365\231\261\274M\3019>\014\026\023\275\266\375V\275\2628\225\274\205\347\212=A\276\030=\216C\375<\313\246\217\275\220h\010\275\302\260\270\275\257\200\241<N\371\037\276\340\034\014>\304I0\275\262\344\024\274\217\371\205=\357\254\345\275\203\310\225\274U\233N<\033\350\333\275\265(\007\276\301\020T\276\313\212\201=3\001\021\276\2368\021\275mO\021>\335=\235\275\\\347R\276-\310\305<\225g\230=W\332\245\274\'m\325=\2413n\275J\031\264<\010\362\032\276\316\304\242\275\303\256F\274;`\207=5\006\227=\034\270\310=\226\235Z<\322\266\023\276{8\337=\035\225\335=.j\332\275\267\"\303=\313\373\210\275\311\211\300=\323\217\353\274\374\357\037\275m\007\225=\264}1\273\200\211\222\275\277\232\363<th\253\275\244\275\020<\375\356\355\275\276\265\367\275\266^\002\276!@\314\275_\021\221=\277\222\276\275\266?u>\356\204\355\275O\0379\275D\237\014>p,\304;\023a\276=\010\306\351<\361k\024<\371\310\230\274\204\027\311\275>\032\243=\335\177\240<\254\271\352=\260\202\000<\234\337\232=q\r\372<\001\236|<\000\356\032>\246dG=\314hW\275N\301M>\212E\023\275\004\032<\274\351\003\240<\372[\213=\3117\226\274\374)\020=\366J\377=S\316R\275{\373[<\256\267\345=M\'\271\274@s\246:\373\354E>,M\377\273\177\273\010\276S7\236\274\346\336\271\275\002M \273$\330\264;\266mz<W\322\"=\022\250\366\275p\274\325\275$xl\275\266\202\212\274\'\360\303\275\354\nJ\275\3359\327<_i\332\273>\276\261=\267<\025\276\000e\'\274\2466\005\276\353\305\304:\234<U;Ja\231=\357\210\204<33\001\275\3013\225\275\322\363\312=0\233\001\275\354\222\313<\325L)\276c\033\300<\355\320\235\274,\376\003>\257\227\355;Dz,\275.(\014\275\302\241j\275l\265\006>\314\'\234\274\367\004t\275\026\376\343\274\266\346\226=\240\332\326=*{\005; Y?\275u\200\264\274\000I\027\272a\006\253<\\\032b\274\336KB\275k\023\037>P-\260;\240\253\364\274\363a\325=\324\010\333\275S\232\253>\253w4\275\022\\w>\3009\252\275\033\361\024>\025\221\244=E\216\t=f\222;=\272\245\226=<\023\220\275r\230\312\275\235x\225=\375N\252=3\267%=\300|3\276\363\034\016\276\216\007S\276\261Z\330=\300\001\304\274\351n\233\274X{w=\2554\023=\300\251>\275\240\262\013\276\2015\034=\'\003B\275\340U2\274\201\235r\273\373\247\326=\232\222d=\020\252\316\2743\341\226\275-\312\305\275\013\003\231=\270\222\342\274\'t\305<}j\002\276\326\212\257\274\270\251\227\275\223(O=\036\255\241=\312R\260\2756\201\315\275\313\307\361\275z\030\036>\216\336\267=K\300\002\276\251T\234=S\004\230\275\325w\370=\331\326\300\275\210\374\245=\301S8=\354\377\017=\254y\212\276\025\024\361\275X\034\023=m\310\271\275hD\320=3V\201>\371C\n>~\010\221<e\244:=\337\'\350<\372\206\212\275\313>\">\203\324\036\273\031\251\356<p\307v\275\261\220%>n\261\255\274\2261\322\275\311h\"\275`\326\223=\232a.=9\364\241\275\032\300\"\275C\234\367;y\235\201\276\016\376\031\274.\007d<_t\037:\356y\376=\246a\023\274b(\025\276a\300\252=\354\237\220\274\266P\25776n\r<\030>>>\356\352\325\275\303\364\017>\010\356\345\274\213\221p\275B\360\241\275\371Tr\274E\303\311=u\243\026=\370\311V\275O\350J\276\252[\344<~\350^\274\374\267j\275\350\3658\2765d\232\275\205\232\203<E\022*\275\251c\n\276P:&>\347\"\262;\312$\257\275\304rS<\364y\265=\333\375\211\274\342\237\t\275\312\257\304\275\013I\215<3\177\214\275e\200\220<;\023\216\275\266\343)=\225b\001=\027*X\275\251U\177\274t\246\246=*]\372=\')\205\274\361\307i\275a\200L\275b\234\003\276}\tQ=8\343\242\275\363\271\007\276\242\313\000\276qr\204\275\356\021\244\275i\330\\>\r\2256>G\332l=\004\267`\275M\\_<\013F\331<\327\031^\275e\300\247\275\243C3=\332K\276<sl\023>>l\342\275\362o\307<]\\M\276\312/\235<\263_\371=\323\363\032=\204]\252\275B3\033>\202q\200\275\355^e\273\2343\271<\345\277\203\275aji=\2324\252\275\336\325\240\275\3336\037>\275\264-\275\024\375c={\347\361\273C\221\300\275\215\341:\276\010\324\205<s\003!<\250\226w\275\257\031\207=\233\352\030=\363]\200=\341\210\225\272g\250\335\275\316^\177\274[\367\267\275\371\314\r\275\0207\325\275FB\313\27581\007>\n\342\025\275d|\025=WLJ\275\017\036\207\275\370V\373\2746\353\325\272_J\001\276%\373\322=[\343\027\276\336\344D\275\221\330\361;\377Y7\275\206\014\241=\255%d:\302\2543\275t\221\010\276\035\367\262\274\362\315\311\275F\306~\274\266\035\233\275\023\007\222\275\275\352\255\275r\271\254\27545=\276\022\261\007=\242\343y=\2465\241\275\223\375Y=^\036\341=\2074\230\276\334k\316=tRX<\353>n=\024\354\036\276B=]\272\rg\004=\257\255\342\274IJ\372\274\002\206\335=W\272v>\333\340\020=\233\024Q\275{5;\275\271\261\t\2762W\025\275\010k\241\275\237#\201\273m\r\321\275\266\311\016>!V\273<%EX>\206\272\373\274;\216\t=\347\300\307=CAu\275>\267\335\275+\260?=\360$\016\274\320\226\004\2754\323\220=B\273\007\276\332H\346\275\212Yq>\371W\254\274b\'\260\273/\323\345=\027\251\252;Z\030!\274\230\t\335\275L1\363;3*{\274\332u\222=\275\263+\275\360\320\262\275\366\314\033>\352\256\222=\351\310/\276\001D\211\275\225b\310\275U\316(=\351\255\262\275\274Z\376=\361j\254\275\370\253\026\276 \030>>~\345\270=\2669\363\274|\230,=\361c\261\275+NK\275I~\004>E\364|\274\3733\237=\023\004><\336\300\001>\001}\375\274\260\221\331=\025JQ=x\260\023=\341\334\201=\370u\007\275IH\320\274\273\0258=\272\211*=\010Ya\275\031n\033>D\211\303<*xh<W\263(=\304\367\341\275\355\001:=F\020\004=\254\020\335\274\251\251\266=\276\353\230\271\023\212Z\275\323 G\273\266[\213\275\002\240*\276\037\'Q\275\014n9=\027\253Z;\010\220\216\275\2242D=J\312\261\275\204\233\203>b~\240=b*\027\276\r\2509=\364W\031=\341\335s=\373\260#\276r\354\365<\'\3139<1\257%\275\265\0030>\243m\201\275b.\205=\372\271h==a9\274\035ev\275\350\345\334=\n\007\224=)\005\257;B\261\007\276\347\2638<\333\004\177;=\357\264<\276\331\016\275\341D\274=H\226\364\272\354`\274;gK\016>k\025\003\276\303\356\264<\324\261U\272\013\231\306=\350\364E\271yf\226=\260g\350<\177\203\334\274\231\217\241\275\231\021\242\275\361\276\276\275\333\252$\276\267b\n=4jX=\005K\025\275\026y\336=/\035\224=\350\326\227\275A\337\t>\240v\235<\310!\007\275\255f\211\275u\223\036\275)E\334\275\351\263 \276\257sD\274\343\032!\276^]2\275\313\217\016\276\033\301\000\275\202\365\220=\220]\030\276\261T\346=A\304\215\2754\030\230=\020\017\025\2753Dj\276#\337F\275\316\303\262=RL\213<\002\242J\275\311\335\016=\021\241\226\275?\226\270\275[b\340=\235\341\317<]\265\271\275\"?\243=\346\n\276\274\302\231\003>r\216\225\275\263f(\274\370\224\010\276\250\335\321\275\327\371\346=_/\316=\203e\232\274\210\350\374=x\372\322\274\2777\010>\310\352\'=\223\3135\275\300\375[>\005i\014\275\226E\261\275\325s\207\275\371%\357\275\020\357u\271y\0374\276\\\245\301<\222\356\354=3\215\230\273*\033l\275|%1\276sD\266\275+\325\005\275\371\342\006\276xZ\t<,\224\265<\244 ?\276|\254\254=>\307\335=\305x\276\273\312\323\030:n~(\276D`!>9\323\036>\330\2709>\376]\001\275\347\211\305=:\356\260\275)Lh;H\266)\273\350lu=\030\r\322=?\233\313\272o\262?=E\301_=\010\007\214<\330\326\275=\"\272\303\274_U\376=Z\316R\275b\026:=\030I\003>6\203\266<l\272\347=X,\276\273U9\352;6\316m=\250\235\363\275\214\363\317\275$\220\377\275XZ\036>~\360\254=\234a\344<&\010\014\276\200\320\252=\307s\006\276x\003\272=\310,\210=\336\326\357\275(X:=\271\312\206\275\234\307\210\275\3361\253=\223\321\r\275T\177\327\2752\252\250=\036P\375\275\212c\373\275?\356\353\275I\314\305\273\024\227\217\275\024\002\002\276`\315\346;J\350$=\231\266f\275h\014\233\274\267;\246\275\365@\004=\330\273\210\275\274\275[=\315 \334<\2465\031\275 \251\351\274\315\0346>J\037\021>_;\017>\366\331\216\275\302\032}<\360Fb<\0017\276<\370\373o>\335\235\013\275_V\027>w\024\213\275\302\342\016<\001g\257\275\362w\216\275\004+\222;V0\311\274\340\271\222<.\217\024<\207#\305=[\331 \275m;\306\274t\210\366:\301\203\003\2767\233\n<<\236\242<\210\"\305=\377\217\243\275\247+\265\275\360\326\341;\226]7\2754\363\320;\327\247\214\275\271\204H\275\301\022S<\220D\004=\240\037\212<\274\301\345\275\010\301;=\224\302\272<+\373H\276\271*\';\241k\342=O\355\013>\254U\366\275E\373+>=\207\027\276\274\001\231\275\305Z\356\275\242\300E=\262\r[\276\024\266d\276vBu\275#L\217<\227|\367<\315\226\330\275Ja\217=} >\276^}q\276}\304\224\275\332\307\261=\331\004E\275*g\177\275E\245s\275.\177\266<LX\313\275<\037\263\275\334z\200\275\206\204\204<)\026\234\275_y\203\275\231\317=\274R\212\204\275\030\227\005\276\273U\326\275\376,5\275dd9>\256C\273=al\001\275\017+f\274#^o\275\241Q\255=C@\375=\000\362\277\274\243\003\302<S|\242<\300\236\330\274\306\006\'\275co\276=\244 \214\276\024\213S<\227u\323;\370\032M>\257;&>Iv\241=\250\006\177<W\301\027\276R*\204\275\325\025\226\275\370V\274=w\3621<\351\036\035\275\2377\300=\276\211\263;\334\306\303\275\234\016\316=*o\036;\361\340\252\274\261\232\214=\375\202\274\275k n=q\332\034>L\304@=B#\255\275\033\026j\275>\272l\275b\236\317<\312t\035\276\245\336e\275\333}\221\274(\363\361<\262];\276\210\340@:!u\021\2766\037\277=\2076\335\274\317b\025\275\211\264\001\276S\037\263\275^\364\343<\265\020\322=\240\235\005<\020\314\222<\273\210[\276\336\315\220<\364\1771=\324H\366\275\361iX=*\035\020>\363\261\201\275\307\215\336\273\232\037\t\275n\202\324\274\372]\032\275\307\036\031\276v\362@\276oO\346=\213\255\277\275\214\034\347\273h\230\215\275$\347b\275\315\345\356=bt\"\276\325n\365\274`K_=\275\031\212\275R+\003\275\304F\276=}|\356\274jw\0209\221\252\216\274\305\021\267\275x\022\306=\000\021\273=\314b\276\274E\216\"=x\210\323\274\005\030\004>3\225\201\274v\327\316\275\027\314\213=\025?\207<\371n\001>\261\031\261=\273t\236;\010)<>\370\363\214\273f\024&\275\313\237\303<\230.\362=\262\214\252\275\355\225K\275\301I\331\274d\203,\275\300SH>\235\\\267=+\333\001\276\2245\241<\345V\020\276fps=\326\233\r\276\022\343\302<\037\n\217=\n5\226\275\367E\334\275\025\200\210=\"\004\213\275\355\254\240\274\236\231\361=\256Y\201\275\"m\344\275/J\315=`B\"\275\267\001\002=\357\023.\276\323t1>hK^\275\251`J\275\007F\344=(\221\362=\316\362\240\275\232\257J\276LEz\273\254r\227=z\240\026\276\004-\036;\t\023\n\276\254p\237=A\301%\276\275\036\020\275\324\313d\275*z4=\220O\216\274FPq\273s\026\340\275\365\315w<\332\017x\275\307\333\312<kJ#>\374\225\207\27516\210=\214\317\003\275gf\001\276\271\365\\\275\342\030\274=\324\346\215\275O\3209=\013\'[\275~a\317\275H@}\275Cm-\276&\033\021\276+\245\231\275\331,\205>\312\204\274\275e\270\242\275\325\253\317<\305\376\224\275\276\321\254\275\277:e\275\005\223\227\275\300Z\023\274\360\201\333\275(\322\303\275\026\330\252=\364\351\313=s\372y\274h\220\026\2767\321\365\275\035\341{\275`\213\375\275\313\272u=\016C\016\276\031\305\353<\232^\302\275}u\325<}\364\200\273\346\\D\275C0E\274\014\362\261=\377\021\204=\r\226\376;\312\375\323=\353\"\355\275\243\334\217=\303\346\017=\211&\212\275Y\331H\274j\023\305\274\375\365@=c\252@=a*\362\274\332r@\276\2738\320=S\206Q\275\231\'K\2746\247\n\275H\236)=\312\225\017\276vVE=\230J\320\275\346\"\325=\206e\243\274\235\016\242;3\256\341\273\331\327b\275\333\366\016>k\317\214=\022\201\213=\247\271\023=S\274\024>\3318\225\275\001\272\004\276a\t\251\275\346\242\215\275\254\364\336<\217\235\016>\310\307*9\227\003?\275\226\231+\275n\247*>\356\000\333<\031\367\363=\237\270\337\274\204cO\274\004\330\323\275\'B7=\365\356\003>MB\351<\376\246\"=\023a\357\275\221\004#=\241\314\203=qdK=O\036\242\275\021hD\2754\303\237\275\\%\023>R\371\227\275I\334\314\275\370-\233;v\304\240<\215\013}\275\274\240\253\275\322v\034=G\nA\276\234\250+\276\311s\205\272\272\010\225\274A\336\353=\242K\000\275p\367v\274\025f\224\275\265K\003>\313Z\016\275\000<\031\274W\3111=#\312O\275B\017\214=!?\244=\302bh;\207\327\207=\205!\330\275\267Z-\276\'\253\201\275\237\333B\276\347e@>\374\267\264=j\255h\276\003C\226=\307&\224\275\267M\233< f\037=\320Y.\272\215N>;\277\n>\274\030\374P\275\202\344\356=j\375Y=\302\232\260<\004yL\275\177\tG\274\277\017\003<\324\364\022>\217:,\276\242\226=\275\320y$>\245y\255=\317+\026\275z\205\037\275\350\027\001\276\373\364\377\274\021`\023\275\332\032\021\276\222\350\221\275F\327/\274\214\275\210=\035^\200\275\223\"U\276\032G\213\274#\326\302\275\227I!\275\375\225\366<\352\276\344\273\371\t\370\274\265\346`>&\227?=\260\0252\276\310gy\274o\205<<\242.\351<@\322\022=\353\r\231\275\344s\256<\253C/>U3\347=\354\320c\2756\351M=y\255\347<\351\021\020=\2141l=\022Z\001>\352c\266=HW\"\276W\302\317\275\247\301\033>\206K\217\275z)\354=B\274\241\275\266T\335\275\237n\262;\314K\203;ys\352\273\227G,\275R\376\310\275\240\343\345\275\272\320\351<v\201\001<\314\002c=j\236\223=\254\243\025:\3224Y\276\255\221B\276\357Y\216\275\377\335O\275\366\261\311<\202\006\212\274\006\021\210<\300\210\000\276\215\275\255\275\001\266\r<\365\274\350\275\357\266\244=\030\2466\276\205\nS\276\235\201\261\274\330o\321\275\222\245\205=v\264r>f\025\244=6\010\027\2732\004\271\275u\366\267\275U\251\272\275\303C\024>\365I\275\275+\350\226\275y\222\262=l\354`=\033n\000\276\314$\216=\017P\250\2751\3669\275\316\253\357<\274\247\200=oG\016>\034:\336\274\260\006\'\275)\342\301=d\215^=\032\264\376\275\245\342\365=Lt\304\275bO\310\274\ty\244\275\347\013\204=L\265\034=4\275\301\275I\216\237<\365OA<\'I;\276\'\207\312<\277\344$\275\355\332c=\031\032y\272\245\272\242<\267\237;>G\206\371\274\302\'\234\275\206\324\220=\363\"\205<%B\321=\363\026\277\275\01787>\220\335\235\275\177\013\334;\3358\305\275H\330\022=\353\2410\274\313~\361=|\377\t<\356\253\365=]l\225<|@\010\276\326\350\001\275\353\362\245\274\376\034!\275U{R=\325\2378=1\237\010>\344\340\231<\277(\032\2764\336\375\275\212\016\271=\201!)<\006r\205\275\311\343s<\257>\t>\336\326\257\274\325\2163\275\023\254\252=\000\303\332\275,\230\335\275>r\007=\275\336\200=K\331\371=\"\323\354\274\n[\026\276U\374\362=vG\003\276\222x_=<\'5\2759\362\336=!\341\260=\330\312\017=\317\'\305=\233q\351<#\001\273<\000\003\210=\210\343\300\275a\'\000>\270\215\307\275\373\327\177\274\356\321\207=\204|k\275\026\344\273<\004Rf=\375\2002;)\2229\276\276\0230>bDL\274ru3=8\204\303=\242R\246\274=\244\233=\310\355\\=\362v\014>\344\2731\275\306\314\363\275\317\245\315\274\210h\361\274\000\217\207\275\032zW\274\306\2713=\272\n\321=\300\370\254=\344\335\r\275\240.\002>\213_\325<\005*\216;n*\242=\322\220\241\275\261\343\030=\013\272-\275\261\336\320=\212V\010\276\212;\010\2754\354X\275\260,\034>Y\365H\2756\"\242=w.\320\275\036\2533\276*2\347\274\277\261x\274\354N\377\275ZnE\275]\254\346<\273\006\360\275\326\343\014<\366\035|=\341 \271\275qxd\274qY==\027\366\262\275\220\2117;=x\017\276Tl\225\276\322\013\304<\232*\013<q\020\025>T\000\221\275\023^\010>\260\324\263=\016\'Z\275\301\023\202\275|\225\007\273$\200j\273\360\326m\276\352\300\312<2\231\325<\361q\206<\024t%=4\007\370\274\2476\300<\202g\237\275GS\n=\202\202e\275\334I\310<\307\352\267\274\204\346\207=\347c\206\275>\337\355=\250\362\023>\355\301\360\275\215^\016<\036J\214=\365\256\264<\364^[>k\221\263;7MB<b\001X>\250\014 \274y\224|=3\324`\275\315\202h=\325\307\366\275\264n\004=\346\334\347\274\315l\035\275\347(i\274u\t\216=qo\004\276f\025\004=7\202+=9\276)>\036\253\025=M\'\220\275\331v\317\2746r\202=\307C\032\275=\026K>r`\242=\253|t\276\035\211\021>J\357->\024v\253\275\207E\262<T&\025=\363\376\331\273\347b\361\274\034\353n\275\305\266C\275(7P<\261<\344<\231\306\001\276\264\201\010\2759\354\263\275\237[\370\275Q\021=\276S[\341;\250g\272<\204\237\311:q\227*\275)\326\234>\203I\210\2755\355\001\276\305\002\376\274\201\314\200\276\234\204.>\354H\022=j\032\333\273he\t>\006\317\206\275\215<\315=%/V=\364\010\266\274\310X\360<~k\352<o\031=\276K7\222<\002\346\236=\013\371\n\275lC7=J\026\217\275\245\207\373<@lP\275Rr\004=\355\373\032:\316\344\212=\3559\373=l{\376\274\376\257\320\275\262{M=\233\321\357\2751*\217=\220E\302<\\[\260\2751X\370<@\372\200=Yn\000\276f\254\027\276\n\261\223==\312-\275\251D\341=\217kA\275\273\251(\275\265\263=\275\346\243\265=|9*\275;IY\275\332\207V\275\333Z\276\275\240\276\257<\231\305\035=\323:9>b\226u=\315\273\000>\237\227x=rh\315\275\350z\224\275\272\357\305\274\261\343?=\232\257\177=\261\007\325=1\377#\274V\t\237\275\313\261\214\275q+\241=U\205i\276\027\3118\276\177\207#\275k\332\031\275\272$\204=\236\364$\275JM\374;R\207\231<\235I\254\275m\\\177\275\246w\343=*T\250\275\263k\017\273\337\242\277=\177\376>>u\213\317\274\335\360\212\275c\300\252=\220\222\326\274>\373+\276\353\002\320=\314\017\017\275\344\317\302=\254\017\303\274\013\241i=#\270R\276\200\230\242=F\336\036\275\025 H\275\262\'\336=\023B\304\274mB\372\275\007\376\'\274\276\'\002<\367\373\\=\317\377\211\275\225R7=\253\034v<{\231\222=\030-E\273\212A\264<\320\372\235\272\345\363\034\275\372\020K>\330\221\306\273\253r\r<\322\021b=\216\225\334=`M\270<\216Xy\274\tb\022\276m>\274:o\301\006\275\262\357\243\2748f\274\274x\261\340\275\307\263T\275r\002\252\275G#\246\276\201se\275Xm\310\275\260R\264=\217+\277\275E\225\017>\017\311\206\273@%\033>\227\004\020=Qd==\001\3072\275\000\177;=\231\352\243\273t\220\251=\362\tB>\014\345\265<\233 \231=[g\200\274\336g\236\275\'\266\343=W\240\350=\010e\027\276\033\257\253=-|\212\275\013\370\351\275\224cV=i\371\024\276\303Qr<\304\025\363<\337\354\301<\257\234\207=7\230N\276\016\315\370\274)C\205\275\375\320\202>\323\340\213;\235\367\024\275)\224*\276\371\036,=\350\343\313<\264\221\334<)~\214\2752A\216\275\003\351k\275a\3146\275\022&\230\275~\023\212=~L\217\275T\331\"\276\322\331\323\275n\205\231\275\367@\035=4\307\177\274\215\217\254\273\316\307&\275\022\026\246=\302\247\253\275-\177\031\276F\355\203\275\314~\320=\214\372\024=\331\261_\275\"}\324\274\275y\313\275\276A\274\2758?{\275J\337\231=\241\211D=X\206\322<k\035\361=\314\363\343<\374K\230\275:Y\374=\275\014\317\275\033\025!\276\352H/=J\240\233=\304~\266=y5\336\275ch\031\276s\227\035=\331y\360=*73>\207\247@:0\276\275=\033\326\375\275\336\211\032\275\3577H\275n\365\344=\367\330D\275oH\n<\027r\261\275 Gu\275\222\340\205;\247:k=#\332\215=\247}j\275S\250\372=\271\250\337\275*\261\020>fVR\274\332\224\276\274\267\353\244\275\205\307\033>\331\2163=\231@\230; .\253<\221\356B\274m\343\231;\345\251\002\276E\024(\276\032\344\240\275\037w\352\275J\300$=\330\203\240\274Z\242\225=\202Wj\274\226\360\302\275\343\244@\273\211c\271=\273\345%;\270U\025>\212\360\320=\356>!>\312$\n>\273vu\275\344\376\032>\241\350\206=\215t\201\275Vp\341\275^\216\007\275\3124Q\275\307\263\330=$\205&\276\310`\"\276\200mB\2753e\373<\352\245\t\275\210|2\276\327\r\001>\206A5=Q\264\272=\0042\345=\265C\232<\004\020r\275\327\0045\275X\022\020\2761\200\302\274\0144\223\273\317\037\025>i\034*\275G\255\337\273\235\217\301=$\275\315\275_\354=\272\013ni<\352V\014\276\254\215f>2\311\347\2758#\014\276\346\261\312\275d\344\213<e\n\312<\355e\337\275a$v\274(H\240\275\253T\010\275\322=\264\273\335K\235=\023\264\010>a\001\013\275f\311\301=\002\245v\274\027\362\270=\225\302\203<\226\234\027\275\304\224b\275\263\"\266=\007\375\337=\023-\261\273\242/\346<\213\202\331\275d`\n=\246\244t=\264\005$\276\236\251\360=\221o\027\275\307|\r>\231\347\2269\204g\002>\302\340\024<\035&9==\330E>\006m\034<\"\300\017\276)R\360\272\032\rz=\205\177\241;v]\023\276\301mP;\365@\367=ev\313\274\037\241\017\275\335K \275\225<\232\274\177\033\'\275\037\020E\275\212\334\023>\332/\241\275\014\036R\276XU\036<\307@\000>\271~T=\374w\200\274\232O\036>\317\204\320\273\275\350\366;\"\345\305=Q\331\324\274z\307\234=N0q=I\221\341=\337x\360\275\025i\207=\332\022\207\275\007\002\200=\026\'\333=\220\226\370\275\274\367\202>\n\204n=\262\036u=\026\333\241\275\261U\n\276\325u\271\275J\2200>@\254Z\273\014]\004=\t%\025>\000Z\205\273Snk\275\tj\302;\224U\204<jD\231=Y/\251\275\214J\360<\222\030@\275Z8<\276\341&\200\275~\245\257=\323l\251\275\242vK=y\365a=J{\373<D\252&\272\272\264\267\275\354\355\247=\273\344\237=U+\020\276\234;)<\271\366\230\275\314\323\214\275\267\234\237=\375sf=\032\302\342=k\226\202\274\022\263$>\021\267#=\370\"\031\275\267\007\230\275\373\363\336=}j%>m\336\345=\335p\362:C<a\276\322l\246=\340\344L>\017\255\350=A\234%\276) \001>udG;e\243\010>\225\310\237\275\305%c\275\303sT\276*<\246=\312\235\305</\'\236<\0270\215=\362\324Y\275G6\276\274\022t.\275\231-C\274\2449\333\275\273\366\177=\004G\212=1Zu\273X\211\235\275\314\032E=\023U\205\274\374\370\216\275g\372\213\275:\003\t\276(\267\254\275-\307\332=\010\322i9&\250o=X\213\320;\244\200\355=\267\375\177\276\321\357\004=>\227\272\275\357\332\225\275\212\235<\275\222R\036=\257V\240\274\n\226\213\275\204@\217\275\330;\350\275?%h=\036\264\237\274\245\357u=\370(<=:\375j\275\367Y\250<\277-\313\275\262\310\262\273\226\235\245\274\027\333\221\274S\262[\275\205\273\306=\372\324\232\275\\\332\013>,\204#\274\377\237\266\275o\223\237\273H\355\340=\346\024\r\276F\021\001=\213\274\212\275dr\247\272\270Z\222=\r&\216=\275dO=\376\366\232\275\353\324/\276\273\237.=\345\343V;\356\0166\276)\\\231=\201<r;\267\313\317\274\220L\275=\377&\214\275};*>\254\033\021>\350\301\307\275\'\366\241\274\020\303\362\274\262*\214=S8\324=c\223\265<\354v0>\214\363\013>\3708\356<]\261)\276\000\217\367\275\263p\231\275\312\251\000=\241\327\237=F[\372=\201\230\221=}z\r;\305{\361<\247l\177\275:]\246\274%\340\201\272\257\210`\275M\252\310\275p\330@>\354K\"\275\321\243\013>W#\302\275;Q3\275GK\305=\257\213A<\357~\250<\354\313\326=nk\t\276\346\221\257\274\262\345\267\275\366=U\275\004n\010\275\345  \276.\340F=\363\2228=\220n\024=Yw<\273\377r\367:A.\375\273\301q(\273\337\005\t\276\212\3158>\004\346\363=\244\377\306\275\305\330\033\276\350\352\022\275\016T\n=\357g!\275\312AY\275x\027\206\274\356\363\255; \252i=o\222t\275\3132\242=pN\363=\213\224\332<\322n\022>\365\220\345\275d\202\211\275m?\372;\007\3749\274w\001\251=\233\017`\275\356\252\227<\022\341\252\275l\235\307\275%\021\231=Exx\275\225\223\t>\254\367\363=.\001\226\275v\034o<\303\035\371\275\230\022\216\275\300m\371;5\332\227=:\232\017=\0136\310=3p\\\274q<\374\275\001\337\000>\200{\367;q\272\'\276\267p\027\276lb\351\275\360\227\035\276\000OH=\212V\026=IHP<J\2753\276J\372\372<\2079->\312\211*>\206\t\">\005\322\321\275}\234>\274\226\2627=\224\254\214\275\377\225r=AS\031>\240\rs\273\275\273\312\275fE^>\0329\353\274\276S\271\274\036\2202>\252\231[\275\315|\367\275\027<\216\275y(\226=\352\207\340\275\010\307\322\275`\261\203=s\010M\276\265b9>7\375`\275\260\263\322\271\266n\017>\230 \037\276S\315-\275\372%\202=\356*\223<\217\260,=\t{\227\275S\321\310=\013\305\257;\312\255X\276\276\315C=\310\031\001\274,$\340<\016\357\000\276\203\200\365\274_\275\274=7\000\247\274\243\372<\275\261\017\002\276+\365\374<\244Q\017>\200T\321\275\217\226\251\275\356\265*\276\212\027\356\274\223\200%\274\002\342\217< \256)<\366U\022>\265\335\343<\202N\257\274D3<\275[Q\223\275\022\210)=_\251\003;\t\224\t\276\300Q\300=P\213\264<\303\325G:TH\213\2742\204\311=+\344\264\274n>\276<y\001\342\274,}\033\275\347\373\232=v\322\017>K\201\260=\305F\233=@\364\244\274\335\332\271\275D\263\004>\021\205A\275\004\221\272<=*#<Y\001\321;\r\245Q=[O\221=\326\317\255\274\346 <\275\355\010\321\275\236\211\265=\327\036\232\275\204\315W\275\344^^=\276\302\233\275\372\023\342<\364?\376\275\317\231\202\275%\031t\275\211\212p<3\020\235=\310\234\022\276?j\320=\020Q\250\275\360\036\000\275\337\374\201=\366c\204\275\252\354\017>\375\332\016>\017\035\002=\007uf\276\301\252\230\273K\014z\275\336:\021>\346\312\253\275\t\375\270=\356W\"\276\322u\236\275O\212N\276_\260\016=\350\232+>\310]\377<\255l5\274\321\031\342<\010\016\202\275\214\333\014=R\272+>\320\205\325\274!O\016=H\232\356<`\240\'=Iv[\274c\234\032\276\034+\312\275Wz\204;\341\273\346\274*\315\354=\3126\234=1\nO\276\370\"\t\275\003\020\314<\005k\"\274(\262\020\276\032\347\227\275\277\032\234=[\275\332=\322q\005>\004\214\351\274C\253y\274.\337\203=\317\271\031=2\327\200=\000\007\301\275\247A3=\232}\340=XId\275\347>\237\27447\207=\032\354A\274\311\360\334\275]\320\000>\301]!>\222V\301\275\\\327\251\275w\214U=\254\026\242\275\240pn=\302\311\223\275\307\315\276<^\274Q=}\'\241=\342\375O<I*O\276\357\363\332=\376\206\333\273\206\237\022>\210f\220\274(\244\034\276\0243:>\217\342&=P \016=Dl\032>F\255\367\274\020\362\317=\233r\355\274\200\274T\275p-\341<\\\014C\275\314\266\000\275\235\000\007\276\010\300x=\317\323M=\325Ip=\262\332\232=k+w\275\342p\006>\317\035\177\275\275\274j\276\313(\030\275r\316\035\275{uR=S\213\255\275u5\336<\3362\034=?\030\243\275\343G\212<2\246\243\2750\341\261<\237\367\352\274\227\372\320\275\324(^\275z\376\367=\244 _\275zu3\276\217d\242\274\247\365\313=M\003\364=*\232Y\274=\244\364<h\305\356<\0202Z=\265\305\"<\231\265\000\274\1774\325<I\256\244>\257\231\301\274C\226\017=\277A\206\275\003y\362=\025@h<\271b\235;H j=zla=\354g <\\\304\232\275\356\002I<\217\224\265\275\327<,=+\317\032>\223M\204=\357\312\377\275\031\027:<\001\214\n=LFj\276\343(\221=q\273\254=\350\0313\2753\244G>\312F\233\275}-1=6n\212=\233\263l\275\337\"]\275\331~!<\342\024\202=\265\006K<\307v\215\274Q\316\237\275F|?=\020\217H=\220\014N=\307\311\370\275J\326#\274\r\023z=t\251\337\274O\346+=\320\177\020>OK\243\275\257\t\201=\366\354!=\343\344\'<\373\341\336<\273\207\224\273T\003`=8\356\222\275\377m\007\276h\263\023\276\377\343\206\275\304J\306\274\346\325\216\275?.\020\276\013\231\014\276\037n\237<\321>\311;\244Au=4\212\253\274n\322\317\274_\275\200\276v\231\362\273gi%>\221S\235\274\303\227\031=\304\266@=5)\224=\273\246*\276zK\311\273\316;(\2763-g=\275\246\267<&a\231\275f\227\364\2759\0079=\322\323\024\275\177\221\226<\331\005\362=r6\336=2\235\247=\304;)>\317\267$9P\254\340\275\364}\253\275io\003>%\227(\273:)\312\274h\002\237\274\301\206.=An\232\274\220\363\305\275f\347\207\275H\236;>\306p\236=\027\264\001=\205\313!\276\261=8>\252\271\346\273C\307\340\274\350HW<\007\204\017\274\273\033\355\274\310\242\362=\010\354\231<\n\177<\275Ii1\275R\355\225\275k\260%\276k\034\322\275W\241B\276\345\365\267=\311PD<\242\374\302\274\3105\357=}\306\357\274#j\003\276\010\370W\275\236a\246=\374\272n=\"r\352=\016\273\231\276f\233\335\274\004;>=\303\010\253<-\217\370\275\267o\234\274\010\372\025=*h!>\003\312F;fe\253=(\"\225\275\006A\\\275\023\010\236\275+\205\243=\323\366\211=\007\301\016=\235*[\2757\3550=I ->\343g:\275\017\312a\276\332\233\356\273\326\007\324=\213\2514=\033\300L\276\357\344\274\275\2679t\2755\367\211\276u\375\004=\037P\023>\002G\266\275\313\352\014<ej;\272\261kT>\274\036\000>\232\226F\274\022\317\266\274\024\013\306=\360Bb\273[\366\210\2742V+\274\253\367\235\275\233\020\020=T\214\021>-\360(>9$\346;\004-\337=>>\333\274\343\035D\276m\261\356=\357Y\002>g9\236\275\032<\302=\244\377-\275\257\017\243\274\272\343h=\315\037\260\274\356\241\023=F\"e\275\013\327l>\373\301\227\274\002\332\342<\021\337\203<2\032\000=\245\312\313<4\022\177\2754\350g\275\371\3469=\031\242\343\275\261\256\322=\203W\302\274\324c\026<\321\207\017\276\272\310Q\274\353\357\346\275\220\223\272\275\n;6\274K\213)\274\300\215\177\275a\262\374\274\036\271Z\273\322\376\020\275\274\n\025<#\355G\272s\022\t=\234q\007\276\350)\031>\367F\226\274\321\242\200\275\215\243\017\276\205\312\300\274\275xg\275J\337U\275\351\2121=\303\201\212=*_\037\274\241\216P>\350\034\001>\177\362\307=\326\001a<\357\343\035=\203z\211<\245=\250=\350\351J=\272pU\275\352\355\310\274`\006\342\275\014J\201\274\370\243\272:\021\312\364=\234\001\305\2747d\246\275\2773\236:\201\363f=\340\3309>0\250\007>\207u\033\276o\331\321\275\260\237\350=OE!;#>\306=T\273_=\032\020\010=Of8\275\370\204\367\275\250i\246\275,\242\240=\016\214\252=N\213\000>5\230\210=7 n\275\353?B\276\361\323\321<\265\342\225\275\334?\375=\244\177Q\276\247P\032=\275o\314<\327Q\'\275Z\274(=c\2361=3E\037\275\320\213\210\275@U\351\275\225z:;\337\216\314\275\337\021\006=h\217\021:\207\340\201=\245\326\376<\266\212\234<\262\226\247=\345\370\336\275N\207\204\274h\360\r\274\236\177\310\274\316:L>\246^F>\256;V\275\3077\201\275\021b\376={\221\000=\332C\323\2751\253\301<\201\251\307\275\036\307\004\275\256N5=\240a:>\0143\r=d\334\366\274q\360\231;j\347\202=y\247\'=\0164\215;\246\030\211=\330:^;\327\201\007=\341\034\t>P \236=\305#b<@M\324=)\030\230\275ju\214=)`\024\276\031>\014\276N%\336;\371^s\275*9\202<]\242\213\275+\021\245<t\266\205=\372?\r=\024\270\271<\352\250\344\274\336\'\025>\310\347\000>kz\360\274\275~\344=\"S\371\274}\035l\274\010{0\276\016\027$>\023xj\274\255l\034>\004\345\010>\341\367@=\000\023\013>\016\213\365<\325\031J=\035\013*\276\006\306{=R\034D\275\375\3164=\361my>:m\"\275=\253\006\275\235\256\311\275!\177\023\276\320X=\276\325\034\225\275\301xK\2758\224\003\276\377Q]=\304oQ>\2154\022=\023\030\026\2740Ag\274Uk\025\275<\310\020\2763\016\323\275\341\332U=x\373!\275Y*z\275\257\310@<\2776\374=\304*\220\2744\312\201\275\340h\307\274\301\0145\275\307\002\276\273\264wp\274\325\213\313=\013\267P\275\222\314\374<\236:T\274o\235(=\305S@=\316W\213\275\345\203V>\'x\223\274\345o\001\276\325\003`=\213Sx\276\313\274\267\274*\246\017\276%\252\001\276FD\234=\361D%\274\037\032\301=\ni\241\275L\325\034=\350-\207\275\n\236\224\2751\2715\275\337F\220\275R`\275=\311Q;=\247\024\225\274\014/\337\275U\367\231>\262\274\033\276\372\360%\2758P\250\275o\356m<P\246\343\275rB2\275\223`\022\275\t\351X<\323\r9=gk\337\273\033&\t=\334\237<\275\215\325\315<\270\230\031\276\331\332\322=\331\020\272\275\206\325\201\275~M\t=xC\212=\212\350\360:\230\361\217\275z\355\263\274\354\331\211=\000\275\007>8\255\023\276\372%\206=KI0\275L[\201<\367\214\217\275\213W\240<&\2679=-\216\026\275,\305\033=\273\322\031\276G\243\213<\323%\226\275ku.\275H\361!\276TL\031\276[\327\276\275\324\346\366;\220\340\223=\264\212\310\275|\307S<>\375=>\355B\232;BW\324:\266O\377\274\312#\226\275g\352\304\275\301n\000\275C\217T\275A\022\334<\233y-\276\033\213\206=Q\244\225\2736 \'<\220\306C=!\373\264\275E\014\t=\336\273\036>yD\020=\004\323\310\275\014\254@<E\177]\274\202\200\302\275\r\257\024\276\226}\370=\312s`\2756\321\265=\342\325\372=\345F\360\274\341_\364\275\026m}\276\3024\373\274\347s5\276\233\034\002\276lK\360\273\374\275&\276\363\004\353<P6\222=\245\322\017>\344b\240\275\3563\373\275\246U\273\275\35530\275|t\034\275\007\245\007\276kWh=\327T\000\276\254\375!\273H\347\215\273\267\337\220=\361\250\n\276\302\357\221\274\022\024\324;\207\n\027>\312H\200\275\247\024\005\276\225~q\275\235I\r>\324%\343\274\274U&\276\333H\303\275\240\217\002\275\231\262(\274\035\024\226\275N\210R=n6\375=\330H\224\275\264\310\307<l@Q=~\251\213<\257&3>9s\361=\232\2347\274\035s\255=\342\217f<`\373\345\273\341\346\334\274;\226J\273\204A\016:\220\312\306\274H[\211\275`\365\005\275\203\304I\276\201(\341=\232\376\247\274;\365\264<k=\361=\352w\320<\326\214\260<  ^<\263b%=\317\027\333=\335\330\341<\313\244\354\273\242\036\037\2767\307m\275\021\245,\273a\307\332=\312\240\206\275O\254\326=&p\016<#\371\243\274-\276\235=\017\265\347\2753\242\035>\216\261\267\2756\345\253<|\025y>\314B\224=r\3103=\373R_\275\276\t8\272^\372\316<kM\270<\322NM\2741B\033\276\214\004=<A\022\257=\262\n\234\274aA\r\275\327T\272=\350\304\005=\273\361\352\275B\276\201=\376R\030>\263S\t=\271\360C\273\240;\226<\272%\317\275\341:\275\272\\T1>\004\355\344=\237\220\352\275.4\346\274\n/\254\276=V\007=\220\305\301\274\344\264\260\275\260oH\275I\362\223\275\374\374d\275O\364J=Ssv>y\356\262\275\351\t\322\275\303\362\213\275Q\251\355=\323\364j\2761\037\343<h\004#\275S\207K\275\345\231B\275fE\222\275\211\257\020>\215\217\371=\345>\223=\330@\311\272\264X =&\267\271<\036\026B>t\214\330\274\274C\024\275\354\357\375<r\366I\275\307(,\275\336\326=\275\327\036*=(kU\275\320\346\377\274\260\216\2009x\201\264\275\355X\216=\360\215\330\275\252!\004>\232\250\221=\356\2400\276\005\240\200<+\243\266\275\213\017\322=\177\032\003\275b\217\006\275p\354\010\275\312\321\221;\264L\005=\351\227\264<\372n:=\307\225\230\275x\260\364\275\354\346\023\276\nJ\246\275%\247\333\273.\307s\274\361\033-\275\036\253\002>{1\215=F\371\255=A\244\246=\003e\220\273\321\023\225=\332\265\\\274\251\230\203\274\245Vh\274\235\275\030=\361$\251=\024\374\210\273\230\374Q\276K_\316\275\234\256\370\272q\"\360\275\214\345X\275\021\334Q\272\236\246\313\275\221;\035\276\213 Q>!\271\262\273\227\270o<9\224\341\275\001\202\342\273\207\3308>\031\365\033\275P|\r;\261h\333\275Q\335D=\003\242\010\276\273\r\351\275\316\356\247=\352\372\361\275\262\257\242\275\311\370\251<5\036\241\273G\343\'>&\344t=4\205\003\2769\330m\275\032\300\375\275\037\263O\275\265c\360\2753y;\276\257\351\017>?\332\305=\013\033\215\275\013\001\353\275>g\267\274\346\374\177\275\205\212\025\275M\217[;m|\005>\251l\034>\360\032\202\275N@\377<o\005\235\275A\\\373=w\243\352\275\350G\252<\231x\317\275pG9:\345V\255=i\245\220\275o\250+\276\211\321\204\274\314pa<K\370\215=\032^\276=\340\323\345;\377\235*\275U8\016<\364\206\345=_~b=\232l<\275\325\205\262\275\256.e=\364\363&\275[\307\n\276\271\302Y>\305:%\274hQ8:4\365;\275\374\363\002>k\370\207=DF\276;p\242\202=Y\221;\275\267p[\275\205\275&\276\362\245\336\275D&\004>K7\263\275\350\240I=Q \035=\2318\213\2757n`=\255\246\300=\307T\016>\363F\240\274\2240\256=\032i4=F\374\376\275o\314`\275\\N\216=\260\206\006=z\306q\275\177K\337\274*\322\264\275+iQ\275e\317p\2750\243/\276\013\300F=\335\272h>\352\272\211\275cZ\201\275o\010\004\274\326\223\017=\250\233\204=\000k\261=\371\034D=\002q\343=}\322A=\242P#>9\n\242\274\005\270\225=\324\275\264=Nt\002\276\027\264\277=\254\337#<YE\301=@x\200=\002\210=\275\247c\327\2758/7\275\312\350\\>\343\365\344=J\333\276\2758_\274\275\337q\341=8\362t\275|u\340\274{\r\037=\315\220v=\251)i=\222h6<\013\337Y=X\316\">\303\277%\275\036\314\272=\343\035\004\276\035\351=\275V =>\331sQ\275\367O\020=\024\377\324=273\276\307^\013=\355\360\021>\206\204\014\276m<\244<d\265\357\274w\377\003\276#6\037\275\234\334\026>7\372g=\300\355>\276b\250\374=\254\023\320=\216O_>\034<\274\275\273\234\225=[\237\241=\3371\271\275\225\2335\276\037.4=\334\240)=\274\252G\276E4G\276\365\032\210=\314\247\236\274pbQ\276/\241\367\273\206#\034\275v[\214\275;\300\207=\007~\354=e\360s\275_k!=\014?\\\274BK\225=\346R\360\274\356\221\n<}\247\353\274\013\237o\275j(i=\326\257\217\275\362\356\276\273 e\r>\252\210\010=kR\r\274\274\"\201\274a\353\260\275!\247Q\275\273\236\344\273\226F\243\274\316kO\275\005\352j\276\"4&>\275\031\202\274]Hs\275\346\316\020\2742YP=\265Lb\2752\r\200\275\362\357\307\275\200G\265<\313\254[=k\315C<TKH=\241\350\034\276]\027&\274\267\251\267=\004\325N\273\311`\310\274\305G\004=#\373\235\275Wc\204<\217I\256=\276\274p=\237\363x:^tR\275F9\263\275\214k.\275\362\321\316\275\333\030\314\274\345\352P=ID\225\275gp*=\032\177\032=`\300\177\276v\3232\276\205\335\306\275]B\325\273\005\304\025=\204\350\344\275\321\257\346\274V\\ \276\225\205-\275\257\314\250\275Y\334\331=\364\024\007\273\366q8<\211\265\320;\233\243\005\275\2660<\275\223\001S=>i\232\274\354\242V\276\337\227\277=q4\327\273\310\'\334\275X\'\206<\212\244\021\274\376\244\302\275\222\212\325\275\352\025A=S\222|\275\227a\224=\367M\215=\231|\341\274\315\274&;Ek\350=\361\315\247=\270\224\233\275\226\3664\274\001k\236=\2409[\275\335\3141=tC\007>D?%>\256lH=\344\212);\227\\\030>\374:\254=\252\036\274\274\362\177\263<\232=)>R\305E\274\200\300\354\275a/1=t\001\325=\005\234\037\274u\211\000\273^x\230\275\230e\033=\247\313R\276F\276\366\274\336E\300\275\002\037=\274\026?\255\274\361\333\002=n:\272>\2375\373\275g\247H\274\024\303\004<\356L\335\274*\rv\275x\2554=\252\306\222\275\215vs\275Z\242\235\275\246jJ\276\204\222R=\221S\321\275\251\364F:vo\253=N\324\336;S\272\005>\377\275B=#\203\034>\217[\016\276\304\341\t\276\001\200\020\276\200\371\375\275\'\275\003>ic\346=\314\306\214<I\014&\276\331;d=j\233\013\276\032xt=C\036)=\371\236f=\211\2302<>\273=\275:\370h\275\262\324-=F\0050<$\010\200\275\377\200y\275\030\365\273\274t\\\205\275\352\026M\275u(\004<a\243\027<\220\331\376\274\221\"\256=\334=\326\275F\320\240\275X`\350\273\366\223\256=\177\021o=\365\031\215<\rcs=v\2032=\2113\364\273\340\004;\275\010\204\252\274\nc\352=K\3538\274\327d\023>]\2242\274\367\262\251\274\336\360@=\334\232\301\275\013k\263\275J|\252=@\303\302=\010\224T\275\333\007\032\275\205N!=\262\356\370\275\233_\n=I\262\274=>\371\217\275\354/u=\357\351\024\276n)*=\342\373\326={$\024\276\033\204\361\275\210\022\n;\272\234m=\355\256\263\274d\313>\276w\254\266\275\352\325\020\2744\243G=6\343\310\275\361`\t=\367\036\016\276\010\010\231=\301G\034>!\233\034=l=*=\366\312\247=\255\354\213\275\323\346\277=\205MQ>8\254N\275\007\357F\275\265\345p\275\t\352\323:\177\373r<\277\264\212<\316d\025>\345\214\367\275\334\226C<\245`\235=Np\026\275\026\222\336=\252\027_\275B\361@<]\366\022>kb\003=\267\266\362=\300;\246\275\367\304\205=\273\r\247\275\205\334\216<\245X\334\275\221\0019=\010\260C<\226\225J\275I\210\254\275\261\272=>\340\266\223\275\036 \241\275\367\352\302=@\020\314=e\235\322=\007\351><\014\210 >|`\331<\372\372)\275T\262\013=C\263\244\275\201z\315\274E\270\020=\365\312E\275m\213\177\276\t\000\360<H\357\213\275\017\254\020>\t\n\003>6\016-\275\253\016\266<+\3516\275\340\231\233=\327\027\203=\n\353\203=\335e\016>\r\030}\273\306YJ>\361\356\327=\346=\t\276\271m)\275\200\366\202\275\225\354\272=\342O\355\275\275\362M\275\277P\215;\254l\223=\032\351\306\274)tZ\275\333\244\010\275p{`\276\025\326L>:\312h\275\235\345\304\273z`\243\275\001>\241=\337u\226=\306K+\2763\177S=\342\207S=\326g\014>\337c\307\274\313v\037\274:q\034\275\324\211\300=\362\257:=\031\370z:Cq\223=\033\262\353\274l\367\021=&\212\360\275g\357\261=R\272-\274\206V\030\274\0179$\274\271\265\026\273l\331\343=\274\253\325\275G\333/\275\032\211\333=\337 \347\275M\250w\275\241.\005<8\371\350=V\262d=\367\036\231\275>X\345\273e\305\215\275\337\371\370\273}$\232\275\373\214+=\361\205\020>\007\036\206=\2721\021>\311\215\250\275\354\267\212\275\034V\213\275g6\020\276\211:\242\274\213\2202\274\361\225\242\273\017K}=?d\250\275(\353\267=\347\266\274;\376\036\352=\316\333^\275\366\350\267=\210{\255\275\350\203`>\365\200\271\275\031\3434>\354\223\375\274\363\367(>\325\373\250=\310\234\276<\367\2073\275\2002\247\275\313\353\177\275^\031\225\275\342\271\t>\340\2254\275(\204\t\276g\242\003\275N\363>=WI\337\274\251\222\250\275\010\370\344\275m,~\276\315Y\007\275L\341t\275\314p\006=\202Lt=\313=)\275]\252\006<n\2612\275\351\235\276=c\250\023=V\327\250=\014\204\332<y\317\305=j7I=6\003\262\274=\035\016\276G2\005>\312\331;=m\340\023=.\nQ=\363\211\256\275 \221\035\276r\262%\276=\212\307=PIl=u\231!\276\006\364\244\275jn\313=\262\256\225\2755\000\342=\356\326\211\275\326m\200\276\345\324O\272\274\206P=\3029w\275x\372\006>:\275y=h\222\256\274\311\275\377=\335\206\252\275\316\204\025=\221\314\206=BP\264=\345B\232=\2247\305<\336sx>\333\311\222\275^\366\027\276\255t\005=\022\300\275=\305\344\274="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8121158
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\013\034\217=\223PQ=2\274\032\2755\302\244\274\322d\246;\263\330\014\275o\243\237\272\316\202\256=,\343_\273hV\331=\352p\206\275\016\257\271=\254\315\365\275DW\013=\313\261\320\275\302\201c\276\200\207\212<\017\343L=\322\341\260;\334u\331<\303\256\213<\251\275\200\275S\036\003\276$\233\307\275\347<\344<\tz\001=Z\351\247=0\340\013>\335I\233=\333\ru\275\261\016\250\274\030\274\257<Y\372h\272(`\253=/B\237=\210jF=\372\316\214\275\261B\362\274\264(7\274*n\236\274?a\007=\035\262m\276\027\3610\275M;m\275\335\'\375<9\231\272=}\020H\273\230\020S=\365\233\207\275\t\004\243\275\351>\r\276PO\237;\212\254\237\274\226\301\037\275\204\334\232>\251\337\304\275\373\251\254=\037F\362=l\326 =?k\021\2755.\227\274\027\\\355<\327\311\201\275\2777\301\275eC-\276O\341\037>&K\246\274\033V\025\275r\371\305\273g;\250=\327\357\336=\226\032\323\274\330\324\031=D\014\311<\344\177\006>\302\230,\274L\242\305=\304r\t\275 \275\251\274\325\036\021>fs\255\275\256\246\016\276\253\016+\276__E=S8\227=\342\215W\276\343p\350;\013\374\274\275\313\330\004\275\273\0102=\311d\r\276rke=\325\3457>\312.\212\275\000\001\031=u0\202\275\213\356\335=\346\240 \274\333\237\254\275\034!\352\275v\032\214=9\256\002\276J\232->\036\237t=M+y\275\351\243\315<\236\030\303=YY\307\275\000\263\037=\010\320\241\275Wb\017=\016c9>kR2=\312\007X\276\361\341\326\275\312p\210\2720*\003\276\222\035.\275\220\347\223\274\r!\375=\030y\003>\027\351\250=\252\306\337=\340H\315=\221\345\225=\206\t\275=\036\275\377\274Npu\2751/\251=\r\214\007>a\311Y=\256\350\212=74\321=\000\237\224\275\235Xi<9\243\213\275\267\001\226;{P\246=\223Sh\275nWk=2\244\021=\335\2616\275\334\360\322=Pwu=2\343\273<\237J\026=\363\005Y\274\3408\224=\202p\300<\216h\"\274\035\325:<\346\034\257\273\202\010\327\275=\212\214\275\204\337\265\275\2122\031\275\371\315\307=\262%7=\332\322$>FD \276\210\255\025\276\205c-\276\337\266\013=\"^\257<\322\300\033>\300-\326\275\231M\364<\242W\222:\002f\255\274zO\031>\213?\006\273F\312\032\276)Y\314\2755\331\222\275\321\006\201<\201\360T\275C\273\234=Eh\n\275\344\3624\275\351\364(\275\034;\274\272\211\\N=\020\265;\276\212&i=\363w\007=\304\372\334\275s\265\211\273\017\327V=\240\003\357\275\032\306P>\274?J\275\004\366\320=\250r\302=7\274S>\214\030b\275\2706A>\260\023\271<FO\036=aR\321\275_Nu=?5\001=\313\310l\276\216\324\226\274\341\3212=\014\354\235\275$\001M>ZO\247\275/a\345=CZy\275\251Am=\247\270c=\277\256W>\374\217Q\274\212\242\231;\001\345\032<\234W\256\275\001\230\233\275\323\263\035\275lX1=\217<\010\276\342Tp=&\t\373\2733#4\2762?\\=\331\023\036\274cZ+<@R\026>2*]=\2245\326=(\331\364;E\333C=\246<`=\021\037\244=\002\242$>.\025\263=\367C\205=\301\331\036\276\365\263E\275\361\301:\275\216\027\241\275\233B\346\272\254\360\217=\005l\334\275\021P\235:^\2231=:j\003>\217\\\357<\257\006\277\273\366\240\004=N\022\250;\336\265\021\276<c\r=-pe<\207X\222\2756H\232<\266,\341\275\362\263\310\274\207\340\375<\234\213B\274\034\025\300\275\224%$>\032{\206\276\236\232\022\276\345-\"\276\346\237\343\275\315\325\035\275\033\274\205=;\253\010\276\361\214\226\273\026\3767=q\376F=5\305\225=/\200\234=\213D\216=\347\344\242\275\270<z\274/\nQ<\236\376\030\275A*b<l\345F=\256 \201=\376u\231=)\370\361\275\256\243\373\275yl\307\275\213\002\210>0\305\325=[\346\346=5\336\301<\026\211^\272\223\345\235\275\327F\251\274t\205/=\242N\037\276\334\366\035\275\032\255\346\274#\355\025\276\037\004\234\275\275\344%<Q\246$\276p\177\034\2745\237\035<\355\311\240=\005j\374=\031y\225\274\212\225\202\274\266g)\276\364\3208\274\257z\233\274\022\367\233=\2133\031\2763\355V=x\350g\274V%\001>\362\306\255\272\240\230}=\310\201\022\275`G\026\2750\001\317=#1\r\274\206.\034>1\215\231=\237|\226=\201>\335=:9\'\275\325}\325\274\216)\007>(\025|\273Z\265M<\340nx\275\177zY>\255;1\275F\315e\275\315\024L\272\004\231\253\273\005\005\n=\037l\225\275\025*\250=\017(\274\275{\035\274\275\307\236\266=%4\214\2758~\266=\214\020\r>w\226\257\275\324U\201\275\222\343\300\274\254NL\276\312\330\002>\316\254\002\276\014\265I=\177q \276QH\230<\177\346\035>\343\216\030>E\317\277\274p\356\240\275\346\005\246\275\305\234\031=\324o\235;W&6<\036\203x\274\300\205\027>a\365\004\275L\222.\275\\o\030\275I\321\277\275\224!\372=\t\010]=\355\023\022=\r4\235=\217V_=\370\206\006=w\370#\275F\216[>\010\353\002\276\203\242\207=|\010@\275\306\307\206\276\207\374\216=\353\215\273\274\220\263\266:k\231.\275A\250\003\275I$\245=\346T9\274/-\023>\003\367\204<\242d\335\275\211;\026\274\247\014\243\275*q\231=^z\r=S\350\027\2752=\345\274w\337.\276\200\364\233=\026\344\r>t\263\177<p\374N>0\\X=\372\327<<\031\236%\276|\003\202\2752\347\216\275\260\030\340<\257v==j\023\"\276\371\346\331=\376\260!\275\032\233\266=\3121\213=;j\244\274A\337o\274\022x\357\275\010\025\264=\023\235\236\275J\200!>/Z\207=\006\"\326\2731\303%\2764\254 <\260\205\303\274\n\240\003\274{tI=\373\362\311\275\237\213\245=cn\360\275\347t4\275\313LY=\213K\347<\031\224;\275\315\373\014>\236\033A\276\3501w=\323D\014\2768\024S=\221V\270\275\344\366\001\276\261\352\265\275Z;\007\276\030\372\311\275\363\001H\275\216\353\024>\364\302\027\2764\311\020>\362E%\276\'a\241\274\320\231\317\2759\030X=x\006\006>[\\\357\2754\ns=\306\022\226\275\244\335\311<\250\331e\274\215Xf\275\227\342\242=\353U&<#\217\007=\361E\250\274\243)\342\275o\262\212=\257\211;\273e\325\264\275\362\346\233=\300zZ=Yd\256:\271\215\356<M\362\217=\353\037\274;\275\325\200\275\377\214\214\275\315f\033;\250\341\377<\206L\323<\026\262\203\274-\234\036\276\357\250\244\275\242\332\\>;\215\010>$x\347\275[\024\251=O\220\241\274a\355\344=\306\360V=\304\030/\276\234A\276;\363\325\252=\214\2111<S$;<R\342D=\237\351\326<\033)\252\275Z\021\227<\316\265M\274\253H\016\276\016Y\234=\376\300\025\275\247j \275u2\024>5\321\247=k\020q\275\201\177\216\275\024\363\004\275x\341\217\275\250\022\353;\311q\217<\010K\003\273\347\342\033\274\304\232V<\255nc\275G4\035\275\227\3706\274\225\032\010\275\2431\016\275O\224\266=\355\347\216=\225#\200\275\376\353J\276\n\322&\275\243\013 \274o\355\266\273\001\232\213;\234\3668\276\316Z\212\274\033\232\303\273X\354\211\275\237\207\000=\035\'\323\275j\301\250\275iP\220<\332\373\014\275v\266\202>\344\211\336\273\321\324A\273\244\272\021=\005\350\241\275\341@\\<qt.\276\272\236\373:+\204K=\204\253\331\275Y\313q\276\023J\247=\303u<=;\212\272\275C\334/=\251\n\304\275`\213\006\274\037\250[<\341\314\331\275\234\353\340=\t\217\220\275\211\277\350\275\257\026\241<\200O\367\273\201(R<\321\032\236=J\245\331\275\030\373\020>\205a\202<7\366\022;\'\216\007\276\375\202\357=\202^\221\273i\237\237=\263\\\207<\250\027\304=\221D9>[\031\311=\324\362\332<EG:\274\334\244i\276\016\265F<\223\330\300\273Z\335\'=\326\004Y>=\363Y>\217\033)>\323\'\344=\255y\272<WQM=\305\306\270\274\306\377?>T3\320=1E\344=\316<]\276\373{j\275]6~\274\275\016\001\276(\010\312\274o\010G=\202\212\206\274\307G\306\275`\1776\274\355\031\332\274)\331\\\274\336\004\352=v\346%<x\024\334\274\031\352\014\267$\275\024\275 \256\353\274\253A\302\274U\232\374\275\003b\234<\246\237\000\276H\236\252=\322\253r;t\314\367<\001\255g\274\3717[<\037S{\275\324L0\276#\336\235\273\037\321\274\273\r\206\376=\273O2<\262\003Y=m?\345\275\310c\214=\243}X\275E\263\215\275\370c#\275\323\023\246<s\324W\2754\232\362=\320\325\245=O\333J\276G\317\005>/L\027>\240.\035>Y\271\251\275\235\021X=`2`\275n\036\213=\256\203\255=l\240\264<q\322\025\273\322\004\233=n\245\266=\034\t\213\275\261\000\006>\363\031\231=\203\275\036\276\240\020\001>m\357\203=0`\021\274\250\310\363<\271\254\342\273|*\221=\314T/=\376\262\353\274\211\372?=8<~\275)\376\026<\014\276\374\274Y\203\n>p]!\274\320T\225\274\311\343V>\312\r_\275oH\001\275\233\320\346\273\240S\r\276)y\315\275\330\377\325=\232M\240=\214&\243\275V\346\220=\001|\250\275\027\311!\275\230V\222\275\001\242\355\274B3X:\2409\202\275{IC\274M\344\354=r\022\026=\007\257\267\274\225\360\347\275\234\362\022\276\3644V=%\374\270\275/Y\220=N^\256\2743Z\242\274\376\370\330==\230\007\276\256\257\234=\225\347z=\363\343\275\274~\237\020\276\332GZ=\307\215-\276\345;q\274Fj\\<u\306\355\275\301q\306<U\226D=\253T\"\276\3728\351\273\314\014I\276Pt\244=\314_\024\276(\030\371\275L\211\206\275\364P\225\275\200\221\227\275\237\231\214<\367\214\237\276\232\332)\276\0076\231\275\260\3178=\001\211\226=h@*\276\272\322\312=\037!\311\275\202Y\237\275uk(<q/6\276Pe\316=|\357\276\2759\265\244=\004\272\275\275\261\341&=P\324~\274Wg\372<\276\327\303\274Rj\216=N\227\004>\357<B>\024\357\276={F\004=\215\003\027;z\351\232=OA6=V\345\177=\361\203e\275_\036\306=9\354\013\274\373W\"\271\351\222L\276Z\303\337=\266\310\007=_\223&\2763\332\016=\266\2738>!\336\235\274\311%\322=\363N\315\2755\250\256\274\366\230Z=;Q\262=\311\322\342;f\344\365;\022\350\237=`i\227\276++\031\275\214\273\224=R{\330=G\375J\276\334\270\272<\2653\204=t\313\351\274\327!\0208}\361\247\271^\346;>G\tE\275\035X\230=Ss\000>\036\205R\274\274\177I\276\244\305+=Z\032\260=\2752%\276\235\253\206<\274\303\326\274\240\024S\275\013\343\226<\250\353\177\275Yu$=\271\315\007\274\\c\006\275|\017\220<\303O\317\274\022\335\304=\353\234\301\275\365\246\252<V\335\366\273\372\364\017>F\261\274=R\356\231=R\307F<+\336\234\274\206\r\023>IH\240=\310\320\025>\016\334\232\273\252\270|\274\300!\033\274\344\\Z\275l\337\212=P,\016\276\261I\310\275\214\256\n\275\372\372><H\277\303\274K\357D\273\'\312h=\212k\003>\300\251s=\345_\014>\336\035\210=]\317\375\274\335\264/<\002C\201\275\354\355Y=#\341.=\207\326Q\275\013\372\225\274\333\260\344\275\301\\@=\355\346\021>\311\027\374<\256-(>\214l==\357\255\265\275\3527\261\274/\276\314=^w\017>J\202\350\275\235\254\276=\205\233\236<\237*\264\275\352\360\213=u\361S>\317@\237=\210\237\316=\177\215\365\275+3\t\276\204\363U=\204\260~\275F\021\303:\032\033D=\237\325\262\275a\316\255=\320\254\237\275\365\353T<\244\267s;?\013\246\275d\330\030\275)\"~=\342?\310<\365\033\226=)n\223\275\262\324 ;\364\"Y\275\323\227l<\265K\306\275w\242\306=)-h\274d\0350\2764\222\223\275GE\346\275\200\313o=x\245\267\273\"\201\362\2752\363A\275\364}\013\276r\013\336<\214 \215=`]\026>\376\275\002>\203\316\017\274N=\177>\345X\331<\352s\226\274\301h\211\275;\341\317;\346\337?\274\377\221\335=\226\337\276\275\032\312\223=-c\021\275\211\335\333\275\261\244X\275\006\005/=g\215\232\275\366\n\351=Z\244\003>D\300\023\275,\214\233\275\005y\312=\021\236\333<\335\332R<%9v=uB\203=\364\007\021>\020\233@\275\331z\000\275\032\374\357\275F\177\361=\241\316\005=\031\005\210\275O\n\234=\272\005\007=\302\237\274\274mV\247\274p\275+=\353\202%=Kg\251<\267::=b:\217\276\342>\240=p\274\004\275\'\231:\271N\304a\275T*\226\276}I*>\2140\017\274\324V\371\275\310\221\021\276\220\255\333\272px\301\275\361\024\240\273}\2418=\332\013d;pP\216=\272p\265\2750/\306=J\215\216\274/\032\003=\267ks<\316\340h=\021h\002>O\200\365<\365?q\276\363=J\276\"\000\365=\302m\271\275\255[3\274\345Sd>y\351,\275\272\323\253<s#\367\275\005\300\211\272\002\322\211=2\205\360\275\007\034_=\303\003\244\275d\217\235\274\343\221\253=\236N\256\275p\341\311\274\367\207\222\273S\025N=\355\351\3509\360\000\333\274\210\006\243=\332zU=\225\357!=\240L*\276Q\257\037=\322\247v\274CW\314\275\210\315M\274\311\221-\276\033\325*>&\352\213=*\001\'\276\014\330+\276\312\265\034\275\313\257>\275\007\030\221\275\313JF=|\372\013\276\333\017$\275v\232B=\357o\334=\177)\306=\343\025|\275\032\316\211<\366W \276\030\346\r=6\271\371=\350\240\260\273 \273e<%3y\275\016j\270;\305?\314=\352\344?<k\216\227=*@v=\324\343\023\275\233h%=>\273\315\273\025\032\002\2760\3544\276\ndC\276\351\033\362\274\371\277\264\275^M\244<\027\325\255\275\270$\246\275~B5\276\261\006\014\274\027\360\"\275\3158\273\275\256=j=\233\r\205\275<\345a\276\0055@\275\321\333\233<\214\024%>r\2167\274\376\311I=%\314S\275\004\272\303=Y\277K:\265\246\357\274\221\246K<\007\233\363<\007\376\312\275q\"\027\276\nF\257\274\213]\240=u3\006=!\260\323=\374Ns=\"\320\270=\017\0351\276Y\325\005\276\272\r\322\275\007\316\246\274\343bA\274\317\367[\275\266\344.>\273w\031>\364\033C\274\362\034\007>\210\036\213\275\277\260v=\376\033\301=\327\300\231\274\321{\313=\032\324\233\274\364\214\226\274\362u\254\275(G\021>\246\n\362\272\346\022\241\275\250\020T=\330t\274<\261\373\221\275!\2351\276!-\221\275\334\277\032\275z\0045\275$>B\276\302\341\022;6\277\031;r\322\026\276\306T\216\275.\227\247=\236\021\003>\357\323\037\275\277\002\360\275\004s\375\274\010xf\275f\276\'=c[\217;\251[\346=FL\026=5s\342\275\305\331\341\274k\227\027\276M1\336\274\215\360m\275\323\303\337=FP!\275kf\"\275\277\233\262=6\264\037\276\312\230\371\275\261\211\235<|\233(>\372\362\031\276\2460\376=\254\251\245<\357Ll=\327Q\002\275R\204\024>T\017b=_\266\236;V\366\201\275\321\024\345<Uy\360\275:\353\217=D\334B\274\272L%\276\260\222\210=\023%\301\275b\252y>R39\275\346\2735\276\312\331\307\273\364\265\211\274\326\222\202\275v\316\235=\356+\034>-\375\023\275\217H\203\275\035Z8\274\252\333?\276}\363\220\274\035oK=\240j\355\275\345i\276\275\334\036\326=\353\004\007>\273w\363=\260\263\006>k\0324\274y\213\212<\215$3\276\212u(\276\377X\322\275\327\234Y\274~\003\221=\347\262\241\275\315\310m\275\037^\201\275\004$\241;\333@\005\276\031w\307=:U\236\275\0015u\275Y\363g\275\0257\250\2753\206\016>\211\203o\274\002\213\262=P\341\247\274\033\213\014=Z\036\002=\355\326D=\"G\233<j\230\355=\007\366\024\275\375\312\235\275\204\211\024\276wQ\351\274H6\216=7\271\017=\333\377\037\275\366:\213\275`^\325\274\017\253;>M\270Q>!\313\316=0\212I=\315V\263\274\020&\357\275!\202\247\275R\227\242=QB\273=\257R\231<F*\002>\212\344\020\276\0022\227;ro\005\276\273\306R\275\270h\321<0\035\315\274m\335\306\275e\273I<e\277\230=5\024 \275\"\020\257<\006\372\344\275\026\253\273\274J(\323=\371\346\200<\316\253\221\275\340\234\306\272.\017U=z\006\214<\035\375\360<\331\276L\275\\Z\000\276\231(\031<n\335\313\275\237\260*=<.\334\275sd\351=\270\346\202\275\321\177\231=h\035\344=B\330\300\275D\216\320\275\223v~\275A\024~<\033\234\020\276\316(\215= 4\212=\304\024\245\275K\026\001>\257@\253\275\326\202X=}U*>6\265\236=\202b\332\275W\271J\275\001\256\031=\376\342\207=Y\346\246\275\315\351\237\270@g\304=\001)\364=6w\363\275\353\375^\275Cs\350=\265\276\273\274I\315\016\275\035\322\027>\371\237\244=d\327\241=.r\177\274\362\313\260\275\013\023\322\275\252\203\235\271\235S\311=\305\326Z=l\356\005<\306\035\257\275\213\226\'=\311\375\032\276\263We<\244\223\320=i\321\031\275S\2179=4\356\t>]\006\006\275l;\275=\240\250\362\274WNm\274\3205\035>\252\275%\275\014\005\275=\006a`\276\260\335\334\275\234\262\310=_\214\317=,p\261<\264\351\337\275\256\231\302=z!Y=,)\033\275\256\246\323;$%\216<q\024\236=\034:q=\331b2>ND\241=\316j\351=}\025\247<\270\340\265=\312A\365\274\330\016m\275P\277\270=@\177\235\275\230\021J\275G\305T\275&\241L\275\323\360&\275\223\224\034\276\322\343\001\275O9n=\340\276a\275\024\005\017=\257}\346\275\326\334\253\275EA\261=^\267\255:\335\271r\275R\211\215=E3\030\275T\204|=k\337\227\273\350\'\036\275\322\2645\276\237\370\273=!O\316<\020\365\020\276X\024\367\274\325\002F>BX\000\276\366\2550\275\352\370\200=\217c\274\275\221B\014\275\262v!=\314\355}>\265e\026\2750(6>\252\247\314=6\231\006>\362\235<<[I\030=4&\204\275\2524\303=DH\342\275\366\377\232\273!1\025=Y\305\273\274\000\010l\275\250\000\367\275\267]h\276\355,\260<\332\317\240\275/\370R\272\270w\223\275,\203\254=\026*\230\274\316\020\340<K\352\251\275QS\314<t\003\016>%\212\277=_\245\341\274\030\332\006\275d\022\330<\243Z\226=\230\000\376;T\256\206\273\266m\335\275\271\366\034\275\327\317m>(vb\275\0144E\274\247<\030=\336\"_>s\203?\275V\n\207\275\202\313.\276\243s\341\274q\377\242\275\331\307\342=\240^1\274t\3656\275\375\032\243=5\322=<\236P\335=^\022\245=\226\220\360\275\234QL>j\212@\276oi\233\274\236\260\r>\323C\346=\373\203\354=\353\024\240\2757\263\313\27578\013=\266\360\372=\251\234\024=\304\364\310\275\"\177\273<\340\317\262\275\374O\301=5h}\275\216\023\352\275\226o\206=J\244\315\2752\367\016\276\202\244c\275\372Q\232\275\267fO\275\326\334\033=\230Q2<\327\004g\276\370\317\231\274\277\322\004\276\027\365\332\275\276\n\252\275[\2638=\023)\260=,\214~=\240\003\360=nK\032=\327\253G\276\032,\273<Zl\227=\026\251\271\275\016\037\257\275\035\032\234\275/\246\n\275\262;\375\275U\221%=\205\030\247\275\323\001\032>\226Yq:\252\323\022<U\211\014>\t\275\202<\036\321\361\275S1c=\034\005!=+^{<P\3708=\324a\027>\373\350\030=\315J\325\275f\314\222<L\310\200<v\203\301=T7\027\276\r2\221=$n\246\274\334\036\310=\312\027s\275q[&=\006\036/=\001\206$>\334 h=\250\310\214<?\021\257=\267\321\036\276\360Fk\275\302G\325<\346x\360=\276\317\261\275\261\335\320=t3\020>%\027\324\274Sq\214;\240\337\335\274\365>\214=\274\3571\275\305\005\000;r\214\217=\2518\360=\2667\">\371@\013\276>\210\032\276\235\004\314\275\355\223d\275\231\331\373\272\227E@<\032|\241\275\206\263!>A\273I\274\025\204\232=\210<i=K\357\001\276f\325\267\275(\001\250\275[\350\274\275\340\205\273\274\r\275F\275-\306\n\276\233\202\371=\236\267\326\274S\021\010=\372O\210\275~#\201\275\2449\210=B\3500=O_)=\330@ \275\205\212h>9#\334\274w\350\2257\034\316\253<\320\355\313=\246\227X=\310\216\014\274C\023\216\275\224\350\031\275d1\277<\035#\346\275\357D\014\276\3729\312=YC\224:\367\353Y;\\gK>1\312\310\271{\205\315=\211\265\270=\272\210\352=\335\277\326\273\350\203\334=;\235\343\274\226\337\007=k\334\231=\025V\037=\232\253K<\333\010\310<d\\@\274qD\227=h\027*\275uS\370=8\324\\<\017*\336=\271\200\223\275\027\306\213\275\211\240\213>\353\253\374\274>\267D=u\344#\276Sc\007>\343f\t>6\210(\275\022\352w\276Q\324K={\031\037\275\210A\320=\305%\204>\247\321\006\2754\371\313\274\212Xx\274\310@\302\274\313\016/\275\017\252\271\275y`\316=r\007\241=\263J\360\274~\371I=\337X\243\275\375\260C=\362k\001\275\336m\307\275rV\220=\331\206\200\274\313\261\220=\320\177{\274\356b\272\275\037\t\361\274\032\030\335=\370o+<\370+\023=\203\365[=_o~\275\333r\270=M\3615>`\370\026>\271\201\211=\321\334\267=\332\277\262\275\355X]\275\236!l=:\360\225=D\010\363<\037,$=\202\275=>n\304\341\275\352\0137\274X\3078\275\200\236\264\275\227\265\273\275A0t\274\317\rF\276\013G\304\275\225\0343\276\024~\233=\004\326\006\275|0\303<\355g\010;\315\256\216\275{j \275\235\2549\276\217Z#\276\035\236\235=\361\'\244\275\030#{>\216\226\243=i\032a=\315\322>=j\321\204=e*y=\215\337k\275\231\273\304<A\311/\275\316\337\276\275\n\3403\276\002\273c\275\250\243\365<\317sE<5r\261=~\351\246\275\2579\004>\335\361\000=\336\305Z\276U5\313=Z\344\223=4\342t<\365\264\025>]\346\323\273\263\014\370\275<\334\323\273\374]\307=\330I&>zk\007\275\020\357\356\274+K\025\274PMl\275H\314s=*b\001\274\001\356\036\275*\023\\>\007\323m=U\262\233;\220\366f=\222|W\275\'\\2>\310\n`<\236\036\005>\216\034\n\276\341d\332=\222\334x=\202\214\357<bQ\004>\352\234\261<\212\303g\275\0200\245=\240\2424\275\357\273,\275a_\247\275\306\342\305\275\265\377\\\273\010d|\275)\302p=\223\361N\274\324C\253<v\177i=\316\225\022\276>\220\226\275\025m\201;\030\332\371\274\311\314\032;\315s\336\275\372\230\252=\317 \\\274\t+\255;\242\241-=\020r\237<\250d\341\275\267(\250=\324\356\222=\326\345\000<S\025\343\275\311\374p\275\207\367[\274!\301\014\276~)!=\253D\030<\002\317\'=\034g\213=BwL\275\251\315\250=\262K\241=\020\023\004>\007\325\321\274}<K>Swn<s\354\334=\215\212\256\275\367n\215\275\023IU>\340\n\223\272\226\324\022>,\033\211\274\303\270\255=#.\375\274\352\263*=\033w,\275v\034@>5\"\000=\022\007\243\275\346H\\=i\323\007>mXC\275\034\264\371\275\252\'\230<JRF\273:\243q\275\372\350\200=OAf<\330]+\276\030\324\'\275\205\256C\275\301H\002>\304\'2\276\352K\333=V\340\364=\302\034\220<\275\362D>\037\010\315\275O\312*\274\203\321\336\275m\202&=jK\003=\312\212\225=\t\256\244\275,Nq\275\361\275\366\270SS\262:\206\004\026\276\"\254\232\274\017\025C\274<\035\202=Y\3044\276\3206S<Y?g\275\004\231P<\352-\212;\242\216\302\275r!0\275\232\374#\276h.]=#\330W>~/\330\275\246m\332\273\205!\336<\211H\030\273\3725+>\222\023\027\274\363\234\312\275\'\277t>\251\247\205\275Qs!\276o\261\016\274\255\247\256\275\021r\253=\333\021r\276\273\315*\275%\325\r>\321\324\202\275:\024O<\245\345\311\275)\225\241\275\312\202\305\273\312(\177\274\320\241\250=\1778\361\275\323w\256\274\364\\\205:\212\323\206\275\264d\026>\255I\311\275^a\362<\304Q\247\275\020\356\250=\263\343\177=\244\246\025>F11\274\354\020\343\275\217\265\217\275\300\002\230\275\375rw<\321I[\275R\340X=_}\253\275\277D\231=\265x\252<\271\346\022>\274\335\037\276\320\212N=j\353\236\275M\315T=\364XQ\275\314\304{\275\256\0020\276.`;=\266\'E\274m\322\021<h\371\037=V\221\323=y\"\000>\tk{\274\025\346E=Rm{\275\220\n\020\276\313q\232\275\375\013\337=\320L!\275\371\323\254\274\323\324\'\276\230V\264\274\031\332\345;\207\244\327=?]\314<&O\230\274\2422\306\2756|\301\275[Q\202\275\344\235\031\275\002\206\223=%\345l\275\r\232M\275h\327\010\275\n\225\363\275\000\350\275=\264:#\276\231\365\206\275OZO=\246]*\274\356\305\304\275\217\274|\275\275\354m\276\r\247\305\275\216\3568=e\3478\2751Kc=\250\320\222\275\026=\311=A d\276\370n\306\275c\007\344<\001v\031\274,\"\267\275+\372\003>\365\376\017\274\320\005]\2753\262\301\274\220F\340=\222\237\214=&\3442\276\243\263\221=\201\300\312\273\341\n?\276\3262\372\273\024z\371<\010y\316=\302\322\303=\212\241\277\275\027\334\274\274\204\005\204=\'\220\255=S/\301\275{I\014>\271\254\211\273\022\"\335<\235S\304={\225-=\230Cs\275\266\230\225=\274\206\325=\304\014$\276\370^\325=\372\331(\276S\004y\275vD]\274\2765\245\275m\202\245\275xx\201\275hS\216=\014\222\005\276\245L\322\275\220\215c\273\030\214>\275n\354P=\271\222\334\2755\206\031>\254\352E=kD\250=\206\233\t\275\205\365\263<D\226\004\275f *>\007\177\230=\302Ni\275\354G\007\275\320\3074\276_4\017< Q\351\274\224\0170\275\267\'R<\327O\\\274\227w\307=\327\021\004>p\032_\275\017\254\345\275\016\351.\276U\333\245\275d\034\007>b\026\\\2741\303|\274\'\255\304=\026\257\375\273\342\246%\275\312\311*\275J\264+\276\252\335O\2757\336V\274q:\347=\243O\211=6(\007\276\032\000\372;v\3738>b\232\"\276\177\315&\276\221\367\005\275\224\244\007\275\016\377&\275\007\2476=\273$\317=\274\312\354=xp(=\321\220\343<A\241\314\275e\325\211:b\240\336\274_\234\005=LO\t\276\2709\200\275\346O\013\275e\337\251\274\344\317>\274k\023\273<\217U\353\274\201\306\331=\317YR=7\340\304\274\247\210\355=u\\\216\274\212\272d=u\305\226\275\342Y\260\2751\251\260\275\207\244,\276\3714{\275n\241/=\230\260\275=@`\350=\320N\350<_\207.\275\250g\005\276T\215\003\276\\\344\315\275\022W\331\275=[\206=\004l\311=\035\265\226\2758\177\206\275D\367\003>=\264n=\272\033\022>\267uQ>\277\007\215=He\204=g\264|=8`\035=\017^\303\274H\033\204=\330\321\335<\223=\007>\\\244\374\275\313\364\243=\233\216\'\275x\226\335\275\003\2711\276\363\201\201;\r\317\357<:\360|\275?\370V\276\'\003\213\275\365\352Y\276\246\305\246<\354\260\202;A\260\014\276\010\020\214\276y@\205\274\372\021Z>H\002b=^{_;kpj\274y\251\344<\262\317{=Q\016\033<\000\347\013>\375\336\307;6%\215=1s\242=\300\210\237<\n\021\333<\212\rW=j\216\030\274\221\242\217;Y\006\347\275\'\250\367<\324^\334\274\345=j\275\222\223\342\273\373p\002\276\000\221\334\274&\3479\276\374\241w\274E\020\327\274N\322\0339\260\332\215=\316\226\270\275[\316\223;P\333A>L\354\264=\240\236\222\275\017\323M=\032\325\221\275$\026g=\005\276r>.\326\342=.(\037\275\361%v=\334\260\025=q\031\257;S\203\260\274?\255\022\274$\312!=!\215\267\274\365T\355=\372S\037=\263M\301<r&V>\007\272\343\275\303\021\342=\r\361\262\275\035\024\332:0\314\211=\243\255\207=S\027\347<\230\221\373<\275\215\217\275\354\023\225\275y\177Y\275A\324\030;U\3063\275\2222\304\275\'\276\376\274]p\242\275M\247\256<\225_\022\275R\036\241=\3406 \274\312C\257=\006\363\022\276\324\210\205=\270S\000>\001g\340=\350\026\317;\313\206\343==\227E<\0372\036<7\016l=\212\205[\275\245\016\355=\272\276.\272l\332\361;\275:\303\275\216\270\035\276de\032\272\312F\355\274\177\255\243\275\215\030B=\017\261K\2765H6>\250\246\234\2758S\236=L\331\330\275S,>\275\273\310\325=\024E\311=\307R\352=\350\263\356=\360\025\214\275\235\271\216<\345\021&=K\226\024>\315\353\243\274\274\333\216;\0022h\275\266\364\205\274W\317\005=8E\223\274`\tt\272\242k\006\275W\340\034<\317\001\276\275\023\206|=@\177\017\276\255\230\322\275I\261\005\275\343\246\000\276\311\237\304=!)\216\275\335\330\226=\210\371\032\275\227xd;,\232\277\275\311\341\353<a`L\273\355\274\316<\250<\007=\rO\265\275j\201\t\276\216w7\275-\203\021=E\310\356<\177\222\001\275\342\321N>\013\232\213\275\237y.\275%Q\326=\023\321/=\005\253\006\276\206\036&\275\227\220\306=;\367^>\235\372^\276\321\356\355\275\344\325\200={<\014>\310\261\320=?)\227\275\350k6\274\275|e<\025\220\226>.\200\342\275\300\271\225\275{\266M\275\330I\331\275R}U\274\271tv=\263\211\026\276m\323!<\362\352b={\301\006\275\233\256\370=E\227\333=\016I\301\271\0011\004<\3533\232\274\221m\343<0\316D>T\001&>@#\022<a\021\317=\333\000\\\2745\357\001>x\014\257\274ph\370;\307P,=\256\351o\275gNG<\353^\037\276\264{\273<\202\324\333<\306T\272;\204\211\r\276\270v\205<[N\373\2740\3706=.=\r\275\214d\006>3\345\004>\203s\006>\276^\261=^\013\025\275\330\342.>0\200)\275{\233M=\004c\245\275\314w\331<\210;l\275\231+\355\275SzL\275\247b.<B\004\224=\362Pa\274\210<\211=\035\377P<\000GP\275\344\270\273\273\363d\310\275\240\307Y\275\243\354E>\205D\340\274}\010(\275(l/\274\252\202\300\2750\241\307\274\257c\342<.\022\277=\343\377\256\275\032\010\270=B\307\332=3:\247=4\021\251=\217\035\007=}\227\352=\020\302F;\017\274\207=\356\202e=D\221\005\2761\220\200=\324\200[\275\365\032$\275\224\236>=h\365\333=\374 \010=\204\202p=\326\377\254=:\000\262\275\222\317\023\275$Y\213\275/*\022\276\031\306{<X&\002\276c9\270=\377%V=\225\376[=\366gK\274E\204\260\275`@\204\274\350\356_>5\334\272<C\022\024=\216\322\375=v\350]=\205\260\221\275\251\031\001\276\001@r\274\273\005\003\276\3153\267<\241\273a=\223V\n\276F\247<>eWT\274\235Vm=a\257\n\275\243\216\020\2762\034k\275\010\306\016\275\335P\206\275`$\006\275v\214\214;\255\323\245={\277A\275\336!W<y\267\250=\240\335\016>j\366\235\275n\2448\276\204\207\233=\200&\032\275\346l\206\275\230\344\340\273:\337\353\272)\317\346=\274k\007>\364\247\331=\024\217\036\276\243\024\001\276\240\342\317<B\366=\275\301\312\270\275\364\017\205>\036\302\316\275u\216/\276\242L\240=\255\217\227=\2051\306\273\006\217\356;\233:\277=\202F\023\276{Aa>~\336\216<Z\3432\276!\236\242=`*\031\275}\320\340\272\024%\336\273\256#@\275\257\022\264\274\260-\331\275\033\305\241\275R\373\222\275o\003\205=}\264\360\275\033\351\315\275?y\311=\021\244\355<\374\335\352\274\210\'\313\274\206\000\340;1\203\254=\004\317:\274\373!\201=\005\376\342<zq\224\275\002a\\=5\373\246;\367\263(=\364\206\202=7\003\243\274mK\274=\354\263\275\274\336`\031\276\021\"\264\275\303\322\342\275\237\312\000\276u\2105>x\345r=\201\311&\275\247\017\211\275Xp\273=\273\337\374\275<\324\316\275\210\334\302=@x;\2744P\237=\374F\276\274feF\275>\255\202\2758\030\005>\366B\353=z8\213\276\362\342\237\275\022\2648\275\211HG=}\377\330=\203\346\331\275\324\231\216<&&/=\301\275\377\275\220\227\"\275n\322\210\276\230\2226\276\210\231\350\273\217\232==\241\344\207\275wE\\\275u\022\217\2743\220\000>S\274\343\2752\013_\275F80>\r\031\367=\236O\337=\337\'A=\202&\314<\t\252f:\005\355\256=!\216%==iA=VL\214\274t\351\331<s\306j==\t\357=,\310\367\275\022\334\234=\346o\016\276@\201\332=\331s\223\274\332\203\253<\005D\361\273\231\321\022\275O\277u=\367\342\257=\265\247\273\274\220\224\024<\226\303\271=>\013\271\274\316\235\362=\314\001\244=\010\305+=\315_\213<o\300!>em\224\2768\244\256=\\\014\r=;\231\236\275\237\226X<@\207q\275D \267\275\312fl\275W~O\275n\240}\276\211R\333=_O)<rn\263=\335\245\230=\000\341\021\275\306\251\263<\311=\233=f\240)<\255C\321\275*\341\001\275 H\335\275\305|~;[5\352<\274uq\276\251\344|<\212\2207>\207\243J\275\263\032\246=kDp=\360\337s\2743\371\200=\213\3441\276\342\t\257<\256\342g\274\231`\274\274\321\200E>G\215\373=\"-Q\275\026*v<I\315\214<>\334\034>\376\246\274\274\3221\355=\300\353\022=t\214\003\274\3246>\275k\267\235<\240\236\002\275\366-\365<1\t\217=6\340\314=\3668\"=\001\311\220=\2652/\275\357t\202=d\266\021<\021\307\370\275Uw-><\004+>\270\035\373\274\013t\221;\275\200\025\276\316\376\263=V)\233=RXP\275B\331\035>a\271\337<8,\235\274\337X\301\275\301\343\302;pd\226=#\307\277\275;J\343<\023\217\255=\014\r\\<\214\r\324\274\037\'\220=\250K3\276I\035$>\372\310U\276Y\273\367\275\253ca<\000\346\207<\031\352E=\322k<>\234\367h=\031\010\323\274i\357\303<\322P\272\274N\245\305<\307&R\275\352\223\367\275\277\024\301\275\232p>\275\333\013\262\275BM\313=zC*\275S\027\366=\034\247\330=\260z\204=1\014\303\274\352;\200\275\020\004\355<\3239\005\274m*\013\275\333#I>\274\260\224;\020K\246\275\307\3046>$\020\230\275\224ps\274\002\234\371\275f\233\020\275n8\231\274\270r3=\246[\326=\225\320\255\275Gv\215\275\211\327\001=\030o\273=\266H\275\275\250<\001>\335\302{=\013=\275=\370\333e\275\026\346\341\275\341\337\301\273B\253\370=6\273\300\275\346\262\213\275\346i\265\275s\325a\275\210Mz\274\350\200\022=\231\177\331\275\360\323\331\274\232\221\000<\330]h\276\236\3337>\256qZ\275*\261\204\274v\030\367\275\315\326h=\324\010n<p\2570=\367u\300\274\\\022\010\276B\203\213\275\317~4\276\037\247\325<\177\004/>R\033\275\275\270[\\\275\313\331\312=\255q\322\275\344f\350\274\226*t=\323\020`>\234;\371\275\307\305I\274\023\275\020=\237P\370=J@\024\276\027\225/=\243\024\235\275/\214G>\344\351o\275<\034\204\274#~i\275\201\r\276=\202E\360\274\205\250\277;\333W\004=8 \335;\023/\000\276\003\325\025=4rO\275\233\236\t\275N\364\366\274\325.Z=\200\334\370\274\017\251\314=FW\325\274-\204O\275\037qe\275\317\247\215\275\264\203\024>w\205\n\276\375\202\003\274\205\233\032\276^\301\230=\205b9<i\217\022>I\034\027>\235Q\320=pI%>\244 \213=\022\371\371\274\374\206!\274\216G0\275\352\000\263;\321\3468\2752<\261=\217\004};K\203\241\275\266\313+>\\\030\221=bM\363=q/\230\272\303\375\215\275\260J=>\t\376\342\274\376m\333=2\262\214\275\255\216(>\020\206\205\276\2674\356\275\273\025\321<\201x\001\275I \305=\231\220\323\275]\035\001=\014ve\274Tc\017\275\3438L\275\275)\001>3\274\'=\346\2759\276\357N\251\275\243\010\365<\374e\264\275\230C\221\275\370;j\275w\254S;\255$/\276\003\344>\275\344\245\002\274n\255x\275\300?\206\274\321\205a=\r\361\225=i_\302\275i\362\310=\274E\\\275*\356\031\2756U\035\276\004\263\372\274\207c>\275\257\272\t=,2\330<\341\254\352\275\347\235l\275\331W\314<\317\332\245\274\373mD<`\003\264\275nX\332\275\024\312\016\275%\234\215=\236\356.\276=5\000=}^\326\274\340}\276<\364\354\221\275I\014P<\033v\275=\354\236\216\275y\007>\276\334qC<52\314\275\'\005\027=Yz\232\275\255\303\013\275\1778>>\376/\032\276 _\206\275\221\372\253\275\340\2762\273\336\244X\275\221\336K4\341\361.=\302\0063<\225\273\360\275\026\375&\275\267Bb=\030%\022=\177\2031<\254\261k\276\014\033g=C\206?\276\360\222\202\275\362\207\307;W\365\262\274%\220\207=\033V\260=\216\352\254\274\264\203\"=\036q\374\275u}\254=\336Hc=9\203\230;\025\262\035\276vq3\276;^\216\275\021Jh=\225\304\355<\276\200\201=0\240.>9x\216=\024\250\212<\251H\034\276\371KM\275\312\273+\275\030\356\344=\375\372\262\275\031\004\341<\024\203\326\275r\345\251\275\037\254\247=\355p\027\275\333\236\203;\321\025g\274u7\003\276\035\243\217=\327.\242\275\337\347\006\275L\303\300\274:*4\275\274\254\265=r\253.\276\262#\342\273\247\271/=\244\tm\275X\207\246=\254\330\356\275\201\207\220\275\334\263/\273\373k\004\276B\266\345\274\250\227\332\2752\327\247=\261I\027\276\002M$>\232\303\213=pB,\276\271\3277=\347H\236=\237\333\252\275\r\205\002\273\220?\3149\276S;>ke\307\275\262\345\343=N\250(\276t$\250=)0\205\275\r\277\231=.\321\332\274i\3772\275FVn<7\341\033\276+\233\000;\317\373I\275hkQ=\237&\304\274\306\223\255=\315\217\026>\223\037\305\275\262\206t=1\201\327\275\367\2112\275\200$\223\274\341+\031\276\226\357\324\275\036\020\n=\352\363\243=-:R\276*\276\251<G\367\244=Wj\354\275\371\327\214=\347\343:=\242\025\240\275\027\250\260<TD\273<\373\302\224=\2747\031\275\350\305\234=hyc\275\031?g\275\203\311\260\275 \036y<\305(\342\273\202k\206\274\251v%>\n\2369=ZP\221\275\240\242\000=\0338\305=\023\336\276\275]\260\t\276I1\035\276\217\255\201\276\007\006\202<\347w\216\274\177^\321\275!|\342\2750\231\357;gmc\275Q\226z\274\314\016r\276DD\001\274\252`\344\274\334\351\362<\002\270\335<\373C\\=W\177\252\274\"\020\357\275\333\341W>tK\223<\241\r\204=\3658M\275\n\2165=\376t\247<Q\371\375<\244@v\275\364^\227\2750\3036\275\356\010\330\275\013\266\000\275\224z\004>\220\324;<\247\007\211=`q\246\275@\356\210=\330\300\307<:\245\241\273\006O/=\224g\260=h\214\234\2757\217\232=\346\252\362\275\354\355\226\275L\341s\275d;\241\274\351?\020>?\212\032>\027\224\204\275W\3638=\331\035*\276\306\275\037\274\023\333\364\275\371\320\031\276Y\020\005>F\017\003=\357\276w=\003\316\264=\321\251\271\275\273;\353<\375w\227=\263\257\303=\251\027\025=j\302\361=\317*\352\2752C\264\275\336\203\303\274/%\345=\306a\302\275\r\201\334<o[\337=|=\023\276\200\256\205=\343P\201\275f\335\264<H~\240=\263fH\276\243\364\027\276!%#\275\237\315x\275s\253\206\275}\332\035\275\222\374\352\275BO\'\274\001\031\'>~\205\220;R\264K\275\221g\027>.\204\351;]c\326\275\327K,\275\212\274\364\275\267f*<\362p\377=N=\037><\310\355<Z\021\320\274\331\342/>\200\026\334=N\212\270=\210\327G\275\342\031\023\276\242\317\201=t\273O;\225\027;\275\010\240\241=\365\247\313\275\037k\205=y\035d\275\365[\016<U\014\002=\035\213\302=\240\217\255\275Mv\222;\353\005&\274\037-\355\274\273*\272=\235G/=HCb<\200\246Y\275\337\3519=\265\324\263<\243\210e<\335p\255=\304\275?>*=\300=\031\240 \275\255\304\216\275\017Ea\275~UU\276\263\237\257<\227\366\373\275\253_\030<\000hI\275\200\310!=\006j\235\274X\202\325\275\213\316~>\t \330\274\034\235\273\274p\"\034=\304x\001=\316\333\337<\210\261\247<\351\034>\274*:\261=\003`+=\263g\216=(*\234\275\326Et\274*\223T\275\255\245\207=\276\356\202\275g\247;<)\361\256\275\t}\214<\0140\265\275\3732Z>!\016]=\277\267\354\275\324@\272\273\020\372g\275\016\226^\276\321\001\200>\235\271\327;\203\271X\275Ub\237<\024\247\216=\344$o=\235\224\221<\356:\272:\345^\335\275\302\005\032=\301\037\003\276\203\007\034>\365V\207=\336r|=I\354>\272\355\373\373=\353\357\230\2754\226,\275}.\207\274\321I\227\275^<~\274\275CO=@\242i=\031\0174\275\374\003\025\275\375\243\010=\250bb=~{%=\274\203\257=7\021\371=\270\303\246:\013\375h=z\377\265=\376\243\326=\263:\330=*>\256\275\2117\302=\243\250\227\276\2544\\\276\237\234\344\275\233`\334\275l\356\t\276{BI\275\177!\331=\332\032J=W*\341;W\021\025\276\221\311\250\275\013\021\007\276\215W\230\275S\313\326=\334\201\230\275\254\037\236\275\2628}\2752\244b\276 q\240\274\326\352\226=\277i\000\275\332yd<\025\214\003\275i\260\250\275f>\033\275OJ\230\275\350\344q\275&`\323=\346Y\252=5\311~=+\325n<3L\363\273\243Vl<\025\243\277\275\321\362\222\275\277\340b>\006\267:=\327W%\275\3145\255\272\335\026\254\275\277\241C\275\200W\331\275O\272\267=\003\244g\273\314\314\004>\341\363+=[\1778\273\217ax=L5h\275S4\241\274K\236)<\367,\304\275\'J\334\275&\020(\276d\210\263=\034\022\245<\025\237\\\275\277i\017\276f\223\327=y\"j\275\373\021\005>\030\275!\275\035-\247\275qnf<\271te\276\tJ\332<\\\227\"\275\242\256\274\275\352\264F\274\307\373\225<\206\270U=\214W\014\276\3776\211\275\327HA>8\025\240\274\226IR\274\265\252<\272x!`\276k\232\263;x\010\330=\235\t\315\273B\375\026\276\227\340\001\276\304\231\267:\262\322t=!\241\346=\225i\023>H\021\030=@\357R=f\251\002>\203\264\261=\317\233\376\274\205M\344;A\226H\274\3722W\275\024s\227=O\377\340\274\321\273\216={\302\n>\201\260B=\0165\247\274C\246\246=/\367W=\305\346\344\275x\376\260<\323a9=5\255T>&\030\230=\026g6>=\373\024\276\217x\300\275>\207\245\275\016\211\275\275\310\262v\275\023\232k\274\365\'\260<d\370}\276N\"\001>4\033\030\275\204\000\034\275\223\356\351<\213g\234\273\034\261v=\267\006\215\275\261\027\305\275\345\244\245\275?\351`>\323\241\326;Onf;HQ\r=\302{\267=k\025#\274\202\302\025\276rG-<\336\322\220\275\017\'}\274\315:\203=\255pG=\203\031\261\275\236k\370\273\215u7\276Z]\304=\266|g\275n\2421\275\027\305\204\275\024\210\342<:\2421>\0331\"<\341&p\275q\377\367=\013\375\021\275\230\272\311\275\270+$\275\225.\023;cH\237\275\321\315Z\274\340\331k=\022\225-\275\214\277|=(\352\304\275T\263\307\275\206\004L\275\277\033\260:jm\223\275\024K\t<\3203\201=\316\270d\275\336\230T\275([\241\274\370\n\254\276\347G\324=\023\3267\274OE\n\276U\305(\276B\335\225=\347\203W\275\"\354\247\273\037\004\024\276/vE\275I\016\363=\262\231\272\275\330\037\025<\332\246\025\276\272\225\272<\237\251%\275j\024\226>\204B\021<^H\207\274\325\rc=l\265e=\326}\305\275=F\270\275\222\232\340=\277\260\340\275\362\341\206<\t\037\375\275\275\350c=\013Q\230=\310\001/>\033\006i\275\345\237\205\275],\001\275\264\257\356=U`\305\275\n\rU=\020\225\312\275\273\275h\276Dv\355\2750H8=a\211#>\373\336\226\275\026x\010<\006S\335\275vT\331\274\274\317\206=T\3525<\020\315\024=\364\230\356\275k%\217=DA\223<\002\332\333\275>\251v\275\235Vv\275Z\036\306\275+9\241\275<\353\256\274\017\025\262:\375\016\310\275\010\\d\275\223\014\307<\010\352L=\217\256\357\274\330\372F\275@m\223;\273M\270\274A\232\014\276}i`=\2162\226\275\352\242\315<\r\373\312<\252\001-\275\357a\347<\320ZM\274\237\312\023>\010\217\216\275sKW:\312\000^<\2209\216\276\217\263\025\275\367\373d\275\002\366#>\022A\216\275\300\367\000\2754r\202\275\032\022\200\274w\244.=\274u\021\276\225(\305=\245C\2559\035H+\275Wg\203\274\264\257L=\234p\201;\007\214\036>\230\245#\275K\235\266<\352_\241\275\"\023\372\275\221G\032>p\377\273\275DKN\276\213\276\200<s&\014=\210\233\027>\376D\313\275d9\271\274\316\203e>\345\335\005>q\335\232\275\223 \217\275\207n\355\274\331\210\021\276\201\304\236=\220\nA>\301\342J\275\277\t\277=V\324\366\274&dV\2733\360\020=\344\303\034\276\324u\374<\216n<\276W|\035\275\371\213\221\2758\332J\273\020\026\343\274\004\304\221\275l\3029=\245 \345\274\320\230 ;\373\360\350\275\262\204\013\276\013\034\007>\244\023\343\275\200\300x\275\337:\243\274\021\243\023=\216S\255\273\232\200=\275\330!\324=P\340y\275\007\252\"\276p\316N\275\271\230\311=\201\212\024=\370\204\256<(\032\275\275\323\251\333<\223i\277\2751\225\375=\307`\300\2731\313\242\275\341\213\245=\340\246\366<\021\212L\273\274\271\314\275\236\305\244\274\216\205\224\275dZ\232\275\370\265\001\276\017\366\200\275\2201\027>4\3144>\257\253\232=\0328\204=\025\366\227\275\\RM=\301\236L\274\2416v\275\216\003\220=\277\325\235\2745]\364\273!\344i=\254F\001\2749Mx=9\033\3479+\352(\275\t\300\330=\005\177\201\275\234!R\275\277\n\017\276s\375]\2748\370\204=\253\022R=\014\303c\275\304\354\032\276\252\315\'\276|\252\366\275L\266\205\275\303\325e\274\230MT=WO4\276,t\201=4\322\346\275\255\343|=\314\3010>\273\207\260<y:\031\276as\351\275\264\263a=\'\202\030\273\336\377\246={\213V=\226\306\323<\242\236\250=\tc|\275\027\214\307\272\006\372n\2723\242\\=\242I2>\206\377\321<\220\352\'\276@\021\024=2\304\222\275\251R\345\275\301\030\360\275e=\365=c\356R\275+R\022\275\361<P\275\325\221I\274\304\264\373<\002\346\272<M[A>\025~\257<7`\\=\026\316\007>\347\273\014=1\306_=\213a\032>\212\210\273\275\264\233,\274\00497\276:\024\300<l\265\013\276x\006/<\320\222\022>5]\n=U`\250\274\\\324\316<\307F\021\275U\264\367=\2367\250\271\307c\276=)\321T=\017\375S<x\022\271\274\270A\037=\2004\316\275\342\031\303\275\253f\t\276\032EM<\336~>=\336\207{\275H\320C>\273\337\365<\005\201\255=\270\331\3729\263V\245<e\363->\242\203q<U\324\t>\224\032\375\274\030\203y:B\363\245\274\376,J=/\227<\276\341\022\030=\333S\004=\217\032\037>\002\360/<\25639\275\216d\352\275\031\236\233<\355\\\352=\260\r\320\274\277\330Y<)\310@\275\373\037,\274O\226\013=;\365\220<\r&9\275\002\310\225\275\024\247\327<I,\312\273d\234\326<\262W\242\275*~.>\003%\304\275A\242w\275FZ\201=\334\240\310\275\255\333\233\275\037\n\033\275\330\250\267\275\271\340\324=\270i\373=\" \314\275\227\031\021=\371\257\355\274Z\2634\276\2762_;\315\306\026\275\366_\317=p\210\315=\353\037\363\275\336\232\002\276\013\023\320=\242\326c\274\r3h\275>\306\027>\224\335\255\275\204\307\"\276\010AE;\270\323_\275V\211Z<o\341\005>!\333\234\275&^\307;\037\275\207\275\254\210R\275w)\202\276s\325\213\275&3\317\274\352\243\271\275\367{d=D\257P\275\341\216\237<U\221\016>\024<\227\276;\025\307\275\006\t\263\275\264}\302\274)\357\202=\016\242\235=\250\265>\276\346h\300=\275_g=J\007\314<\321fo=\301\000\017>\221[\262=\n\370\016>\371-\313=^\375\376<\201\310k=\275\343\261=\033\347\260<~\201\026>\350\005D\274\270+\001>\326\020\005>So\210\275\322q\202\275\305\316\003\275$\202\244\274Q\273\027\276].@\275V\267\300\275_\371\275;\3253\'=N\021\234\275\217\3176\275\262y\375=\325$\000=\254}\250=\327E\234\275\327\023v=\001\332\244\274_]\327\275\007}|=\327\036\371\275\301<\247\275]\006\342=\250\242\367\274\025\222Q\275\260m\233<H{\375<\207-\336<\230D\303\275\375\323\331\275i\n\260=\330J\312\275\232\333\330\274\006HW=\225]\337\274\344\202\372\275\014\002\026=\350\321\016<\362A\362\275o\2246=\214HF=\253A`=\201b\262\275\\\250\307=#\274y=\310\311\r\275\312\330\025>\355\035\026>\014\276\326\275\363O\277;\204\333\027>\200R\374<\353qc=\343\351\340<\235$h\275sE\207<\263)\200<\333k\314=7J\333=w\256\303=\n\324\277=\016\237\350<\222\317\263=XyS<\322\232\t\275\272\003\203;\244\277\222\275Q\\\024\276\362\003N\275\007$\261\275\007LP>[--<\361\022\004>V{\366\275\214\370\210\275\031tL\276\326\300\261\274\240R\253=g\271@<\177\260h\276\025p\305=\\+\006\275\263\334\317\274\335\0074\275\037H\237=\200\273\010=M:\241\275\370P\356<I\032\t\276\260\211\010\276\177DV>\310\272\326\275\316\344\"\2765\304\234\274\r\204\232\274l\351\010\276\311\273Y>#\274\014</\215\250;\302\304\371\275\306\345\251="
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2270198
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 26
}
