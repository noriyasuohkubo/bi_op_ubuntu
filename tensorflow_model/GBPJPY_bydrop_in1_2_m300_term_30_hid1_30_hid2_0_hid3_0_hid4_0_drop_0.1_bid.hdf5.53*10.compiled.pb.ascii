node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 954607
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "I\013\007\275M\034\305<\021;\000\275\355];\276\375\244\030\276\225Z\003=\251\"\302\274\371qI\272\003\225\224=d\304\376\275\323\236V\276\313\203.\274\363\\\020\275e\244\006\276\214B\251\275\300xN\275\335~\006\275\221\000\034=(\236\013\275\274\243*\276\272\330\016\276\204\215\355=\276]^\276\3530\024=\035\234\017\275i(\201=!,\332=(*\344\275\016\215\321\275\352\376\032>\014\271\225=\336\355\037<\277x\355\275#B\202>ck\r=\317\252\357;{*\010>\227g;=\220\327y<5\254#\276I\254W\275\010\344\266\275I3\003>,JE\274\302m\373=\006\326\214\275\344\010\275=%\217:=\010\344\n>-\022y\275\016Q\246=C@y\275\305\266\260<\310\364\200\275J\252\205=\303,\245\274\271yH\275\277\346\237=A\010\337\273%\375u>\323\360\311=th.\274\030_\325<\027\027\022\275t\301D=\222:&>\214y\026\276\220\336\032<^O\033=\202~\224=\347:I\275\230\364\216\275;\263\253\275,\252\237\275_\233\255;\232E\217\274\r\364\013\274f\253\211\275} \261<\351hP\276\251\370\226=\320\233\375\274\226H\345=\316M#={\354\336<G[\304<!\021\207\275\237\034F\276H^\207\275\254\213\036=-\313\343<\177\201\254=.;\240\275bR\033\276\3460\240<\027~?\275\260\231\314\275\275\240\033\275\376\334,\275\272\333\317\275\363\322X=\241\223\005>\317w\224=Z\225\226=\205\301\203=\360Z\003=\314P\035=\241\364~=pwj<{\n9\275\205\274\214\274C\351\314=\3639\302\274\024\002\337=\300\237\216\275\250 )>^G\241\275\356`\013\275\303\211m;\037=D\275\363jH\275m\345 >;\321l\275\320\304\003>\032\t!\276\'\206y=x\233(>\021\205\205=\236x\342=6#\253\270\307\377\320=\352\320z\275{vQ\275\304\371;=pkf\275d`F\275h\216\364\275\257\251|\274\363\372\'>\320\270\246\275[\342,\275\337\3055\275o\373\332=\221)\334=c&\332\2748\341$>\357\010\010\276\243\300\222=\020B >\256\302\027\275\240\257\034=A\263\247=\3125O\275\274\306\021\276Q\277 \275\376#\023>\t\022t=^m\374=\321\010\230=u.\313=zD\206\274\010\2572\276\262\202\007=M\350\352<j>\024<vu1\275\214\356\014\275/\313\246\275]\314\024<\372AN\275\347\023\272\2758\240\265\275\246\337)\276\206:K\276\263\320\245=\2308\"\275\370\322\026=\002`\316=\316\312\243<\203\270\314=N\275\001==\"\317\274\345\375\221\274\032\2605<\017\005\211=\037|\303=\202g\360\272\232}\251<[\221\306\275*Gv=\235\320\035;\365\343\351\275\305\316*\275A&U\273\361\010\021\274\036f\022\276\264/ >GV\345\275\002\267\375<\301\266\356=\003\372\006>\377\354\212\275\332[\214\275&\312\005>\014?\211=\253\322\271=j\265\352=\021P\024=3A9\276\204\0072\275\230Y\303\273\377E8=\001\314\242=\006S\217=m\206\370<\313o\007\274\246\336\301<u[H>m\016\203\275\323\357\226=\224\230\253;u\243\222=;\337\316<$|\033=\317L\213\274\257\225\020\276\036T <\265\313\n=[\376\316\275\2405n=n\363\213=\013\027\010\276\277\007\n>\3012\021=\004\003\006>B\262\250=\376 \267\275\177mR\276\376\334\255\275\345\260\334=\341y\372<o8G=\006\360\266<\001yx=\301\317\323=\265A\270=\326\006\325<\0039\321\274\306\335l\275EO\362\275S\305\263=4\207W=\316EI=7\213\341\275\250f\003>\226z3\274\246\320\343=\\\312\233<\2101\252\275\321Ek>G\000\027\276X\202\315\275t\211\277\274\336N\216\275\354A&>\255p\010\276?\256\032\274\014\263S;\010\221U>h\3715\276\017R\244=X\016\377\274\303\206\204=}GO=G=\272=\256\231\247<\277@r\275\354\3355\276\227\217->~X\036\276E\002\272<\336\233H\276\360\200\377\274vQE\276\346\217]=\321\336\200<\034_1\275\352\034\375\27561x;\037\2607;\2430,=-\224\177\275\252F\005\271\031\326\270=\3526.=\000\365\032>\250\346g=\252\006\217\274\375LA=\353\263F=0\3153>\367`\323=\177c\273=\255|\303=\330\310\376\274LZx=\032\016\r\276\247\357\014\276\030\340\201\275\024s\037\276\020\001\305\275Y\277\214<\341\251\363=Vw\255<\321UA<B\315\377\274U}x=i|\334\275\206\246\217\275\220\3448\273\310T^<U\n\016\274\030qD;\224\376\242\275&f\261=\306\353a\275 \225S\275\272\023\215=\253D`\2768\230\003\276\377i\253=5\257\274<\302},=\315\357\037<\036\330\312=:\0278>\326k]<\267E\270\275B_S\275\370\371#\275>\2032=R\315\211=\257\202?\275\335o\202\273\211\346Q<\331x\301\274*\2158=R\234\242=\023g\362<H\245&\276B=\362\274\024j7\274\341L\226=\202Tc=\316\376\203\275\252\203\261==\031\024\276\026S\243=\305:Y;L\264\271=\240\016\271\275`\236!=\007\255\375=\330]V=T\300\232=\340\007\321<\255\346\322<\312\017\236\275\25456=\276\267\335=\214\305\313\274\270{\216=\035lA>\275Pf\275\357\313\351<\027\243~=\225Z\272\273y\333\234\275x\203\234\275$*]\275\007.\004\275>$\303\275A\230\007\276C\337\206\275\013\234\346\275\372\320\023\2769\305\366=\232Rv=\243\357\245=\370\027\363<\320\236E=\032?\005=o7\035\275Dy]\276hP!\276Z;\322\275\314F\216\274\303\004\345\274u\212D\275\354\257\037=\341y8\276MF\331=\013\261\243=\372a\351\273\342<\215;\331\026\371=\335z\216=G\'#<\3168\215\274\034\262\302\275D\257<=\366\313\230=|J:\275.C\201\275\246\334\321\275\374\274\260=o\253\222\274\004 \033=\030\240\350\275V\263T>#E~\275\201Dh=\246\023\260\274P\206\370<$d\036\275\306\326\366=\236\316\242<y\277D\275^#\177=/8\346<\305\211\005=\201Z\312\273E\356\305=\016\270\001>\371V\305\275.\2467\275\202\216O\275a\233\227\274\326\335\215=\317p\030\275U\226\232<\251G\007>\326\327\347\275\0010\010\276Gw\312=\263\3163=\363\np\275\020Z\013\2768HD=\002\344*>\005\357<\276\337ae;\327_C=]\342\'>7\005G>\375u\373\275eV\306=\342\364K>_\351\254\275\364\307u\275\235B\312\275\343\013\234=\312\3029\276%\360\226\275\250\332\r\276\375\235\033\275x\362f<\3052\226=-\370\277\273)4K\276\236\n\355\275\357\217\275\274\343\3677=k\177\203=\344\312\016\275C\342\310=%Q\355;\275\243\217\275\'\207\345<E\025\257\275\203\233\307\274\213\302\207\274t7\223\274y\034\211\274$v.<\\\314\017\276\257.\253=\005\010\025>MQ:>R\344\237\275i\\\262=\233e\016\275\333\010\234<s\252#\275\367\306\274\275\213\337\366<\233\005r=\230Uk\2750\351R=\234N\035\275\306\2432=\315k\335=\250@q<\003,\004>\306\317\263\275v\"E>\221\267v\275\2206\257\275\347\341c=#\345\222\2751\023\323\273:u\016=*3\203\274V\302\215=\020\376\235\275J\'\350\275\032\320D\275\326\016\304\275\2005\235={C \275^\001\006;\2460\254=\300b\253\275\302\300\262=E\237\326=\305\372\201=\r\235\033\276\353\366\332=\247\201@\274\007;\000=S\275+=\317?&=\227px\274\263\201^\273\\\320\202\275U`\010=\260?\361=\013\364\016\276\267f\352=\005\003\206==A\364\275\366\317X<\307\325x\276r\365\354\275\362H\227\275\222\007\207\274\231N\n\276\341\205]\275/G\340\275q\261\026>;\003\222\275\354\034\234={\264\003>\026\365[\274Jq;\275\"\306\250;!O*\275\350\376\302\275}\253^\275\031o\010\276?\337\327\275\031A\376;d\032\230\274\337\307Y<\r\032&>\313=?\276\036\341\337\274\3217\341<\277\365\234\274\3224\005\276vp\031\276\376\212V\275t\033%\276\024\031\247=j\r6>L\362\003>f\236\\<\242\200\226=\227\'\214=\336\333\t>\370\323\006>\232\014\311=jR\225\275\364?\352\274Y\311~=\241!\207\275\310\177Q>\201Fd<\363\362q=T\347\013=\215o\225<8\273\331=\342\245\352\2754\231\026\275\024+?\275u\245\367\274\031\210\345=@\006Y\275\014\210\'>\240\232\000>\027r\367=\253\r\200=\356\017\233=\327\360\376\275F\314\377\275\036\264;>\277\221==\306\245\233\274\263!\352\275|b\335=\017e\000=\227\333\305=\030\354\003\274hB\201\275\255\356\332\275}#a\275/7\251\275\322<y=oWU=\334D\004=\310U\\\275\313\274*\275\217\r\001=\323\247&=\003\354\217=\221\300\001=U\254==\037\250\365<T\220\220=f\313\225\275\346\231\021>\334\311\345\275hp\331=n\305\'>\017&\024\275\354]\263=\351\336\231\275\026X\313\274\346\214=\275\215\342\r<z\350\307=\314\257z\275\315N\277\275?V\210=\355_\233<\347\017f\275~\256\231=\217\312\364\274\266\314\000>@\343O\276\315\262\364\274O\327\334;(\345\233=k\3758\275},-\275 g\255\274\307I\341=zZ\266=5\361\345\275*\263\335\275[&\347\275E\305\332\275\354\323\335<O\263\241\275\274\237p\276\353V\016>\203\314\323\274\230\'\343\275g\014\354=54\226=\255^/\274\352\n^\275\201\007{\275U\031\021\274\tjB\276\007:\362\275\240\241\226\275\002\335\374=\031\3255=B\233F>\321\224\346\275H\302.\275Lb\231>D\324[\2757\036\332\275\310\270\316\275b0\037>\307x\n<\320\244]\273\025\361\331<r\332\352<,;\365\275\037\373V\273P\3643=jCY=\233;\336\272\273\026\220=\177\332\016>\t\261Y\274\005\325&\275\035\341\327=\001o\304\274\201\026,\276\0018{\275)\346\215\274\031\224\237\274t\216\234=0Q\342\274\334\005\204\275\253\036\307<9\216?=\306\277\366\274\205\021a\275\260\256\006>\234R\r\276\253\215\275\274\263\367\305=n/:=R\000\345=e7\327\271\351\316\272;\361N+>\244\326\306=h{\367\275\242\365\203\275\366[*>\001\216\265\275\263H\207\275\276L\253\275SP\004\275\005\271\370<\263\003\264\275@_3>\360\334&\275\201\307\026>\016\243\r\276d\r\026\275\206f\312=\035[\376\274o\266=\274\177\314\346\275,`\313\275\226\315\377\275}6\303\274\272rl\275-\241z=1\3609\275\247\202w\275\375\000n\275\304\231\227\275\346\024\345\274\363\207F=\233\264\371=\007_m\275 \342\027\2766\334\034\276DL\r>\254u6<\243\241\256=j\002\210=\254\236)=\236h\036\275rx\240=c\3537\2741r\224\275k\372\266\274\350\006\006>]x\014=\301\313\355<\005\324E>\221\354\017>1-\333\275u%\021\275\003W\262\275\207G\032=\332\335\020\276\327\330\020\275\336Z{\275\325\353Q<\020F\203\275\276ns>j\353\213\275\260M8\276|)\315<\206\214k=c\026n\275\026j=>\252(\210\274w\027\313\275J\025(>\016\233\220\274g\003\277:`M\302:[\346\007\276\260k\375<\3101#>\004\371!\276\037Z\303=m\004&=\242T\001>)\2411>#\201x=g\331\246<&\252\005=w\300\315<\307Q\026\276\213\347\324\275\303\361\240=\037\000\347<\343g\352\275\312\370\270\275\257\275\215\275\025\236\315<\3410\233=+\351\267=\324!\262<\333R\276\274\271\334\256<\327\336\215=\3136\367\274\320\270l=:\227\024\276\200O\344=&\010<\275\354\240V\275\350a\252\275\333\231\236=|\206/=~\356\300\275\367\375\003=\272B\356\272|=\245\275\356\023\027<\202 u\275\327\217\357\275\353A~=\316\325\027\275\354\036a=\017\302\333=Ox\227\2748\255x\275\355\212\001\276\355\363B\276\251\357\027\276\246<\363=\207\017H>1_\317\275i\235\267\2746\036\006=\223\330[\276\321\246#\276\254\202t;\241\335\362\274.w\343<\251@\225=g\304\025<\225\232*>*\261\241\275r\351\177\275q-\312\274\370<\"=\202\243\233\275\233%\034=\212\224\342\272\025\270\255\275C\177\216<\365\217=\274\027\005\225\275\364\247\036>3\000\267\274\230\321\243\275\177\301\351\273\005\016\342=\376(\016\276]\206\272\274g\032~=XO\321=\316N\035\276\364%\177\275\371\2716>\225p\232=\362\247!\275\013\021\267\2724\354d>IO1>(\356\202\274t|\t\275\300\244\212\275\3565R=0gD\275O\020v=\214yx=T\242l<\336\374\240=\306\334\231=\373k\234\275Z\314\325\275\324\216\266\274]\212#<,O\035\275rj\224\275\004d==_w\242\275\016\271\t<|\3609<\371\016\n>?w\016\274\230\004\317=\335\037@=\210\236\357\275\013\234\004\2767j\361\274\373W\230=\204)~=\276\361\000\276\223\370\330\275\3560\377<\217\302\235=#Zu>AA\001\276\020\354\342=\327\205`=\360\211U=;\016\024>f\325\235\273\033\251B<S\352\307=q\313\225=\331\227\363<8~\376\2750\177\366=)\017?>\316#\342\274M#\300\273\331\263\243\275\335\243\250=B\216\014>\254\374>=\237<\377=\250\213\213=\227\253\020\275\3366G\275\335P-<Q>d\275B\035\236<\177\251\207\274\256\352\337\274\031k==M\227\245\274Jt\247\275\300\2338\275\3732\347\275\304\036\243\275\327\323\207\273\300\3300\275|\242\225=Iu\267=\244\250\223\275P\0374=\224M\t\276P\032j<<\222\255<\201<\334=\322\001~<\367\330\013>c\n3=\272#B=\340\017\217=\314>\373\274\032\313\312=\337F,=\0366-\276\270eP<\2156\021>\247\033\252\275^p\002\276b\324\"=\217\312S=)\367\242\274\247Z\207\273\036\344\214=BZi=\303\215\367\274\307\004\307\2757\357Y=\255\344%>\276\250\202\275~\221\221\274j\367\213<,.\201=\235\215}<\205e(\275\022\242\n>\220\217\327\275\314B\266\274\006\265\025>0\'\205=\020\247\024\276\244\023\234=]\233O\276\204\207}\274\252>\310=\231\312\032\276\226\224\232\274\033*\221\275}R\245\275\264\200\014\275\276Q\205<\242h0\275\373\336\356\273\255dH=i\203\214>\257W\016\276C\320d=\255\362\215\274\354y\000\276Z\314\027>Mm\033\275l\0200\276\261\346\240\275C2\335<\000\246%>1\353\364<\344\237\336\274\253\302\265;\2328\302=!\233\021\276\365\013\213=\246B\236\274\273V\217=v\033.\274\341}\243=\247n\324\275X;\350<#\324`\275\373vz=\0039\201=\3614`\275\337\247\344<\335\'\221\2751\266C>\262fA=)\325\001=\352\211Q\275/\333\346\275\372P\320\275\220\302Z=\307yo\275\222G\024>\262}\005<\221\273\025>\351C\367\275o\3457\276T\231q=\202l\023=x*\336\275g:\315\274+\257u\275\014\026\003\276\3515\204;\321?x\275%<\306\274\032\351O>m\2478=j\225\260<\351\355\371;=#\214\274\324\206\215\275\020\222\227\275\025M\005\276\231\366\251\275#\353\245<\004],>\277\205\277=\214\332J=\030\034\016>\3345\026\275~\301\257\2756\340\302=$\247g=JB\017>\332y\237\275\371\016\267=\032\253\261=I\n\t\275\035x\243\275\354Iq\276\207\264\024;Ci\356<\263\211\010\276\203\345\305=b\307#\275\031x\354\274\2602\213\2744\234\237=)g\n>\355\350t\275\023|\031>\273SA>7\361\013=\241\324L>+\342\010\2765\277\020\275\255\033(\276\026J\002\274:\220\002>5\267O=\250\034\362\272\314\344\333=Z\342\023\276\000\315\350<\272\300P\276AR\007=\234\325\267\275\263WS<\000A\t>\016\275,>\240\204\302\275\003\003\320\274X\226\323=n\233\324;|@~>\310K8>2\210\376<k\247\245=\314\367\361=>o\362\274\324\217>=\210+)=\373\335\275\275g\204\024;8\372n\275i\263#\275MBO\275\313\320\211<\tc\253=P\254a\275\271\226\306=\333\034\362<\240\331{=\033\006{=\243\3402\275\214<\201=\212Q\324\275&\254/\274\013f\313=\264T\023\276\310i0\275e\365H=\250\350\321=\035=\212\274\\a\377=\225R\003\276\243\255\020\275\271\036B<\325\2140\275+\202\256\275\257Y\205\275\372`\326\273\336\2373\274N\213\023=\355\t\305<\261\374\347<\351\212\266<\254~\252=\235Oh=D\023\237<\240W\353=\2511Z\275s a\275\325\220}\275\345-\200\275\312~}\275\246\226^=\n\000\311<]\352N\275\232FF\276\333\320n\275m\267.\275\236m(<^\337\272=\035F(\275Bu\357\274\025\305\315\272\230\357\260<N\210\000\275\365t\364\275\274\327\242=3\0168\273~vN=\002\341\312=\n\310\017>9\260\026>V\010\"\275\2251\310\273&i\240\273\361\377\341<Ms\031>8r\311\275\341u<\276=\215\207=+\227^\2758\'^\275*0(\2762\\\253\273TQ\332\274!y\233\275\226\310\242\275%\006O=}\237\007;\362\301\034\275\372n\335=\035\\4\273\035Q\356\2744\262\315\273M\211X=\305F\237\275<;\231<\306Z\206=\006\334*\276\0234\224\275X\315\032=\024f\006>Y\200\232=\365\223\312\275\242\000<=\2702\235\275\250\361\306\275\006[?\274\325\300\223=\302s\034\275G\037\347\274\353\031G=O:}\275o\204~=\265\316\212<A\346B\274Q\310\024\2765\350*=\261\022\321\275\'\374>\276\334:\345\275\261W\244=\327\226\372\273(_\216\2750\2754=\323\273\206\275\001\324\221\276\222I\263=3^N\275:\022c\2760\242\272=\036DD\275:\005\200\275c}\254\275\314q&\276\207\272\212<\236\362%\275\240\'\213\274\322b\240=)+\341<&\360\243\274)]\260=\314U2=\307U\\<\t\247\240<\310\021g=}\374%\276!?\256<=\035\037\276\356\321\000\275jP/=\033\235\326\275\322\227\253\275U!\030\276\377\267:>\306J,\276\265\250\033\275\300\277\230\275\236_\010\275\020\225\032\276\\\003\237=\000\307f=L+\362\275R\204\014>,bP;F\345\350\275\305T\005>\253\201\213= \337\246\275\016W\252\275\264\364\272\274\365\340\261\273\006d\231=\270\317\262\275\2306\261\275\t\372K=`\3134\275\022\\\014\272\032\312\211\274\20028>rY?\275\014I\377\274n\002\367\274F\311\n>\357\033,\275\274\250\026\276\302\364\324\275KJ\243=\340\032#\275\342\353b\275G\020\030\276H;\327=\302=\036\276\016\212Q=\025.1\275\220\342\000\276\256\350\033\276t\321\214=\376\314\207<j\\,>\010\272\223=\036xo=B2\300<\252\262.\274\014\010@=J\351\021\276\314\001\367\275\276\251 =\347j\t>s\206\241=$\004&=y\232%=\357\310\036\276w>\230=\350\260\343=7I\032=\267A\236\275\363\201Z<\215\336\367\273\275\234\010=\274\265\304=;\224#;\246\177\264\274\370\200\264=*K!>z3\205=\034\310B\276_\321$;\370\347\316;\226\350T=\341a\300\274\304\024\177\275\017.\005=W\177J=2g\034\274\017\374\210\275\347\372E=T\227\t\275\235\345\010\275\006O\201:^\207\350<\007\205m\276u\220\026<\217L\325<\031^\321\275\366$\273<\333$_>\036\366q\275D\306\345=\377\001o\275\021\272\334\274t\310\303\275\340\024\320\274\2334\222\2754\202N=\231\362\300\275\010\n\275\275\3759\226=\203\376+:\230\250&\276@a\027\2755\223I=\362zV>d\342\036>\220\316S>a\272S\274\211\211\303<\200\253\317=s\342\372;\005\326;=\322\213a\276\332\023\t>\210\345\305=\242*9\275\330}!\275\003\032\276=\000O\320;\260\333\211\275C(Z<~\220a=\004|\311<\020\261\336<o0\372<1.U=\205P\016>\362\031\310\274\215H\374\272\'\007\342<\275\345,\276\312\262\354\275\037H\203\274\265\350\324\274\341\227\264=8;\022\276\231\2628=b\263\320\274\275S\255<B\205\236=\200\311j\275\242^\024>\272hQ\275_\346B>\362k*=g\372\"\276\322}/\276::\250\275\267\031.\276`\370\212<\236\326\023\276\261Q\201;\214\264\'<LF\272<\265ik=\2469\006\276\366\315\301\275&r\214\275yk\203\274c^\004;\301\013,\275\361#\260=\356\235i\275\220\207\256\275\211j\026\275\177ss=\207\221\304\275\230x\213=>~E=T\034\213=\231KQ<b\252\223=\033\237\377\274\360\257\366\273jG5=v\265\277<%\213\271\275\'\025J\274\2020\031\275\370\257\031\276\223\364=<I\030\373=\237\037t\276:\210\301=\353=->ZY\340=\313f\001\276\2319.>m\214\232\275\347\373.\275\234\377\017\276\020\211\226=#\273Y=\326\210\322=\276.\272\270C8E\2768k9=3\204\243<\361O\271\274 \301\355\275X\016\002>9\335\315\274\220\321\361\275\"\352\n=<\363\031\275C\233}<\315D\327\275\031z\230=E*\353<\177\354\326<\204\342\275\273\351\342\t=>)\217\275\'6\303\275b&\312\274\363i\036\275\317%\232\275\375\261\202\275\327Ab>\2072\270\272E\004\363\274A\372\265\275\303\\\342=$d\202;J\233\355<\246YJ<\274\210\247\275\003\371\225\275\216\027!=\230\253&=]\226\245=\230\245\266\273FH\256\275t\276\022\274J\330\276=\327\305O=\321\013\322=\304\0206\276\376\025a=l\031\000\276\210\213\205\275\nSG>\023(&\276G\213~\275\364\340\365\274\245v\276=\217\371\222\274\"\303w=\210b\n\276\322\255\241\275\240\303\323=\r\007\215\275\360*y\2756\307t\275D\301!\276\202\325&;\343\025\220<\037Q\313=\232)\230\275\240\377\010\275\375\023\275=K&\215>esS:\001\356==F\032\233=.@\346=\217aF=\007`!=K\332d\275\337\225>>\246c\272\275m\362_\275e4\177\275\245\3245>\236\254\352<\006\021 =M\264\371\275\005\334\206=\213d\275\274\233\017\236=\367\241B\275%\321;=\366\032\'\2754\032\016;_j;;\240\007/\275\257\203#\275\240\337\257=H\\#\273\206z\330\275\351\312e=\301\254\340\275^YX\275L\301A=\027\324\261<\232x-\275D\207\231>UU\300\275A\247\275=1\357\231=\\.\340=\210\270\271<\221\3540\276q\007,=p\001\323=\316\332\333<\320\273\006=\304\302\277=|\216E>\020\004\315<\303\202\224>\265\225\006\276\027\216\334\275\017WR\275\275O\226<\335\303\211=\213r-\276\231\324\341=l\362\323\274\212F\003\273=\350\201<P\261\177=2\214\217=\272\333`\275\344K\t\276\343\202\211=H\200\265<K\241\363=\275\216\235\275wq\024=\031\357\034:\303\353\032>\000\307\206\275\305\365\202<\212e\031=\315\351\347=\226\2444\276\261 \001=\253 \031>\001\300\200=I\262R\275\006\226\225\275\342\244\322<X\340c\274\037\021\r>L\231\335\273~\226\247\274nN\253<\307\231|\275$\335\233\275\032\265\377\272\363*(\2750\235\017\275eU\021>)\242\223\275\252\013\327\2752%\374<PR\374=\302\317\374=\252E}=\310k\'\276A-\271\275\305\255O=\377O\311\275\000\261?<j\032R<>\220\226=\r\242e<na\325=@\356\000\275U\366\031\275\257~S>\226\310\004\276aZ\275\274\306\202\222=Z\240\222==\240\214<m\277\'\276\214\305\374=8\370\260\275\300\257\263\272X\007<>>\367\031\274K\226K=\213-\212=\210[{\275!\206c<\372\034H>m\027\245\275\215\321\321<\2218\201\2758\356\225\275\3249\375;\356\370\303<+\265i\275\316\360\221=\261\016O;%\251\332\274\243\237\212\275D\350W=\325\236\030\275\231\002\362<\257\001\347\273\031\367\271=Lz\014\275\344g\231<${\233\275\3231\277\275\224`\336=\014\325a\275\246\3410\276)<\324=\324\255\013\276\2123\253=\2142\215<\270\262\256=\247\323\016\276Eo^=JH\037\276\231p\215\272\016\324.=N\227\t\276\364\014\235\273`\240g\274%\343\004\276M\274\253\275jX\313\272\233\342\233;f\330\254<\273\232\021>,\224/>jV3\275\366g\257=\364`0\276\274~<=\301 \033;\246N\020>\366U\217\275K$`\275}k@\276\314\340\356=2\374\232\275ynA\276\243\003_\275\233\177\222=J\001\330<\206\375K=\326+\315<\256f\213\275\207\031\327=\217\360f=\275\023.\274B\347\221\273/Y\356\275\247h=\276\304\017.>\347\311\375\274l\201z\275\366\000\301\275bc\023=\331\341,>r\025\207\275mk\330=yq\030>\350O\347\274l[\244\275\260\205l\275L\234\014<]\":=\253\334\001\274\262\343\323=t\020]=\266H?=\375C\205<\335\275\033\275\022\274\\=\251\303r\275\036\032\220=\3557\235=\302\0363\276NM2=[]\322\275w\334^=\034L6\276\246\375w\275\333\351v\2762\265\235\274=j3;;\340~=\317\253\007>\310V\n\275\325\021w=pTY\276c[\326\274$\224\010<\272E\022\274\000\371U\274F\336\215\275\261~H=1n6=\353E\217=<\234\230=\334s\350=\215\356A\273\200\352\016\275\263\332\207=\'\r\334=]Y\356\273\363\325\206\275\335\333\332<\031e\217\275\345C\361=\360\357\244\275X!;\273\340S\226<\206BY\276\254\266\221:/\227\007=\306\230o=3\231#=Q\233\247\275/X\342\275\352(u\275S\023\270<2\301\312\274\t~\034\276\253\311\276\2759\367\335=\206\3224\274\223D\373<\024=\007\2763\234\007\275\224\230\324=\362|\216<53V=! \346\273~\341\340\275\336+P<\241$\242\275\nn\266=\350\265\221=\367\222\010\275*vX\275\255\370\204\275D\351\340\275-\2746\275\212\356\003\276]\\\276\275\254\255\177=\2375@\275\336EB\275\264\330\017\275\224B9\275*\200U\273\035\000\252=\347-\255\275x:\343<w`D;\032\000\310\275\321\275\266=<0\251\275!\352\337=H%\264\275\376\354\252=\303\240\214=4[|>\320\177U9\321\352\336\275\2310\372\275\2274\333\275\266\370\350\274\357s\353<\007\033M>\312D\017<\207j\347<3\021\313\275\221\373*\275-\366\303=\223\204\305\274bz\010=\360\227\340\275\331@\375\274\327\277\020\276D\217\205\275\357x\204\274\245\260\352\274\216\312v\274r\341\031>&\3653=\332\243T=\23189=\256\327y>-\307[\276\r\027$<\211\232\347<8\362\021\276\343\350\210\274\230\310\302<\004_Q=(@\230\276\336\031\340\274\347\222\242=\307\3727\274\247\253\212\275t~\003>\363T\273\275\3273S<\216\377\376\275\303\307*\275\355\222\251\275-h;=\225\342\200=*y8=\264\231\035\276\030n\254=\352\3713\273\244\327\177\275f\327\214\275\253=\327\275\2529\013=k~C\275\324\364\304=K\216h=\035\216\034\275\251\035E<\024\250n\2766\352#\276\017\222\351\274\003j\245:\220\022\225\275\240\343m\274Mj\223\275\305\212W=o\016\374=\t/\302\2757\377A=\375)*\275_\000@\274\377\023D=\325\244\030\273.\3668\276\370EW\273_0\223\275\270\000\240\275<\240\336;Y2b\276\241\003E>]\222\037=nu\t\276\\\034D<\332N\250=r\350\367=\253\276\230=hj\232\275\356O*;\303\217\021\276\311LC\275%\362\255\275)~\371<\027\t\203\275\374\005\343=\331\352\373<\014\033|\274\345y\000\276\240J\003\276\353\346]\275 h\035=\243 \271\274\257\004\347\274|\242\207;\254;\201=\2113\300\275;\266\025=\363\252^\275\037\367{\275d\334\367\275\313\023 \276fx\316\275KBt\2767\234\234\275\313\'T\274RA\010\276\034U(=]\036\265\275P\234\n\276\307a\221\273z\362\037\276\210g\215\275\256\376\225=\250\213\027>L\276\221\275E\233\033=X$\207<^\030\364\275\253$\025=\205\267\216;\234J\306\275\255W\354\275\252b\212=\031E\367=f\215\236\275=\307\265\275\2745\326\275K\030\323\275.\265\333\275\027F\352=\350\256\n=1\"t=B\365\312\275S\206\305=X(n=\216l\207\275\372\244\316=&QT\275\237\311\211=\337\264&>q9\004<[\327\375=H\242\313\275\210X)<\340F0=l\036}=Q!4=<\034\300\275DRc\275\225U\233\275\340VZ\274{o\037\274\334\202\365=_G\020<\355b_=t\250S\273\035\010\007>uv\037\275l\177k\275T\272{\276\013i\310=q\216m\275b\307=\275\224\303+\276\260\365\326=\214\302o=\'c\002>\2365,\276\004\024\316\274B\010\342<(cb=R\315}\273Q\302\021>\205ex\275\303`\3709\305c\307\275&x\211\2720\315D=[\262\264\275\342\334\007\276\014l\252\274\006\372\003\275s\330\330<\221\235\265<\325\340\272=\200\373\245<\316\364\257={\272\024>\367\243\010>a\331\242=\267Z\006\275b\002\341\275\315\333u\275\021\263:>\227\231\300\275\373j\020\276\210W\273=\253\335\301\275\364n\314=\311m\235\275JT\222=&4\260<\026\024\247=\237\264\221\273\177\243\341<\313\030k\276}`\210=4\223\t\274xv\021= \000\250=\004\372O=\r\343\014\276\312\330P<3s\223;\211\037\024\276\344\301\207<R\373\213<\212&o;If\n>\213-\233\275`\252\235\275SN+\276\367>\362\274\007\247}\276\3363\323=\003\3710=\225\317\373<\272\006\372\2741\r\265=\005a\202=\214FX\273\205\367b=\323\301\346\275S9\264=\210\257\215=\222&\014\275\211\271\247=\230\216\352=\357:L=OU\340=;\310F<\326\353\243\274\275\"\241\275\354\305\014\276\t\321!\274\362\214(\276\260!\263=\353r\037\274G\232\014>.{V=\004\231D\276<K\337=\307\312a\275{\317Y>\200@.=\366\267\335\275\371\327N=\016\217\316\275\211E\243\275eS\353<\372\022\202=4\207;\275u\032\210\274\231\032~=\302`Z\275)\306\351=\303\305[=\314M\033\275\007\232\303<v\367\303\273CiA=\177\032\222=\300o\312<\010\022%\276Z\250\256<4=r\275\324\232!<\3313\273\275\243fH<\231\257\305=\t@\303\273\305\031\315\275\257\373)\275t\205Z\276\217W\017=\2606\304\275\256\002\020\276\006rV\275=D)>\364\302V\275\271U\360\275\030a\266=\373\373t\275\243\323\r=\363\001\233\273\316,\362=\342~\322\273\016\373\276=Y\333_\2749\355\330\275)=\251=\264\210\216\275\332\177\303\2759\350\372\274T1\025=\322\213\002\275z\233\001>S\264^\275\261\264\t\2756\373\203=\254/\t=\342\016\027>\225\215\305\275\002r\215\275\202Qx<\203\007\357=\364\226\205=)\035\256=\331\315D<ee\240\275L\364\324=\311{ \275\340\376\264=\306\277\221\275\005F\212\275\013\341\320\275\304*l8fy\013\276\201\366\010>\220\237\260<-\006\270\275:u\014\275\251Es<a\375\257=\303\004\312\275\252M\264\275\013\237\016\276^\306\017\276L\232M\275\344\270\246=\366\224&<\303\340\036\275+g\310\274\225\300y=\336C\001>\272\202\310\274,J\361={\300\255=E\213\271<\337\347D=D\256Z<%\277\256\2750\246\267\275\341\013\022\274=\311\316\275\263{2>!\346\270\275\210\007\312\275\202U\017\2751\317\020\276A\275O\275\003\241\353\275X\307\214\276\366n\'>\233t\260=r\260\005<\266\023l=\276\321\273<\022\254\n\275s\255\302\275\354\323k=\343\211\031=\260r\271\275\037\327\020>Lg\207=yf\226=\340B\3609\313\254]\275}\013\372<\344e\222\274\224\026\357\275\375\216\305\275\203\202F=\344o\020\2754\245b=U79\275\017VJ\276L\312\210=\316bW\275\273\263>\275+y#=\002\0062\275\035\343^\276\'@0;\260%(\276\203\236B=\305,O\275[\331\241\275/l\023\275\027P\362\275s\007\221\273\344\220\213\275\213c)\275C\307<\275\367Xq>ch\031\276\270\t\037\276\030?5>(\221\027>N\311\036=\234:\t>\324\031\230=\030\303$\275%G\242\275\003w\346\275H\272V<\227\303E\275\320\322?\273\256\312\255\275\214\233\354=\003p\303\273\037\347\006=\374\332\203\273_{\216<\'~T<\246\306\344<\225\371w=\250$\305\274W\345A\274\001\352H=.nK\275:?\235=\250\345\272=\202\003\312\275n\355\325<\317q\004\275\313\220\270\274\246\212\260\275\240\371\275\274\2726\375\275\204\276\360\274\2021G\275Y\276T\276\244?L\275\225\005q\275\334\337$\275U\214\022\274\227\263&\275wV\324=\2504\022;\370\353\023>\210\332\022<\230\014*\276\336Q\021\275\306\334\351\275\220\200<\275}\223\256=p\347\004>\215O\332\273\366\031\376\275\340\236\227\273\216\240E\275\320&#>\324\024\234=\232%\346=\350\211(\274/N\256<\246E\337=ie\207\275\232\336\257\273\313Yd>\024\242\303;\204&\004\273\314A\035=\017\215\206=Si\363=\253,\352=\247\374]\275\300\344\330=:\340\215\274=\375\364=\"\013\336=\002\367\341\273\212\177X\275\335hk=\240I\305=\320c\212=\337\266\301\274\355#\352\275\374\0334;\365v\207<\326{\316=\025\347\024\275l\334\304\273\203X\027\275\242\357\022\276p\311\217\275{$\326\274\210\270\214=:\314\035\276\321;\343\273\320\024O>\035i\344=,\034Z\275=t5;c\365\274<\315\323\226=g+\327=\332\311\\\275\222\361\004\275\r}\272=uO\t\275pM.>\361\215\226\274\036\310\230=\"|\224<\246\216\034\276\367x#>\324a\316\275\3005\224\275\253\034\031>\332\020\271\2753t\256;g\260\377\275\201\023\024>(\255\363=j\215w\275\035\237\036\275n\217\362=\rd\254\275\261\025\027>%Sa\276s\353,=\322\206K\275N\303\234\275[P\200\274\217FJ>\271\323\310\275\302\n\233\275lz\206\275z\304\210\274\202t\n\276\267 \231\275w\213\023<\365i!\276c\257F\2761R\242\273\335:V=\324\346\322=\236\033N=\356\312\034\275e\352\300\275\302\324\300\275n\032\351\274\020\350\323\275i\024\031=S5\362\275\034*\212=\370i4\275\361\327)\275\336pz\275\032p\005\275 @\206;\371\223\231<$\243\241=\244\217\237\275\321\206\261;\214\334\207=Q*6\275;u*\275\236\212W\275(\307\367\275\265\201\220=e\227\016\273\252P|=\2577\301<\245|F=GR\300\275\223\360\224\275\253\225\357=\337i\351\274b\014\003>\2369\'>E\346\014\276\223\0218\274\223\200\367\273\210\242\371\275;\315\036\275\251\003^\275\253\224\255=D\217\033\2757\276<=\022\350\300=\001\322\354\275\204\322\247\275\035\251\027\275\222\261\266\274\206Y\324\275\311\017\215\275t\266=\275\376\343\353=\241e \276\']\006\276c\237[\275n\333{\276\213\273\260;^\325\020\276\231L\037\276\341nZ\275%\2174<T}\235=\340\321\206\275\335\241\352\275Z\312\272=F\371S\275 \270\207\275\367\330\024\276\352Bw\275\241\240\244<\272\361\251\275=?1>\236\257\365<\201\367\376=\360\210\r\276\355e\205\276\340\266\207\275\017W\000>t\t\376=\377\256\227\275 LV>\347J\230\275\372m\201>\334\327\361<\213N\302\2759}\254=\316\303W\275r\033.\276\021A\375\274}\215m\274hB\231\275b\271\214\274b:\024\275\344\323\032\275sb\261\273\311z\362=\201\273(\274\001\031~\275\204G\024\274_W7\275J]\242=\205h\351=\177\231\262\274\231\332\347=-\246\223\275\371\246\370\270\333b\200\275&\255\203\275oa\210<\324u\322=\334q>=\214L\202=B\206\t\274\007\006\365<\331\313\030\274\274\335*= Y\372\275\265\326\324<I\227\360=\017\006\007\275\234\355B=\310T\035\272\363\n\242<\305X0=\t\336_>\265\201\254\275i\212\346\274\275\275\253<_R\206=\237S\030<e\034\3138\034{\035>>x\355\274\236%\340\2755\353Y;6\351>=\307\355O<5A\005>N\254\">5\253\256<@\030\027\275\244\371\243\274\257\213\031\275f!\316\275+%\316<\323b\'>\246n2<\216\334\030>\322Y?>\367(!>\322sF\276\250\277\310=\242F\013>\333\362O\275\362t\';\263\260:\275\274\365\353\275g\251\252\274\263C\"=\306x\"\2766\315\360\274\r\207\302\274\345t:=w\355[=\265g\352=\024q\033<\361\014\003>p~\243;\357!v=\321&\306<p>\256\274pA\323=\274\220\302\275\242\321:>\254\340\357=\005\021\003\276h\233u\275_\246\251\2749\207\316<s\\;<a\375\361\274\262\233\253=+\224\033=D,\013>\\J\374\274\222\322\256\275Xe\246=\006\324K==i\210=s\303\214\273qS\033>:\204U\276\037\212\323\275\245\327\245\275\255[\350\275\310\224\374=\225z\360\275t\315\310=\300\351\032>\021-\n\275v\001\212<\021\263c<I\365\351=c\323\341\274\212 e\275U\337\222\272\344A\310<\211\215\362<6\361\216\275$\365\215=3a{=Z\376\205\2757Np\274+9\336<\004\"\271\275\376\304\203=\334(r\275\223=3\276[\337\007>\201D\215\275y\306\200\275\273\254\346=\364c\265\274\240\366\307<\3062\362\275.\177\305\2758!\334=fd\215\275\203\325\276<\331M\201\276\301\025$=R\341R:_O\236\275*\261\265=G\213\267=\340k\336<c\221\345\274\234=\036\276dB\330\275*\037\244=\223v\241\275pK\214=\214\253\365<\244\274\206<\226&\333\275g\225\204<\226W\246\275%\260\273<\323\343=>\017\305\017;y\004\227>\205\261C\274E\340P\275\302a\000\276yYZ>S\247\343;.=\234=f\353S=\360\372\252\272N\357C>\206-\010=\223\350u>\201\370\022=1\322\256\273\341\236}\275\217 5\274\340\342:\276P\331\372\274U\005\257\275v\213:>\354\263\224=I\010\010\275\233\256\225<=\360q=\236\025\357=\204\202+=\216\2603=\315\363\227;\352\363\237\275\014\\\257;\260\307\013\276.\203\205\274\033\331\255\274\214\327,\275\2432\263\275\336\261K\276|\'\022>\224\017\315<;P\215\27512U=\346\214\251\2754\354\t=\035\326G=\325<\022\274\t\356\004\276\234-/=\327\005\233\275\331c!;K\214E\275\270K\304=\202h\340\272\376\253\330<X\254\367=\340-]\275\350y <\256p\312\275\375##\276\3666L=Pk\215\275#$\253\275\250\n\030=\332@M\276\335\030\330\275\254\237P;\256<\355\275\">d=\265\327\306=:\n\263=\030\014(\276\3056\337\275\325\003\032\275\271\365\254\275\n\321\261=4n>\275A\272\002\274\252b\375=\013\t\337\275\371\231\216<\376\215\036\276\036b\220\275\345G/=\366.\355=\205\246\242<R\334\341\275\275\260\037=d\225\r\274\350\376g\275r\313M\275\016\213\232\274\'R:\275\337\271\230=j\243\326<\257|\216<HWv=\336\223\207<%\022\020\275x\215)\272\221\245\332\275q^\347=\2626/=\217\203\323\275S\372%=6\031W\275\023X\t\273a\320\000\276\030\014\254\275;)\326\275_\006\202=\210\027\210\275\372\024t=\255\020\022\276\006\000\230\275\007\357\275\275,\336\010\275\266\346\017=\225{\272\274\211\202\005=E\260\226<,\322M\276\247Y\331\275\253\355t;\371u\204=\355S\272=^\253\327=\207\360\234\275\216\021\035\276+\316\024>\207\330~={\0316\275\027\231&\2760\026A\275\'\300\321\267\375\241^=\023q\247=6jO>r\020#\275\t\035\003\276\354\307\201>\267\277\361=\027\225o=\217\201\313=\327\037\335\275\237\363F\275q\265\002>j\226\217\274\322\325H<:_l=\227k\215\275\323\352\223\275\330\353\322\275\202l\276\273}m\251\275F\r\342</e\373\274T4t\275\023\304\335\273\237\3249\274?\033\020=\2717\313\2748\200\023\276\255\374\007\275xpU\275\360bD\2752\342\\>\256\306\'=;\372\306<\000\221\3118*$\027=\2603\037\275\316\004\017>\272\304\253\275\241\000\363\275sK\">i\232^\275\275\017\177=\216\354g\275\250\326\231\270\377\314E>?\303\326\273\310\024\267=\337g0\276\016\024\270\275\245-\343\275\302#\215\275?\nM\275\322;\374\275\325{G=\261\240\206\274\241>\032>Lg%\276\314\237*\276\254\361\232\275\325o\t\276\031\206\033\2746o\214\272~\261(\27518\333<\265\321\037\275\323D4;\266\261\326=hDb=!\325\266=\377i\350<Q\251$=\263\353\001>\32239>\264<u\274\332P\200\274\315\263\003>\341k\324\273d\003\"\2737\300\210\273\344\007\003\275\037\263\241;-\024T\275e\001J=\036\331a\275\017o\'>\255\265\352=\017{\035>_\227\251<\027\370\271<Hm\322<\225\026\232\274\\\216_\275\272T7\275\276\310<\274qu\335\2750V\243<\000$#\276j\355\023\273\317Y\277\275)+\234\275#\262 =;\210H<\305\303\010=\332\376\210\275{\211\225=&w\252\275\267\277\035\276pz\210=%uz9}\346n=\245\215-=\324\340D\275\351\251E>\0263e\275\313\301\375\274$\"\314=x\211M=\377\247*=I\322\375\274\222\233\215=\032a\243=\222!\330<\242\214+\276`\214\261\275\177\200\306=\006\017\005>7\251\327;\217\251v=\037\030\362\274\n\343\311<!t\354=\215\347\206=\336\337N=\374.\010>\336\336o\275<\231\222=\014\263\365\274\274\227\262\274\261\367\336\274\334?\203\275w\3301=&Y\233;\276\311\033\276\242\307\230\275\223W<>\343\211\215=}s\317\274$\236H\276:\033\037\274\214\361\217\274\213\327\340\274\022\222!>m\246\377\271ZUR=\375\327\370\274\257\260\273=,1\374\275\000\262\020>\200\005\006>\237\n\264=\301w\310=\351\351\223\273\247\024\206>\300\362\370\2747\354\201<\211xS=\275\235\242\273g\030\221=\233k\303\275\267\227\022>\313[\267=#\375)>s\022&\276r\375\252\275\342L6\276W\220\356\275\213\325\340\275A2\267<\177\374\007\275\010i[\273\350\250T=\177\030\352=O\340\227=\225r\030\275w\212F\275\033@u\274C\216\227=\227\035$=\267pS\276\320C\350\275d<B\274\001nO\275\334\300-=\037b\210\275\371\373\237;i\243\206=\274p\366;QE\342;\274}\221\274\'y\210<\2419\346<\343\267J=\2530\234=3an=\247\205\'\276\000\213\\=4?\225<\306T1\276q\232\235\274\201\250x\276Y\263\220\275,v\223=?\253\316=\017\2405\274Ry\311\275\203\361\365=\335d\265\274\236\230\205\274\311U\337\275(\313\264\275h\2306\275\220\234\t\276\003P\311\274~]\320\275\300\267\030>q\2544\275Z\314==\374\2760\275\365\n\360\274\236\304o=\014l\035=\023\261f<Y\253\350\275\325\334/>v\261\233=e\220\013\276v\321.>Lm>\276\215\221\235\275\215c\004\275\261 @<\267\320\267=p\307\337=Iu\240:E\365{\276\334^\r=`\270_\275\306\265\376=\2743\201<\305,\004\276l\266[=\277\023\214=\036\330\033>\347p\206=l\345\303\275u#\361=\252\270V\276@;>=\353g\250=,\310\r<\221\306\272=\321\346\236<9y\242=RV\241;\343\n\023>\242JJ>*\027\323\273v\013\005=\253_\033<K&\261\274\000R\341<\356\337y=\036\025\372\275\307\300\\=!w\202=KM\226=kgY=\367w\350\274\036K\033\275\356\232\212\275v\357\220=\217\373\002\275\311\223%\273\000Z6=\002\200\311\275\370\022\225\275\031\252\224\275\353\365\315=\365\225\001=J\314\267<}\245\r\273\312\017\027\276\032\300\312=@ \325=\221\212\350\273)\020\306\274\350\365\204=\244\002e=\300\235\2379U\336\320=%\267@\274B\245+>\236\354\344\273\215=\031\276\351\t\000>\317\267\237<\352d(=\324\266\253\274R\321M>F^\006\275\224S\007>G\235\372\274v\327\327=\312\271D=\326A,<S\327\030\275`#\234\274/o\212=\006\007\246\274\'w@\274H\255\303\272\254\322\007\276\253=\026\276\327h/=ZJ\336\273\264\t\033>\303\257\t>\\\214\253\275\220\357\321=\246C(=\315\270I\275\272L\017>\023T<>H\033\336\275b>\242=\354\314\240<\207[\212\275\222}\340\275\372\002\206\275~\314\232<|\332\223>_HZ\276\266`\224\275QB\263<\335e\213\275\223\270(\275s\270\243=\321Y\213\275\204\200\002=A\311\265=\251B.\276\217\370&<>-7\272~\200>\275te\025\276\365\317\374\275w\337\363=\0221\263<\010~\346<E\023\336<\21324=\343\024\313=D\277\340\274\211\345\267\275\262\213\255\274\216F\322;\327m\024>\374\014\317=\353\370\373\275\304L\017>U\221\014\276Gv\226\274\001\247j\275s|\347\274\350q\254\274\217u\222=\031lK=z\370\310<@\255\232\2742\310?\275w\020\206=\346s\003\275\320\361\331=\1773\241<\204J\261\273\3124\303\275.\305\032=\310?1>\322v\007\275P\\M\275\263\335\350=\357\227K\275\357\345\027\2764\352\247\275\210#\013\275\236\027\224=\371\350\204=\322\027\206=\300\346\274=\027\3403=\327\224\311\275\332\274\234=,G\241=\365N\307=c\235`=\256\250\366\275nL\031\274\250\222e=K\272\367\271K\241\350\274M\003\343=Q\255\231=\211\2211=l\025\320\275\306\210\217\275\254\313/=\266\264\316\275\345\337A>\212\303\306\275G\275:\274\306\254\205<\350S\214<m\305A\275\272\221\373\275H\207h<\265K\377<\314\241w={\003\007\275\n#g\275\264\\C>\221K^\275&\261\024\276\273\026\016=\337U.\276>\016\244=#j^=;s.\275\230\240\266\275\321\336/\276\215\345^\276\355\252\247\275\363\233\373=\272\274\r\276\006r\357<T\256\272=\236\355\200\275\022\256\360\274\2749\273\274\313O\200\274\273\354\221=P\263\230\274\265V.\276\'\237\367=\333:\214<\242\350\001>\320\301\346\274\257\205%\276O&T\275\005=;=\034)\206\275\275\026*=M\247\030>_\366+\276|>x\275\257\276|<\366)\201>tY3\275\363\324X\275\325[\221\275X3\017\276\013;\206\275<\233\034>\310\262\232=\234G/>\321>\311;z\210B=\025\227\"\274&,\252=J\0214;\352c\312\274\200\307\214=*\2648\275\340\013\031\275\353QB=/\271\264\275_\364{=F\252\003\276o\361\t>\007/\244\275_\n4\276F\262\355<\262\n\311=(\233\320\275\333\363\207=\325\005\246=\372\016D\276!8\245\274E\0076<\273\206\314\275\303\231\227=\216\212:\276\302\235C\276`L\367=\247t\247\273\034\327L=\035\026P\275R[?\276\301\'2>\220\336\025>\364a\264\275\271\004\010=\2755\210=\365\323\201\274\347b\230=\305\330;=\014\264\212=\350\353\306\274\366_\357<\037\354\242\274\231% >6ay=\305\315\331=\364\315\330<\024\"\333\275z\353\t<!\200\033\274t\315\216=\340\024\317=\003\330\035\274\303\301\227<\234\252\200<(fp=\357\0320\275\203\006\017\274ha\025\275\274\315\247=<\225\375\275\325ep=\033T\204;\001r\347<\254\375*\276\363\031\034>\277<\034=\004n\320==\023\242=\205d\001\274\362T\356\275eU\354=\273\342t\275\244#\021\275|\323\210<J\345\n\274\333 \245=*\323\027>\365+\322<rc\036\276Q\260\373=\311E\260\274\212\340\265\274\267\340\336\275\n\234\235=*L\226\274\227\242~\275\322S\230=\365PF=U\021\213\275$\212\016\276cC\222<lt\220<\226\321\350=\241\006y\275\217\374/=|\303\346;#b\"=\211\'\362=\324\222\177\275\265\372\326=\244\357\261\275\036$\n>r\263\345\275\207/\t>{\331l9\346\302\314=\247\257\367=\214d\236\275\263Z\255\273\224\225\300\275\360\037\363\275\013\233\214\275\317L\006>\001\0017\275mA\366\274\2161\361=\340,&\274KE\246=$i:>\257\3311<\362\014\270\275\204\215\217\275E)\377=\177\222\354:\241(e\275\357\346\';\020\217\317\275\242w4\276v\311\265\274\363+\262\274\003\243\331;\274\310q<4\256_\276\224\n\266=\344\354^\275W\204\305=\2354\360=\257\2156=s\322\273<\3048#=V\2110>\321\026&\275\265\217\367\275X\324\217\274\306\341R\275\345/e\275{\013\304=\344\210\310\274h\314J=Y)\211=\2775\317=,\371l\274.\342\237\273\300\205N>\322Q\230<\211I\230=3\374(\274>A\243=\360\300\207\275\001\257\023\276HO\220\270I54\274\010\274\034>\033<E\275\303{(\276\356\215\272\2754\227\371\2748\310v\276\212\236P\276\3132P\275\314\205\374=\212\272\264=\231\347E\276\274\200\034\2764W\032=S\016r\275}\274\341\273pz\315=<\373\006=\366\264 \275\256\017\374<=\037\004=\'\231r\273<_R\275)e0\274J\354\326\275\n\266\236<\204\020\005\276y\224\342\275=Y2>#\020/\275)\375\334\274\362\225\241\2725\202\007=M\021.=\315\232\357\275w?\032\276y\027\245=F\236R=x\365\247\274\243\245\227<0\264\221=}\306\005\275<2K<(\317\225=\002S\247\275\372`H\2751\307K<Td\231\274\357\3339\275\037j\203\273/x\325<\204W:\276\n\334\026\274\222\246\324=\363\274T\275C\311:\274\373\245*\275\002W\305=\245\276D>\321T\371\275\235\027\344=\222p\327\275\360\220-<\313\314 \276\200-Q=\230\035z\275\004\'\236\274\005\002\013\275d\206\321=BhN\276\375^\206\274;4\"\2754\263\r>6\r\032\276th\023=D\326e=\177\314G\274l*\274=\254{X\272V\225:\275\276e\231\274\341\275s<b\215\266;\001?\n\276M\367\362=\244F\033<\251\253\237\273\345f)=.\273\002=\253R\226\275}\346\267=\200\202\266<e\206\037=q\246\372=\t\327\223\275\363y\000>+#\037\276\301\n\310<\0059a=\325\003\375\275S~8\2741\236\333\275\371\203\371\274|&\'\275\262z\314=\340F\240\275\212[\265\273\260\226?\276^\265\246\275\345\033;\276[\317#<\232L\351\275\272\274\236\275\352\3778\273\226\364\276=\304Cp\274\352\373D>\260\331\350=\277\304\302<l|\331\275r\324R=\016M\271;\340\003y<U0\301;\000j\357\274\313\356P\274l\262*=\333>\273;\346-[\275<x\327=\265t\312\275q9\356;f\370)>\210\022\007\275S(#\276\260\371a=\231G\320\274\016)f\274\3631\214<)\316d=\213\265\310<\245D,\275\234\273%<\2407#\276C\004\232\273\2755\274<u%t=\346X\217\275^\016P\275\033\261\021=\3469\330<\316#\220\275Hm$>\017.A<=aW=\243\277\252\2751\3628\276\300\276\343\275\323?7\276\257;\373=\310\036\201\2767\276\246<\364_\220=a`\252=a\004\271\275ac\022\275:\033\025>K\375\312\275-#6\276J\376\374\275\025A\250\275\313\346z=\270\265C<y)\027=\\\266\232\275"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2388061
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\257\3029>\315\323\210\275E\003\242<\242E\363=wP\r\275\205Nx=\235\005K\275\237\205\022\275\"\315\002:M\204\243;k\236\223\275-4\311=Gi\353\275\001\342\326\275\277f\362=\'\202\247\275\351\327\\=\300\002\355<\030\337\215\275\224,\003>\002\377\235\275\236\266C>n\305\325\274M\376\203=\341x\270\274\2123\212=K\313\302<p\224\007>V*\322\275\374Z\323\275J0\027\274\301\215\201\275\236\340R\274\215\257\341\275F\377\022=\266\3651<i#-\275|%[\2749\212\350<\236\255\336\273\267Ff>Lb\376\274\323\t\005\275\t\025_=d\266E\275\360\223\267\275\\\213\355\274\260<S\274\3074\000\276e\331\315;\366t\314\275\247\370\272=5d\351\273\244\266\276\275\253\007\345<\340\255\330=\"\000B\276\270A&>\025\355:=G`\277\2742I\016\275\265\206\032\275\3660\307\274\304\311\370:RC\204\275\377\365\363\275`\371\005>`$\340=-\376\356=\316u\272\275\310\302q=\232lA\275b\272I=\202\356\341\274\255\224P\275\021+\312\275\312\247\252\275\266\231%=\342\312\231=\207\'\271\275l\252)>\3733\021\275\003g\233<\207\023@\275\021\346\200\275\370\316\367=\203\241,=\241\3675\275\374\240\321\274\214\237`\275L z\275\206\335t=Y8\030>j0\361=N\000\204<\210eK=\270\356#>\322\241\373;B\233\256\274zw\266=\001\317~\275\356\307\036><\r\264=\"\332\013<\224p\216>\231f:>\225u\343;p\226\313=\351\031\201=\322\377\243;\270\363c=3\2145\273H\035?\276\305*U=\2563\n\276n\313\004\276\201e\334\275a\001w=\375\352S\276\273\342\274\275BJ\r\275\263\202\233\274\277=5\275\271\276\275\275\246SC\275\312\361\016\274\r_\010\276 U`\275\213;;<S]\326\275J\2773\276e\241\205\275s\270\302<\307\301\231=\363\264\307=E\342\215=\321]\261\274+\276\231=\220\261\220=\300#F\275\324\227\007\276{\322\304=\301\017\206=k\034&>\204\201\027\276\257z\211=\356{\004>L.i\275\212\t\327\275\327\216\320\274\3676\305\275\223\353`=M&\002=\254\356\276\275$\307\005\276=Z\017>Oj\335\275_\255\200\276\340\203\023\275\207\273,>\373\353l;\323\002\177=9\272\264=\310\204\003\275\r+\204<\203W\253<\010\331\245\275\325\363P\276\203\017\364\274M\226\321\275\265IU\274\355\000\236\275\031\032q\275\311\362\345\275\252Zd\273\372]d=\t\256`=\312\257\010=\332\252\375\274\037\313\315\275x\373\337\273\3560\027\275\217\260G<\236\355\215\275\222\034\346\275\314$\337<\032\2406\274\336\311\274;s,\254=\305\365%=\366m\263\275\303\235\207=\202=\247\275\254\241\357\275\323\316(>,\337\243\2749\336\026\276|\207\325<ha\332=\2050\222\275\242\200\201\275\\\222\217\275\\D6\275|\300\364\273\177\301\226<\234\203\023\275i\376j\274\220\306\213<A\377\202\275\212\250=\276\026\345\217\275\304G\236=\354@G\275pV\344\275N\240\222\275\300\316t\275V8\224\275~Js\273F\371\013=X;\"=\225z\207=\323i\210\276Jt\000=\221):\275C \001=f\005T>D\205\371\274\327^\236=.\306\236=vy\224\275\357L\200<\024?\322\275E7%>\276\237\355\275\367\225\301\275\r\246f=\0219\373\274\236\262\000>\367\033\022>xN5>\331.\007=4\033\034\276Hl\r<\216~i\275\272\022\025\274\347}\250=\377R\203\275\014&{<\177b\316=\223\201\205\274\223\344\232;\352\363m\275\264\302y<r%\016>\'I\210<t\335\343;\n\374>\275k\305\024\276\310\213~\273\372\005\321\275X\272g\275\325\323\262=\r\340\212\275C\177A>\303\006\257\274\206\343L\276\311\001G<W\2055=q:;\272\273\255\317=W.3\275w\362n=+\340\335=\321d\035\276\352\245y>@\345\317=\375Q\346=\000\250x\275c\021\200\275\360i\226=\343`\014\274{\233\010>|\\\257\275\222V$\275\030L\302;\027!\314\275\0005`\274\352\325\007>M8\021\275<g\214=\260C(\276\007%\231=\307\274e>1\337\016>\363\304\303\274\256\355\276=\206W7<\373)\241\275\231\205#\275@\271^<cs\273<\\\027\275<\225\373\220\274\2237\205=\020\275\257\275\010\245\323\274b\222\311;\204\337%>\202x\367\2759\001\005>\350A\006\275\367\330*=h/T=zJ\207=T\227\324\274\002\255\350\275\262\367$=\177\203\'\2759pW\274;\033\260\275[\302i=\251\016\202\275R\266\n>N6\324=\033m\371;t\254\326\275\244\350V<k\305\227<\3169_>K\225\007\276\2450\245\275\321\340\345<\311\314\266\275\001\260\301\274\210\341\204\275e\021\333\2757\2045>-\341\265\275\203\030\233\274\351\177/\274\2116\244\274\217H\230=\200\246\204\275~\254\236\274\017\376%\276;FU;\032\223\024\275\316\266l\275P+\037<jZ\302=\030\343.>\240\351\010\275\331\224\215\275X\220F<X\365\301\275\004\223\022>\373\014\006>\244\356\355=\277:\323=\036W(\276A\021\033>\267\346\307\274\256^G;\271 \006>Q$\206=\3139a\275\365\350L>DWh\273io\236=\326\032*=\303\361J\275\214.\343\275\004\353b\275\213\353\223\2755+x<`Z\201\275_\002\002>\345\367`\276Y )\266\325\037\310<\177\rM\276z\374X=\333\230\210;\365\373\225<\014\035I>-\277\267\274uBQ<\310\022\003=\213\005<\275\356`#\276\300\034]\275\256\220\236\275\271\325S\275(ka\275\370?>;\312\"\022\274\002\253\350\275\230.S\276a\267\n;B\265\272\275\200\253\352:\355%\022\275\n\376\203\275\233s\007= \336k\273\273V\370=\272\274\226\275\353\013Q=\272pS=$\307\307=\206\017\005>\260;\262=\216\240\271=iN\376\275$\023\260=\304\243\270\274\272\006\314\275g7\"=\334\026\305=\357\245\326=\303\336V=\364s\002>L\375\004\276\016\302e>\005B.\2754\230\246=\301\304\210\275u\240\006\276!\343\272\274\226\360\036>\362\264\020\276\253Ig\275\203\233s\275\343\234\334==O\020>\n\376\274\275\203\273\246<\331!$>\3456\017>b\216\250\275\023\320\342\275\325T\016\276\306\325\272<\0354k\274:.\214=p\301\264=\016 }\275\244pt=\275\230\315\275\211K\035\275<\273\3369\021Q<\274\222\260\r\273\014\037\016\275\372\020\005=q_\307=8\262L=\2252#;\0255\226=\361\323\030\276\224?\253=\362\361\214\275c\001C=S\316\237\274K\316\346\275\026\002\032\275\022\023!\274B\2638\275\2552\004\276\207v\372<8m,>\212\275\201=\263\372{\273C\366\013\275\206\373@>h\324%\273\225Yt\275\332\310\201\275\240\247\000=pm\"=\313k\321:\304Y\245<<\234\305\274\3567\351=&\275\324=\353\215!>\225\354\206=~1:\275#\210J\275\t\266\311\273\020S\023=\205\210b\276\330\004I\275\365\010\346=v\207w<\033\256)=\351\306\210<\361=\037\275)\303\254\274\375\317\252\275\370\363\215\275{\356.<\3677\236\275\377\373\365\273\330\261\322\274\034M\320\273\213\211j=\360\247\306;\316\227&\275:\366\240=\362\373\031\2733I\222\2757\215\344\275#\2361<\002!I<\306\240\301=y*\327\274\246\024\370=WT9>a;\246\2752\271\332\275\014\006\345<\361%\247<\312@o=\354\006\302\275\273(\334=x_\351=\343\222T\275\233_\305<\250\2178>\254\226P\276\271\245\323\273\365\336\212\274?\312\373:\225/\261\274\030\004\220<\274\204.=r\215\022\276 ~\323=\217d\337\274\212\242\244<m\\\367=\217v\371\273\202\010\370=la\326=!L\302\275js\016\276\376\360\254\274\361l2=\007\243d\276\014r\026>\343i\244\274\021O8\276&\370\306<q&g\275\372_=\273\022\252\204\274K\371\024\276\332\262\202\274\005c\034\274>\036\303=\374C\367\275R\031\025\275\026%+\276\251\027\203;?\313[\275\207\3113\275\2161\"\275\202\001\332\275<\004H\275\251\t\303=\330\311\025>=6\244;\t`\016\2766H/=\222#\200<Hy\306=\201C\247\275@u\342\2755\253\261\274dA\357\274\230\021\276\275\002\333Z>\272\203h=q\226\016=\026\275F>RjC\276\032\003e\276\323sb=\301v\t=\340\370\374\275\025\205\324=Cl\017=\261v\327\275\254\037\252\275l\026\356\274\342\204\202=\024rG\275o\340Q=\200\027\030\275|\204\212\274\355\300*>\331Qk\276\323\204f\276\204\243\027\275\352d\025\276:\300\024>\235\034\336<\306c0>\375\361\342= \027\341=hG\r\274\376\3369\274\372m\004\275\233\303\277=\310\322\377\275\242\334\273<S\240\323=\303$Z\275v\260U\275\273\271\233\275\005\267\\>h\311\277\273\224\376\212\275h\215\036\275\216W\225\274~^\027;5\252\226\274\335\215;\276\347\006S<VO\002>QBY=\374\374\335\275@b\272=\"jr\275_\320:\276\242<\370\275+\251\025>R\205\247\275 \310\200=\276\237\211<\243V\001>x\364a<\202VG>\377\215\031=\305\305\025=F\005\026\275\327\331\231=\335\260\025\276`\352\305=\310\326m\276\276\306\371;D\267\374=\200\303(;\242\347}\275M\017\307<\303\222\203\274\206A\352=\024S\352\274\276\034\000<\311\361\353\273\220L\315<\261\300\321<#_\t\276f\344\215=\274L\213=\2548:=q\306\260\275H\327\240;tK\231=\003\333{\275\217\215 \275\345\032b=\326\337\177\275\025\243\320=I\271*\2755\2044\275\245\202\t=<#\375\275`\211\232\274\306A\247<\340\220\306\274\2629_=I\262\253\275\023\212N\274t\310\235\274u\366\213=\177\234\206=\274/\340\2753\037\002=\345\364\235\275$\371l>\312\323\256\275\3043\037<g_\006=\355\347+\275\365\"\036=\010\330\016<\206Ma\274\201\022\223\275\014Q\310\275\343\223\230=\361M/\276\211y\007>$\313\037=\234:\346\274$\362\334\275K\354!\275UI\371\275\026p\275\275;\233\'<j\361T=\361\024\250=\206\221\247<&\032\312\273\343}\371<\240\224\002=\306V\260\273\304@\010>R\3124=\317;4\275\353Yy\275\031\030\367\275!;\353=\025-B=]\027Y\273\303\025\223=\001\003\260<\215[U\275\362\274\370\274z\345\345\273\345pz\274\241\375<\274]\351\225=\260\002\340\274C\375\354=\372t\204\275D\321\304\274A\014\313<\271!\233;\223\177 \275k\233Y\275\210\306\321=\214a\001>\342E\243=\330_ \276\275)\020=c\367M\276\351\300\245=\355K\013>H\035\354=^\010\036\276\347\216\364\2753\353\211\273\314X\370=\227\3338\275@\310\035\276r\225\273=\224\372\204\274\211G\233=\016\326\342=y\007\210\275\256oL=\357H\236\275N\272\034<\376\374]:L\036\252\275r\273\321\274#\306$=\200\375\254==\275\r\273\216QZ=\232<\252\275Q\300A\275\324@\204\275\025\030\332=\210G{\272\2321\274<\205\3541>_\'\004\2754J\273\275Y\212\333<}\355\224\274\r#\231=Tv\340\274\227\330\234=\241\222J\276\004\030Z\275\360\342\334=\323\t\371=`\370@>\312,\t>m\n\200=\233\333t=\026\335\007=\240I\207=\016G\320\275\261v\000>\321~\207\275\212\341h\275\317\204\n<(MF>,\334\220\273\361\375\343=%\215\347\275\252\203\261\275[\360\330=\364\373P\275$h\370\275\360@\265=c\303\n=k?#=\3044\013>\023\224S<\027y=>U\"\321\275\272@\001<\204m\323=F\245K>\315<h:e\377c\275\212\\\035>%\340\276\275\203\212\243\275\342u?=\027\212\014>\223\221\274=\177\241p=\325Y\375<\007B\224\274\325 \014\275\006\263P\275\266\\\200\275\231\225\361\275\242\300r<\t\254`>\313\213\300\275\264$\223=\236\312\006>\341\022\177\275r\246\335=iV\262\275\367`F\276\025\033\024\276\216Y\202\275,FS\275EV\377<FAo=\327i\225\275K\365\342=\376\242\240\274\005}^\275\352VQ\275\215\237/\274Gv\376<\352\207\250=\336\033\240= 8H\274J\251j\275T]$\275T\3154\276\367\253\t=\307\241\035=hG\342<\2024\014\276\214\262\247<\276\304=\275\0055\'\276\207\0146< \304\313=\205D\023<z\'\257=\343T$=\307\310\307<\332]I\274t$\000>\0301\242\274\247\013R\274<_`\274\262\227\273=\201\t\366\274\007\243\221\275/\210#\276\254@I\275\021\364l<j\251\216\275dxe=g\263\030>\002\0078\2758\027\245=\354\\\202<s\324\206=\335{\244=S\0009=\031\324U\275\205\334\032\276D\261\261;\237\373>\274\232\345B\276\321\315\331=D\007\234\275\200\257\251\275\0047\375=\367/\210\274\025\262\343<\001\0131\275\267\010\000\276\221C\036=\035\007\371\275i\035\276\274@\035\264<\201\325L=s\371\317<\371\212\273;\013\377\027>.\214\017>\317[\250\275\313\225\251\273\244\266\360=\341\272\317=+\273\316<\347\274_>\242\\\377<\030\220\346<O\215\232\274u\010\030=\245\222\213=\362\376\022\276\300\206j\276\253,\004\274\376Br\276\262\265\373\275\212\3510\273\302\364\256\275\344,\314\274!\320$=\270\243\365<\360\023\027\275S\354\314\275>F*=y\r`\274\013D\230=\037\006m>\022i\371\275\205\2525\275\233@\345\272\036Z\370\274\2128\004\274\255\034\026>\362\303\340=!\305H=\270\223\261=\316\034\244\2754\202><\022\267\255=\305\234\257\275\030{\327\275\346\361f\276\252\305\203\275y\211\324=M\256\273\274N\371\200=:\332\352<\352L~\275\327u\006\276\265\0160\273hp\350=/\337\223=\267\323>=$\376\271<#\3671=Q\013-\275\303\014\311=d~>=\021k8\275\2755\360=5\324V>s\234W=\263\357(=\356\353\370=\243i/=6\215E\275`|\345=kD\370<\'8/\276\251F\253\274r`\017=.\007U=\267\351z=\001-_=$\373\306\275\245\223\000\275XjV\275\275\305}=\316\027\217=\260\273\324=\3033\003\275\250\367\323=\276\225.\274\034\201\253\275\311\275$=\350\240\202\274\347n;\276^f\202=\240Hv\275\300\223\022=F\250`=\201\003\247=\023\\\364;h\235\264=+R\253=\333-\362=\363\026\006=q!\003\276\3001\376\275\274n\312=9q\001>\371\260^\274\277\233m=\014l\337\275\361\325\236\274=\213\243\274\215\3266\276\227\333\036\276#\364[< \007\014>2\226\317;\232\360\004\275\215\025\006=\022\037\266\273\222>\203\275\227\000\371\275\300\367\221\275\027\237~;\203\317\236\274N\372\325\275\265\353\234\276\254l{\275\202\275]\275\325\263\270=%y=\275J\367\206\276\033\024\376\2758#\003>d\263p\274\215q\227=\3073s\274\016\333\245\275\027%\010=4\320\353=\237\207\235<*\227\333\275u\374m\274|\327\251\274\242\222\342\275*\216 \275/k\335\274\237,M\276\201\261\024>${\240;{\217\236=\020\243\201=Bk\207\275Sn`\275Su\027=`\260\325\275b\023\217<\365\250\234<\277\364\013>\202E\343\274Y\n\351=\252\032\'=\376\353\n\275\264\364\030\276\253\215\034\276a\313\t\276\236\302\244\275|\020\320\274\225_\215=O \320\275\347\226;\2765\330!=\330\027\025\275#\007\352=d\334\013>\366#\200\275\226\334\340<\216h1=\375t\037\276\211\340\025\276\217x\013>F\014\333=\026\031\305=b\345\205=\020!\203=Y\340n\274\330IV=\302M==\021\021\025>`\025\024\275\023\272r\273\007\3408\274\230\177\016\276\341\327\253=\207\203\016>t\036\274\275\320\241\315=lr\345=\261\033,\275\324d<\275J\215\033;\361\355\223<\200\263\017\275\237\222\024>9\327\340=\274S\244=\236IY\275\200c\304=cG\252\275T)\203=X\214R=\276V\217=XJ\321\275\'\t\360\272\217{\\\275:\215?=\344jP\275}\261\'\274\016\303<=\035G\250;M\266\232\275\034\250\210=\177\200\214=;\332\364<0\r\323=\254A\270=\276\366\367\274\250O\217;\220m\"\275\023\327\207<\277#P\276I\304\317\275\240\261\013>\361\021\326\275\234\255\206=\311F\364\275\366\263\330\275;\353\303\274m\331\300\274\240\214\372=R:\334\275\360y\311\275\336\363~=kG\361<I\334\351<h\271\007>\"\273\002\275C\037\363\274\t\\\366\274`\302O\275\271m\374\275\r\260\305<\366\033\321\275\243%/\276F8a\275y\230\034\276\315\240%\276?\032A>\333\255\334\271B\252\333\275\253t)\275,\244\361\275\336D\007>m\271\323\275\272\3557\276F:5>\323\230\321;\371\303\230<XCY\274\247\205\267=\247\232\213=\315L\304;\363\341\260\275]\252\353\275?.\244\275D\354\371=\226\212\270\275mXX=y\212\347\275\002\255\201\275%\215\237<\222\322\302=I\"\004\2737I\010\275=W\010\275\211\332\267\275\341\345\033\276\215X\212\274W\273%\276xFU\275\314\007h=330\275\0260q=\251? =\031d}\275\215\226\">\232\226\262\274\322\270\025>\'\2751=U\000\255\275iN\331;\227\312\017>\0161\002<zg\302\275\3516\033\276\314\264\250\275\372bD>E\233*\275i\014r=\302w\362\275\324i\227\275\037Y\007;\322<\206;>\361$\276\375\260\017>\t\223\227=\213\203\033\276\'\212\357\274\315\210\253=\240%t\275o`\336=G5\304=j\203\211\276}\252\331\275\267\232$\276?\327\362<R\327\326=\035P\367\275\375\261h=\327\355\271<g\310\343=)\375\270=.\201\247= WD=0\336\225\275\354\304\245\275N\\s\275\200a\026=z\241\003\276\345\377\261<\037^\267\275%\2036\274\246\020\307\274\371\361)\275\335\261A\276G\025\252=\035\3136\274(\007E\275Wi%\276\231xA\276`6/\276\324k\322=\3332/\274V\010}\275\356\306\337=\376\244\203\275\276$s\275\035\2558:\364\371\217\275,0\256=\231\030@\275\225\211\215<\254Rk\273\246\026\302<\377\337\177\275y\'.>\363&3\273\237}\024\2765\220\324=eE\237\275\366\336-=\326\272q=?\363\373\274&\026\221=\210\013H=\340\230\271\274q\010\265<\245!\204=p\371\225\274P\327`\275.e\017>\310N\362\274\026W\322\274\213\316\362\275\312)\030\274\261\360\217\275\3417\227=\025\n1\276\2348\373=]\362\033\275\252[%\274\022.\362\275\326.\023\275\304\363\263=\22295\274/B\213<\345\370s=\ny\224=\254\307\201\274\214P\025\275\256\341A\275\304t\222\275\367FR\276\235\316b<\302\305\326<Xao=\303\354R\275\337\266\n\276\007Z\326=\261\224\350;\322\352\353\275q%2>\300d\010=\365v\276=\222\025\364\275\035R#\276xTz\275\250\r\241\275\2360\245=\306\032\361\274\246L\326\275h\306E\275\366W4=[+\"\275\233_\270\275\000\311\246\275o\244\210\275\013%\305\274\200\320\016\274\277R\274\275{u\336<\333\223\353<g\016S\275\n\220\235=\332\271s\275\326\321\271\275\031@\231\275\010\205/\276\271\317\227=\0376\002\2753?\222\275\300#\274\275\222\340?\275\314R\346\275\030\366\n==\223\213=\325`\216\275\215\035\260\273\257\251\260=c\t\250\275\032cR\275\214\244Z>\014\257*\275\266~\267=2\220\377\275\'.\272\274\032\313\342=a[\237\275HhS\275\310P\257\275\327\033\025\275\375\000,<\375Q\260<\361\341\247\275\320\275\234=\246i\037\274E\324\017=\266$\207;\330\311\004\276(\257\n=\r\036\367\274\001\3044>s\340\316<h\352$\274H\2450>\302\221\203=\"M5=\212A\263\275\021{\230=\335\255\345<\276\362\257=\231\215(\276\375t\345\273\016\346\252\275\242\334\341<\005\342\232=\221w\034>\203\331\261=\325\324)<\rd\365\275(\231\237=\032@C\275\2458+>\341\266>\275\303w\002>\366\351\347;9\274\260<a\374\211\275\240\320\030\272\255\253`\276f+\253<3\364\222\2759\230\021=\034\"\014\275\260\310\232\274)~\232\275L}\212\276\021\223\227=\323\367P=%k\315<\362\342\'\275hJ4>\231\317\"=\177\205\032\276\241\335,=\330\320R\275\270\235\250=\025b\256=\332\373\277=%\325\350=L\373\343;\315\350M>\351\245\347<\213\t\007>\313\324\204\275\214\036\356\274\214\334\t\276\311\0315\275\336^\301=a\201\030\276[9\200\275\312\035c\2748\302Y\275\205x\233;\201\323T>jk\255\275\177\253$>\2050\035\275\202\255\234=\035\315\005\276&\3171=\256j\244=H_E\276&\242\240<7\230t=x`\027=4\027\031>\334\274\241<\343o)>\313\200\341\275\350\232\005\275\262\303\214\275P\336\266\275\331\252P=\323\233\351\275\223\"\211\275v\014\017\276%\371\261=\352\256\034>7\327\340\274\341bw=k\341\271\275\350A\t>\223\307\335\272l}\'=\333\343\262:@\357\371=4\265\212\275\235\332\363\275L;\261\275\317\243L=c\316\021\275$\370\362<\241\304\201<ACA>\033\317-\276\311W\266<\307\264\251=\354\006\276\274\221l\307=\032\202\262=vE\037\276\343L\271<\030\244\001=S\270\304\275\324\244\250\275y\300\335\275\210bf\274\337\260\323=n\223.=\266\237_>\262\323\237;vE\327\275\340/\224\275\340<\275=i`\213;\t}E=A3\270=A\016M;\247YE\275\220j\212=\232\246\007\276\215\240\364;2\323\267\275\324\200\036>@\024\221=\225\253\030=\273\264\267\275\321@\211=\320\004^\276\351NM>\007l\311<5~D\275\246=\355<o\203b\273\362\000x\274\002\231\334\275g\216\003\275\326\0243\275\320\200\261=\313\242\232\275\256%\216\274\301\247j=\307!@\2768\241\314=\357F\264=\031\225\266:\264\267\"=Z\267\352\274\337\305\002\274\333\244\204<\355A6\2753=\362<\316\036\222<S\373\030\274\253\332\031\275\256\205S=\311*\000>\237\352\276\271h\370\017\276\224\274\233\275\334\2347<>\324\232=\2221\233<\334\331\001\276\232\353\223\275\234\247\240\275Z\251\310=|09>{Q\271\273\331\370\267\275\330\3227>\027\213\265<\360C:\275\225\215u\272e\344\\\275\003\337\035<\022\316\022=\271\277\255\275\233z\006>\374\321\225<\225\206\223\275\241\315\273\273d\303\246=u\020L=\271v\201\275L[\234=\213dJ=\031\221`>cf\250<\227\224\242=%5\036\273U+\350:d\002\235<d\332\314<\361:\312\275\346\313\006\276\002\031\264\275\367y{<\027\231\204=/\007[\275V\250\212;\t|\234\275\2640\201\275\333\356\226;\326\353\237:\001nW>|\222\013\276$\240\273\275\024\276\014\276\323u$\275\227\343e\275/m<>v\261\000=\007\3638=\354\220\031=\342\245\316=\265\224\013=\352\362\263=5\331\335=_\266\260;V\242\260<\371?\325\275A\321\277=M\351\"=\332w\375=?\267\310\275\313\355\213=\365\217)\276D\367\231\275\326w\340=\227\300W<\372\033\216>~\017\252=\005M\004\276\322\220\206=u(\240\275\3271\335\275<K\201\275\346\201C\275\261\315\352\275\204\177M\275\005\221q=I\335\310<D\344\034;W\311\223\275RPg=\243\254\203>v\202`\275V\327\225=t\314\356\275\311m\344\274z\3722=/\010\375=\251\206\356\275\037q\303\274\227\240\326\275\247:[<\204\034\022=\364\306\376<\264A\266<\005h.>\302R\'=m\336\024=\025+\221\275ow\000\272\021\206\217=\031\206\311\275\000A\303\275V\255[\274\021\'\037>\267\026\232=\312\223\023>-\255\251=\221\253#>\002\017\265=%\000\306\2758\344\237=\327\"\300=V\261\364<|\233\035\275M\250\255\275\341:\003\276\360\342\275<\331\237\203\275~\000\022\273N\321#\276\300\307\255\274\221?\305=S\303\001\274\216a\206\275\324?\253=\026]\272\275\255\322\205=\020\333\210;\016\271\n\275\032\001\374\2740\323\t=H\"\254\275EsR\275\266\027,\276\027\316o\274\260w\320<\201\004\334=\355\313\200=\036\025+\275\002\t\035\274mB\363\275\276\354\237\2759\367\237= \272\302=\306?\275\275W\262B=!\013S\275\374\343\350\275\010\212M>\334\372\340<\021+B>e\223\213\275BS\207=q\326\270=\325\363\314\274[E\261\275\236\021\365<\253vI\276\001o\251==iR<\226G\213=\365ke\274\361\033Z=\\\266X;\222\236\005\276[\336R=\213\374d\275n\005B=Q\037-\273\200\227u=hz\212=\315\226\201\273\t\204V\276\360\261\004\276dY\367\274\247S+>\340\266\327=3E\330\274}\225\005=3\3576=\200f\217==\t\025\275J\243\016>*P-==+o>i\232\206=\004\207\255\275W\341\267<\353\230\034>\301E7\275\223\020\303\275l.d=\232*0>\263\262L\275k\264\276\2752\227\263\275\267u&=\277\244\022=\335\'0\275\317\347\375\274\251a\034\276\261\356\273=\326\336\353\275\355_\250<\361\031\212=\317$\202\272\346\371\237=$\331\037\276f\2430>\344|i\275\350t\354=\311\345\036\275\035\200\273<\006t\251=\312\010\007\276\2069\000>0{\237=l\337\373<l\020\225<l\234%>z\261\341;j\0144\274\337+o<q<\315=\227N\313=\216}$>\037\000B\276\350\212\341<\343\036B\275G\253\354\275K/\375\274\331\207\003\275Oq\000=\224\337E;\232cg\275v\200\301<\316\342\277=\270N\016\275\232 *>p\211\256=\260L\224=G\336\335=\374\035\236\275D\264.=\332\221\032>\226\311\024\276\225\375c>\375\n\t\275R^\247=\367uV<F\346C=~0\027\275\221J\322<%!\344\275\221G\253\275\302i\024\276\324\r\277=7g\372\275\037S\265;N\326\303\275\263\331\020>\333c\224=\231w\275\27505v\275d\337\370\275\004\216\024>\351\010]\276\346\320\231\273]\336\323;\'\335\202=\357\252p\274y6e\276E\251\224=x7\373=\356E\230\275\314\267\210>\025\374\246\275\260Z[=\214\014\210\275w\r\351<\275\253\016<\226\366e\274\253)\210\275\217Mf=\274\351\007\276\004\364\003\2767v1=*k/\275;\005\200\273KP\215=\212\203\003\275t\"\035=(\367:=_>\371\274yt5=\302\272\331;\323v\216=\361xf=\331G\326\275O%\217\274\310\266v\275\005\234b\275L\007\023\276\245\370&\2746\317Q\275\030\212r=\374\275\215\275[\236\240<NG\355=\373{n=\315`\033=\343\317\377\274\323j\005>\000\256\220:\335\311\244\274.=a\275\304\232\320\275\323W\375=;,\240\274\225\203\370=\273\230\275\275tW\237\275\021\245\n;\212Xm\275\224\230\005\276\356:\263\275\022\322\262=]\235t<t\262\376\275\023o\303<]\025\374\274\271:.\274U$#\276\342i\276=\213\341\203\274d\257P\275%\016\240<J$\023>U1\003\275\376\304\323=\'U\252;\305\355>=\001\022\007>\027\253Q\273gV\257\275u\203$\273\344\224\274=\030\235\264\271\014\\\037=\014\200\206<\356%\014>\365\333\255=!\327P\276\246KL>\224\376\377=\357\376\262\275\030\325\211=\353\306\350=b\205\033=i-\235\274h\003\262\274\310\223\321\275AI\023\275\355~\005\275y\361a>\013\335\275=\355\357\204\275C\352\251\273f\233\234=l\314M;\235\314\346=\031\247+\275{\036->6\n\364=fK\255=\225\373$\275\241\335\255\2746C\212\275 \320\022>9\277\310\275v?\014\276\230\216\326=\357\240$\274\365\263\343\275(^\007>\031J7\276_n\231=mL\007\275^]$\274|K\220<af\330=\316\t\254\273\340\026p\275\024\007x\275\216\206\275\275\2432\"=|M\316\275\213\t4=q^&\276F\037\301=\250G\213\273\322\n\375\274\365B\312=(]\245\275f\263\315\275o\"\326=\234yc>N\240\311\274\364\210\363\275*9\276=i|\361\275\360\342\246\274\t\271#\273\215\332\312\275\177\377\031>\014\271\025\275.5\005\275\035#8>\300G\253\275.\342\205\275X\361\272\275\206.\257=\356@\251=zg<\276\000\262\347;\247,\252\274P\264\006\276\177I\210\274\010\355\035=H!N=\314B\375;\267HR\272h(\273=d\256\001>\317\346M=\261((<\224\347\212\274\010(\352=\014F\365\275\374\240\304\275*\202\231\275\034\227k=Vi\022>\254\236\202<q\317\271=\"\332r\275\246\2201=6\273U=\357\343\202\274\224-\363<\310\326\034\273\332`\326=\307#\207=& \002\275\242f\n\275\"\357\337=\234L\026\276\342\376;<\324\316\342\275\2008\221\274#\032S\275\021\014E>\271}\331\275\3451\352=\001!\231\275\206\350\345=\235l\367\275LqS=t\325\312;~\372F\275\253\233B<Ax\300\272\n?/=\252e\t\276\217i\216\275\265p\250<S\363\332=T\311J>*\257\324\275FV\235=\276N%=\304\r\031=\031\377\024\275T\225\342\275h\224\252<\254M\247=K\020$\276(1\021\275\273\344\222\273\177 \320=K\212#=\363\331\333=LP\027\275\\\272\021\275&\024\301\275u0x;\027\301z<\037\210\032\276[~\240=\253\370\311\274\274\234\210=Ho)=\244\"@\275\203oF=w!\301=S\366\345\274\006\201\243\272)\267p;\247\304>=\324C[>51H\274\260\354\341<q,\027=\372\304\n=\024\243\227=b\013\220\274|\2200<j\267K:>#\211=\013\000\312\275\300D\342<\345k\010\275\371\213\274\2751\275\207\2747\217O\274\332\201X\274\361 \231\275\203\217\375\275K<\347\271shY\275\246\033N=L;\205\276\2676\261=)\301\204=%\014\225\275\364\270\000>\226\377!<\035l\245=\275O\006\275\272I\020\276}\205 \276r\376\301;\334\322a=\261\031\223=\372B/>\361*\317=\260\013\223=\016\324\211=\276\227\347\275\366\247\352=t\035j\275\314\266\002=\200\023g=\017\252\326=\016\227s>\375\341a\272\2069\210=\276N:\275\300<\304\275\364R\310=IQ^\275\001\300=>\243)\305=\"x(\276\037\240\004\276an8\275\006|\315=c\211$=\327\343~=r\013\362\275,g\200<\025\366\007\276\\\273{\275q\235X\275\340\340L\275\343y\361=0\215$\274\327\224\311\27547\232=\010[\006>\260U\315=};/\275\033/%;\014\354\023\275\245\237\350=wC\305\2751\007\264=\024\366\237<\242H\226\275\277\300\027=\016\257L>\332\'->\253\006\355\275\215\364\201\276\2373\267\275\370\222Z\274\370\221\247\275\337\250V=_\245\026=n\374\r\275 d\241=\364\335j\275\360\355+\275\267\177]>N\214\020>,\322[\275\'\261\242<\242V\220\275d\n\023=:\267\234=\316U\234=\332\014\374\275^\305\266\275\217\273\235=\301\354\230=\010t\311=\206\312\300\275\007\347(\275\310\323\232\274\343\323\260\275H\336\231\275\272\254?>\334\200\314=\006\257<>\316^\231=\340\025\322=|Z\336<\303h\374\274.\352\252\275\342\213*=q\204Y=@\202\'\275\314\345\316=KG\224=\251\305\034>\270\237\021\274\036\365\024\273D\031U<\267\355\232;\021\333\247\275Yz>=G9|<\310.6\275\200\024\370<\032\371\037>z\020%\2741\021Y\275\220\217m\275\372\307\246=\\u\205=)\262&>\257y\007=\037\214\361\275ZU\311=\203\246}\27580&\276\333\347\001\275\373\016\254\274\2023\235\274\037\265[\276u\021A\276\361\223r>bG\343\275>\016!\274 lg=\371<\020\276\254\262\020\276\256\3717\276\260/`\275\202\312\225\275\200[\306=97\034\2762p1\274\232\362\000\276\310.\335\275\020\034\001=\302C7\275\035/\261=\364c\305\273\300\235#=Z4\326\275\274\020w<<k\035\275\311\3032\275\310`\331=\306\225\037>H\364\235=k\"\031<b\373\314=Z\010\014=\'\234\322;\357\314\324\274i|\336\275\265I\276:\345w\013==7\271<\223\355@=\274\354I\275\025\214\031\275\373\323\200\275\243\032\247=&T\021\276\340|\315\275\304\263-\276e\253\322;\0215\356=\346\254\2459\236a\355\274)\037\353=`t\013\276dpI=\205%y=\016\"\205\273\204\312F\274$o\300<\364\321\257=*w\004\275(\236\363=if\320\274 ~\356\274\255Z[\273\300b\343=\242\360\223\275|\220\220<6^\213\274\203\3261>\035\037\276\275\036\326\307\275\276\222\223\274Ca\245\274\35405\275Z\016\331\272W\256g>Ra\321=\210\275 \275\212s\200<\001\235\n\275r\260\277\275\302\005\224=[A\364\274\007\240\025\276o\262\261\275@\004\307=l\nw<Xb\350\275\350x\216=C\236\367\274\036\341T\276\2112A=4x\263\275\311\312\020\276A\300\253\274FL\275\275\335\353\223=\302\270\003=\031\373D\275#a\232=\252P\032=3=X\275c\327>=\004\253Q=\307\343N=\317\242\317=.\312&\275d\255\352\275\230\032l<\373\227\034>gTh=\326\206\222=\006\265\267\274\016\363\311\275\352cK\272:&\034\273\250Y\007\275\004D\210\275(\243\261<\014\356\027>\016!-<\347{\001\274L\262\364\275X\336\366=!Se=\360\261\306\274\212\030\357=\262\340\035\276\230\325@=\377\\\025=\220\027\027;\"\371\233\275\357%X\276\004u\013=\235\246\013\274\351\230\024>a\310?\275\216!\303<P\266*\276\r\310\341=24Q<\231\027\204\274\322\206J\273\364\265\026\276F<\323=\306\272o\276\264\003\"\275\023\364\322\275\253Zy=\215j\211<#\220\262:\013\202>\276I\334\305<_\257\336={\024\374\275\374\212\261\274\232\036\376=\322\260\\=\017\000Y\275yP\226\275\031\357\371\275x2\203\275\261\324~\275?\037\017>P\333~\275z\360\300\275\277\n\033\276\315\242\265\273\372\203C<\235\244\257\275|\223!\275y\365\313\272\251\342\255=\311_\340<*9;\274\266i|\275\235\277M=\376,w\275\2040\357\2754(\223<\027\262\250\275\207B&\276ZU.\276\276\265+>\375\327\262\275\333^\312\275\020\014\017>\037\341\323\275\033\335;\275\030\250\r<\032\324\323\274\375\304\361\274I%:\274_\032*=\351\016\\<h\221\014\276)\002\235\275\301\216(\276-\205V=\267\276\332\275\214\0143<\353\024\270\275\320\0375>\336\221\264\274\343\313\326\275\276$\341;\332>Z\273\t\352\303\275i\014\023\275Y=\356\274\353\027\205=\3639I\275\201s*=\272fo\275o\367[>\005%\025>\310\r\312\275Q\341\034=\302\217\340;\226\026\202=~Y-=\303\351P\273\\\t\354\275Qe\206=\n\201\263=\343c\266=\246\202t=C\273\255\275\314\245p\275\250T\211=t\316M=\343\220\370\274!\212\215=\372\355$\275\350\'\326\273,\334\021\276\273O\023=u\377==5\316f=N\255\375=\300\240\005\275\272<.\275\320\372\355\275\212!f\276:\332\305\275\017\230\275<\327\206\021\276\023\363P=\316\371\026<\264\\\265;\371i%\276\001\350\037>*&K\273\300\334\347\275\300A\334\275\224 \215\275\324\365\026\275\327H=;N\236\345<b\024N\275\332i\014>i\026\316\275K(\246=\231\001\235\274)\n\343=K1\253\274\031i\377<\202\262l\275x\224e=\340j&\2768Z\315;\217\021:\276\037\355\246=\375\030]<\005.\020>Oz\016>}[\204:\264P\025>N\203\002>\207\366L<\nC\231\2756\214\210\275J\330\224=_~\356=\374\310C= xg<%v\357=\013\r\221\275v\347\367\275\265\010\251\274\251\325.>\204\300\353:=t\253<j\266\022\276)\004\215=\317=o\276X\320\241\2756:\177\275*\"q=\213\324O>K?\226\275#\205\245\275iF\314\275\221\332\376\274\351\241\320;\031\362\375;\357s\207\274\307=\214\275=\350\270\274\200\350K<\307\253\377;\232l\233<\332\036\222<\337L\303\274w1\240<\017\021\010\275\276\004\024\275\337r$\276\223?r>\316\213Q\276\225\253\301=\354\366(=\260 \244\274\250\033R<\035M\022<%\227\207<Pg\323=\262\336\013\275\000\020\014>\333\216\221\2734\357\r\275\201K|\275\240-\341\274@[ =-\244\030\274{\344\231\275\261\365\234<\372\2711\276`9\033\276\327\336\034=-\252\372=\260\343\365\275\245\t\360\274eU\225\274\035\323g\275B\343K\275\030\014I\276\000\nz=)*\317<\036t\330<\320T\256<\034Od\274\346\341O\275\364@J;\211\344\005=/\022\333<\200\021$\276\306\350\205\274\017aw\275\212\344\376<Uz\221\274\360*\305\274%\210\231\2753\206\250=_N4>Di\251;u43\274\241\274\265=f\375&\274T\260\r\272\261u\375=\213\005\315=$0Q=\350\301\030\275>\003\367\275\215rz=k\272\212=B\332\257=\324\316\335\275\344I\221\276e\325\321<\307\210z=\316\033?=\037wq\274&\304\213=\240\027\220=\213\t\005>!X\365=\211@\013\275h\314\004=\3750\335=\210\250\343\275L\251\010\276\363\005==\327\250\221\274\257\363\301<W1\323\275y\354W\275:\2353\275s\002\261=\001\030\275\275\241b\244:\030\034&>\225\357\001\274\033]U\276\257\207\235=\253~\006>\233\277D\276\363\303\363\275\3500\261\275&\237\003>\177\014\366:tW\223=\247\037\037>\334\362\233=\371\240*>c\204,>\037\306\377\275g$\231\275\212\020\231\275\035P\252<\360\2300\275l\307\201=\376L\372\275t\350\005\275<\344J\275d\020\267\274Ep\240:1\2124=\333\353\007\275\304z2\276:\201\360\275\274\346\013>]t\256\274\225\347E\2752\223\016=\240\317~\271\3662\235\275\276j\021\2769\320\231=\007\016\220=.\t\311:e5\214;\354\324%>m\336\361=\2368\032>\026F\224\275W\260G\275\007\355\277\275J14=D\303\222\275\351\374\004>icC<\215\323\276\274\244\320\035<..\365\275\034\030\026>\324\314\366\274\357k.\274\237\264\265\275p\204\314=kU\326=\342O\336\275\242\312\3559r\2030>\262\310\360=\362\n\305<\001-\001<w\036\333\275\226\256$\275:N\257\275\003f\232\275\022S\"\275\337W\255=\242B\035>\031;\033=\016\026\376:>-\326\275\225\325\341=\364\320L>\377\031M=\256q\005\275A\007i\276\276\253\352=\376\223\227<\344\212;\275q\222\021\276MY\013\275QT\251\275.6\035>\322\241\t>Sj\274=+\312`=\247\373A=d_\303\274\334\313\323\275+\331t\275\347s\364<\315\334\r=%b\3519\365i\236\275c\n\247\274\353\335\222\275\253\242q<\037\303\215\274\030\315f\275\270\2717=Jc\230=\031\350H=\217\261,=L\355\027>\317C.\274]\277\022=\376\362\300=j\301\254=\276\356x\273f\213J>\3338V\274<+.>\337\262\252=\004\'\234=x\210\351\275iD/\276\225\203.\276\363\202\372\275\333ip=K\303\r>\262g\005\275\177\313\001\276\205\023\275;\252\367\330\275\256\026z\274YON\276;xE=P\377C=\006\334\276<hi\316\275\221\016X\275\000\256v\274>\366b\272\037\215{=&\017\273<YY\353<\252h\375\272\326\275d=\253V\024>\333\207\035\274\374C\035\276\021\256&\275\217\252\226\274b\030#>\035\350\272\275\201(\231\275\203 (<\276\323w\275.4<\273\021\017\010\276\375\277\276\274\3268T\274[\217,>\007\337t\274\363\347~\275\311\357W=\252u8>\337\232\023=\2567e=\255^L<\210{\277\274X\316)\276\312\220\222\275\2416\210\274\n+\217=\035\360I<W\017\025\274\301g\351\273\270*U\271\026\377\276=6\341|\275\025\022Y\276ek\307<K\337\247\275\nW\336\275\341\267\367<@\020\230;\333\322a\275\346C\231\275\374kC=\232\3312=\334\370\240\275\351\246\315=l]\031\276r\342\341\274\013\"P=\\\224\"=]\036\344<\027@\237=\"\353U<\030\236\306=+#\203\274\266\0037\276:\272t<^\273D\276<P\202\275\023A\222\275\033\340\306<aa\214;\006e1=\027\305|\275m\347\243=\312N\342=\200\221n\276mD@\274\032K\337=\205\270k>D\365\272\274\271C\233=\342\212\344\275Z\246\014>O\363:<\022\201y\275?\352\242:+\327\237<0\317\265\275\234\337\343\275\030\273\312<\0022*=\351\245%;\215I\307\274\021\n\275=o\030)\275Rj\t=i\024\246\275\364b\344\275~H\243>\033\312]\274\261\367\255=O\021G\275\265c\202\274\235\034\230\275\317\216}=\253\262G=\266\265s\276Pr\370\2753\316\377=\2731V=D\023\326;\202\032d=\024\272\256<_p)>\255\"\261\274)\225;=AB\312\27520\324=jJ$\275l\267\237<\235\201\250=Z\306q\274\334\314\027>\035\345D;o\353\326\275,\316\206\275pDB=!\014?\274\005\322\005\274\245\346\216=>\322\347\275\021\027_\275\177\377\322\275\3628\026=\370\346\201:\322\007l=84$>$\"4\276]T\256\275K\355|<\374\323U\275\266\t\241=\212>R\275\365z)\275Ci\344=hp\272\275\232\025@=\356r\301\275s\373m<C\242;\275\r8\271\275\026\331G=\232C\325\275!1\321\275\033\032\221=c\024-\276DA\343\275\360m\021\276\361\020\333\274\276O\272\275\004\221\020\276\275#\003=H\264\"=\216\235U;\362\310&>\313\202N\275\007\361\321\274\367!J\276\234\352\333\2741\264\240=p}\300<\317[\017\276a1\260\274\266\312\016=G\2168>\021\302\345\275T\365\023=\024#\016=\345\352\253=|\256\236\275\205\243B>\333\221\304;T_\275=N#\031=35\226\275\2274\004=~\231\332\274\316\310 \275}\335A\275\037\272E\275\232F\210\274\307\007[<.\240\017=Lu\200\276\021\354\274\275\010\356\334:\220<\327\275\tYy\2736\256\340<$\255\353\275V\306\020\274\342X%\276.\302\361\273\270\335\'<k\216\352\274\001\342\270=#\373\256\274\026\273a:\2225\327;\321\037\201\274\305h\177\275\237.\007\276<\027v<r}\326\273a+\207=gc\345\275,\340\265=\215\3532=\005\351\372\275#~\026<\3024\023=\200\251\271=\271}\253\274\235\322\342=\235\331\362<\312J{=N\327\345<\223\261\231\274\254\237\221=\013\365\202\275\007\331\222=\215\275W>\324\037\331=\220\304S<\277~\353=\302#}=tb\212=o&8=:\206\271=\001z\016\276\355\351B=\372j[=w\252X\276\314\230\327=\367\023.>\030\330\251\275\252X;>wY\310\275\002\3401\276gz\207\275\264h==kaZ<p/\231\273\035;$>\332\222\315=\210/g=kv\321\275.\235\330=#\264\235\275\375\262\035>\340\334\030=\322f\014>\2709\321=\336\300\220=\254@m=\312\322\016>Ew\037;\2510\371\274\020Q\225<j\343\023>\354$\022>\265\244\314<\310HO\272\027\221,\276\2118\022\275d\366~\275ok\325=\350\232\314<\302)\032\276\363\334}\274%^\001>d/\204;\2116S\275;(\327=2\304y=\304\325i\276\230\203\036>\000\270\377<\2615\245\274\373\014J=\210\013@=Hl\031>q\342\036>v\337!\276\036D\254<\210\216\255=\300\356\037\275$I\200<\225c\261\275A*\021\275\325\377\324\274Lr\002\276\316\031\217=\251\304$<\035\n\254:-\305\323<X{\302\273\256\'h;M>\227\274\341E\210=\322B\225=\201i\343\275\252}u\2754\267\217\275\304\304<\275P\253\267\275\372\315\221=\232\352)\276Ts_\275\200g\007\276a\002T=\r\333\257<\237\244\211>\313\351=\276\214\270\305\275\315\232}\275\311\341\037=\254\226\014>\366\360\257=+b\"\276i\245\367\274w\014\001\275w\327\t\275\323sY=\352\217C\275\276V\245=#v\020>\253x\254\275\"&\001\276\032li<\035\177\255=\232k\310;\247yP=\300B\315<\032\204\264\273 \363g\274\004|\366=\253\0309=\253\006\003>\263\316\276=/*\034\275\304F\226<\221\003q\275M\326\352=b*\226=\353\205@\275W\326\"\275R\010`\2741A\017>\246\305X=\373\320,\275\0027\214=m)<\275#-$\276GM_=m%\307\275\374\262\r=$}\005>\213\020\344\2756\201A=\n\324O\275\037\r\212\275\373Y5=\3110\216< \362t>\'\343\201\275\317\377\202=j\002\027\274\205W>>lc7\273xv\t\275u\274\000\276x\371\272=\236\207\007>V\216\350\274\246#\006>\215\362\311=c\350\212=\300-D\275\362xt<6\360\333\275m1\307=\241\372!>\002\277\320=\235\333J>\016\027\221\275b,\276=\202\305K\276v\206\216<Nr\003=\214\264\301\274\034\021\375=a\356\375\275wG^\275=\261o\274\303\313\031=J\225C=\340G\271=\225\321E>\375\363\253\274\346!\244\274\256\006\'>\204\337\215\275}02\276!\346\016>\271\021\222=\024}(\275I9\227\275\005\213H<\341t\032\275\272IC\275x\333l<\253y\334\274\321\032\264=\314Pt\275\225\300\321=\337\231d\276\014\225\225<x{\304\274\201\325\245<\254,\321;\321D\256=>\367\232=\275\301\033>8\251\321=\240kZ=\250\261:\276P]\367\275\271\350j\274\343\271\330=\315L\374\275\215\371\335\275\223\030l<\013C\356\275\013}\217\274\217T\361=^\363\027\276c^\r\275\262[%\273\334u\341\275\303\005\364=x\370)\276\252-\300<\301R\301=&0\246=)f\377=M\361M\273\345V\305<\316\370\202\274\207\357\371=?\225$\275\251\240Q\275_\271\021<\342sI\274\275\037I\274u(\204<Y\214\335\274\334\315\006\275\267\r\253\273\276\327\302\275\203v\r\275KwQ\275\335\032\245\274\303\025\242\275\035\207\335<\016\241\025\2748\027h=e\375\013>\2340\233\275\375\315\264\275\r\334\250\275l\343\t\275\317\211\213\275\264\232\256\274\262\223\230<\372hd\275\325R\203=\274\233\362;\334\330\226\275\367c\024=\034I7>\202\204\307\275\001B;\276QS\200=q\317\234\274\243(\013\276\250G\017\275!\315U\274\305\372C<\277N\246<\375\320\007>(\203\227=|V\210\275Mt\r\274\004$\364=%\3100\276_\331\007>\322\337@>\272\022\354=\n\317\320\272\362]-\276!|\374=,\004\303=\321\371\n\276\322,\036\275\256\257\246=\022\260\254\275t\340\244=\365\267\324\275\317O&\275\340\254{\274`\340\037\275@\276\300\275\237PT\276@\347\246\275\305\307\302\275S\245\025\275\rW\333=\312o~\274x\242\270\275\312 \031\275\377}\000=\206\\U=\263\376\034\276\032\342!\272j)\n=\2770t\274c\031\230=f2\355=\344p\321\274\222e\021\276u?\312\274\240?\016\275\223$\370\275C\324 =l,\241=\350jR\275\022[\203;\362\263\305=\017\336\325<XX\265\275\217\310\360=\332/\'=\n\273\233\275\370C\203\274;L\233\274\rA_>+\251\347<\253\375\022\276\336\261\232\275O\301G\275\370h\203\275\035e\022=\035Y&\275\266\255\010>\212\235\035>\321F\n\276\352\007\001=0\210\324\275\'W\006=N\272\224<&\177\n>\240t)>\310\374#=\216\355\024\276r\211<\276\005\n\261=\346\3636=b\205p\275\347{\270=/\213\242\275\327\326$\274\276\356\217\275\222*\332<\252DJ\275\204\344\313=\243X\314=\017#\320\275!\316\217<\026\213\313\274\261M/\275\3358/\275\316\376\035\275D\224P\275Qr\306\274\025.\270\274\037\3577>q\376j\275\210s\021=\276\257\035\274F\372i\2758\"\236=\223\352D\274\315\213v:\2502\301\275L*\261:\254\355\275<v\304\224=\014+\302=W?u\276\2579A:x\305t\273\235\361G\275 )J\276\300\273\265=\274]\234=n\336\336=h\002\240\274OB\243<\275\026\211\275\203\"9\276i\263t>\323\255\370=\236\264\307\275Mq\277\275\023\004\262=v\023\251=\323.\021\275\241V\027>\031w\334\275\304\342\017>\022\351p\275\267\213\215\275sd\211\274j\034\022=X\233\244\273\017\027\300\275\224\261p\276\320\351\006\276p\324 \276\310\277\332\274\257\277\306\274\221iZ\275\25540\275\357@X\275\350\022\037\275\211\036\221=R\301]=b\0162>\337C-\276#\217\245\275xd\n\276\223\325r=\216\235\260\274Md\230\273z\332\272\275f\255\303=\326\375\243\275n\275\307\275\302\331\256\275\026\035)\276\001\020T=\007c\035\274\301y\276=\016\347\310=\305\345\264<\220P\313\275\346\265n\2756\260\020=\262\256\312\274\364l\376<\2230\022\276\306\314J=\262Tm\272\213\377p=\306\347\201=x\004A=\351\010\263:3\336\336\275\352\336\230\275|\003\030\275\262^8\276\3057\311=t\363-=)\t\306=\353O\361\275<\"K\276r\261\016\275T~\013=\315R3>\034\315\262<B\264*>#[*\275\374\377\241\275\233\325\203=\002N\205\274\277\241\"\275\316\311\002\275\277t\225\275\007\032h=(G\235\275X\243\264=.\021o=.P2\276\\=;<zB\327\273\"\024\260<\335\033\"=\371\254\242=\t\361\000>q\347\357<\201\216\007<\003\300\t=+Z\n>\316T\023=\274\340\000\275\ra\034\275{G\341<\341\326\236=\201\325\322=\241\341\007=\324G\333\274\247*\314\273\375C\331=\205\216\233\275\224*1=\272*\304\275\346\246\371\274\277\230\304=3\345\346=\211P\212<:\221N>\276\361\020=v\313\034\274v\353Y\275\030\273\370=\035\340\301\274#\354\211=\']\335\273\226\260?\276.&\257\273\004\352\007\275\256b\"=#\215\344\275\241;\200>a \217\274{3:=\332\236\211=B\216\311\275\273sW<\002\325f=\372Td\274\334K\034\275`\205!>\304\270\035\274\304\221\022\275\236\022\371<\314\255\244=O\354-\276\006o\025<H\265\025\276\3062\334=\013xd\276\240\343W;\264\233R\275\302\020\364=\254r\'\276DN\242=\323=\214\274NG\270=\216X\366\274\261\355\017>\340\005\010=\210\025\362=\010\356\226<$<x\275\251O\226\275\346\335S\275B(\t\276\016\226U=\376\331\006>\351\203\201\274\224\324\256\275b\030\210=\266\311{\275\362\000\345<\352\365\221\274P\247\367=\273\206v\275 ~\240\275\363\221\324\273\345\016\225\275\204I\337=\372\322z\275\307\236\213\275\371\016\231\2753\302\225<\00107=\315\021\217\276\357\301$\275\322gX<ZJ\271\275B\035\003>\260a#=-\255\355\275U_\331\275\007\306\200=\247\305\035=eu\030\276(1\326=\016~\375<\242\"\261\275\275\300\210=C\021\026>\225\364\336\275\302Oo\275\342\211\344=w\002\347\274\330t\313\275\006y\t>\333\327Q=?\344\216\275\233\367\302;\301\251\374\274\276\302\375\273\220AZ\276\016\215\227<\266o\374<\310H\241\275\312-\314\275)\275\362=T\'\014\276\223\205\331=\036\351\037\275\260u\221<\021\330\230\275.p\001\274 \270\022\273\264\344}=\354\257\246\2754\214\354<\031\223\005=)\345\007<-\231\334=q\312\270<\231\273\247\275\314\310\333\275\362l\267\273\020?\254=X\240\260<n\354h="
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7477641
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 26
}
