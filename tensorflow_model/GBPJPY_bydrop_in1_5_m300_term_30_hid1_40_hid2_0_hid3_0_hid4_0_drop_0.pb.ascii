node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5177815
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "\375\361\336=\230@2=\233\005\276=vh\"\2760j\244\274\220\202\271<1\375\006\276 \020\315<92\355=\346\345\220=\211\001\033=\272\224\205\275VH\251\275\237\334\336\275\027\356\335=\257\251\212\275\226\263\257\275]\225\236=\247\300\234\274F,\t;\377\317\017>F\364\237=\035B\t=N\204\013>S\316\242=_\036\216\274\340\357\244\273iX(>]\t\332<\222\344\264=\220\375\235\275J0\302\275\025g\200=\253K\302\275\312=\230\275&\355\231=P\207f=\331\321\276\275\340\360\\\275\001M\350=\266?\233\275\350?\255=X\223\205\274\270nK\275\362\244\272\275V4\206\274\246\022\333<\022i\210\274\'\222\013>H?\037\276\326\3415\273\370\'Z=\257\032;\2744\0101>\032\242L\275`\351L=\2554b=Bd)>\275 \224=\340)\263=\354M\177<\366O\230<-\210\365\275(9!\275\347\033\t>\323/\033=\205B\325=!\031\360\274\357\332\036\275\206{\235\274&\215\222\273\315\276\234\275B?\004=P3\216\275K\3575\275D\335\315\274\252\'\307\275\235\225\014<\306R{=\237c|<3\211\312<\345O\342\275\370\323\300\275\205\000n\275t\305\370=\250\332x\275,\007u=\351\t\200=\177d\346\274\344m\210<\315\3549\275\335{\256=\177\231\">\370\2357\275SL\206\275&\332K=\251\255\002>iJ$>\276\\e=Mg\227<\254\026\020=\215\001g=)i\235\275\300f\273\275U\311W<\355+\324<u0H\275\227\255\207<\232\311\004=j\013\366\275\274\020\225<|P\320\2755\263\274<\377\361)=\030\375\202\274\262qE=]\027\367<\3750\365=1\233\363\274+\027\"\276`\031\'\275%\236G\275[p\262=,?\224\27538\303\275FN\362\275HO\003\275\336\020\007>\253e\002>\255S\235\274\227;\253\2759KH=\022\334@>\223\375\211\275\212j\311<+\010\255\275\30506=\317\266\304\275\366\316K=\302p\000\276\227\r\001=S\252d<dhM=\361<5\276z\332\243\274\307\026\005=\252\034\001=\335\314\374;o\267Q=\366\237y=|\305\243\274\313^\374<\007$#=\240\367\031>\217bQ<\024\211!\275\230\230\231\275r\207\036\275\030x^=\341\3273\275\314\202\340=\'3\354=\271\3767\274K%K=\374\2546>G\016\314<^\013\006>\020\234==E\357`\275c\267\223>\2772\215\275\326\027\256\273\032\372\033\272\010S\374\275;\2556>\021U}\275\313\334\r\276z,5\275KC\274\274\010n\334<\340m^=$s\354<]\244\327<\300~\266\275Y@\007\274\031(\024\275\335?\021\274F\031 \276\226\247:>\314@\031=\354)\323<B\365K\275\027z\013>M\321\220\274\312\214\375\274`\240\224\275} A<R\326\206=n\217$=\367\022\270<\343\020\350\273\013\240p=\272\332\212=o\342j\2747\202\362=\361\271\273\274\256\027\035=\310\240<\276$\354 =\360\344\314\275y\330L\275\252o\331\273Ra\331\275Tq$\276at\355=\306A\021\274\252%\225\274\002R9=\230\342B\275\345\213\232=\234\366\240;\341\224o=U\025\025=\371\211r\275\353/\366; \022\247\275\2547\211<\201\016\355\275\204~\016\275%\275l\274>\032\001=*\277->\237u,=\345\001\265\275V\303\314\275)\250\253\272\273\200w\275\333\014\326\275\014\027\361=\333\216\363\274}dK\275J*\'\275\302\017\217\271r`z\274\247Hb=\025\231\274\274\030X\007\274\t\260\373\272\001*\030>R\210\303=\253Rp=\277K\002=\342\000\266<R\334\335=I\331K=9\"G\275z\024\220=\230@\\\274\022\000)>\305wB\275\336v\344\275F\354\237\273\036\216\215=\270\274m=\230\223\365\274\036\213\341<\"\253\221=\373\205\022\274^\240\204\274\217\014\267=>\365\374\274$]!\274\217\n\256\275!\226\024=\302\237\302\275BN\307=\373/\374<\227\2708\275\241]\223=\362\024\321=\223r_<V\210\004\275\243G\277=\221M\367:\0264\032=f\262Z\272\267\016\372=p\217\276\275f\335D=\232q\033\275-\270\261=qr\t\276\243A\211\274\267Wk\275\202R\211\2745\316\023\276\000\276%\275\177\177f\275\213\2331\273Rw\247<\266\306G<\351*\250=)DH=\030i\301\275\001c\217<\254Q\363<f\361t\275\314\304\345\275\301\263\032\276%\013\270\275\024\267\'\275]\233\316\275\353\365\320\275\254D&\275\033\351\017\275\362r\200\275h\347->\274\252\211\275JP\220=\300\221\306\274\242\033\247\275`\365\265=*\361\232\275\262\377l\274\2421I=u\r\242\275q\030%=\201$f\275\317\023\314\274SO\222\274\246m\220\275E_\203=0\006V<Rb\005\276\016]\277\275\030/\006=L\336c\2756J\347\275o\233u\275iR\005>:\327\233\275{\t\002<s\245\027;%\364?\2759\3546=\253\\M\274\006\221\234=\314\300\r\276\373V?\275\327\206\314<\300\023\002>]+\321\275\"_I>\026\362\252<\343B.\275\341\357\202=&%\027=\217S\220=\364Y\016=DP\366\274JW\002\276\260\263V\275=\217\003\273\232E\211=\010\3443<k\021\207=\255\266\027\275g\202\307=\331\360L<\350,\247=}\314S\275)\240d\275\014\244\360\275\301\036\332=\332|\244=\230a\210\275\010A\321=\327\376\312\274\211.\005><\020\236=\300a_\275\032\343!\275\"B$=\260\2068\275ZT\001>n\215*\276z\241I\275\221\035\233=\022>\344=\2132=\275\334|\024\275x\276\253\273\364\020D\274x\021\202=r\244\002=\317\231\024\276\323\251\367\274\332\034\326<\343\031R<\257EJ\276\326m(\276Y+\035\276`<\357\275\020\246\252=_;\263=;\346^\274[\210\220=v%\202=\303\241\234\274R\020\000\276\346\344\t\275Z\267\253\275\r\0269\273.\034\303<\240mX=#\321\250\273\265\336\377\274\265\371\034\275z\005\216\275<\375J=\345Y\252\275\346\222s=ij\361\275\013\372\323<\261\232\036=A\017\014\274\200g|=\323[\256=g-\022\275\002\240,<J2\321=\247\260\206<\275{\213\275\036W\316\275\314*\221\275\\p\013>{\254W\275\034\214\340\275T\021\253\275\343\016\t\274Y\322\272<5\240\211\275\030w\326\274j\324\315= \023v<z\305\266\275K2\024\275\235=7\2752\372\017=}/(=|q\371=z\311\037>\263\326%=\307\317)\275\000A\203\274\244qp\274\232\331\246;4B\276=\334T\010>\322\300\021\275\031\002A=G^;=\r\020Z\275\0040>\276\017\356\201\275ZZ\003\276\000\244\025\275+\037\207<\241\376\231\273\345\234?>\217\256[=^a\352=Z\362\247\274\306\335_\275\"tl=\333$4\273\352)\010\276z\023\247=\332$@\275\367\246%>\'\273\251=\222o9\275\257\271s;p}\231\275\034b\305<0\337\233\275>}a=\034\203)\275z\002\232\273F\245?\273\311\275\027\275\240\327\204=\260\340\006\276\324\016\365\275\200\377m=\327U\212=\277\036\302\274\374mz=D\232\337\275\363vO=\025\202\206=\032/\366\275\336I\316\275\037p\341\275\037\177\212=x\230i=VY\225\274y\246\002\273<\330\371\275c9\020\275\323\242\377\274\002G\"\275=\344\207=\014\031_\274&IN\275\342\2565>H\242~\275o\351\347\274\353b\331\275>s\265\274=>\357\274nwv=g\253d=Oi\234\275\300\202\367\275\257;\327=*\306\245<\253aw\274|\206B<)\232\310=\266\360\364=h`.\274\365\001\250\275/\230o<x\252\227=\241\370b\274\r61<\013\211\202=\222\353O\276\342\307J>\315\310\017\276\347\330\021\274\r\215R;\371\266D\275\033\260\221= +\303<\245|\322=#\246Y=x\323\017\274\003\023\033<(nu\275t\0340=\246\\\346=\242\312\002=o9\n<\256\202\202\275O\206\374<n6\240;i\000\024\276\221 D=W\311c\275\024^\207\275ad\316\274\276\2308>\026\325d=\334u\262=|\231H<\203\323\260\275\031\232{=T\346\217<\251\260~=S\013\253\272\201\342]\275\264\305\016>\250\336A\272RE\224=c\311\224\275\354\273|=\360\243/\275\003\t\262\275\240\r\266\273 \205O\275\311[\254\274\006\371J>\343\251,=\265\254\230<\035b%=a\225\'\276Q\364o=\331\r\363\275D\222H\274l\266\270=j\354\346=\260c\323\274AF0\275\207\310\365\275\215\256\236\275\314\346\345<r\216]=\343UB\275\220\332s\273u\316\346\275f\250\226\275\214\311\341\274|$R\276yh\237=\t0\231\274\033\333\014\275\022\377\031\275\353\032\243=e\230\253\274~\231)\274\362\377\222\274\376\303.>\3736\240<\231R\325=b+\340=\314\205\022=6Z\347\275\337\377\376=Z\241\311\275\017\347:=j\351b= PY\274\240#7\275E\2343\275_\370\007\276\333\014\362;b]p\274}:\006\276\270\000#\276\232\356\";<4\211=\033}\223<7\347\013\276k\002+\275\234Ve\274\001\300\207=y\373|=g[\343\275\036G>\271B\371\206\275K#\031\275]\300;\2754)\010\2754\232\020\274\221\377&\275\241\307-\275\014W\r>{\025O\275F\006:\274\364\341m\274\267\373\340=\320\033\372=\235\254\033\275\203[\032>\203T\266\275?A\235<\377\371\232=\202g\215\274\215i\271\275\242{\234\275`\224\336\275gK\236\275\362RV\275\233\230\016\2764\317\265\274\361\n[\275\032\356\240<8?\253=C\037\021;\354\270\242\271mc\204\275\246P\016=\340\226O=\357\037\233\275\014T\337=\301\364\277\275\267\314\233\275\346\030+\275\241*\001=\004\177\332=zWa\275Q\335#=\2567\261\273\2353\267\274\303\003\264=\224V\252;\234\371\350\275m\355;\275\225\341\233=\310`A:Z\252\315\274\344}\337;\355\234\236=\333\037U=\232\372\234\274\231\234\352\275\351I\224=)\354\335\274\233$\307\274_@\317\274\226\335\004=\301\335q<}\031T>\375T\235\275#\331\245=\317\2766=\230\260\r>@\003\262=\226\231\216\273Mm\205\274vM*\276\343w\266<\271\330\005\276-\017A<\314\313<\275\245/\004=\212\260.\276\225\037\020\275E\274a\274\325\266\320\275\010R\205=\201\2278<e\005\357\275\263\3730\275\246%\016=\316\331\311\275\203\037\313\272\262\034T\275\214\221\024\2764\003n\275\261t\000\276\204g\323<\322\026\357<\027h>>\036E\213=\030_\003<\006[\271;hv\276\275\006\257\346\275\263\310\215<\005PB=EK\251\274\332\332\352=\210h\232=\373\271h=\316a\253\275\nQ\206\274E\0049={\366\267=>9.\274\256K\225==@\233\275\216\327\244\2758\031\261=(\200\302<\305\345\221<\211L\005=\345W\227\275\234\036k=\265\225\320\275o\333\002\274\252\300\325<\257\333\346\275\265\005&\275<\033\007=w\271\262=\246\200\351<\363\342\272:!\376\034\276\272\375\250\275j\204r\274}\0036\275\306\320\246=\305\316\300\273\261*#<vV\006\275\033\021\271=DO\247=\361\355\335;\204R/=\323\350%>;l\357<\242U\337<_\022\026\275d\223\317=\n\3573\276\226t7=\362\367p<G\351\207=\376\230\226\275\265u\240\275wu\034>\2138\356=\003\210I\276\205Sl>\327\261\353\275Q\254R=\016M\\=|2G\275\227Q1=c\225\222=^\032\025=\325\2323=\344\265\222;4\270\306\275\037\030\271\275,\231s\275$\270\t\275\025\236\\\275\246\205,\275\253\003\225\275?\364 =+PA\275\031\222\244<%G)\275\253\300U>>?\221\275\340\235\230=7X\205=\275\333\202\275v\227\337=\007<M=\360\353\247<\t\022\353<\213P\355\273H\377\217=\'\347\302=[7\212\275\347\307\010\275\204\3301\274\361\364\006=e\277\016\275\210\304\373\274\311E\205\274\305O~=t?\357\2753\323 >\321\017\002\275\274\240\r\276\334\036\005=\321\214\331\275\322\215\023\276\321D\242=ab \275\327\365a\275\325\220i=\264\010\224=K\206\230<\323\3066\2759\006\266\275L\270\033\274\357\341\222=u\235>>\304\235t\275\355\007\3368:\027\332\275\373\244\314<\326k\t\276\336`\272\275\017\367\025>\352\\5=\342\240\035>\311\\\236\275\201\346\336\275\001\227\005\276\320\340\214=\006&\247\274\263\216\332=\345\305O;:$\230=A\350\014\2757\245\333=_\273\342=yH\014=\365\222\030\275Z\2346\275d\001\256\274\035\302\230\275Q\230\033=q\202\330<9\317\030\273\024n-=\256\245E=\250!\034=\200\364\352\272\355(\232=\232\244O=\323S\013\274$bX=\036-\324;\022\n1\275\325`\035>`\311t=\234\341\374\275\237J\341\273\265\004\314\274\2442\331<\375\255)\275sS)=D\237A\275\210\323<\275\314jl\275\227\360L=\307\202\351=\244\201w=\302(\312\274\347\t\240\275\354\217(\273\243\007\001>\'\036\264<\276\005+>\351\357\001\274\267\0301>\225j\317<\312\345\010\276\353q\254\274\224\366a=.\3560>\256r\241=\344\351\220\275j\307\t>D\030\206=\304\301N\275\037\244\023\275\360Be\274\2468\247=\202\315\350=\030q\272\274q\233\355\2754]\005\274_\314@<6G\377\275\013\276h=9v\277\275\353A\270\274\274\371\364=\200\"u\276(\033\'\274\220\204\332=\366\357\272<y\265\220\275\344\213,<\021\341V=P\200}=Y\263\016<\215\375\'\275\323\257\021>\252m\231\275fe\002\276P\235$=Y\032\020=\020B\005>4\267\203\275\362\001\370\274\316%\206\272\2207\264\275\367\322V\275))\265\273\307\307\275\275\242MA>\200\377\312=\223\026-\275Mju\275\336\215\214\275\260H\2367\356)A=\025S\215=\225z\313\275KK\261\273b\034\330=\306@\016\275\261X\364\275*)\300<\005 1=\347\262\246\2754\224\315==\240m=z\277\002>\224\t\301<\377V\027\274\374r\252\275q\206\312\275#\304\240\275\351\350\241<\264\2700\275\207\262P\274i\235\304\275\206N\241\275A1\276<\260\371z\275\024Q\353\275C\367*\273\025\020B=e\033\242\275\361\376\370\275{\371\251\275%\017\021=\373\341\371\274\247C\321==C\276\275\006\333\233=\233\347\335\273f\215H\275\220\225x\273\217\n\022>\033**\275\'\010S\274b\366\256=3\272\353\275\002%\272\274\306\264\014>M\004\265=\035\256\345\274\002)\357=\263\341Y<\200\337\206\275\022\013.<\310\322\004\275\007n=<uC\253\275N#\236=\351*g\275azb<\'g\227\274\251X\332\273\205\313\256\275\245H\300\275/\243\026<J(\344:\252\207!<\362\220\364<T\257\006\275\230\231\354=\355\254=\274\247\226\227\275\2750\016=/,C=Gz\275=\005\207\350\275+\352\013>0o#\276\216\237o=\0015\001\275`{\\\275T\344\177>\360\344\014=\242k,\275;\n\233\275\235h\027\276T\014q=]\002\277\275\336\017\276=Bj*;lH\255\275^\246\334=\316\206k\275\373K\022>&E\357<\017Y\257=\342\334V\273\301\342}\274\272\254\325\275y\323\023\275\266\314\223=\240\355\020\274v0\340=\010\016P<\207r\365\271]\310o\275uf\255\274\353\305\322\275\371!>=\035\212\270<;\002\360=|\204\003=\000\020\252\273\255\201!=\257\356D=\211\222O\275\001\212\n\276\033\252\257\275\265t\377\275\025\014\002=\035<{\275eZK:\202\362\032<e\217\033\275\224\232\r>bP\001\276\247\236\301\275\262:u\274S$\213=\r\275\216<\312\215\005\276\353\233\003=b\3560\274\253\241\250<\034\n\220<\005\364/\276\323f\230\272W\215\020\276\253q\303<Te\020>\254\373\377;\352e\201\275\250\337\021\275\256\254\247=G\371\214\274\240/\253\275\260\224\006\275\337A\223\275\273\010v\275\030\273\301\275\3752\003\276Lj\275;\r\204\323=\262\033\003>\211\363\370=\212g\344<\355G_;\321>\375=\324\216\250\274\034\310\230\275\271X>\274\237\323\\\275z\373\204=\024\237(=\217\033g\275\263\317v\272=\257d\275\315O9<\333?\247\274\372\300\023\275JZ\177=\3668\241\274\344h.\274\371\322\207\275\025{\013\276\030DO>\236\r\300=k\267\326<\265\025\240\274\025\347\252\274\234\356\267=\251sq=\362\221&\275\337\351\315\275\222\313\002\276n]\024\274`I\273:8\375\246=V`\n>4Ln\273\271\273\247=\030\010<\276SO@=\003s\206=\211\234\200=\346\276\202\275\374\312\346=\264\013\032\276\317\023\301=\tm\245\2700\024\006=\323O\004=\245bG:\272k\217\275\036PB;\242\315\313=\325\0318\276\212\363\256\275\0276\235=P\246\2279\342\016\227\275\r\313\254=g%\234=\371\277\317=\016\030\361\274\251\304\236\275\217\242\027<\024e6\275\277\021\210\274\347\030z\274\206\0022=\036\377\300=Z\\D\275b\326E;\254\202\212\275\000_\t=\373\306/=\217\325.\274\254O\005\276\227\026\342\275\334\217\342=\002\007\243=\322\273v=d\255H=\2179\342=\035\352b=6a\300<\022\236\362<*\307?\275\250L\305\274\261x\034=\271\310\035=a\340\231\274\331V\250\274(~\321\274/\307\234\275[\274\330\275\364Q\255=\275\254\351=\030r\251=O\254\010\276\254|\250\271\000\305\026\276\031\265\354\274\0329\203;\325\n\272\274\365\300\270\2758\245\270\273Y\216W\274\253\273\320\275\307\215J\275\265\2310\275c\337\230\275s\377\331\275\0030\013=\253~\361<mE\316=\247m\315\272\223\262\240<T\240\304=Ea(=I\270\016\276\246t\366\275\374\252+=h8\221\274\204\002\370\275\325d\350\275z\033\210\274v\253\311=\001\251\217\273\220I\225\275\372\253\255\275X\364\200\275\245\202\357\2756\374b=\227\'\025\274\275\010\273\275\204Dt\274\346\264\212\275\232*\263=\346\257p=&\216)\275x\324\256<\323/f=9\"\"\276\235\014\205=z\0210>\221\256]=\204\300D=\017\263\255\275\306AH>\221TW\274)\367|=\343\324\330\274\326\300V=\374|A=\253?\001\276&\323\336<:\213<\275f)M>\363{/\2766\234\240=\206?\344=\335\035B=\344\r\245\275w\2420\276\341\360\232\275\0242\034\272I\343\353=\233\315\221<\276]\233\274N\324!\273\273:\t\275\251\277\251\274*\027(=\027\274c\275\256,\210\274\003\360\020<\277\277\256=\356\333\021>\035\252\354\275@\366\n\276\342Q\272=\033h\037=\277G\223=\315\"\315\274!\231_=\317\347@\275*Y\250=\227\001\033=\254B\225=\013\025j\275\347\025*=\235&\262\275\261\340h\275\014@\252=d\327\201\275\332\177t=\344\030\000\2752\237\245=n\363 <\t\322\307=\346G\334\273:)\244\275S\262\353\275\332 \335\274\020xE=\302,\277\275\027\330\357;/\311\033\276\216\250\242=\017Bl<&\343\225\275\035f$\276M\237k=*\003@=\354\2531\275\r\227&;\014}\023\276\242_\203\275\224\016\211\275\351\312\001\276\352c\321=l\2357\274\340\341\322\274-\251{\275\246[\264\274?\301y\275U\244\233\272\361[\201=([\316\274\262BV=}H\243\275\202Z\225\274\362c\241=\022\330\230\275/\206\036\275Y\237\320=D\353g=\240\026\240=\362\235\252=\326\006\222\275K\246\010>\337\0065>\366\276\277\275\303IZ\274\177\0048\276\350V^</\024\367\275o\3733\276\221\206T\275MC\204\275n\177f=\373\025\032\276\350\244:\275\221\312\210<\035h\236=\256\254\370\275\235\277\317\273\231\261\227=\003J\r\276\247`\r>\275\371\014\276lW\222=$\347\337\275\375\240\177<\300\2738\274\226\255\301\275\237\271,=F\244c\275\252\315\030\275~\351\311\273f\344\327\275\006>\226<m\357;=\212\365P=\320\261\346\275\014QV\2727zn\275/\215\200\275\360\260)=\302\347\016=\260l\266=\303\010\256\275\353d\247\274\030\253\274\275X^\217<\032\301<\275\301\032\264=Y\316\214\274\364\004\305=-H\221=!\351\247\273\355$\275\274\316\360\333<k\332\371\274\\\203,\275\376\021(\275\326W`\2766\322\221=\310\351\r>\211\370\t\275zSb\275Yw5\275Lvp\275\320\302\220\275\343f\221\275\366r\277<\366\236\315\275\264~\304\274Y7-\275\302\222\251\275p\354\376\274N\363\033>\374\235`\275\355/\315\2740\345\177\2749^\274\275\2502f\275\214\212\203\275iV-<\216,\230\275\302-\242=\224(\002\276\023\250\375\275kJ\016\275\252\310Y\275\272X6\275ZyQ\275\256B\023\275\3340\006\275\027\275j=a\226\222<\354^\200\274\254\211\264=8i\263=\213G\336\275\373\220<\273\254\202\335\275\337.\013\276\250\371\220\274=\215\337=>p%=z\303\">(\017\024<\270V\030>r\004\370\275\006\220\374\274\352?e\274Ug\254\2757\034\246=\264p\232\275\353\323\321<\037d+=\341-k\275\362D&>\\\363\016=wh\250<%<%=!\033j=\204$w\275]\016\366=\323\266\270<\353\007\006\276\227\252#=\200\205\245;\302\244\030\274\016\t\340=\260\310(=\322v,\275\332\231\000\275\367ao<]Rn<w\374\025\2757\200\375\275\250\237\233\275\310\033\252<\035\023\360\275:\013\214\275~\372\364=\230r\031\274\263}\214\272\216\377\351\275Z\344.\274\003\021P<e\013^\275\376)\001\275a\246\264<\373\022\307\274\372\205V=\270VB=QA\243\275\337\255E<\302\325\017=\206\270\226\275\002(1\276\361\262\344\275q\212\250;\342=x\274X\337\255=AC\370<\263\316.>\234\340\236=/9}=\366\005b=v]w=\270\017\345\274\234\271\353=\t\035|\274\206.\363=\310]\274=\236Mt:\253-\260=\334\314\220=G1\375\275786<\223\345\023\276l\201\330<1\215\244=\226\360\315\275&S\r\276m\224\230\274k;\231\275A\301U>\021(\265<\335\315\202\272az\223\274VeG\276ho`\274\315)==M/\225=\246\271c\275\330k?\275i\325\307\273\257+0\275\336\276K<\\J%\275\222L\213=J\377\205=\310B-\2742\364N=\375\354\267\275\"-\'>t;\r\2767\014\261\275\361\007\226<wS\324\275\307\274\210=L\017\r\276\214\242\003\275@\023\350\275\236\263\'>\2404\325<\352]H=\035LR=\263\377\227<\014:\216<\233F-\276\247\235\304=\363\251X\275p\021\351\273\033\"\020\275\341\350\022\276\246\3612\275\003\031\312\274\261\317\240<FZ4=\342u\271;e\244\337=\020\224v=_\240\032\275d$\313;Q(\024\276\322\322_\275>\260\234=\307\002\220={\260\216\2745\303%>\353R\234\275\240\346\240=e\023G=\367k\377\273\326\333G<.\331\256\275\356A\022\275\306\210\207\274\376M<\273\025\000*=x\231|=\255\352\001>\230)[<\220\\\373\275`\224\332\274\306`\225\275\264k\024\275\242\362\335<\345\217\311<\022\243\177\275W\3676\275\377;\354\274\326,\273\275\324\233\346\275\376z\220=9\nh=~\320\335=\342\226Q=I\034$\275\335\253{\275K\357\243<7\\\262\274Y\345x\273\n\246:\275{\017G\275\247\345\257=\256\210v\275\000\002\222<>M\024=H$$=\220\205\014>\202\211\013>\315u\031>/\311`\274@5\'\275TZ\373;\254\324\204\274\007c.\275\230&\272\274J\357/\2759\327\343\275\317\026J=\223\232\255=D\251\307:\246hE=\221\266\235\275\364\345T\275-T\031\275\360\217\203\275\200\363\205=\\\360\275\275\202\353\234=\210\333\271=\373\200{\274\270\377\351:F\353\007\276\237$\320\274\314Q\223<FS\244=\026\217K\274\304\267\206:V4\247=\246KV<\245\333\261=\303\226\200\275\201J\230\275p\265\005\275\303\003\2309\363\327\215=\270\034\234\274\257CR\274\206\211g=d.j\274\275\325\230\274\210a\273\275\261$2\276-\337\276=\236\371\276\275\207\334Z\276\275\336\207>O\301\225\275\217f\266<\221\224\255\275\037\235\347=\362K\033\276\367Wb\275\266\305\333=\213\367\001\275\343$C=\257)\002>L\221\036\276\036U\032\276\234\222k\275\0205\000\275\277\020\272=[\370\030=<+\254=\340\243\343=IW4=\207\333%=\300B\002\276\250Q\361\275\305\224\022\273}\000\"<\311\365\236=\314\353,\276?\300\022=H\222\340=\342+\031\275%\321{=\271\315\016\276m\030T\275\024\010\251=\355\3265=\230]\232\275m\312b<\375\251\242;}\347J\275\"\273O\275k\344\267\275\375\263\310\275\225\2203=.\273\277\274R|\227<ZX\331\275\277C\300\2758U\303\272j\375\274=k\362M=\225\321\275\273\207\237\322=\216\022\200=r!.=x\203\r\274y\243\324=\262\037\026\276>\'\310\274:\313o\275\211x\013\276\014#8\271\327d-\274\017 [=.\365\226\275=\345\023>p\240\242=EQ\020\276\237X\241=v8k:\237e\027=\352L\017=\262K0=m\002\334=,\246\364\275-xy\274\321e\037<\223\225\277\275\206\032\251\274\235w\341\275\206\232\342\274\343Hg=\300\252\014\274&\320\235<\333\311\374=\204\313\315=>{E\274\001\225\330<n\017\362\275\260\367\264=7\304\030\275\270,\022\2755\272\367\274\373/\220\275Hk\244;\321s?>\253\026t<\0245\376\275\362\312\356=\014\265\273<\021\224=\275n\344\352=\271\021@\275\276d^\275z\375\271\273\201\334\315=\320\225/=\364s\204=K->=u\303\223=o\224\025\276)\030\275=\252F\032\275\227U\270\275\307;\225<n\253j<^\3146=\010&\277=\312\327\035\275\000u\204<T\257!>E\335\033>\355\001j\275|\336^\274v\016\037\275\350\350\237;\302\032>\274\206:\200\275\307\037\222=\234%B\275\311E\211=u\330<\276>)_\275x\367\026\276\211\276C=^\205}\275\227\315\264;z>\177\274\315t\353=o\rV\275\207\2007\273\240\215x\275#\316\274=\312\373F\275\010\034\240=\341\r\247\272\n\350\366\274Rz\003\276il\337\275}h6\275\034D:\275v=\346=Mn\237=7+\332=\273\211\337\275x\264.\275:\235}<\331\367D=\372\031\212\274\306\370\237\275%$E\274d\242\250=\307\027\363\275\365\004\006\276\335\367\262=\263\014\354<\276\232R\276\247i\253=v\361s<\031\343\217\275\207zl\275K\315\204=\034\337\313\275\325\231q=:\204s=Rz\260\273m\355/<\207\237H\275\327\351\313<#\227\'<\351\267\213=\234P\216\275\263\275Y\275\201\362\337=\276%+\276\220\234\030>\360\314z<\2658\275=\007\006$\275\362\274\036\275\320\023\016=\200\372\233\275\022z\223\275\344\277\322=\007\225\033>7\234\020\276F\027\365;rU\270<\017\311\274\274\232\2505\272z2\"=N\001\367\273\271\363\226\275Z\"`\274\206\201\347\275\302\220\351\274_V>\275X\322\362\275Kc\276\273\275le\275\331\025c=\335\037t=\242\274\307\275U\345\214\274\335\354\016\273f[\003\275\306:P\275\326D\002\275N\211\000\275\'\301\350\275\206\275\366=\270*]\2733\207\330<m\326\333=\212\035\n=\315\355\017>\273\304\240\274\254\243\264=\222:<\276N]U\275\265D7\275~?\000\2766\366O=\376\277\306=\024f\014=\243\036\017>\000\022\223\275\331\213n\275!\r\342<kZ\355<T0y=\010\024\277=[\0100\275\213t\347\275W\265\206\274\370\321\215\274\311F&\276\205\207\337\275\257\364m=a4?\275\"\340p=\347D)\275z_\236=\210\035b=\273\230\273=&h\353<\014,\373\274\372\233b=m[L\275\302\300\204<\1777R=\335\270\022>\262k\027\275\007\t\317\275>\021@>,\025I\276#~\204\275\344a\324\275\027\236\013=\025EW\275\365q\220<\036d\220<W\n]\275\245\317\301=o\377\371=\212jH\275\302z\306=\366\214\000=\261\277\267=\263im\274\202\257N\276\363/&=T\322\311<\037;X\275\316\315,;l?\332<\371Z\332=\364\245\360\275Q\0227\274\315rz<\266\367\254=\027\232\232<\217\'\332\275=\305{=\200g\\<\351\033\251\274i\3527=R \346\275\252V\216\275\344\004\034<\346\252r<$\357\211=RI\257\274\341\353\246<Qp\266\274\351\376\253;L\375\226\275\352\250S\276\223\204]\275E\023\020=\311\263\364\274z\222\200\275\220\354G\2744\342Z\275\216OG\275\n\330\032>\250;d=\277\336M=6*l=\031!#=\247\006\254=\'\273\261=\t:\270\274\245\026\347<t\310\037:o\024J\275\021\341;=\277\215\306=\365\3207\276s\366\303\275f$\177\275\331\214,>\270\246\276\275h\246\017>\324\256X=\260\017\370=\315GM>\310\262\362<4!h\275,\243\\;[r\265\275\\3\213<7G\031>w\252\200=\311$B=T\2372\275\245u\373=j\177\241\274\356\356+\275\216m`\275\247\314\004\275\251\027Y=\220\225\241\275\2154\020\275i\201&>\220\007\240=4\032\032=\267\034o=t\306o<!mQ>\300\210\333\275\006?\334\2731\202\010>+\035\2629.l\020\275\362e(\275\007\211E\274\036\305|=\376\276)\274\010\373|\275\367\3029=\250\214\311=\006M\013\276\332\361\321<i\033&>\346\021\207=&\200\354=\0215\177\274p\367\304<>\264\n<02\312<r\266k\274r\206\037\275\251\345\253<\027\275\037\273\252s\005\274q\372\006\276\014\367p:\345\2322\275:\277\330\273\342\264\265=\226\366\332\275\206?\217\274<\n =\371\3052=\033\235\373;`\337\212\274\360\022}<(\034j9\346\366\373\274\000e\242\275\262i.=\336\320\362=\265\320\330=\034\254{\275\241\233z=\201\000\260=`\213\\\275\014\345x=\341K!\275,\033\275;\221{\013\274?<\035\276\242\343\234\275\225\320\311=9\007j\274\320i`=#\201.\275QT\216<\2656\337<\\P\020>\266?^\274vC\271;\344\256t:W:\033\275\257!K<\373k\003=j\310\267<\212)C\276r\301\360\274c\267<=#\253\316\275\241\307B\275\311\n\250=45\214:\270\265\331\274Ud\200=\203\343\216=\215\223\023\275\013>\302\274rP\236\275H\356\365=z\313\324\274\233\242\003\276\273\352\263\275\253\020&=\312\0374>T\246\"=\244a\351<\362\250\235\275\350\320X\274\343o{\276\353\252\317\275\265\262\210\275\033\316M=\030\351H=\377\226\322\275\342I\260\274\250\213\030\276\241\005\232<\244\307&<m\331j\275_X\">XLF\275l\024\214=\326t\266=\236Y\247<L\201\274=\223\357\250\274\254\363\233=n\242-=R\346\253\275d\324O\274\250\031.\275\201U\032<\366\027\205=1\266N<\235\020\354\275\311\334%\275\374|\023\274\023\312!<\255\033\t=C\004&=O\257->a\210\376\275\001\022)=!\256\271<+3m\274\t\245\203\275\240\273\335=V(7=\207q\257\274\313\340\301<\325\211\201\275vx\353=\246\335\037>;\366\221\275\310\264M=\214\274]\276\344\004#>\241\025a=\343\235\267=C[\301\275\355:\207=\305\023\023\276\311\273\217\275\232\313\211\275\356\213\003;\001\247\270\274^\323\002\276\313\316\022=L\224><\256\314\'\276\'\327=\274\035[a\275\223\251\232;\2245\207<\275\224\254\275\317h\024=\0004\224\275\255\327\231\275\333$\215=\254M\017=\031\376\313\274\202\355T\275\350\363\322=B\261\220\275\026\020l=\"\3211\276\237\277s;\273?\270\274\231<{\274\035\302\350\274\2212\215\275\371\033\357<\356\205\341=\315$\014=\322\2611>~!\010\275_\214\020\276Tgs<(lL=\344\344\222\275\275\361\321\275\010\033\225=\024PK=\354u\256<\324K\271=_\232\355<\026\217\224\275\214\005\360\275\371\266I\275\003r)=\374\014[\2741\320\211<\001\220\341\275)\363\013\275l\272\344<\371U(<\177\231\275=u\345\337\274\263\330\021\275$\021\253\275\372F\201\275\216!\027>\023\267\300=\020:\301\274\"\031\205\275\317\373\317\275\366\272\227\275c\265\272\275-p\327\272%6\023>g\373\001\276A\375\017\276fi\001\276\214\203\036=3\201B\275g\336\335<\004\023\"\274\3066\257=\236\302H\275*\324v\274>\255\014\275\225\323 >\373\353,\276\376\005\337=lu\315\274\267\000\034\275\020\270o\275p\361\347\272\203\254\365=W\212[=#\264V\2752z\351\275\004\364\204\275\361\345\377<\021\241\226\275\036\270\006\274\230\230\234\275b\031\245\275E\326l\274#\023)<k&\360\274\365x\310<\024\000\302<r\310\323=\340\374!>\221\025\204=\271E\265=\021b\005\275*tf\275\276\204\327\275>\343W\275\214\001\211\275\274.\'\273\344\371\273\275\333\331\242=6\256\232\274X\333\202=\374\277\247=\340\201f=\352\233?=B\373\257=\322e\325\275\346\322z:\231^\274\275&\\\005>l\327\333\2751+M\275\035\372P\274R\254\216\2755\273\207=D\3648>\335fZ<$K\340\273\274\245\257\275\330\020\325=\302\370\240=\024Z\014=\370\010\337\273\2607\'\275f\377(>\216\272\007\276\017\270\360\274u2\320;l\251*\275\310\302\201\275L\371X=Y\261\220\275\221\366\271=\030X\354<vfw\275\346z\241\275Te\334=\223\311\210=!\326\256=\330Q\257\274O\302\000<\272\252\326=\314\215\312=\205\037\232<\005\311\370=A\022Y\276Z\006\224=\316\237C;.\336\263=\317\356\200=j\030=\275\323\031i\270\300\034\001>\007<P\274\225S\210;I\003\007\276X\361\250\274\307n\227\275\345Z\251\275\n{\322\273{\236b\275:\265\'\275\006\177\327\275\333\272d;\205G>\275\225\346\232\275\323t\213=\307\270\263\274y]\303<\270.\005;\220\340\342\275C v\275L\272\326<up\365\275\215q\232;\330\321X\276\335\353\177\275\312\360Z\275f\3534\275Y\216g\275\230`1\2753>\214=\253\310\034>\354\313\306=\331O\310\275\033\003\336=:I\304=a5\341<\027\203{\274\177#\005\275\330e\";\251\317z\274\214\024\230\275\"\271\327\274C\356\333\275\273\241;\275e\031\n;\337\226\230=\231\021\032\275$\314\231\275\207gf=\353\262\262\274\252\274\004<\006\221c\275\266\320\343=\316]\220\275\270\035\332<0\247:\275C\363\351=\354\311\250<\035\316\256\275#\177\t\275\2152A<\362\347r=\\\322\267\275\314\225\210=<\267\271\274[\324\\\275\212\310\231\275\3021A>\360\006j=\373\363)=\241\235==#vP\274A\352o\275\232\237*>\377\214\010=;\227!\274\333\017!>\350B\264\275p\332\031\276\364\243\222=\301H0\275\013\305L=n\360\220\275\352go>\007\357\207\275r\032\\=w\032d\275\253\274\023=)\217\201=\204v\241<6\300U\275\301\313\376=\\2\306\273a\263\263=\017\020b>\372\177)>\0147V=\3474]\275\321\337@=a\202\371<\300s\227<(\315\201\275\374;\342=\255>F\275<\025R>\362#\307\274O\251J=\256C\332\275v\026\224=A\232\245\2753\022\374;\306\311\035=\302\022\033=31\261\275L\334\241=\033&\256\275\344\254C\275\371\271\347=\351\240\235\275h\021\307=\007\357\032\275N\2329\2754\313\312\274\353\263\212=\364\321\376=<\271\341=\350\374\321<\322\267k\274\"\252\275\275a\375\206\273\032\037\223\2756\001\355=\327\377\347\273l\013\227<\246\341\210=\356z\n=\321\226\247=\337}3=\300\020\200=\216\311\353=\356E\303=\305\326\377\274\311\024\"\274\003\340\026=\357\035]=a\224\353\275 g\013>J\"\233\275\006\336Q=\254\375\336\275\332q\006\275\331\350\243;\207\332@=\027\272\200\275\341\226\240=\000\325\000>\224\360\236\275 \317@;\372\314\301\275^l\277\273\331LK<C\236\005=\247\r\216<$w\345<\034\266\231=X\314-=Q\213\275\275\235o\306\275$\306\345=r\357\214\274\235\341\237=R\020?=\356\246\377<+Zc\274e\244\336=\313y%\275\r3\263=\340\270\251\275,hb=\252\360\025=\364\363i\275\"\253\'=\320\240n<\030\372\202=:L\315\275N\266\355;\277\r5=\006k\343<\246\301\234\275O\377\220=\033\273\373=\010\315$\2737W\246\275qA\325=\342\376\256=e}\206<~U\344\275\305D\225=\342\364\366=F\224r=94%<\327\230\216\275\017\347`=\360\303%=i\232\031>\255\226\220=2T\245\275|\331\366=\010p\220\275{\0054=\252\327\304<wT\365\274f^5>u\365\366\273\221\372\371;\373\210\200\275\323?\247=9e@\275\ny\000\276hJ\230=\327\340\007>KW\304\275\327\310\027\274^A\370=\200\344\033=\350\364\214=Q\351\276\275\2052\023\276\347x\276\275\235\252q\275@\333\236\275$\251\354\275\246\251\337=B\2123=\374\311\315;I\222\233=\021\251n\275P:\235\275\266jk<&\n\023>w\315\355<U\221\312=\213\336\347=\265\243d=\210\320*\276\351\3700=\246~\214\275\311\320\335\275\341\013P=\320D\350=\360}\271=x+\327\275\330\027\304\275(!\022=J\001\311\275\261\353\034\275+\354\267\275\004q\352\274v;x=\033\267\004\275\220\376\306=L\375\373\275\327\033\204\275\330\247\024<7\266d\275\'\273\312\275G\355\202;\223\006>>\373\017\253\275k\372\215=([\030=2\361\037=\212\320o\275\313\233\272\275\034J\252\275\025\2658>T*\361\274\226\276[\274\006\242\005<T@\241\275\0274\353\275\256\2124\276\271q\035>~\252#\275zt~\273[\275\260=\202\211\260=\356z\215=\375\371U=\216g\013\276\005mf<\0057\"\275\327\212\335=\252jy=J\223\240=\325\316\256<\347\211\033\275o\255\232=ym\316<k\245\212\275\305m\264<\002k\022<\024\302F:\3744\221\275\265\'\022=~||<\301\370*>*\245\357\274\244\342R:\210B(=\257\300\022\274\222\016\002\276\255jO\275+\210I\274\024DS=\226\360\017\274\222\014\025<\273\332v\275\2736\336:O9\t\275\212V3\274U\t\'\275o\363\346\275<\300\2029Z\271x\275\273\346\014;\243\261\235<!\313\033\275\331\352\365<dA\007\272\207\213\341\275Z\232\366=\022\023j\275\252\213\203=\n\332\231=\223\213\253<\035+U\274\335\021\r=\215\023;\275\231\341\206<(D\014\276`\'/>\362\002f\275\227\r\317=Y\n\377<\370\372\373=\366@\013=\030\337=\274\366\215h\274\304\001\224\273\005\340\271<\216x\302\275\247^\341\274 a\207=8\005\200=\217c1=\253\\\273<\366\342p\274\241\306R=?\342!\276\257\303\220=\032\345\350=$+5\276\313\301\274<\277l\363<\341\305?=\\>\010\275v\300\360<\231z\032\276ca5>\270F\377<\303\325\264\270\356\3174=@5\200=\024e\304=q\244\004\276\230\024\312\274D\350\357=\321\210\237=\277[\203\274\314o\244<\367b\375=\376\276\204=\242:\007\276\376\336^<\026\023\032>P\325\356=\026\312-=\242\225\220<X\006\307<2s\260=w\254\316\274{+\220\275Cv\026\276z\324w=\375>\026=\303\324,\275\230\335\242;\316[\374<t\374J\275\313\na=WZ\237=\304\360\323<\017 \260<O\264\332=\264\264>\275\330\341\017\275\3467\025\273L\330=\2742\300\310<\216\357\334=5\324\362\274\276\362?=\232g\007\276\344%r=\036\344\334\275\345\035\201=a\262\013>*\262\232=eD\307\275v\037\333\274&\221\356\274\010\321\300\275\311\245B=J\324\031\274%6\006=\301\353)\274<\023\241\275kf\376= \346\362=\312\313\353\275\226\250\312=\322\275\246\274\340\251B\275\217\230a\275\362\325\310=<\r\213=!V\323\274\376\344\027>\216P+=\266E\033\276\347\276,\275Au\250\275\252o\227=\1777\010>x\3451\276BZ\206;\331\314\333<\035\205\000\275\320a\246\275 \365l=\177xh>\254\361:<\213\004\001=\202\215\r\275\371\226\355=\024\276\240=\177j\311\275g\347\337=CQ\330=\030\211x<\315\204j\274\202J\263\274_\336\244\274\373k>\274\341fN\275\022\217\211;\353\275\332\273&\302M\275\366\341\233;\024\007C\275\023\270\247\274\244\243\374=\204\373\023\274\351\254\365;\034m\224<pd\022>.\240\036<\325.\374=\315\340O\275\004\321&\276\334\243\360;\016\232\317\274~\375\211=G\317X<\374\0141\276\353\375\335=\247\0166;0\221\272\272\351k\244<\264\010\242;H\221\022>Y\362\300=\001~w<\227\335\200=kd\212\275f\016\263=0\352\230\275\236J\214=\256\222\232=\334\325\302\274\265v#>\322\251\000>|\217\271<F\367\276\275\025[P=\353\352\023\275\277@n=\210\362\036=\304T\324\274\2425&=$6\n=\324A\251\274\211fh\2753Bk\275\233\272\223\275E\037\303\275\326\1774>\371\212D=\262NE\275\377\333I\275\020s\200\275\305\247)\276\2503`=\3749n;5\006@=\306\020$\274\327\005\201\2753\024\365<\277\344\231\275K\033e\275\236\241b<\0148\231=\234\357\216\273\025\253[:9\265\240<\267V)\275\027i\265=i\354?=\351wD>\036\366w=\314j\250\274fY\364=U\333K\275\302\2002\275n6\006\276\350\360\313\275\033\317\221=v\222\321=\257\177\376=\354B0\275\3518\025=\336JP\2744t;\275dz\024=\323\330,=?\227\317\275\261o!>@5\377<$\327W\274\215nU\275\357}\033=d\027\245<b\232\357\274g\246\010\276\215\235\316=DW\217\275\303[m\273\344\2267>\357\376\025>\235\030\264\275\273\273\260=\213\235\241=e\375\270<a\340\177\273\310\037\247=N^\271<\013\212\342\2737]\t\276\334,@\274C\225\270\275\3074\206=\316\025\266\273F\264\r\276u\216\312\275:\243\305\275\350\371\321\274\373\320\200\276\037\354k\275\312\332\024>UP\3558>\017\242\275\240\245\037\275ZC\016=\367\357==\251\332\202\274\266\300\r=\231\233(\275\306[\241=\341P\310\274\313\017\315\272\222a8=\024J\264<\005N2=\313\017\025\275\310|-\276\225-W<_\330-\275\343H\244=d\005\202=6\321\333=V\031\261\274\267\231\r\275 %\005>\340=R=\305\247\313=\331\253\200\274NmH=\346\232Z\275\226\206\010\275J\210\354:;\225\350\275\255\363\302=uT\351<J\272\010>\347\275u<\224C\306=7A\225\274\021\2111\273\252\377\016=\021\247)<M(.\276\321\3665\275E\241\341\275j\275\233=\276\347G=\304\376\247\274\367$`\274\314&D<\330vH=\370\226/>!\264{\274\306\320f= E\002>\257\210i\274\330\203m\275I\245\010\276\335h|\275\352W)<\364\027\031\275\352P\336\275b*\234\274\310\2057=\324\370\347\275\003\202\250=\303u\221<!p\036<\234\302\255=\017\353l\275P\222\247=f\007\270\2732\004\222=1\365n;\257\302\024=/\007\276=d\250\000\276\272\315\036>\202\242\326=w\313\002=\021V\325;\205\250n=\\\002\\=i^\353\275f\027I\276\006\270\336\274\037\225z<\272Z\247=\036\304\337=\005\013\256\275\221D4=\206\316\205:\230X\2439\244eo\275\004\264q=\321\001\364<\366A\301:9\233\252=R\241\275\275E\021\222\275L*m<\014\262\267\275P\316$\275J\344p\275\373\025\253=\202\005h\272HE\316\275\304IS=\231\004p<\251\021\251\274\277\252\262\275\203wH=\324U\006\276\341\321_\2740\020\377\272\364R\260\273\036c\005\276\206\362\301\275\347|\002=\005!\t\275F\306%\275E\376\035\275N\230\024\276\3253\326\274\016\242\027\275\"3)>F\377\311\275\340}\316\274\363\025;<\333\275r\274\342\214\304<N\017\342=\004\206\200\275\016\367\004=\324&\327\274\256\235\004\275c\374\262=\205\034\035;;I\246;\262+\376=\277\332\267\275\\\247g=\r\207\004=\300D\367\275\177v}=Fr%<\372\312+<\203\230\326=\347\346\351\275\320\237\301\274\343\274\266;\325\0103<\036\252\266=Q\334\300=\177C\275\275\0002\267\275\207U&=\344i\201=\262M\263;D/`\275\254\256\337\273\3206\252=\217\276\305=\351\220\032=\205\253B\275t\224\303\275$\335\230=\367P\301=i\246\021=p\250\347\273\335\354\010\276\325n\302=U\3449>O\"\030\276\206\nr\275\354KX\275\210\202><Y\202T;Q{4=N\365\022=\244o\222\275N \014>\266\023\000\275\372%\033\276G\031K<\027\203\266=\220C\215=c?\224\274;\023\323\275\355`\214;%9><8\372\242\274\373\014\n\276P\320\245;\367\300\007=\026\n\022\276\007,N=G\332p=\033E\265\274\201\300\275\275X\262\226\2741@f<T;i=\272\245\346=\214\215\212\275\313\030E\276\243wF\272\330\030\374<2\022%>}\251\315\275\372\020\211=\247\264F\273\321\t\006\275\3455>=C\335\277\275\373\3477\2744i8\275\311\302\006\272\207\334\023\275\r5\001=\234u\305=\354\317!=\270Yz<\311\225\214\274\342j\263=\224\346\374\275<\327r=!p\247\273V[\201\274y\320\024\275\370\250\021>\363T\222<\376\314\2369\245G@=P0[;\362\222\366\274K\277[>^\364\200\275E\362\247\274\nQ\350=\304\305#>0\236\317=\205\022\236\275\177j\217<\374\350\246<H\243\334\275\247\377\202>\356\263I<+\214Y>\257\373\312\273\373\003Y\274\205\225\311\275\210\213\376\274 \333\374\272\351T\231=\274+R\275\3050\003\275,\023\353\275\235\367\374<I\257\026\275\t\317\315\275\027\243\212\273A?\222=E\211\327=\323\ry=\342\273\022\275\264\260\351={~\302=\254\247\226\275\203I\210\275\307V\265\274\321>\033\276\240\363\027=n\214\"\276i\016\330\275\210\026\036=Ng\204<j\'`\2757\376[\274\313z\276\275;WO\276\234M\261\275w\331\266<+`\271=j\257\252=\327\330\026=\n \247=\031\342)>\305\372\326<\374\031\231\275r?\257\275\220g!\275\006U\331\274\243\016Y=\257\177@>\257\0345=.N\300\275\225\2754\275`\200\014\2759\315\260\275bX\302=\347\336@\275\223\333\004<\211\357\214<AD\363\275\314.C\274\252\313d\275\003\031\016\276{Z\344\275~\250\254=y]\375\274h\203\206\275$\021G\272\250\236 \275\331|\024\275\356aU\273\270\255\310=F\327\230\275\342\300\232\274\233\307~=\344)\014=i\200\234=\240+\337<\365P\321<\252|;=\265\266G\274\277\371\356<\032\031\212=\340\311#\275\325\262\021=L\224\347=\360\007,\273\371\225\'=\241eq\275\360\353\002\2767\200\222=\347\027[\276\317\267\276=\307.\032\275\027\376\200<6\003]=\3643\312\275U_\211\274\365!\013\275\005\234`>\242\216\214\275\177\220v\275\3258\251<\260\207\273=e\246\373\273\036\010\275\275%I\250=\325\3309=\022\222I\275}\201\027>7\323\"\273\213\274n<\347\035^=\003\300X=\3069)>\222\312r=+\210\021=4>>\275\227\036\333=\277\270Y\275\035\267\204\274n9\002\274\230\\\276=\360Z\322\275\223j\251\2755k!= \3741\275\n\212\027\276\211K\227=8\210\247<l\333s\275\203\334\026<\246^j\274\347\020\265=\353\263\335\275\020\272\340=\321\244\200<\304\304\211=\0240\244\274k\324\330\275;\304\024=\022{\244=/\200\226=\247\315[=\210\275\263=:\317l\275`p8<\016\236\361\275\331\264\214\273b\251\352<\371H\027<\277;\031=)a\021=\261\321\366\272Z\352\310<L\206o>\\\032\'>\200\255\201:n\253\354<\325,\264:\246\001\254\275u\344\315=\342\227D\272V\360\355;\373\200\362\275Z3B\275\212\210\211\274O\351\205\274Y\203\325\275\250\361\036\2751\010\202\275\357o\232<\003_L\274\364\301\342\275H\006+=\231\275\217\275\355\026\267\274c\270\177=o\330h<!,\220\275\373]T>\022$X\275}\337\340\274\241\266\017>\013U\311=\230a\007<p\256\232\275\362\347\201=\315\303@;\006\305\036\276\351\257\215<Z\231v=\373B\364\274\253\244\306\275\242v\337\275z(O\275> L=\240\214\205=\331\177\222<i\366\222=\327\210A\275]\340\253\275\267T\273\271\315\277\261\275\262\253(\275{*\232=\177\267\000\276\300\363\323\275\310\354Y<\356\0270\275:!\225\274(\216\215=\\\344O=t6\367\275\177\364\330<0\354\346\275\252\256\002\274\326\2074=\350\211\321\274\n\023\027\275\t\344\t\276\274\357\336\274\303\\2\275\005y\036\275\035\230\321=v\241#>tf\311\275d\234g=\264.\372<\321\271\273\274\037<\325\275\2600<\275D|\221;\034BS\275\351\212\221=\242N\315<\004\244A\275\221\033\013=\336\254\336\275\272\220D\276&\035\355\275\274\310\276\273\245\002C\275EX\326\275n\330&=\363\352\014>0\337\302<\343\226S=\230-x\275^\331,\275\311\322k\275\332\n\226\273\307\026\n\275\t\344\014\276\307\362\337\2751~F\273\001X\210\275[\035\337<3\3341=\377\242\003>Z(\255=\370\345\025=$a\233\275sC\265\275\236\356:\275\n\n\327=\356\261\223\273Xc\026\276\247 \346=\r\033\236=\336]\275<\355\331\300\275SZ\346=N_\202=\230U\342\274_\034\006>\\M5\275n\323\266:{\177\024\276\001O\211\275\177q\304=%\206\021\274\350\260\272=\340\305\021>\321\324\027>\3243\334\275\246w\273=\242\231\030=\353\344\240<\340\037\036\276jt\220=\t4\245=$\366\207=\344\207\317\275Q\206\364<\310\336\266=8E\361\274\237\032\314=z\337\245\275=g\266=\243l\247:>\037\265\274FK\205\275y\007\234\275\266(o=A\371\021\275TSY<SdQ\275\250[\260\273\334\016\200\274Dl\252=\270\260\000\276?a\200\274\233\014\206\2743\024\031\276\344^\223\273\331\375\206=\tRZ\275\341;\260\275\235_\242=\356h\036\275?\t`=\250\354I\275\230@\310\275\005\031\273=\334}\252\275\005\177`\274\242p1\275\365d\347=\334SL\274\360\252\371\275\374\331\203\275\366\r\211\274u\364\264\274u~\010\276\305\214:=\031\035\300\274K2\213=O\245\374\274\270\200\250=\316\225\263\275\254\010\216=\0130:\276\226\017\360=\003PX\274]\275\344=q9\246\275qJK=\322\225\010\276\326\230\004=z:L\275\271)\206<\356\003^\275*8`\275\"\r\310\2754\224\"\276\247N6\275\242{\261=\312\001b<},\356\275\2732U< R\326\275\334\027\201;0\255\004>P\341\225=\223bR\275\255\016\256=\334\020\244\274\256\364\366\275\n\005{\275(\002\341\275`1T\275\006\244\365<\206N\030\273hk\322\275\245;\231\274T\363\255=\315T\n<^\036\320=\306#\336;\347\227\021>G>\347\273\257\376 =\330A\355<\2444\262\273\326c)\276\003HC\276y\346\004<\017\376\333=\214p\376\274cqH\275&\327\027\276\351\000B=\260T\014=\376o>\275p\202\244;d\374\230<<[3\276\253\207\314=\357|\247\275\224\005!=\374\343\201\274\310\253\366=\031J\245=\252\302\251;\351\323\214=\367\320\000>\354\333\204\275\215\022\254=\333\367\013>\354k\002=\226\312\000>\301L\253=\252@\241\273\370\356F\275\263\352\272\271\357\311\370<\353C\002=8\274\336\274\\\003~\275\320\317q=\006\311x:\370\317L\274L\254\346\274uc\201\273\350--\274\276c\360\273N\026o<\372\240\375\274\214;\204\275 \014\364=r\201G\275\350B\003>\252D\021>ZE\274=\340\315k=-\036\037=Om*\275\353\211\033=\316\276\220\275BU8\275\205\242f=\314`\356\275\025,\031\276\220r\033\274E\356P\276\225\243`\272\347\257\200\275\263\236\357<5n\237\275A=\021>\330\211i=\327!j<>\024=\275\365\006\244\274\304\367\001\274\325?\036\275\251o\261\275c\355g=\205\311\201<2m\247<XrQ\275C\324\022\274\337\365\016=\361U\336=\365\3222=\253\366\\;>\027\275<$R\014\274\223\327\177<fP\212\274\264\232F>b)\211\275\347\364\364\275\313a\004>p\t\304=\326@\242;\246y:\275\230pW:\322\372\002\275=\n\032=\204\276\254\2756\276J\275\224\252x<&\310\014>\020\277\203\275{(?\275\260\246\256\275\227On:D\036\021;\316&6\276\275\231\t\275\275q\321=R\202\264\274\024\022\024\276\237\255\206=\014b\006\276\236\014\314\275\267\232\300=\307{\036=)hj=C\207\244\275v\236/\275\233\033K;J\262\030\276\317(\262=\317\314\277\275E\261\274<u\312\013\275\354V\255\275\004\205$>\244\t\005\275%\245O\275\367K\337\2750B\313\275\336\254\336=\345\312\332<\257\325\000\275\321>\272\275D7\002=S\250\016\276`8N\275\322f\270=p\370$\275\037\350\r\2759\315\336<\t\342\022\275\223\024F>\321\266T\275\261l:\274b\265E\276\245\223\206<\310\251o\273[1t\274\202\352)\275\nK\'=\270T^\274\264;\322\275}u\n=-\352\\=\004\344o<\365\331\320=\026\"m=\244\033\336<e\263q\274\213\327\025\275\013\203\267<\022\027\017>\331\330\t\275\013\331\225=\303E\200\275\030\375\230=\027T1>\005\000\304\275\353\262b=\023\266Z\275Y&\014\276m\006%=\004\037\334\273\336\003\265:xH\344\274D\244\320\2750S\000<\265C\342\275q/\217\275\010\025x=\204s\003\275\251\213\031\276\301y\014\275\336\372[=\201\213\272\274\310\020\324\2752\266d\275W\242_=\362\372\037\272w|\235=\344\322\213<\246\222\207\275\232\3561\274bx\302=+\210\243=e4\375\2758\355\230\275I\323Z\275\316\215o\275\266\027\023=\300\267\201\275K6\314=]\305\022=\n\030G\275\002[\014\276Y\205\001>\320t\321=\242\351\277;2\351\"\2769tS\275P,H=\263\356\022>r\200\014\276\273}H\275,\351\341\274\302\272\274=\212{y\273\302\344\027\275\027W\021\274\237\223\322<\332\021\023\276\030$\224\275\022\000t\275\037pp\274+\305\302<\230y\321\275\334\352\252=\245\312\244=\265[t=L\236-\275D\356\317=\326O5\276\211\215q\275\007\251\020\276\236\260\257<nS\324=\370\336+=2\025\242=\356\230\205\275(C\377<\177\212j=\3214E<N\211F\274A\333\267=\270\324P=gBW=s\334\302=i\227\256\273\207k+=]\211\215\275\323Q\n>\350|\277\274\007\307\373=\263\370E=\002\317\241\275\3279\343;\263\032#\275\222cs\275\343B\224=\231\'\374<BR\030\276\032\272\241\275\376\316H\275\025\324\377\275\ty%<\243\305\303\275\317\236\224=YX\023\275\326\206\366<\237)7\275(p\224\275\255\264\200\275\325QC;w\032\035>\275\204~\274$\377\006\276{\377J=\006]\347\275\3674i\274\355x5=+\334J=\262\336->2\344\354;u\230<=\013\356y=\300\254K=\265\347]=a\005\366\275\211\014\221<p\214\010=\2072\322=\272%\010\274,b\016;\277\222\256=O\005\354<\270\341\213\275I\025\251\275\375\243.\275-\3669\276!\\P\275\256\261\0259}\2267=Y\231C\275\203\364\265\272!\330\252;\340\014\315=\334\027\225=x\037\213\274\204\201\236<\224\036\322<\211\226\221\275\263q\234=)p\370<\203\"F=^\350\313\275\026y\265\275\270ax=V68\272\373<\276\274z\005\311=\330:l\275$-\346=S\311\004\275\251\263\341\275M\342\372=\277\201\370=\026\370\263<\225z\204=\212\314\027<A)\272=TL\240=\244\253+:\007\322\243=\025x\264\275e\366\313<\241\334\227\275\202R\340\274\312\261a\275\230S;=#W`\275\302\270T\275J\023E<\'Gj=e\361\236\275\026e7=\016\321\244=\317,\005\276\265&\357\274\355\243\324=\252\020l\276n\032B\276\"\336h\274X\007X=\256]\334\274K\014\017=Y6\n\274-/A\275\003\032e\275\277i\221\274\241m\r\275f\253)\273<\332\324\274I|\220=\222>\230\275L\301x<fr\224=O\030\361=\302\017\002>\031O6\271\020<\214\275\273{\r\274K\333\n\276\230\230c=\237\002M=$\267\206\273r\362\206<\250L\025;Q\346\312<\'O\311\275\312\241\n\276{\257\224=\330;\221=\357\250\372=\360\301;>\251v\224\275 j2<\030\261^\275:\352\261=]\030$\276\333\254\256=5u\372<\010\325\257\275\237\307\001>`\377s\273\235\234\024=\336\331\313\274\265`\202==\022\271=\350\335\345=\245\3446>3\237j\275*\304\332<\350\230\t\276\252\224\222\274\243K.\275\252\214\251\275\227\2001\276\010\322/\275K\232\214;\360\030\247\274\370w$\275\007\201^\275\305*\001=\310\207\363\274c\353;\275\340(\r=\205\376d\275\372\021\210<+\327\221=\362\034\022\275\377\253\307\275M\237\262<O\204\216=\372\357\035\275\026\364\210\275M\001\036>H-1>\350\025\226\275\247P\031>\301f\372\275\246\220u\273\037\033(=\3667\030\275eG\253=\"Fb=\317wp<M)\006=\363\333\325\275\367R\313\275\335\266\300=\331\306\267=\305\346V=\277\333\372\274\316&;>\347\356\250<`D\n\276\'6*\274\026cg\275\375DX=\005\237\310\2751\314\203<}N\357\274\355\320\214\273\006\322\006=\035\235&\272$\202\247=\376\354)=m\021\014=}(B;bd\354\275.\177\227=5$\357\273\336\301\343;\250\325\022\276\376<\242;1\246\200=Q\236\323\2738\352&\276\030Qc\274T\301\324\275<\213\000\2763\316%\275\372^\232<4\233\265\275\031s\365<e\241\214\274U\271\262\274\241\021\327\274lg \275\375\277\201\275\211\360<<\233\025\226\275*,\275<\177[\007\275U\362J=\002{\256=\224\310\205\274\241\354\263\274Z\326\343\275\356j\227\275\267\254\230\275\372\347\001<}k\315\275\210U\374={e\327\274\305\356\017=\320$U\275qd\2107\'^z\274 \027\363=\253\034\302=xV\037\275d}\367;s\026\201=\231\377\216\275*\322\013\276\255W\367\274\311\334\235\2751\037[<Af\311<t{Z=,\004\226<\\\316\366=\204%\211\275\335\225\032=\276Sk\273\316\336\312\275\020K]>\0342\254\274\250G\233\274\275,8\276\266\352\216\275\037\357;\275\233\370Q=\260\005\177\276\303\\/\276h\262\035>!\372O=Y\271\'\275f\366\207=\355\304\326\2753\027\265;\0031A;\226\332\234\275s\255\r=\231\2515\275\233\202\215;lg>\274\302J,\275\324\'Q\276i\371\273\275l\177P=\037\262n<\215\377>\275cq\263<0\350\313\275\214\3607>1\345\210\275\272\024{=\340c\016\275(\223\241\275\305\220\t=`\362\">\016\271\243=\024\261\332<58Z=\275\031%>\312\235\025\276]\215\244=\014g\372<\370\200\327\274{\360\020=\254\361\250\2745\021\024\275\346\017q\275:\327b\275\220\272\222\275\231]q=\362\325I<\2504E\274\022\330n<\203\352\275=z \247=\227\002\217\275M\202\034>\367\035\251=\352\263\333=L3e:\022y\256<\037\231\311=\250\240\220\274\017\205\315\274\276zg=\227$\004=c\t\342=\212\3242\275\007\240\257\275n\215\321\275\305\365T=Ta\022\273\347\301\211=\025\026\341;8\257\013=\275\257\255=\243L\023=\325\024\364\275`\355\205=G\347R\275zq\343\275&yg\274\261\260\342<\225\365\024=\026\213\243=\026\242\275\274\374a\026\276&z9\275\224\037\260\275\204b-<\321\313\3279\001m\360\275\006\361\334<\355\207\240;\2059Y\275:R\036\276\374\022\234\275vL\'\276\343\244\013\275\266\363\253\275\007\201\007\274\257\005\312<\265R\017\276\356\010\313\275\252\200\262\274\330\253\274:\364\247\303=`K\232\274\324\357[>\242\220\316\273\306L\243\275\311Z\233=X\034\334=\373X/<PX\2056\263d\"\276\317\311\272\275\347\262\t\276\262\031\017\273h\302\024\276\221\231\274\275p\302\t<\337MK=K\3718>\nq\345={\004\360=\020\023\030==\224\320\275\326\217z\274\345*\030=X]8\275_\217\302<\262\336\226=\320\2708\273\025\315\207\275\202\320?>_!\234=O\374\236\273Cxn\274\252g\241<\362k\231\275E\024\206\274\023*\227=\266\031\274=\']2\273\257U\330\273,*\357=\307\371)=\266mK\275\230.\201\274\377\254\264\274\204\231I\275\314]\223\274T\3364=\014\361w<\240\212z={\335\004\275\210\361\375\275\022\\\227<M\211\275\274`\020\026<\271\032d<\035\3473\276\241\212\266=\310\276\232=u\261\263\275l\tC=-1\241\275\3616.=\"6\251\275\005o\366\274\232DM<\256\301N=\267O\036=$\034\302<\r\230\252\2746\356\347\274\325\\\332=\230\030\220\273\252A@=\004\341q<W\273\006\275\340\203\237\275GQ\365\273\3278\033<8\301\202>/F,=g-\312\275\344g\373\275\027t,\276\013\003\321=m\264\330\274\302=\234\274\2118\327=\257X,\276\232\374\345\275\331\252K=+\320d=S\233\227=\242\002\254=\315\263o=j\356`=\305\313\212\275\315\261\305\273\331\276\303\275\255C\303\275Q\'\036\275\301=\315<\323D\r=\225\006\352=t\245\203=\3530{\275\035\302\351=\261<\373\274|\327|\275t\266\352<\220L\337=\311\'\273\275\324\337\317<\314|\001\275\325\344\201\275p;\300\273\331+\230\272\026e\217<\013\354\233\274E\372G\275\026\006\252\275\240\303\024\276\2247\360\275\216\204\234<\026\010f\275L)F\274\033\351\236=\247\314y=b\207`\274M\355\334=\373_\204=KO\373<{_\013>8K<<\360\035\251\275B\211\340=Z\242\230=\tp\373\275\251QU\275\340#I=\016\033\371\275\r+\342=\214\221A=\306 \036\275\310\031\222=9\214!\276\334\337f=P\212\273\275\013\030z<;C\252\274\255\255\304\275_L\005=\242\254L\275\346\211M<*\343\346\275$c\206=\024\202\034>\242<\276\274s\234`\275\014S\225\275\006\364\372<\300\240\004\276\204\004\300\275\t\3314<9\tl=\326\037E=\025\034?<e\204\035\275\366d\224<Th\240\275zN\223=z\301\303\275\205w\326=\233N\246\273R\354\205\275U\203\343=\"\372%=\250\216\331\274(\254\337\275q%)>+\374~\275\\C\002\276\233\252\216\275Ia\274\275c\335I\275G\316\215=\344\243\255\275_\362\\\275\314jE\275\310J\255=\200=\'=g\254q\276\2764.\275\200\340\325=<\017\311\274\341\326\217\275\033\226\252\275\313\300\n\274V\013v\275\310\273\233<=\334`\275\247\260r=\343A8>\021\3129\274\352\237S\275\256~\232=X\024\211=\276\231\251<\314\214w\275\320\366\237=\307|J>%\335F<\271\323\366=\333\377\206\275bo\215\274\272\210\240\275C\272\221=\235\306\007>x\241N=2\304\032>`=\310\273w9\377;\237\2139<*\306]\275v\312\245\275C~#\275\nV\302\274\260\254+\275\350\016\027\275\255\274\222\2743\221\214\275\247\3646\275\003\022\004=\320\265\025=L\313\212\275\305aQ\275VbN\275\373\205\226;\037\313M=\315\332\332\275lS\327\274&\327\316\274\315\2058\275-it>5\277#=K\260\323\275O\266\361;{\214\354\273!GS=\362\361\210\275\205z\207=^\315\277\275&\226\232=q\020\004\275\323\\@\2758\t\250=z\265\202\275\301\351\031\275\343f\211\275\377\347d\275,\035\034\275\014\247\033\276\2237+\275?\257[<\r*\027\275\372\037\227\274\000\027\013;n$\227<9\372W\275\252\006#<\006e\035\276\231\023\035>x\3102\274\rzt\275\256o\335=\220\330\337\275<\224H=\004>\222\275\242F\005>\r\230F\275r\002\030\276\\\2049=\013Z\t\2754w\305<L\245\020\275ism=\337\315\033\275\377\317\252=~^\360\275\260\373\361\274\354\361\210\274\022\240\270=\316x\253\275\332E\032=\261\177\014>!\265\341;K\222\366;\251s\240\274\023\367\003\276\254\260\204=\370\006v=\266\310(=\005\244\340=$.\346\275\256dw\275CE\316\275o\346\364\275}\363l\2741\324\235\275\231~\227\272\363\023\325=>\266\254=d\257\210=5G\275\275\253E\374\275&\271\027\275n\212w\275\212\212D<\351\312L=r|\257\275\225$\007=@\004P>\364f\300\275\022I\217=\014\235]\273n\016\361=\263\237N<\021X\231=\227\032\031>\256\n\003\275\263\374\372=x\363\237\275)C,\274yJb=\031\333\367\275\272\334\364;\345\362\250\274}h\362<\305\003\210<\230\004\241\275t\310b\274\ti\215\275\376\3026\274\333\203\232=7\262\267<\226>\261=Nc\270=\350]\027\275!`\014\276\276dP=>\\\267\275\267\357\231\275\356\375\216\275\256K\344;\237M\252\274\307*\247\275\334\002\304< \341\001\2769\214\005>\320\254\000\2741\024w<\220\227\342=\351c\305\275}Qx;n\t\233\274\360\261\200\275\342\255u=P\267\376<H$T=g39>\345a\271\275a\320\022={\265\226\275\223X\007\276\265\023\316=\013\031\027\275\261k\211\274\365\017\r=&\001\307\275 dC>>\001(\275\302r\034=\024a\026<\035=\030\275=\303a=\001P\300\274\201\371*>\246\275\016>\207\363C;a0\252\2757\010\244=\315\306\343\275\376n\202<nSs=\272g\273=\215\207\244=\343\360\212=\215=\256=\202\204\304\274[\370E>\235\213\020\274\335\007\270\272\002X\243=Mjl=jP\013>\256Fa\275\375\331\r>g]\030\276I\364\236=\221hw=\245\003 =\356Z9>\032\253m=R\271\240\275jZ\022=\312\336\267<\260a\004\275c\250\003\276n\003\334\274\301\315\005=\247\025\372<\231\364\213=\320\342\366;\317\343\203=\302\337I\274\350\020\261\275.\001!=>&\375<\215\005j\275\204\265\220=\304\326\355<\344`:=SL\345\275H\324\215=0H\010\2751\360\277\272\200M\305<\n\305@=\212K\247;=\230\004>N\026\312;\271\351\271\275\265Q\246\274x\253M\274\037\230\207\275M$\273\274O\234\023=\361\217\344\275\226\023\207\275\372\336\032>\001p\254=\275\233%\2753\365A>\241\367\216<\\\233\202=\211H\236<\361C5\275\264\257\234\274\n\256\024\275\007\2768=\211\264\260=i\240\302\275x\020]=Y\376\311<\323\205\210=\227`X\275\210\372\250\275\223\347\361=\275R<\2759r\225=\3577m=d\355\006\276-\240\332\272\305\225\342=Q\270\352\275@\316\006=\337\203\356\274\347+\226=QK\207=y\303J=\003\r*\275OLF\275@\206\263\275X\337\243\275\224M\234;\032V\n=\027^\203<\325>\212=\356\336\246\275\226\307\243\274\322\227\003>\nlT:>\213\254<s\247X\275\035$\331\274\232\201\252\274O\025\004= \312\224<\002\035\002>\255\036\006>\255\020\254\275\317\213y\275Tu\255\272M\265U>:*\221<\003\"\301\275\030\244\246\275\320\327\003\2750\025\342\275\321S\304\275\343\3012\275cZ\237<\241\211\201=\222\017\276\275\320\235+>\221=\021=\031\351>\275\310\202,=\376\205\255\274E\026\367;\302\177\304\275\'.\027\275\345og\275\004`F;\255\377x\2755\017\301=\347\376\036>\324\375\254=\273T\226\275\272\020K=[\013\250\275E\226\345\275>\036\023\276\236\300J\276\303\022\324<\300\\m<\302+r=Sic=\277\231\342\274vy\326;\3315\340=\323\014\n\275\360\367\260\275\262Y\205\275EQ8=g$\335\275\2424\220\275\360h$\276\202g)\274\004\354o<6\366\347<\252I\002\276\237+\313=YV\241\275\206\037\270\275\215\272\033\276?s\351=)U\251=gGE\275\302n\003\275\371\013v=\2777\221\274%\273\n\276\374\301\362=r?U\275\215\207\355=\325\235x\275x\323s=Y\004\202\275*>\245\275\306\225F=\221\'\313=\312\366f\275$\253\213\275\202\005\t\275\313\360\017\274\006\277;=\202\325\001=\233\331\340\275\002\334\206\275\270=\331=\201~\013=P\224*\275\331\000x=\320]\217=\221\230\237\275\301P\255\275-}\307=\331\204\332=\241k\257=\275\006%>\233BS\2757\257\210=rf\226=\036\004\211=\"\334\316=O\023\247\275\n[\320\274\2317,\275\326\303i\275\3773\227=\212\"!\275\212[\314< \"%<\014\243&=|\361\336<\036x\323\274\204Q)>q/\'\274!\3641\2750\014{\275F\356\025\275hX\r>\331\371\341<\023\2132\275\212~\332=DC\237\275\276Y\313=\261\315I=\030 <=\360\"\345=\215\252\247=5jp\275\007?\257<\032\027e=s\252\256=\272\227\033\276-;\205\275\r7\207=\336*I\274\367\257\356\275\024\376\344\275s\233q=a!:>\342T>\274{W\r\274L\241\262=\255\024\362;\310\016\264\275\324\217\365\275\001$K<\337!r=6|\234=\334\003\201\273\203TG\276\010w\326\275\275\322\230<\213\357\036\276L4\210\274\253\254\317\275w^\321=\365\345)\276\233\3354=\014j\240\275\221]\r>IU\\\274\254\314\272<\3427\260=\341\340\231\275\213\257\204=\264\303%\275\200\2002\275\307^\275=\3533\333\274\323\237+<\0252\037=@\277\013\275!J\003\275\263\241\256=\264Z\327=\"$\224\274\267W\345:\311&\304=F\353\326\275\t\277\023\276\"\344\211=\234\351\347;\031\014K\275\275Q\204=\027\233\231=\007\203B;\213\035\310\271\342\266\030>Y\321\264<B%i=\t\331p=\367\372!\276)\326_\275n\374`\275\205\342\214;f<u\275\207\353\250=\266\2610=^R8\274\020&\317=\304\253\361\274A\213\202=#\216\244\275$\331\352=\000\037\242=9\335\251\275/;\005>\377\032\207<\035aC=\\!n=\344e\370\275k\3744=\272{\250\274\314Op=\200`\304\274\274p{=w(\267\275\006\326\245=\357\375\021>\003k\241\274\216\037\222\275\324\3017>\377\002 >m\277\r=\305\261.\274\245;$\275\333\370\304=\266\n\336\275F}]\275r\317\226=dVQ=Lu\337;\035\247\340<\320\232\205\275{\354\241=\014\363\233\275R\035C=e\222\336\274\0303\236\274\275\004V\275\334\337\002>G\344$=\265\267:=\301\342\017>|@3=\035\340\200<\323\005\344<\223%\311=C\260\007>1G\255\274r\007\372\274\354\354j<\252M\033\275\n\254M\275-\212\017\274\2032\026>\005\322\345<\230\356g\275Q?f\275\347\332+\275\264\215m\2750\037\240\274V\223\203\274\321\266\n\275\240RA=!B\021>}\311\301=\031\325\004\273\021\254\300=\270\203\272=\327\260\021>\236\357;\275\017\213\330\275.\024\343\275U\026\377\274\271t*\275\024%\030\275\020\240\326<\n\217!\275\324wT\275\210\257\034\274[\273\207\275\030\371(=\346\214\256\274\257a\216<\231\2543\274&\256\262=.\351\221\275\003\316\266;9\003\310\274\2226P=\302b\313\273\2677\335<\32493>eYt<5xT\275\007JT\275\306s\030=^\346o=\200\265~=\227\271~\275R\346A=\261\270$\275ui\225=\360\247k<\245\232Q=X\317\217;.\n\250<*\337\\<\t\016\312\275\001\306x=N\t[\275\314dS=&\343\246\274\301\313*\275k&\335=\010t\006\275B\205I>\251B\224\274he\344\275\037\000\025=\220z\255\276(\233\016\276\224\237&\274K\272\004\275\263;P=\313\315)\276\035o\177=\317\t\002\275T\177\260\273\256\026\221\274\356\357\226=\005\367\326=[\0175\275?]h\274-.\304\273\367\007K\275q\221=<H\241\030\276\337\225\030=\301V\323\275V\305W\275\355\371\341=t\213\027>^\022L\273H\nU\275}]\254\275\0309\021\275Uw\030>O4k<Q\316t\275\317\334\237\275\274I\317\275\352\363\037=\253\340`;\344z\235<\236f\203\274G\226\277\2753\241\025>\255\177\010\276\236a\367=\033hl\275G\325\005\275\332\270==W\376\225\275\317%\246\2732\275\022=anu\274HE\321<xh!<\354\352\204\275\260\243R\275\035\325\323=\350\325\234<\305\331(\274\307\230\251=\371\034\265\274\201\360\253=\327Z\253\2756NJ=>A\222=\224\037w\275\030\305\277\275\177\325\332\274\256\3136\275s8l=UjT9 \201\316\275\365\306\002>\273;D\274\036\'\006=\244ZL:[\340\275=\207\273\344;\031\215\242<\315\002\203=\216\225\223\2753\247O=>\315\344\275\033\314\261\274\327!\316\275\002\006\"\2762V\375\275\340\001&=\214\014\273\274\273\231\323\274/\210\266=\213\005\007<}\020w>\3600\222\275\'\"\003\276\264\341\373\274\342\t\013\276!\306\022=v\320\202\272\250%\205\275~\024\210=\230K\242=\"\242\336=\316bb=\206Y\261=E\226\204\2730\\\202=h+\320=\263m\332\2755Xk\274\200\031\033=\240\000\254\275\207\034\267\274\227\277\006\276\333!\247\275cc\030=+\206\006\275\322\324\020=\030s\207\274z\244\350<\034\310\362\274\261\255Q\275q\353\014\274\233o{=#\317/=\302D\202=s\203\263\274\237\032\217\275}N\331\275\324P~\274\3542\205<\273f\360<\356\233N=\032!\006>\032\373%\274\237|x=`\022\210\274\230>=\276\207\300\000>\256\266\204<\206\255\013\273\327\031\250\275BN\322=\332\236c\275/]<<\346O\312=\237\326\371\274\334|-\275\313\342\350\275\\\351\320\275\323\312\022<&\341:=\006>!<\302!\303<l\333t=W\217|=\006\260\221\276\300M\253\275\310\257\236\275\241\271Z>\255\256\270\273\373\277==\212\361\274\275L\352=\275\312\216\t\275\377\307\255\275E\240\260\275\n\345\211\275\353c\335\275\365\207W=V\336c=\266\016\r=(.\021=\373J\021\273\265r\254<\225o\261=\232\343G=\274\370\007>\362q=\271;$\254=\\\033\">A\255\337;\302\rK=\016\346\356=\325\271\326<\260)\034\275B\355\233<*\354\211\274\323>\203\275c\240\351\275{\206\021>\352\237\036\2756(Y=8\310\226=\202\227\002\275\206\250D=!>\001\276\253\033I=\242\206&<\342\217\031\276\177\226+\276\207\373\213<\247\217\365\274_\305\350=.\355\250\273h\252\014=\341M\272\275\201\014\273\273\344R\341=W\250H<\275\326\021<\017\314I>\261W\372;\226\037;\274a1\002\2758\'\332\275\025\313\340=\307*\027\276\261t@=\372\220\034\274\316\260N=&\234\367=\206\2344=\361\025T\274<9\255\275AHm\275\377\221\014<\311\243\245\2745$\211=M\211\252=,#\255\274H\326_\275\336\367X=\334\255O\275\340\330\306\275\260\236H\274-\360.=\307&\305\275\251A\305\274\301\250#\276\204 \367\275\273\263\205=\3450\r=\020\315\334=c4a\275\337\254\342<\2779\373\275\245R\244<\221\345\356\274i\034\202=S\355\030\276^S\031\273\030@==?\355\006=\315<\235=8I\003=\034Y\004=\2375!=\313\230\224=\370U\024\276\344\t\033\276\230\225\276\275\364jT\275\370w}\275\n3\362;]/\366<\\\372\266=\2152I\275IBd=\025\255\245=Bl\252\275\302~\311\274\232rD\275\030\n\r\276/\247l\274\313\207\026>\027\371a\275\302\3334=\306\211\022\276bco<\264\366\215\275\213\252\333\274\302>\032\273\350}\275=n\334w=m\307\002\275[\031\237=N\026G=Ok7\275\320\007F=\t\326\354:\342\253\333\272?\327\201\275\353\016\220=\245\324\014\276\207\327\030>\214\023\365<9\303U\275\r\333o\275l2\210\273,Jo\275\234\206\204=\320\004\300<o\351\371\274N}\303<[\345\273\275}\214\264=\267\207\310\274\350\262\351=a\246.<\313\2677\274\366\021w\274\001\002\256\274\261\226\230;6\n\204=)\347\033\2748\3530=\313NM\276\022\360\216<\340n\365=\004l\004\276\310\270\215=m\333s=\207\244\276\273\t\211\252<hw\312\275\311\217\222=R\347S=\014\232*\275\302\265\001\276\236\030\234<?\\8=\343\323}\275\336\013T=(8\020\275^A\224\274\255k\254=N\377\326<\220:&=%wh<_\316\002>!\3272\274R(]\274\233\262\225={\\+\276\205\264\002=^O/\276\304\347\374\273\203\303>\275\272U\016=QqZ\275\361\347\021>\222y\225\274\250\325\256=<\227U=\230\200\330;\312m/=\321\254\220\275P\031;\275\261\305\220=\210\237x\275|\321\r=\244\303\322=#v\375\274\004\376\002\275\234\325\224\275\276;\253<\022\325\234=`,\035=\366\313\030=\014\227\210\275\361j\036=\'\n\207<9,u\275\207\034\371\275\335\203\'>\352\377\240=\216\310\026\275M\221?=\363\325==\347@V\276\362\n%\276\020\242\242\275,\316\213\274\251q\025\276\013\033\003\275\177S\001\276\223\343\257\275CK\230=D)\373<R\236\251=7\037\204<v\207\217\275|F\">\277>\026<\225\330\217\274\235\327\222\275\335\002\346\273NTP=Uet\275\275\034\355=O\230\216\275s\225\276\275\273\271\212<\035\276\330\274\r4\331=\275\n&\275\307P\346;U\234\251\275\230\270\255\275\207\027\206\275\013\211\375\275$i\261\275\264\321L\275Uu\205=\022\362\036;\276d\034=T\300\025\276\373~\014<\364D\365\275\2761\n=\261\344u>V\024\213=\206\037\200\275{\246\273\275\313\201\232\275\002\001?>r\0101=IHs\274\305QE=\373+\300=1\214O=\261:\326=\275-\300=\337/\274\2751jZ=J\311\017\275h\304N\276oQ\312=\226\234[<\3409\353=\234}9:a1\256\275g\020\356\275d\006\356\271v\230M=\245\305\023=k\312j=Ry\301\274>%\023=n\373j=\002s\212=,\253 =\032\336\213\276[T\002>s\267/<\266\'\216<}g\216\275|\254\017\274\354\236\251=~]\'=J\224\205\275\010p!=\026$\273<\030P\235\273\363\234<=\315\305n\275\354Nv=\034M\263=\345\303\360=\354<\227=}@\022=\241\260\346\275\251\376e\275\034\002\272=8\324X=u\372\341;G\310\200\276D\021;\273\035\320\214\275\265T\357=\r>/<+A\253=_\265\007\274\327p\n>+\246\370\273\272\021\003>\241\243\221<\036Wy=(D\n\276+s\013\275\255\272\252\275\354\326\305\274EJ\306\274\257\326>\275\310\313\032=\276_\225\2758#\224=\213H\272<\321\360\215\275r\324x<\337i\277=\363\2144\274J%\035=!\332\232=wU\310\2744o\252\275\205a&<~\023S=\257\222\254\275\020\265\231\274\275\210\271\274j\027\224<\360 \267\274\374\257\241\275\177\321\030\275B?>\275\024\037n\275\227$\"<\330d\304<N@\305=8\264\327=\310\247\326=G\223,<\236I\000>\030\200\305=\207\006\270\274\371\340\376\275\031\234\317=&Z\000\275\316X\261=\270W3=\330.7\276=I\366=\217z\327\275\036\237?\2751\350/\274b\232\252\275\'\364\016\276U\233\351\275\002\375\001=\234\325\254\275\306\017\311\275\270\014\000\274X\010E\276b;e\275\325\025g\273BL\023<7\206\371\273o\242\336<\352\2050=9\211\022=\312\347I\275\265V\235\274\266m\322\275\205^+\275\2341\311\275\356\226\034\275\357\254k;\205\010a\275\260\262\347=K\270\023\275P\366\350\273*\265\276\274\007@\r>\320\244\370\274\331#\245<\234\365d\274\265&\317\275<\371\216\275D\221^:\306u\215=\t8\242=\324\2030\276\253\234\023\275 ~\233=\002H\270<\341\214\254<\024\022\320\273\374\360*\275 _$\276\315X \276\350\271\311=\016\034\217\275\347gk=t\"\344=4\351N==\210#=\020\355z\275\237\351f\275\212\337\216=\220\325\364\274\273\256m\275;S\365\273\235z\276\275\230\014s;\'\362G=\227\276\272\274pru=\337\007\301=\204}\246=\013\017\t\275\014m4>o\262\324\275\323\030\345\272\210\014I\275\230\027\232\274}\250X=q\035\243\275\354\313\223\275\214\230\260;j\246\343\275\224\033u\274U\325`=.M\234=s\335\242\275\234>\006\276\367\202\315\274 j\345\275\307\315\240\275\341\316\020>9\336\217=g\216\304\275_F\230<\357\0227=\310!%<\027\266\202=\336\207\263\275\216\245y\273\326\331\345=TB\333\274-\016\220:1\3370\276\314hq\274\240y\274<;`\253\275\240\263\221=\276\346\n\274\377\374\023>=\252\360\274\322\360\237\274\2614\254\274a;\017\276\266\200\257\274st\305\275\271\177\353\275\036kO\275p\225t\275:\264\332=\210\003\202\275=9\207=\302\024X=\303\375.\274\027\315\361;\r\226d\275U\240\270=\243E!\275\270\274\353=\027\005\215=\277WJ\274\366\207\333\275\242p-\274\261\376\323;\367\t\277\275i\n\316<\2648\272<X\354\372\274.\230H\275\252&\367\274F\315\031\273\317\327o=\371\301,\276\300\340\303=\177\037\216=\004\006\213\275\230\336}=!\253\203\275{\220.\274\026n4>\262^\265\274\233\254o=\361+,\275\025\017\334\275\372<\354=5\017\244=Z,\225\275\350\376\376\274Zu\221<@Ve\275G\300\237=-Y\030>\002V\344=\354\245\250\275~\257\303\274\363\242\327\275\0033c\275\330K\217\275\232\206\272=\315\337w\274CN\323\275 \3633\276\'\335\346\273\275\227\344\275\255|\323::\336i<\313M\033\275\003\344\305\275-\365\206\275\330C`<\224*J\275Z\006\263=\0140\006\275>\306N\275<\274\'=\246\367\374=\203\227\340\274w\260\214\273\341\261\026=\030\356!>\3632\222<(M@\275~\210 >\022\343\317\273\023\271\256=\244\336\036\276\270\034\231<f+\t\275\335\\v\273\212\377\020=\24132=\232\0359\276\020\362b\275\020+\307\275\344j\206\275\313\332:\2744~I\276\210>\302=\313\231\374<$\025\221\275\206\333l=\027P\312\275a\203\203;\374\374\327=3B\331<N\364\342\275\232U\320\275\201\210\203\275\236\346B\275\366\354\321\274y(\240<\230\014\357\274\013 \024\276uG\260=\360\3703\274l\235[\273\250K.=h\267\205<|i\023\275\021\276,=1#\217=\341\037\367\274@\340i\275\207~\010=i\223\300=\352=o\275\210\2577=\265\242E\276\200\223\024>\025\037\350\275\266>->\363y\275=\324\245\003\275\215\025@\275\324\351E\275D\363\t>\010\301U;;\254\261\274=\032\277\275\321\372\205\274\264\250-\273\"\372:\274&y3=h\357F\275\352[\301\275\034{Q=A\273\220=\032\214\025\275[\013O\275\372\362\207\275\025\3269\274l\007,<\223\337\003\276<\326\364\274\021e6\276\271\250\341\274\256H);\031\240!>D^\t=M $<\265\032\225<\206\316\250=O\3115\275Q\224\306\274\256j\304<\003\n\202\275|\200l=\222\357\205<\315k0\275zY\230\275,|\202=\255\216\352=/\223\255\275\314v\261=\305G\007\276\262X\365\274\375\304\023>\264\310\270\275\355\\F;6\325J=\227\377\241=o\237\255=)\221\t\275\231\300\206\275xx >N{\265<\312U\312=\346H\035>~*\321:\210\232b\274\206\331\275=\355\3379\276\266\321\324\274jF,=\255\256\254\275\211\356<\274\202*\\\275\345!\214\275&\304P=\220\346\"\276_Z\215=LE\034\275]\364\323=\346\311\216\274\003\242\316\274\370\346\366\275gi\000\275\032\327\371=\344z\325;-p\313=\014\217\274=\270\226\252\275\230q\004>9&\225\273p\302\230\275\306\327A\276-T\356=\3731\370\275\246\323\250<\275e\212\275\325\237\344<C\0021\275\301\226\224<R\373\275\275\327\326\323=\215\366\300\274\370\374\361\275\'\032\324;\312|\200=\364\367\325\273\320\020\243\274r,\'=\340z\232\274\341\350#\273\211\305\254=\274\264z\275\312\327R\274\357\242\243=\021\001m\275\344\237\357\275{\333\275\273wf+\275\304\243x\273\220\025|\275_9\243\274:\202\310=\002\345\225=\245\030;\276e\227\236<lb\215\274\036\210\036\274z\232\273=\271b_=\317a\225\274!\263\035\275\256bv\275\313 r\275\016=\320\275+\177\351:J@\030\276=&\006=kC\016>\341\252f\275d\004\002\276\345\333&>\323\301d\275N\321\237\274Xe\r\274A5\262\274k\247\313<[\271\003>+I\010<f)^<Q\245-=o\241\342\275\377\305\315\275\332|\214\275Y^\250=h\272\237\273\376\244\030\274\014q\224=\237\200\346<\237\336\007\275\335\233\025\275\226,.\276J\307D\275\217\210=<\350\177+\274\256(\246\274\3059\032<\317\017*\276\304\331$\272G\344O\275\275z\373<)\374\200<\353\'e=u\303\334;\221\360\263\274\314\227\001>\215\013V\275A\035\312\275\226H\214\274\216\222F=g_0>y\375)\276X\234:\275v\037\336:x.\373;\311\243\213\275\242*J\275\032\312\314=\203\344\315=\364\320W\275\022\352\217\275<\021I\275#\302\347<\014a\325\275\007J<:i\212\237\275\363/5\2756R\223=\352\326\234=/\277\255<`\361!\2751\241\206\275{\035\304\275Up\332\274\206\217\313==I\252\274LBP\274*\032\220\275\323S\033>\014\304\305=\336P%>1\357\274<<\264Q\274\331\360\205=S\224\007=@\027^\275@W\024=$\215s\274\262QC>*( >28\007\2766m1=\310\353\266\275\237f\031\276\210\346\304\275P9\260\273&\365\017\276\270\265w=\217@\346=\206\364V\275\3163Y\275\260\323\032\276\255e\t\272\243\332->\214`\311=\362\252\223=\013\322\316\2738<\252=\310\2273=\016\376\253\275\237\240\014=\303\340\367\275&\305P=\204A0<\037\222\321<\257\362+=\301\351\203=\257\275\253=\334\242\220\274\376\250\002\276$\312\000=\032\t\231<)\246\263=u\261\332\274\252\031\245=!\215\276=\027\344\n\275\320Y\346<\003p\310=\313.\376<\240\310\366=\310H\006\275\\\232\003=(\031\227=_\237Q\276\267\313\214=\344\314\311\275\305\245\205=\376\312\377\274B\212\024=\361h\r<j\203\320=\373hM\275ln\025>\340\266\252;\273m\013<\204:3\276\302\242&\273R\200\206:\3613m\275Z\2101\275\366v\034\275(N\224\274\374\370\016\2760\373y=x\235\263\274F\225\336\274\304\220\242\2757\347\177\275\2223\274<\226K\327\275\r\200\366;G\n\333\274X\201\337\275\273NI\275\257\032\235\275\342\323\335\275\356U\315\272\365\374\261\275^\034\030\276\004\371\321\275\251\343\267<\227)N\275\352\355\r\274\360\\\206=Y\345i<xT\n><\3356=\334fg<\'\266\210=\260\rt;\304|\222=)2\340<\227\245\013>Eo\377\275\002\006%<\367^\017\275,\227\301<\023?\206\275\234\"G=\027\246 \276\204\243@\275d7\350\274<\355\n\275\213/\032=\247CV=\007nH=t\213\375\275\211V\306=\267>0=2i\231=\037\005\237\275\r\353t\275\023\010\260\274r\360\335\274\025B\266\275\362\306\010=\261\223\t\274\244\306\032\275\017G\301=\256\253-=^\325\341<\310\010\232<\202\032\006\275m\336%=y\376\345\275\333}\213\275\374W\245=1\335\361=\270\375d\275\000?\215\275\340\267\325\275gV\337\275sB\341;\021\216\247\275\374\261/=\341\377\033<\023y&\275U<\205<\031\376\301\274\321\302,<\312\241l\275E\010\320=\312\360\255=]S-\275\242\t2=4\301\223;k\3303\275\007\272\306\275_\014\334\275\034-\320\275>\264[=\016j\004>\365\336\234<\234=\030=d|\001>\316\025\356<:\247\214=\033\341\000\276\376_\275;\334\344\323\275\217\214\200\275\273H@\2755H\020\2753a\006\276\'>\035=\007\365H\276\201@\367\275\325\350\261\275\001\202\303\275\233XC\275<]/\274\347\035C\2755\217\n>9\025\211\274\n>d\273\307E\240\274;\261\013\2760\217\323=\316\017\244=\247\215\007\274\006\245c=\316Cc=\336\202\325=S\344@\275\216\2374=\251\373\271\275\224B8=3\210\342\275\255\r~\274a\376\034>\001\366\306\275\006\235\252\274\217A\350\274y#x\275:\371\264\275!\n^\275w{\021\275\232I\017=\200A\226<\353y\213\275\305\001\270\275Z\330\267=\226\033\302\274\347\211~\275\005N\006\275\365fo\275w0\331\274\324\024\236\275$\360\263\275\2755\343<\270\263\227<m\037p\275\276\245\231\2744\226S\274\262\210\n>\265\352\352\274g z\275\317\207\004>&j\216\275m\272\347\274cQ\202>B\006\317\275\314\265\227=r\023\222\274;X\364\274\371\306\361\275\356\2303>\000;\377=.\375\216\275cC\354\274\256\333\213\275\277G\243\273\243C\301=\346\263\363\275\324cn=>M\334\275\231F\207=\265J\204=U9D=E\037H\274H\016\013\274\207S\215\273P\245\200<\304\006\013\276\2221\200\275k\010\032>\020\245\006=v\242\206\274r\277\356=\377v->\255-\327\2752\004\203=\036\353\371=\300}\215=\371\361\306=\345\235O\275\265u\360\274\201\026\246\275C\316\035\275\357:\034=\361\343\302\275\001\221\350=\272\r\315\274\327h\026\276T\346\006\275\"f\037\275]\343\256\274\232\332\021;\371n\366\275\'\323\275\275\013\206\010\275YF=\275\262\033M\276\2569\202\275\234\270\244\275\252\246\266=\225x\356<:\370\240\275\nS\351<O*\001=\032\221\000\275w\030\273\275\240\030(\275\255\'\034\276l\236\306\274\341\022\027=\253\317\276\275\226\312 >1\'A\275\246u8\274\324\313#\274\235&p=r\342\243\275\004\232\206;\023\006t\275\324d[\275SM\246\274\314K\334\275\265\232\007\274\204\3214=\032r\266\275\343k2\274\007^3=\360\251\266\274\334\2554=\262\213w=U\r\253=1U3>\327\'\212\273H\314V=\324\271j>\272\363\306<\300{J\275\251\231c\275\311a%=\\&\277\275@\343\030\275\203\252~\275\261\001\353\274Hj\363\275-\214%\276\312o)\275\305(\326=>\276\357\274z\363y\274\256\342\373\271\366\331\261=\374\265\353<\212\261w\275\343{\302\275;\276\261=xt\033;W\257\322\274\200\017\013>\033A\225=\254\031\336\275\221\363\203=f\225\216=\016\230t=F\235\333<72\235=\226F\224=\320\004-<C\363\201\274\002s\226<A\232c=\004\234\232<t\337p=\204\266\023\276c\271\372\275\326\2700\274\\0\203<\311\261\204\275\210\364\210\273e[\324<\225V!<z/A\273\265\243D<riM\274R\240\004=CXG>\021\212\177;\357\226>\276m5B\275\016\272\354<\2237l\275\2343\356=\014i\236<\277\276f\275\336\230\236=\267\000\003\276\022\316\014\276F\330l\276\020b\361<\253\346\260=\203\215\300<\265:\211\275\304$\325\274WR~=bHj:X\375<\276\303\351\276=5\014\016=\303\230\346\275@\232\001\276j\023?\275\363\254\000>\374\337r;S\002*\275\324\003r=\237gR=\312K\355=\233\242\235\275\226\305A\275D\031\262\275\263\035\373<&\310\200:o\357\275\275<\374\224=\267J\314=\177y\363\274\006z_=2\353_\275\036+\334\274\303\314\305<q\320?\275\336\301\236=\317I\013=\013\206i=\226iC\275\025*$\275"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5944801
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "\316C\014>\213\\\260\272\343\203`=\307\306\276\274gy\010\273\275\302i\275\354\230\267\275 \261q=*x\257\275\303\031\324\274\3777\022=G\217L=\235\315(>\252\230*\274-\256\036\275\n;\230=W\276\357<\276\332o\276\r\266\347\274c\253\355\275o\240)=y\346 >\220\366 \275\030\276\300:\030\247V\275? \315=P\013\266<^\320\256\274\240(L>mi\200\274R\032\276;\000J\233<\323\005*=\257\317\264=\203\316\341\275\306\276\306=h\241\362=n<\'=\331a%\276\377\244\201\274\241`e\275\013\254n\274\276\375\t>\312\351T=\216\255\313\275\364\276\273=\2202\335=\200F\202=\273\221\207\275z\\\230<\237=~={\252\337=s\323\354<0\227-\275\035\3418\274i\217\005\276.\213\276;\356\244\373\274\265Mr=%\241\025=\177\375\243<\320\303\\\274\271\367\223=\365\2212\275\246?&=\264\364\356\274\302\022\023\275{T\226\275\312W\001\275\316\367\262\275\321\2162\275\214\254\312\274h\346;=\323\212\352\275X$&\276\233\334\224\274\323j\201\274@\276T\275\241\234+=\334;\220\275T \023\275r\331\224\275\rJ\371\275E\266\347\275\264X\321\275\'\022\234\275T5D=B\r\342\2754\241\021\275c3\321<lz\024=\365\3567>\252\373X\275fE[=;U\246\272\026\035\305<\316\331\t\275d\002\204\274\355i\017\276\244q4\275\007n?\275`\222\036>\252)L=\225\254\033>N\001%=Y\301\264\274)\202c\275\264\216\323\2744]\334=W\211\003=M\216w\275V.1=a\364D=D(\301<yC\300\275\013!\023=k\254\313\274.\032L=\023\263,\275\3555\361\272\302\362\031>\377\344\332\275\237\344\205=\314\256<=68\223<\313B\241\275Ps\325=`\277M\275\3551\020<\006\354\033\276\344\373D\275\017\354\330<\342d\355=\220\006L=\334\261\326<[R\256<,D\215=0_\n>\312,\231=\211\333\362\273\234\213*=\033\351\230=\210m\313<\026p\247;@\303\t\276n\277_=\223\206\323=\31636<S9\270<\"\376\233=\320\330\233<\353_\261=qm\257\275/\272\016=7\363\376=?t\221\275c[4\276\330d\016\276\324\017\007\276DB\027\275\226\017!\276\023\022\305=\302,@=>:M\275\335b\n\276\370\370\r\276Y\030\263;8\330\274\275\220U\010\276\211\305\000\276\265T\r=dG\321=\223\3739\275`\261\221=*\252\250\274\002.O\275~\320\364=9{#\275\371}\252<\243h|<:5\346=\342\026L\274DR\224;P\265/=\334c\242;o\350\013\274\222\034\">\026\350\377=\207jW\274\2055X;\261\216>\275ka\256\275\377\263\236\275\236\325\254\274\226\005y=\312\302\257=\213\234\306\275\340\344\347<\376\251\234=FP\320=\260\365P\275x\274\215\2754\3118= yY=\215\357\342\274\"\232T\275\246\035\224<D\306\005=GM$=x/\021\275Yo:\276\355\341\262=\361ei=\242\317\375\274\037\346!=\305\342&>\221\324\267<\353\n\373=\274\020\346;\370\262V\276\361\235\246\275\314\253\222\275\330r\375\274\333X\261<\206\001\207<\000\251I\276\033\203\035\275|\222\270\275\342dJ\275R\035\303=R\211\013\275M\342[\275\3001\277<\335q\005\276\347i\236\275\271\2539\276Iq\365\273\312\\V<\265,`=\205x\337=\211\035\335\272\300/P\275P|{\275\225\3264\274\235\256-=(8\247\275@T>=2\226\237=g.~;\310O\271<\230\263\027=Y1\332<\2749\003>\215\300\002\276\306y\013\275\224m\016=\250\016\220\275\355L\016\276\254\324\231=\303\300\t\276Vr\224:W47<T\023\"\275\250\237\322\273\000\375r=\3542\246\274\361!\3319sK\200\274\355\224\201=!\016\276=\360\002\027=\300li=\311n3\274\327\337\016=kf6\275\304k\352\274\260\214\005\276\364\025\033\275\233\005:>;\233\t>>\314\276\275\212\266T\273rMQ>\305t\344\274!_\234=\036\263\361\275M&\207=\307>;\273\356k\243=C`t<\244&;\274\300:\374<J\344\017=)\305-=\226\274|\273\224@/\276\361\226\003\275\250\3770<\314_h\274\006k\016=\374W\177=L\244\353\274\346Vj\274e\005P>2\036\306=$)\330;\247\370\211=\256,\n\275\266\355\001\276\227\224\322\275\336\306F\272\260\262_<\031_\275\275h\373\027\274\201\351\221;1\034\227\274\372\332F\275,y\236=\323Pp=(\306\266\274&\340J\275\240\325y=y\321\213\275\037\246\022\275_\324\330=\001bf=\311\350\257<\003[6>x[\302\275#\267\006\275\330Y\253\2758\2157\274W\321\263=\376\3064\275\324x9\275T\363\244\273%\'\007\276?\236\220\275?\344\020=\031\252\304\275$9&<r\267\236\275\374\215:\275\006\023\014=\215\222\216\275G\003\004\274\026\024\260=\277\033\330=j\230\205=D\265\360\275d\275\272\275\217Z\303=\321\231\236=\327N\207=\312\333y<\310\356\214\275]\025\351<\341\367\246\275}\316]<\211\215\212=6|0\275y\267\323<\260\200D\276A\310\004\275ih\212\273<\361\004\275\n{\022>\334\\\345<\367=\313\275Y\211\271\274\013\330\010\276\365\314)\275\210B\235=\263\365\350\274\364\261\007=\366l\327={3\235=x\t\r>\031\312f<\027\261\203=\230\026,\275oB\002\276\020;\025\275A\027\242=\266R\323\274~\256\210\275\033b\312\275\036\345\006=yK\367;\014\000\240\275(\202b\275\331&\005>\014h0\274*\207Q\274:Q\'=\212\250\003\276\342\342\223=\321\001\222\275\214\241P=S\241\024\275\n\201\250;K\333\371=\327\327`= \007\300<\311E\342=\332\247\035\275\236\305\232\275\301\345\254=\"W\001=\221,\007\276\255GB=\215\363+\274(\315~\275\205\026\'\275\313;/=\317\334\003=,\334K>\306\341?\275K(y\274\017\005\236\275\311\2607\275\251\257\235<g\244D>\364Y\272\274\270\242;\275Q\321\337\274\232\205\202\275\251\027\310\275\266\\-\275\3145b;V\250\024<\362\215\016\275P\002\217\275\265\374\345<\252\3615>\214\323l\275)\357n\275\003\017S>\014\023\332\275O\272\002\276(\037&\275Ct\373\275\346\370\370\275Y\311\216\274\367B\032\275\355\251\331\275R\236\210\274\356U\366=\273\016+=\025\210\220\274\024I\327;\211\263|=\267\276M=\246&h\276+t\017>\306\272\315;A\254\306\275\221\212\222\275:BC\275B\317\247=\377\205j\274u\034\037=\'\026\334=#\331h=\\\225\312\275\304\375o\275\311#u\275\013\317)=\216\000\022=\354\031\372\275\304\372\355<0\204/=\342\242\305\275\0338\252=&\262[=\300\323u\275\235\250\250\272\270\265\221<;\211\241\275\007A&=(2;\275\323\252\347=\354\335%=\356\310\273\2746\257\260<0g(>\003JJ=\034\330\304\274\267\232 \275fJ\373\274\\Vz=\014\313\204\276\267\232\271=a\337\214\274,2\360\2748$\265\275\224]\273\275[,\215=\201,\347\274\354=n\275n:\261\275#\375s\275\314\332\231=1\337\317<\r\332\256\275\241F\253=\205\023\306\272\033\313\252=\224\202\374\275I#4\274ku2>\262\213z\275A\252\360\273\373\014\001>\2029\366\275\237\224H\275\020\335\001\275\257p\214=VQ\277<>$\342\274\271\367\273\273\037\212\335\274\005f<\275\275\327?\275\302\365w\275%\177\273=\013\375\221:\271\204\361\275K\364\254<`\272H=xV\325:\316x\251\275\260\017\256\274\223t\247\274b3\t\275\3211\207\274\007\373\276\275\322\276\261\275\203\204\213=L\034\264\275V~\352=^~\033\275h\246\320=)\001\214\275\213\275\236=\025N\200=\351\376\021=\272\322S=\002\365\034=\'\257\377<\226%\014\276\227\307\021\276\303\t\r=\014k8\275\225g\210\275\001\206\241\275\257\215\266\274\314\375!>o6&\276\211\013:\275\200=]\276V\010\003\276\260\347\260\274\323\323\342\275\253@\206\274\253!\242\275\342\272\031\276\237\275\177=\2447\243\275\246\350\005\276\330\"Q=\234\3079\274:\304M\275\327~\256\274\217\206y=\"R\367:E\202\350\274\322&\013\275\371q\273=y\033@=\2730m\275$\253\330\275\n\257y<\270\374\016>>\025\006=O=\230=V\267\213=\252_=\275\360\204k=\273\224\234\274$\273\365=z\362\242\275\261\247\020\275\3649\247=0\261\230=^(\257\273\331\215\217\275\306\024R\275\341\313N=x\210n=<i\234\275\254`\367\274Vz\330=U\206\264=\0245\267\275\177f\354<9\200Q\274\2517\252\274\342x)\276j\340,<\351\207\350<h\302\265<\317\206\244<uh5<\227\331\373\273\266\026n\27567\"\275\022\241\374\275\207\360U=\264\006\232=\225\260~=\262:\017<!$L\274Rb\004=\300\241\225:\252/!\275\356v\306\275\352\017\261=wj\365=\273\025*\275?<\313=\377\311\255=\034\216\032\276\302\361a;sj\017\275\375\034\242\275\3747;\275\340\337A\276\355\233\313=qE\331\275\2171\036=\245#\237\274\323\007\253=H\027O=\010\354\245\274Z5\372\274\267\3741\275\312\311N\276\nx\335\274\340\370]\275\357x\314\273\312\t6\2755l9\275\342\007z=\232\276\022<;\016\004\276p\317\r\275|*{\275\rc\315\275\331\256O\275l\203N=}\366\202\274\006\242\223=\034\204 \275\327\364\"\274\335\306\304\273\215\027\004\275V\240.\275\301\320\312\274\260v\353\274\347\336~\275\233}\277\275\334\034\024<\351\221\017\275b\266\365\274n\022\205:F6Y>\371\023\277\275\225\340N<_\300\302\275\321\241R\275\362\006\225\2738vV<\1779\240\274\327\245\010>\247\273\275\274H_\310\275m\332\364\275\221z%=\373\305\t\273\260\245\245\275\356\247\202\275\262\230 <l,\246\274\004\212 \276@\253\254<\2250\212<\374\220,\274\014\334\212\275\"\300\344=6\303\334\274\025\266\336\274\373\022\347<\260L\375=\273E\325\275\376\256\241=\014r4\276\357\035\347<f\202\327=\001\346\301\275\313\346\244<\272\352,=^7\334;<\327\232=:g\301\275\367N}\276\202\361\205<\370zq\275\225\326\301\275\234wT\276\2312\251\274\304\213\361<w4\255\275\347\217\213<\231\025\205=\205\021\002=\271\240\316=3\267\367\274\304\0034<\207v8>BZn\274\372X#\275j\204>\276\026\025\216\275dx:\2754d\017\276y\314[\274\017a\021\275\035\353\227\272N\372\262\275\264\361G\273\263\206\275;G\1776>\234mM\275\233\370\265\273\014wV\274ux\376\275\342\177g=\026&\t\276*a\036\275\315\016\212\275\316\200b\275\312v\027<\325\317&>\216\233\000\275\215{y=-\310Z\275\260\222\250\275\313]\004>H\220*<\351\351\256=\267tg\275f\016\005=\216\252G=\320\024\326\275T\000]<\016\333 =\360X\022\275\333\341\022\276\203\021\310<f.\236=&\360\322\274\013x-=\346\360\345<U(\r:B3Q\2754I@\274\265\312\231\275W\n3=)?\306<\210\013\211;\\\216\003\276]\034r<\213B\333=d\365\321\274\330J\343:*F_=(:j\276\311\325\014>C\265l;\344\'\206\275\212\341H\275 z8\275\331F\250\275j\270\r\275u9\373=\221g9=X\226J=#e\270\275\344\3648\275Cy\343\275ZF\205\274\236\3060=\'\024\224\274\361\032\362\275Qd\203\275\263{W<\365\201\\=\277\017n\273\341\343\'>\360\274\000\276\213q\002\276\312\2664>[\010\364\273\315\333\257\275C$J\274\203\r/\275\314\256\'=to1>\335\241$\274*|h\275\234\271L\275\326h\033\276\362\354\372\275k\037\366=\017\207:=\3738\300\274\261\333\r=\367\357\212<It\035>\006\225\235=Ruw\275\263\177;<%W\017\274\375\244b\275\023\310\210=9\206\204<_y\312=wd\312=hKG<\360\357f\275;r\036<9p\201=\256.\251\274\367\320\035\276\231\024\364\274\365\0034\276\3074\032>[\374\017\275\213\363\362\274%\024\324<\316\030X<\352\273\016\275l.<=\2073$=\203\234\211=\320\004V<\267\332y<5\253^\275\202\302O\275\023\357\013>>\221\347\275\020%\016\276\006d\\\274\n_\374\274.\333V=\206\267Z\275\212.)\2743\276\221=N\006Z\275Y\010\020\276\0379Y<\256\213N=4&\n=l\265\373\274\022\246\024\276\374\210g=\303\255\005\275q/\216=\243\026\341<\033w\376\274\213\240\242\272\316\230\036\275<\365\240=\245\344\004=,g\016>x\275\301=#\253\036\276\300\212\221\275\326\2030>\334\r\312\275V\223N=\204\033\274=:\365\001\275\'P\306\274\r\333\227\275b\035\253=y\037.=\323\256\222\275\226\202\236=\212*&=:\013\232\275\305\305\324=\004(\321\273\2149%>\235lk<J\225\372=QI`=\321\200\013\274\361|\366\274\\\344\222=\201\306\370\274\001\354$\275\237+\014\275\243\343\323\275\036\310\201=\322\n\033<A\322\255=?@y=\031\035\373\275\033\206\362\275\370\3517><\025\235\274\262\034s\275\374\3245\276B\004\003\275e\024\246\275^\242\035\275\267\003\035=\320L\221\275\263\302\351:_(\336=\230\323\203=\300\212\337=\234\373\275<\225\274\020=~\026-=\375\361\n\275\311Q0\275s\005\214\275\237\r\322\275\351\212\275=\302\223\'=\006.\001>\301\361\354\275?(B;\034\302\261\274\336\016\315\274?d\256=~l\004\275{G\216=\366\0254\274\303\005\013\274\001;\001=:\373 =E\221\"\2751\303\243;\010\217\237\2744\371%=.\221\020>YG\203\273\377\376\255<\266g\256;.&\316\274\222\210\237=\354\236&\273\272\323#\275\243\223\211\273\264\266\326<~#\243\274\036L\222\275\257\237\276\274D[\341;\316x\201=\216\271\020\276\371\354\263<*\366R<]5\t\274\211D\332\274\007\033\203\275- \207\275\203>B<\022??=\256\'\273=\345\036\035<\020S\257\275\215\016\254=\257\372\033\274G\340\246\274\252\261\010\276a\226\300\274\016\213$\275\253\332\000\275\320\013\246\2755\257z=\r?s=\372E\007\2751\020\337:\241\231\024\274\254M\200=\262\351_>R\367J\275\021\332;>\251;\'=\226\230\323\2755\2335\275w\320\021\276?NV\274\356Z\023=\'{\034>\251\271\374\275,\314Z;\376\027t=\271U\247;\205T\263\273YM\377;M,\222=\227\350\321<93\236<\2325u;%\224E>\3029\234;\341^\214=\023?\301<,A\326\274\250\360A:\364r\253=\375\375\204=\222A>=I\314M\275\255\271\020=<\332\314\274P\033.=R\262]\275\344\277\357<\203\330\262\275)\355\233\273\322\265\013\276M\364\333\275\362\321\001>NM\257\275\2167\320:\014\253W=H\313\023\273\376a?\273\245U\343=,$\331=\245\323\266\274\304\221Y\276\330]z\274\2505b\275Zq\364\275y\005\376\275\225\352\265\275I_3\275\334\033\010\2763#\316=%AT=y\021\032=\267\346\353\273XCO\276\373\370\276=X\346\t\275\320Z\214\273.\234\007\276\330\347\225=\312\000<\275\312\300!>k\010\271=\203`*\275\312\000\361<\362\350n\274J\031\307=\235\272C\275_\321\0356\351X<\275~#9\274\032\364,\274\322\354\243<w\017b\272\327g*<\347\307\346\2750\266\376\274\243O\027\276\264\364\226=\265G\353<YX\325=G\221\247=\366\326\210=\373+\'\275d\362\223=\305\321\242<8!W\2743\371\037\2763\336\206\275#CP\275\256VQ\274\203\177\327\274\327%+\276\013W\372\275\014#\262=\322\237\277=\261\370Q=M]\023\275\315\255\216\275;\002w=\351A\326;\320\000\314\274\263\363*<\260\344\362=\322#q\275\r\274E>3\216\016>\220\211\311=\030\345\230\274~H\241=t\226\210\275\307&\305\275\206\240A>\027\032J\274\024\276#<\346\267\202<)\344\244\275,\013\362\274\3043y<\354=-\275\315\177\020=\311\205\010=(\222\267\275\243\270\004<eKc=\211\303~<\033\225\t>\304T,<s\203\332<5\225\356\274\031\351\320\275b\376\007>\375\2027\275\351\355\237\2732\311\225\274{\225\206\275s\232e:\037\342\274\275C;\024=\"\313\244=\364\347I\274\007d\373\275\023\241\376\274\230f]=C\360\345\274\250\303\227=\233\325n\275\n\340\274=e/@<\374\002\242=\247_6\274\205R>=\3661}=\024\243\340=\343m\364<\325\016\216=}\301\333=\232\376\301=2\346f\273\270$\253<qg\214\272u\306\t\276\366\222\233=\252\331\256=0z\230\275\222K\306=K\213\377=\256\222\224\275A$\223\275\246-M\274B\255 >\352.\000\276\310\n\321\275\263\252U\275|\272&\275[\350C\275\274\326\334\275t\277\204\275\\\344\353\274acO\273\360\316\237=`\352\202\275\021\347\037>\202\034\235;\";\275\275Uw\350<T\017\262\272\355\212Y=\240\361\300\2736\227v\274\355\326\356<\320\206\245<\005:\342:Op\310\275\360c\373=\\\231\336=R\351\271\274\277\344\0339?\2339<\276\225\247\275\261\005w\274\017\326\276\275\014\377\277<KP\226=\270\010i=\364\220|=<\237_\274+qX\273z\304\306=\364\262\"\276\350\375k\275p\327?\276{\225\250\274n.\301=\267\240\035\275\001\241\036>39\254\275\321:\\\276\356\274\371\275\273\303\037>\353\211,\276\036\331\032\276\035\374\246=hA\360\275\261\251\273<\213\237\r\275\304\241\252=\260\207R<\302\033+\275\276hX=\361c_>y\316\267=\312MQ\275+\030\005>;W8<@\"\207;\214b\244=\200\232\250<\n|\265\2752cS\2751$\203\275\231\211\032\273 w\013=\303\016\344=!Q\005\276\355g\225=\232_0=\210\245*\275\363\272\252<5P+\275\336gt\275\216a\350\274\211S\200\275\261\303;<e\2002\275s\007\t>\323\240s\274\273\377\177\274\307\322\324=\000\214\244\273}\217\325\275\000\355\220=\324\217\000\276\357\"\t=\320N\247\275\257\372\354\273\367\254\207\275\313\364\227\275\321\005\255\275\022\2049\274\254g\300=[\014\020\276\314\234o\275\0304\216\275\006\200\030=\031\035\003>\303\333Y<C\024\327<\3053}<\177\377\270=\256\033n<{\032k\276Hq\376\274\341\344[\275\302h\245=K\272u\275\213\007+\275\234\325E\276\216\227\320\273\022 \320=!\303\275=\370,\313\274%\nh\274\337\254\335=][\000>\231V\237\275\255\030\340=]hD\275`R7\276g\241<=\267\326\035\2760\247\340\275\213e\312\274-x\037\276D\036\033\275\323\226\022\273\313\261E=\254\246\322<]\336d=7\345~\275D\360\264\275\201HS=;\200\333=L1\225;\364L\367\272.\3570\275<\310H=\364^H\275-\355D\276uI\033\275\300\244\243=\340\230\n<\017})=0\326!\276\365(\202=b\016\325<\256\021\303\275\326b\225\275\357{t=w\301K=dF\027>\204\242\r\275\310\210V\275\353\0301>\2365\221;8ij\275\331\340Q\275L\341\020\274\311\264\217\275\361&\256<u;);Fj\006=t\245\001\275\352m\350\275\270\3319\275n\347[<W\317\014\276\306\264\371\274\216wM=\026\334P=\035&\203\274-1:;\230>k\275\t\254`=#\246><P\266\364=\333\227a=\365\024\360\274T\366M=`<{=\267\0377=4:Q\275\307\225\360\274zx\202<\312\240]\275\351/\220=U\026\246\275kBf\274\324C\262=\372*v\273\320\350\020\275\027L\013=\355F\270=\371\364\n\276%\223(=~\357;\275A\204\270\275\236C]<2\375\003>\200\367\335=\347\333\211\275,\331\327\275\311G\243\275\227I\t\275`\210*=\356\2036=\234-\237<k9\3009\031\231\241\275\334wB\273\311n:\275\013B\223=H\346\013>h\013\320=\255\344\240= \217\205\275\222\211\212<\224z\333\273\315\035\r=\262\360\220\273\007\326\225\275\257_.\2763y\"<]\'\267<\300\000Y\275\n\016\301\273\026\375\242=\264\262{\275\370\351\213=\377\353k=g\265*=\033\273\020<\251\"Z\275\031\322\332;Z0k<\334\340\360\274\336\346\256<\335\224\233\273\274{\017\276\371x\233=\035\354b=J\273\245\273zV\221\275\024\243\237\275\321\"\023>\203e\017>\3678 =\205\256\241\275sF\337<\212\016\265\275\206\351y=\326[\205\275\361\232\345=\034\"\207>\010vE\275\277\274\364=\263\232\334\274\360\225\255\274?\002==\363\270\276=5u\002>\203\025\363\275\205\037\251\275\335\353\265=\213\232\232=\251}\310\273\022O\232\274\035\336U=\r\037\326\274yS\217=\021Z\330\275F\365\014\276\314\341\306=\2472t\2759\272\020<\321\271A\275\023\327\354<\017\243\344\275\240^Q=\2532#\274\331\371s\274\206/\352\275D\301\264\275\203\364*\275\362\323\241<\026*\277\275#\243\365=d\000\270\275\374N|\274W\377\362=\200\200\017>\326\342\366\274Q\312;\276\253t\373;\223\037\207\275\232\331g=&k]\275s\201\374=\371vq\275Yr\373\273\315\245\023\274\035\327\260\274\246\254\366\271.\034\224\275\275\335\231<\"&\227=\213b\263\274!\232\313\274)\377\'=\200C\032=\265\335:\275>^\212\275\265\276\177<}M4\276.\360\266\275\346\327\341\274\020\r\302\275<\321\003\274\232\367*\275\231!\250=\026\272B>\021\341\223<\026\363f\275%\255+\274\257S;\274\033\256\035\276!)\r=\300\350H\275^\001-\275,\327\206=\322\322\273\274^\234w\274\332\362\271<\033&>;4(\376\2748\"\016\275\"\345\215\274^\030\204\275&\034\210=K\253\243\274\260\265\353\275\200Z\302=\315\035\327=7P\006>\270\301\372<\332\263-<s\016\262=&\0200\276\213\3738=P\017s\274\210k=>\254\222\261<\274\"\024>\023\305\265\275\254#\327\275\266L\004=\252\251\342\2748A\327\275\254\361\335=:\340\341=\024\266\226\274F\201\013\276\260\224\257=\201\\\263=\212b\032\276\257\352\304\275fa\224\275\202\264\304\270Z\213\016>\351a$>\272\007\223=m\024c\275\261a\017\276\376o\240\275L\013\304<j\201\227\275\337A|\275\321\347\367\275\356|\263=F\036\r=\270L\000=\006:\264\275H\361\t\276Y5\027\274+\r(>\326\026\005=\273\022\273<\260\r`=\201l>\275\r~\331<\200\267F\275\353\036\013<E\215\370\274\251n\025\276\207\023\360<\314s\030=\334Jw=M\224g\2741\231A\274\214b\351=\223\261\004=x\203]\275\307\340\223\274\020\315\253<\316\311\346;2a\346\275\017P@=\017\245\270=\207\226\371<\316FZ=d\251\241<}|\270=y\377)9Q\227\027=\357\322e<^\003\266\275\203\235h\274\274#\010\276#\315;=q\266\353\275\255\023\021>g\314(=\3011\013\276\025\\\275<\037\236!\275\276\006\t\276\304\244\315<\004\327\223\275\242\220\232=\204[V=|Gb\275\323\021\003\275*\3718\275/kP\275\274\361O>r*\006\275\272`\033\276\335c\233<za1\274\355^>=\270\253\013=\367\344\224\272\2143\317;4\177\256\275\277\260\251\275\'\361]\273\237\315\337<?_\306\275b\205J\275\226\024\016=\240.\223\274\3017\263=\217\031\253\275\'AG\275\375#\001>\257\350b\275r)\314\275-\177i;\0132m\274\010\264\322=\370\327)\275&l<\274h\200\006\275QoO>\016\321^=\232\267\026=C\243\010>\261\243\317<\371\005\345\275T\277O\271\246\000\365\274\350z\245\275@Sl\276\367k.<|\370T\273\324\2052=+#W\274\374\270\004\275\227\334D\273d\330\245\2750h\031\275AY\001>\213\300\211\275\332{\350=B_\001=\\\301\220< _\210=\374\216&\274\373&\264=\304\303\220\275q@\036\276\304\305\376\274-\314\360\274e\372<\273\216+R<^\250o=\241\310\252\275i\205\223;\247HP\275`\367\322=p\201G<\rd\374<O\023U=\312wd=Kk\324<s\265\335\275\307\030\001>\023\275\207\274f\332\256\275\021\017q;\233\317\376\275\313\362\245\275N+\257\275\215\326_=\334\233\320=\241\223\245<\312\027b\273\231>F=\310\331n=\007\363\005<\211\266\254=\356\240{<3\337\233\274N\370\342=\006\262\263\275\262Y\331=\t\225\216\275\252\330\215;j\034d=.\373\253=\030\032e<\236,\020=q\330Q=\222\230\321<O\314\021\275\331f\\\276C\365D\276V\223\252\275DIE\275\314o\211<uw+\275z\202\000\276\\\202\246\275\240\370\246<\231cX\276\306\311\237\2754\220\263=\177\240U\275V.6\276\361\275\357\275\212Z\220;\232\2523\274:\317\006=W+\206=={\201=(\031/\275\020\374\251\275+\345\302\275E\266l<\340\342i\273\210\320\311\275\341\205e\275\010\251\032=\002\302\237\275N\007\273=\215\020\247<\352\225\306\273\331R\273<\373\203\246=\327Vs<\201M\021=\346\017\n\275\226n\024>\232e\233=?\021\237\273e\025\343\275\025\010\362:EG~<\272\220\034>[1\322\275=\304\006=\303\272\267\273\007\016:=;;i\274Uip<\n\257\351\274\327Df;\364\374P:\203jA\274\t48\276Hke;\312\363\003>\3220\025\276\247<\r;\275\001\234=\001\006\320=W\352\316\274}\350\364\273\002J\340\274\214y\024\276\350\023\033\275\350\336\300\274T2n=\317\270\300\274Y\370\301=\205\030\325\275D\233\033=\036\206\376<y\360\310\275$\006J=\211\025\213\275TR\334=\374\234\362;\242\250z=)6\234=S\305\270\274~-\336<$\306><I\033\233\274sX >vT\272=\321\034\217=?<\030\275\370?\251=\254\211\323=N\3136=\373\262\350\275\326\217\024\276\231\361\037>\236?<\2751\033\250=\322\006\\<Z\204\301\274\'!)<J\233\032\274\370k\234\274\277\244\223\275\305\3254=\261c\335\275\354\271\360\274\201\375 \275m_#=|\215\200\274\027N\247=\303\036,=\014k\315\274\025\223\306\275}q\246=\304q\330\274\3038/=\367\000\202\274\305~f=\355S\342\273@\366\361\275C\375\343<\306\334k<3l\277\275\207\231%\274%m\021\274\330ZD\275\031>\317<\025\245[=\004n\201\274VS\024>\314\250\253<\217\023A>\231\253\257<\272\023\220<\337Y\246=\367\177\252<\n*\375;\341\221\206\274\014\021\352<,\240\242\274 m\377\275\220K\312=9\376\003=\220\013/\276\300U\020\275\261D\273=\371\360\002>\357Y\314\273\275MJ\276\2117\223<\223C;\276\317\235h<t\241\226\275\333\332\231<}*\033=\264eU\276Y&\024\276g\367\236\273\0044\222=\231\271\023<w\'\013\276\265\210\013\275\211\307\264\272\276\310d=}6\372\274\216\2565=t\314\317\274=\204\200=D\034\227=O\360\035\276*7\275<\270\200\t>a\3625\275\307\300\265=\324\243\331=\377\272\203<U\005\013\275\313;f\276Q\030[\274Z4\004\275G\234\365=4`\204\274\240\267\204<\261!z\275\230\001\301\275\324\226\n=\214\214\237=\3565\255=\373\'\306\2743a\013\275P\362\006<v5\274\275\177\350\255=\327\322\035>\002\346\035\274\203\003\302<.\206Y\2741\344\265<\243\267\330=\253T\000\276\325Q\001\276\217\024\333=\355\255\215=E\353\364=\240\236\314=8\371*=\246o\216\275\355\351\230\274\010\032\004\276\213\027\251\272\2742\3269e\311\005>K\200\014=\230e\022=\201\337]=y4\247\275X\236\303<\221\317\177<\2244\320\273\005\265\241=-\034]=\236%\216\275\350W\330\275m\366\221=\345*F\274\235\331\300;\363\347\r;\210\027\025\275\"\205O=\270F\212=\026o\261\275\r|\223\275\256\346h=P\233\301\275j\362\t<W\376\366\274\301\027\267=BZ[=K+q\275\361\267\006=\326{\354=\331O\375=\221\237\017>w\203\236\274\304\301\177\275{\207\242<\215\305\335\272\245\216\346=\270\374\223\275\307\243M\276\323\376\221\275\222\001Y=\257\"\226\273\371\305\246<~\340_\274\212\024^\275\305\365\027\276\006\026k\275\270\0228\276\241\253\272=\342I\211=\236\302J\275\270\026\216=x\324\n\273\013f|\274\n\265_> \362\325;\005~r\274\306\236\210=x\246y\275\231N\263<v\3669\275*`\025<!\353\225\273\024\263\260\274\361\366C<;\000[\274t\376\021\274^Q\302\275\214C\337\273\310\245\327=\327\353\247\275x\273\034>\262\221\310<\243\224\025<H\334c\276dh\214\275\317\217\247=zmj\275\255\016\000\275\007\207]=\t7\013=\n\212\335\275\024\341\264\273\241\232*\273\312C\034=s\223\340\2752\354\217\275<\342\235\2751B]>K\271\345\274\342\006\232=\266\214\002>H:x\275\327\2055\275Z\307d\274~\327\270<\306\t\232=G\265\214;\374\307\255=\361z\034=\tI\303\274Cj\321\274\364\304\026\276\375J#\274\023a\255=\271IU\275\330\215)=X\277\244=\0031\223=\'\240!\276\212V\264;=H\254\275D\266\001\275eG\007>\374tk=\253\251\003>y\241\351<g\023d\275]\372\350\275-\276\270<B\374#\273OuX=\263\'*\273\311\227I\275\371\206\223\275\003\351\340<gf\243\274\310|\017\276\n\213\224=\336\234-=\365\335\301;\227Aa< \2431\275\326\265\250<^P\303\275\022\346w<c\241\260=\251\200\373:\260\215@=\247\227*>\276\323h\275\377(\304\275\247\260\243\275\021\365\333\275\275\360\317\275\270\"\246=\356s\022>F\3303\275\303\262\342=\233\355\023\276\354oo\274\327b\262=,q\211\274br\344=i\314\255=\242f\020\276\314q)\275\003O\355\2742f\036\275\375\257%\276\221<Y\275\205\275[\275J\204\002\275\315\r=\276~\365l<\304\217P\275d\230\317\274\212\343\210=\216\021g\275\321=5=w\271->\354Y\262\2752\271\221;bL\022\2756^\317<\271\030_=\304d\013\275\360px<\371\n\004=\231{\271<\035\200\205=\000.\206\274\026.\271<\366\214)=\323\253\250\275_\350\273<PL\006;\033\004\001\275\270\334;>\306/\241=&\244\023=`\022\001\274\013:\263=\305\377\305\275fP\204=\261\010\341\274\204s\234\275\275\272\342\275\007-\010\273o\210\373<\021*\036:\222\227,\276\030\262\360=x\364\242;\233\037o=\037\202q<\307\006\377<*\314\020<j\366\275\275\023.H\275x\2651<\334\236\216\274P\331\242<(\265\231\275\235\346\">\'\262\014>\252\312\334\275\0256\221\274@\210\250\274\270\364:<~(\002=\314\276\003\275\213\017\356\275\327\014e=\267\332m\275\r\260\223:\247z\212=\317^6=\307\224\211\274c\315\271\275Jh\216\275\377{\251\273~\271\031=\341\257\243\274\333\212\022=\020\320\327\275\277\026\367=T\3505=\236\231\006\276E;=\275\225Y\027>\232;\225=k\244\004=5W\255\275@U\020\276b\265\251\274\231\302M;\315\201\376<\353\034W\274=Z\212>\275\330\235=\362g\221<\013\033S=(\225\312<K\0057\275\'m\242\275Hc\236=C?\003\276\350\252\261<\353R\323\275/\242\247=b!\244=g!\251\2741l\362\275)\351\215\275\274\325E=\214\255\365=\203\324\021=\007k\256\275\3344\027=T\311W\275\373\2714=\207\376\326<\346\016+\276v\224\200\2754\242s=\272\303):l:\034\276\357\037\030>\305`\235\275o\215\210=\022\256K\274\021B6\275\001T;=hY!=\214\244\325\273\024\362\270\275\254\200\251\275\014\227\n\275s\244\026==\364\325\275\256\030\273\274\231\335\016\276\225\354\342=\212\025\267=\377{\205=g\2039\274\271\247\210\275\253\231;=\022\341\367\275R*/\275\010v_\275\227\027\376\275\265\301\261\275\216\334\367=\023L\273\275\2223\257\272\300\372v=\331\222,=\215!\246<`|\024=M\320\000>\017c\303=\311\014\332=n\321\217\275,u\277\2747?\235\275\251\252\r\275\t\035\036>\2679\325=\320\006\313\274y\307\330<lU\245=\245e\230;;\343\273=S\177\331<\3031\277\274\0203\212;U\370\215<\036]`\2750\261\247=\260y{\275\212G\326\274\320s\240<!\'\010=\202\272\031\275|\2052\275\324\232\360= Z#=>n\272=\3470/<\257{\375\274\274\0028\275\231\223\007=\252\023\213\274\360\364\026>\021\202\\<\223&\341<\315\253\263=\344\222$=\231}\223=xd\252\274\361\253$\276\257Q\362\274oj\212=\252L\227\272\330\'\t\276\336 &\274Nw\277\273\377\276a<\367\261\375=\003\364>\276\266ND\276\354\004\270\274\243\235\233=\037A\231\275\331\0333>L\004\231\275\t\365\203\275\375\006,\275\024G\027<Zr\'\274a\311\225\275-\362\343<\227\240\245\275R\352!\274\312\247X\274\253\001\277\27451.\272f\277Y=%\010\010>s:\237=\2045\267=\271^5\275\262<+<\261h\016=H\355\326\274|\216\340\275x\370I=\216\244m\275\325w\317=\363\221]=X\'\275\273\2029\013=\002\330\213\275\233+5\275\364\377\334\275V\274(\276\014\360:\275F\003u<\021\315\311\275O~\245=\261\273\364<`YU\275\353\\\243=\007\330\225\273?\327\261;\307\252\020\276\320WW<\2017a<\224\251\314\274\223\317}\275\264$\020\275\1770\017>\226k@>%\366\307<\251\237\262<\'\030\003\275\365\303\363\274\355\351\323=\273\304\201\273\\\202\027\275\263\305&>\373\225\021>\027\000\302\275o\332\332=\025\037\240\274\276\200\230\274\211\201\265\273lr\352=&!T<F\373\325<W\276;=\307\373\010\276\001\257\363\275\252_\327=tXR=\031\216p<\363f)=\360\013\001>\005\276(\276u\267\376=\314\320\024\2759\215\226\275{\023\242<\242\245\253<\220#\215=%\257\233\2753\326\023>H\345\006\275\243\022\235<B\014\223\272\357;`\275Y\275\016=k\376R\275\377\374\022>N\246\237=E+\234\275\303Mw\275\346P\372\272J\271Z=\332\002u\275\304\\\001>\024%J=%l\025>\344\205\361=\036\267\344=\',\004>\235v\216\275\310\023[=\207\315\371\274\024\276X=\264X\370\274R0\366\274gL\375\275\334k\222=2]]\275k~\204=z\253,\2753\215\210\275\236\234\371\275!u\314<\356m \276\256\367,=\226T\020=\262\266M>\261\203\000\276\307\340`=R\177\315:\361\0226\276\205\3755\275\312\270\327\273\007\006\222\275jt1=}^\307=\351\314q=w\177\305=H\263\321=S\356\"\274\025\323\246\275f\036\242\275\333|\243=\316}\035=\3775\220\274q!\275=\00653\274\225n\311<\271n-\275\013\343V=\324rj\274\000F\242\275&-%<W\245\303<sk\327=\036sF=\264\334\024\276>m\274\275C|\r\275\311<o>;\2568\275m\267D=\rZ\236\275s(\257=\327\035z\275\326\234\274=V\267\312=\227\201\034>\365\266\233\275\236\014\376<j|\247=\214\266\262=\367\226\023\275\020\217\316=z\321\246\2741\245\001>\310\010\320=\311/\245=\022\035\254\275AG\002\275\264\\^\274\206\202\341\274\3241\324<<U\256=\346U\021>s\315\216=X\267\212=\220\265\356=i\200}\273\334D.\274\363\235\212\274\277\214i\275\276w\021=\353\221v\275!1u>\342\226\010\2757\243\026\275\301\0334\275\355\242V\275\231\240v\274\266~x<o\307w=\275%\037\275\352p\255\2749s\357=w\212.=<4a\2750\002\224\274V>b=:\210:\275\343\026\000\275\\$\220\274\355\306\223\274\257h\265\275\rb\215\275\225O\313\274 \212E=\375\276\265\2728\332\337\275;(\344=,\n\234\275F\316\003=\321\235\006=\232i\021\276\2143\026>?\013X=\245\317\315=\206\014\367\274_b\202=\\\331\030>\360\320-=\000\324\207<\007\007e=D\370a=E\014\200<h\351\256\275\303\375\013>}\3440>W\302\213\275\tSw<1\255\241<\332nl\274j\337\2159\354\277\201=\306\024\326<\341~\372=`L\361<\037Ym;\312\303:\2742\300\024>\251\207\001\275\217\254\242=\341\272\333\275\204\022\256<2D\177\274\274j\254=\3114\232\275Pt\2447\037\023\021<\333)\362\2742\312L=]\020><\261Y\305<\324e+\274\270\035;\274\236\312\005\276\317~\000\276JyF=O\214#\276\255\221\305=!\360K\275\024yH\275>6\336<\017i\316\275\'\017\215\275\300\020\330=]\367\342=?\026\347\275\356T\302=\345f\206;\257UW>\032h\370\274\2133\230=Z\253\315\273\201\213\032\275\241I\240\275)\315H\275,\245\032\276\210\370=\2753\016\205;z\247m\275\365\370r<\260\314\273;\255\330\260\274\232k\030<\231\255\306=\3247d>k8\222=\0212\347\274\316\323\375<\273\317)=)\357\313\275\237\274\217\275\336\203\016\276L\200G\275t\3104=\007\227^\2754D\033\274;r\227\275\023\350\007>oz\320<}}\325\275\365{\202=\t\333\022<\240p%\274\nqu\275\240\327\244<\306\362\355<\216\\\'<\364M\005=\343\236x;7f\325\275\260!=\276\001\240\033\275\300\214g\275\343\271\006>$6=\275oF!=\324$\213\274\036h\350=<\026l\275\2419\226\275\037\235\350=,\223:\274~e\022=\305\363\201<s\254\363\275\352\322w\273\020\306\\=\241\267K\275\023C\230\275\351;\211=<\262\030=6\013}=\346\373Z\275\2374M=t\010Y\275\311F\247=#x\214<;H\354<\337\013\225\274`\267\325<\243#@>~\354\347\274\212\010]\275\2241\250=\267\347&\274z\306\021>\244\021\t>\203\322\306\273W;\367\275L\r\356\274p!\317<\206m\361=k6\252;\206\322|\275y\034\252\275\207\t\320\275Gf\350\274h~\327<\251\014\204\275\323\216\224<\226\031\372\274\314\263\303\274\216\360s\275Zg\327\275h\037\331\275\214\301\027\276\376\336\t>R\214&\276C\201\022\273\255\224\t>0\376\311\274\337\372\252={Ii=\352\n\026=D/\350\2751yc=\377\275,=\262B\027\275\377\317\023\275\030S`=\037\214\224\275\270\r}<\t1Z\275\035\211\227<\017\215>\275F\345C<;\346\014\275\342\030\006\276\000\2012\276\334\355%\274\220\264\321\275L\347\243=\313\233\261\275\016\037\034=\r\371\214\275\330\367N=\357`\005\276\241\302\370<\033\254H\275\265\t!>\022s\321;\206\271\025\276\237P\246\275|zI=J\3159>\346\233r\275$\252\361;\316W\355\274\310\211\002\276:\032T\275\315=I=\310Q\247=B\327?\275H\2778\275\327\225K=\n5\030=&\031\305\274S~\337<\006d\232\273\014$\244\274\223g\315=\024\333\225==\2467\275\246mp=B\313\014>\027\201\201\274\027#\">\264\263z\275h@e\272A\332\022>\352\342\342=\2712\230<\352l\032\276$\310\332\274\274\\W\276\004\nY=\031K\245\275\322\237\236\275\337]\213\274\275\024\317=5\2202=\016\263\352\275a\331\357=\032\261\224=\332\320\n=\t\367\267\274\\\2755\273\303\341\356\275|\222\004=(\335\315\275\273E\246\275\031!\317;`\247\277\274\333\260\263=\037Tk=\335r\000\275\371w!\275%i\320<\374\236\037\276\032\037{<\324\276\202=\263\365\223:W5\242\274\007\274W\275\356\357\032>s\344\277\275\266\225U\275\316\361\236\275\276\266\256\274%\245\025=\010\"\346\274\034_V>\034\023\003\276\234\2606\274\342\272\212\275D\206h=Rtf=l\037|=/d)<>$\245=\311\206R\275q\310\304<\332+4\275\\qy=\020\213\276=z\267\310\275\272\005\035=z\364\030=\323\021\327=\300YW=\nG\032\275\365\332\213=\340\326l=\224O\270\274\305\205{<\322\200\010\276\236\242\341<VZ\313=\\\326I\2752\302\324\274\212R(=B\034\373\275\307I\326=u\324-<K\272\021<\220oS\275\222\n\201\275\233\262\257\274\352$-<b\207.;\263\324\366\274\241\273\311\275\323\202\\=\261\222E\275\031\023u\275\256\345\021\274\270t\336<D\201\202=\345\335\227=\3172\223<\207{\240=\337\335\030\274#z\201=\277\3307\273\237\271\266=j\306l<0\355\306=\034Z1\274 dE=?\036\300=v\210\370\275\201\016\251\275\220\014\247=\203*\360\275-\231\206\274\335<\017\275\203\361\321=\237/\314=\356\023\250=\177-\274<\035\364\000\275\007\n\"=\337\304\206\275\274i.>\252\001\337<|\225{\275\240l#>\373Z\342\275\025g\023\276m\265\275\274\222\363\320=\237\322\374\275l\221<\274\342\201a\275N@7\275\343e\340\275~#\001>\253\006\217\275h\257`\275\200k\243\275V\216\305<\232-\033\275\376s>=\372\343\312=\275\306\023\276\251\3574=*]\347\275\013$\003\27687\010>U\021\261;\240u\257=\035|\222\275Kb\034>\005\007\013<yx\222<\263\211}=\026\024\003\274\321\204\300\275\2143\n>X\303H=\232\230\360<I\253\022>\003\251\\=C9\360<\034Y\346\275\303\201\001=\221x\203\275O\215!=\006\342;\273 \340a=\034\245\323;\336\243\032<\277\340\250\275\023N\000\275\332Ck=PK\034=\rW\244<|E\033=\350\024\025=7J\374\274g\257\363<\006\'\230=%\025g\275\353\265\311=\3723\202;g\363p\2747b)<\203Ue\275\220\257\246\275 6\033\275\224\313\262=\202O\336\275!\261X=f\231>>\330\266C<\273\230\255\2756\342\233=\010\022\021=\004\332\037\276\013&\332=\027z\023>b\365\352=\357K%>\277i==SP\000\276\343!5>\023\2436\275\250\362\022\274\335\367\251;\332r\310\275\341R\024\275L\253b=1\265*=\361.\247<\247\005\335<L6\037\2754\265\221=w\322\263=\221\n\226\2756T#\275\325I!\276Z\342\221=\234\022\021=S\270\034=g\337%\274\005@\266=D\310\336\274\201\327<\275\237h\370\275\304\003\032\275YQ\267\275\264aU\275\202<&\276SDR=\322<3\275\255\257\240=#h\006=;i\273\273\344S\017\276\200\3764\274\310\036\021\276\307\217\216\275\037\374\357<\377w\003>\202\022<\2759C\376\274\303\231\234\275\014j\306\275@\311\210=\227\020\326\275$LQ=\201\372\211<\277M\203\274\236\337\274\274\027\372\007\276\322_\360:\271\353\006<\334[\246=0\305\245<;\002\335\275\261\020\224=\010LL\275\300\212\255\275B\345\353=\343\327@\27411\264<*\272\211\274\350\205\021<\025\207\311\275\215]\006>\211\251\315\275\316(\014\2758[\333\275\277\255+=R\256\254\275\340\241\240\274Au7\275U7\351\272\221*\031\274\033v]=\370\306\355\274\021\376\266<Ql\202<?D\336\274\332_\365\275T;\266=\271\360\272<\241r\343=\2053\264=\010\261\362<,y\355<\010\036\330\2759Q\207\276\227\006\257=dW\301\2750\363,\275\334\022\306\274\317\322\036=\210\317\216=J<\346\274\371\220\254\274\250\261\253\275\363]\234=R\202\004\275\301\024\302<\246\nZ=\020\214\243\275\334\276*\276\261\361\354\275U\036\314<N\333\227\275\240\007\005>\r\222#>\364\350N\275\210`\232=\266\237\364\275\'\013\276\274\014\361\213\274\335l\235=\003j\345=\334\314\002=X\246k\275\312\027?<\261\2660\275\243\336|\275<Fz\275Sp\217=p\266L\275\340\211R\275\255H\005<\224\337\306<\274\370\252=\354z\016>\027\276\224\275\344\316)\276\271\340\362\2742EK<\372I\334:.\021\r\276\013\252\320\275\214\r\324=\245\366\325\275\322\204\331\275\002\004\346=9\242\333<\037\270\005<\004\246^\275N\337\001\276\226\312\006=\202#\237\275\357\366\237\275\003+\304\275\242z\316\275e\336\022<\366\372\300\275\374\312\256<HY\343=\353\357\002\276X\274\260\275z=\327\273\344=6\275\025\253k\275b\252]\274\313%0\275\007\364\347=\322T\243<]\252x\275\022\350\265\274\037!)\275g\300\003=:\025=\275\3456\353=)#&=1\333q\275\'@\037\276\007L\227\275kB\201\275Y\312K=\357\307\036;\304\226\255=\317\356v\272\273-\314\273\3501\005=\2644\010=\014O\224<\2278\344=\336\346+\276\223\371\266\275\236\013#>\006&\003\274{\",>\216\233\215\275#Df\271\210\377\275<\005`v\274\252\304s\275%\337\\>\305\344\314;\321\n\261=\333\375\327\274c\311\267\274`\311\333=\224\357\214\274\344\006\374\275\377\t%\275K\213\306\275\270D\005\2759y\227=\217\351\032=\341\006\331=\276\207\212\273\272\302\225=\240Q@<\016\014\300\273W\000\230<5\021\355<\001S\376\275{\322\301\274dEb=/\272\227<j\351\253=\266\200\273=\262\244\236\275\324c\322=uM\227\274\217h\307\275\351\273\226\275\220g\230=\365D(\275\327x\300=pM\033>\017\251\022>\022\324\212\275D+\331=\300\rs<\213\014\371\274\016\3236=#n\r\274\270\232\270\275zv\344\274\304\225\347<\021\316\267\275\024\237[\275\303\336);\250\312\240:\327\275<>\334\016\262=\312\306\241=O\207\242=S;1\275\375\250\263\2740CW;\302\342\005=oQ\332\275T\243\252\274\322\253\355\274\014<3\276A\"\220=\367\020\302\275\215t\331<\026o\360<\313\312\240\270\264\024\260<^\327\036>[`\026\275\n\304V=\227g\215\274\014#e\275)\310\005\276~\344\274\275ib\330<\307\307\013=\214f\241\274\t|U\272|m\216\275\010\207\244\275\315\333W>\333\2568=\247/\331\275\230\017\335\275o\225\002\276|\n\346\275\253\242\251\275\034/\341;\233:\370\273Z./\274\364\326H=\333\320~=\354C\270\273.\036\000\276L\206\226=\002\315\342=.\362Q=UM\333<\340\336+\273![\207\275A\264\316\274\330k\214<\"\241\305<\277\235\223<\027T\010<\265K\301:X\313+>\002\026\273=\347\0064\275\031\277\004\276e%+\276\202\033\275=\225ip<\311@\026=\2066\333=\372c\260<M\030#=\200j\331<\2210Z\274\340\204h\275\345[\217\275\244\3741>\233\226C<X}\272=7\267a\275G\3642>A\343\273\274%\327I=\345,\310\274@\001\252;\257\375\276=\010\016\013=,\362h\275\241\267\034\275-I\\\275l\r\'=\264\301\356<0=\247=\"R\244\275\254\333\226=\200\032\'\275\360\032\223;\271\3677\275\252\273\206\274\345\001\324\273\337\256\321=\201\364\033>\312\202\014\276m\234\232\274\204\225\335\275\366\372\023\276\221\352,\275l\361\351=u\270\326=\373Z\261<@\337\225\275\244wK\276\347IV;\322\332\250\274\375\320\232=\356\303\022\274\371\366}\274\261\367\251=\003\235\005=$\3720=T\362L=D\237\275\274G4\250\275\206)\274\275\022~|\273\365\252R\275\336\346\367<g\354\014\276q\027(>\030\333\020\276f.\"\275\024E \275\023s\373=\354\373+\275\001(\344\273\266C6=\262\332\217<>\316\312\275\'<\367=\003i|=\004t\313=\311\237\345<O\225\263=\035\305\202=R:\262=ST\327\275\377(\335;\260\242\356<G\370\330<\032g\340<\200\351\236\275\333\177\233\275\303%\333\275\002\335\306<(\210y\275g\023\210=\341E\350=:<f=p\2624=\340bC\273\241\302\022\275\244\324n=\347\022\'<\033S\322\275\246\250\366\275w\351\201\274\264\006]=}\177\304=z`\313\275\232\372\254\275\307\262\023\276\255\330\257<\020x2\274\205\271\013\275\360b\302\274\247\005\r\276\246$\256=\332\256\214\2758I\000\276\177>~=&H\337\275I\266\306\275\355 \215\275\303u\021\276H`\335\275\n\201\252=\310\2534\275\302\320`=^\271+<\320T\306=\024\244\335<\304\"\241=\177\260\210\275\016\313-=\332\317\r\276\343\201\266\275\236G\t\275V\342L;*\316\353=\223\355\357\274\242\363\372=e\261\002\276\316=\013>g\274\200=\302 \223:\001QD\275\317\250\217=:\002\207=\253%\035=\312\026H>C\264J\275\254\3208>\247P\356\275$^\231\275!\2259\272\274\371\326=L\250<=JI\177\274\005/$=\255\2549\276\223\267\360\275B\374\313=\372em=\330\243\315<\220\202\363=\205G\263:\306W\223<\304\232i\275{&\326\275^U\234<\351|\373\274\221\024\253=\3042\321\275(\300h<R%@>]*\004=\232\\\210:\'\265g=R>\207=\242\350:=7j\003= \213\027<\3610v\275\361\236\213\275w\013p\276>\202\200\275\323V,=*\026\025=\320\375\274\275\020\200\244\275f\335G\275qP2=/\346\231\275\260\021Y=\375\020\274\274\206\350>=\036:b\275\231\010\010\275\324\364\271\275\243\346Q=j\265\354<\316\2762=\251N\235\275e!\034<\"+\250\274\3643\263\275\320\371\236=\023\216-\275u$&=<\217\333\275\322V\002\275\034\376\223=\203\3763<\016\267w\274\341\r]\274\t\256\351<r^\010\275|\355Z\275\240LB=\241\027d\273\031$M=\307\2044\275w\357,=\206.X\274\370s\320\275C\253\002<\245eC\275\n\322\364\271\216\017\006\276;\333\\\276\376\t\244=\020\235\266=3A\026\276\373\220\243\275M\347\277=\212`\236\275_ &\276\276=\322=9\233\342=\250#\024\275\272\254Q\275\177\2466\275\000b\307<C\005f=\re\304=\0034=\275\335\'@>\362Wf\275\300\231J=e\340\212\275=\325\277\275Oj\007\274\376x\375\274*\272\301\274\260\265\220\275jV(\275vD\202\275\355\343>\275\227\352\236\274\177\227F=\r\030\225;K\230->l\030\327=\323\211c\275\346\032\310\275\003\237\223\275\315\306t\275_\034{<\233\005\315\274M\245$\275\021.\032\276t4\302=K.\311\275\260\216,\275\022y\364<SJz=\217\357\300=`\373E\274&\3055;+\237\031<\310\r\376=\216\270:\275i1\026=\251\221\343=X7Y=\010<\213\275\311\306\240=\347\010\027\276\034\320\231\275\221V\035\275\214\032\202=C\374\213=R\230\t=.\352<\275\267\352\267\2743p\327<\237\221\337<\030O\\\275u\223C=-EU=\273\365^\275+O\331\274Q\322\210\275\232X\004\276\037\277\350=\343\007E\275?\336\205\272K\217\251\275\020SD\275[\214\014\275\345\300\203=~\305+=\235\226\275<<\303\357\273\361\357\250\275\211\374\001\276\203\3406=\301\334B=\304 \037\276\242\254\202=C\211\334\275P\035\013>\206\252\310:n\353T=\026Q\033\275\310\272\272\275\010\0377;>\234\315=\005\004\030<\302\322\323\275\366\317\017>\2051\313\275\006\360\233=H\227h=\017\260x\2755e\001\276\206\353\214=\367\314\202:)\005X>\233\326\035=\035\321\270<\316\247:<v!W=\030\300\313\275\000\203\277=\002&&=f\254\266\2752\205V\275\330\326[\275\373\252\037\275\372\240@\276\271\316\241\275\233\201\306\275\201\346\237=\007q\305\275\331A\200=CA\341<\036M>=\205\275\226<8g\263\275c\321\215\275 \221\375<\204 \212=\363M\302<\355?\305=\2426\307=\200\267\001>c\3042\275!\014$;c\336\016\2757\036\025<\254w\212=)\010\000=?\214\214<9\213W\274p5L=S\253;=E\336\030=d\214h\275Lt\t>\014\324\244<B&\035=\212+\355<\0065\227\275so\350<\212S\031>\226)\031\276\3053\264\275I\013\t\276\013,\014\276\257\035\277<\251+\327\274\336\031^=J\2636=\340\006\004\276\370G/\276\370%\223\273`\301/>\303\200x\275G\337\314\275:s\257<\014\245\016\274\341\010\r>Y\325\220\275d\274\006=N\013\004\276\367\373u=\374\202h\275\246&\207=\343A\033\275\376Y\215\274\n\233\342=#\236\322<RZ\036\275\021=\033>U\305\034>\\K\021\275\254g\252=4\200\302\274h\t\326=$\002\321\275n\3458=`\206B=\225\006)\273#\266{<\207r\013>\244\247\206\274\263\220\354<\037\004\\\273\352\310\354<\327z\310=\002\366\222=\311\352\014=\320|S\275\205\336\216=/8e=\037\302w;\232\335\231=\314n\005\275\344\263)\275\335\022\205=\323\014(\275\202\006-=\013#\210=\234\032\314\275\304Ry=#\026\333\275K\321\277<o\360\221<\335,\034>\206~\367:\312\326\242<`|_\275\347\325\007\276=\367\230\273\321\005\272=\246T\375\275\372@O\275f\310o\275w\252H=*\022\375\274\247\nO\275%\333\354<I\t\346\275\214p\203=,J\253<+p\266=|\032\332<n^\225=\023X-\276\314.|\275\373\200F=\305\245Y=\316\325\030\276\305\032\261=A\306\304=\207$\366<\371\201\236=\317\0375\2738 m=\254k\336\274\257\231\320\274\037\365\205;\256> =c\2271\273\033#\274=\252$\004=Gz5>\001\231\371\275\235\035\344=2\275\270<\tz\\\275\373\362\010\275M9\215<\373\223\324\274\257Z:\275\007\316\031\276-\033\021\274\251sO\274\006\256S\274\3347\375=\337N8\276L\262\350\275\272Q6=EK\033<\315\2452=j\364\332\274\352r%\276t6\334\274\\\265\257=\"\221\241\2754S\212=\313ca=Y\0016>\263\305&=\340\312\236\275K<{\275izn=\022\031R\274\343c =L9==\256gk\275\335q\010>\226c(>r\377\004\275\233\231\005\275\376\0351<\317\324\001\276\212\341\025\275\3307\222\275\247\221\241\274\267^\207\2749\365\236\274\316\3413\276\226R\010\274Z\354A=g\233\201\275I\357\017\276\"\240\242=<m\333\275B\310\307\274^gq\275]b\027\275\300J\273\274\262\345^=\277y\215\275\262\321\035\274h\231\r\276\262\307\320\275\236|\263\273\223(\231=\317\004\234=\256\272$=48\020\276^\336\004\276\346\306/\275\331\273\302\275}P\r\275L\203\216\274\317.&>-\354\203\274\226d\255=\331\355\244=\305\025g=\324\352\021<,\270n\275\251\362K;w\211\031\275`\021\256\275\344\251\023>7\237\372=\270F\266;Y\014\325\2750\237\034=p\270\220\275\254\323a=\367Ld\2752:\010\274J|\221\275R\247\200\274 \026\242=\343\257\270< f\202=\236\225P;\364\340\201=y\306\371=\216\240\031\274\026q\206\275\236\363\270\275\310\'\270\275\200E\203\274\021\257\010\276\216!P\275\212oT=`G\317=\2411&\274\'\322\203=\342o\025\276@e\204=\335\227\255\275\342\224\302\275\324\340\347\274\3353\260\275\"\254\317\275\305t\204=\361\336\236<j\005\031\275\231\241\277\275j\366H=\216o\335=\3506\251\274\376\340\233\274\244\374\347;a\246\252\275\322\307\022>\332b\035\276n\010\361<6U\027=\020\242\307\275\225\262\021\276\014\256\304<\177M\222<\301U\004\275\355\010\335=f1\207\275\237\373\233\273\017\216]\275\275Q\250\275\354\262\243\275t40=\362\234\241<M\n|<\001\336\260=\207\030\345\275\257\224\'\2753\363\226=j:<>\227\334t\275lN\334\275\230\001\227\275\254\313\242=\212\000!\276jY\243\275\241L\233=*\326\313\275\264\227\333<\324\023|\274\372\253$\275/\013\253\274\225\001\221\275\205]/\275PR\361<\315\247^\272E\007\247=\033l\377\275\345\020>=\266W\230\274\365&\026>n\307\007\275\351\276\017=\214w\025\275fRh=\236s!>\320\335\2659G\342O>\325\215\035=\307\025\300=Q\322\036=\274\016\226\275\200?\004<\342\321\222\275aH\265=\333\216\340=\031\232-\276\000{\257=\3219x=\307\014\221=p\"\n=\216L\035\275v\237c\275~H\335<\245j\311\275y,H=\222\177\202=\344!$\276r\331\007\275R\341\333<~\3462\276\214\225\372\275:m/=\365\032\351\275\r\022\033\274\332\231\033\274\267\231\364<\202H\326\275Pa\342\275\306q\225\275eNr=4\263B=\323\330D\274\240|\346<\316\351\002\275{|\034=\362\242y\274\215w\367\275\341H\271=\262\266\010\275\352\374\021=\320N\375<\343\337$\276\034\361\251\274 \343\240=\231\347\330\273\251\347\310;\337\362o\274\245\241\033;a\270\203\275\206\234c=\346\016e\275{.\254\275Q;5>%AI\275\315\342\002=\342\371\327=\036\004\307\274<\006\005>[\240\234\275!\t\351\275\366\235\351=iX =\221\223>\275\261\344\200=\034\300O\275\206\233\004>\347]\235\275s\r\001>\210jU\275\246\261\257\2755]\300\274k\357\020=6\340z=`\301\177\275G\325\371;\367\344w\275\313\332\272\275\003f^=\356`\277\275\207N\034>1/u<\331\245\366=\376\332U\274\266\217\252=\336\205\345\275@`\344\275\2564>;g%\354<N\335\032=\265\347\337\275\n\377\202=&\001\220\275u\243\230\275\320\032\330=\225\246\270<\366\"\"=b\303\336<\032\233`\275\034Z\023\275\346\003\377\274\321y\223\272{\247p::\352\013\276\272\r\326<\033\275w=\275\327\017\275\003\235\002><\326\223\275M?\205\275&Q\346\273\252\030\001>;\261\340\272+\204y=<\324\221\275\010\364\222\275\n\361?=\2108\240=\222WG=\315\266h=\014H\026\275*\246\002\275`\377I\275\006\003m\275\034\207\203\274W\307\244\275\245\250D\271aZ1=\211\363e=j\037\021\276\210\277d\275\236\230 =\226\t\213=\326\023\250\272\037|T\275\345u\250\275\016\312=\275kp\234\273\313/\267\274\323Z4=9j\004\276\234&S=md\'\275F/\326<\371V\251\275io\256=^\321\270\275\304 \013>_\355\244\274F=\267=\236o\\<\304\365\263=\313\263N=\016\371\377\2734\020\\\275\321,\020\2753fP<\302[\002>/\336\310\275\006\355\347=\356Y>=\263\366s>o\366s\275\302\371\360\275\252\327\036=q\332\217\274\363F\321\275l\243\237\275q\027\374=\275\020b=\337\023\333\274\332\334+\273\304\301 \273d\227\224\2753\322\016\275}T\311=y.3\275\377\360$\275\235\270t<\005\034\220=\037\037\257\275.\352\177=\335\023r=\313O\235\27570\270\275\247\037\336=5\327N;\244I\252=>\371`\276\000\215\036=\303\000i\275\233\270\232\275\354^\362\275\357\365\220=\341Y\240\274\020\016\336=\354\2706=\352\263\236\274\303%}<>\2519\2750\300\000<\332\361\245\273\321\255\205=\240`@\276\327\373\007;4\360f=\307\365\\=\232\323U=\021\370\001\276\021\371:\276\\.F\275\203*\231\274\211#\231=\357)\246\273\276\014S\276\322\231\233\275e\331\037\276\372\331\201\275\372?\337\275\356\273\233=&\227\326=\375\263^\275\336\240\237;\373\262\262=q1\346=\215\0015\275^1\304\273W\"P\275#\'&>\021\235,\275Q\332e=\252\376{<\330\0010=\303\014\362\275l \205;\321\320\343=\355\335-=\310\326/<!f\263\275\036C\206<\343\213\356\275e\316\303\275\305\225\'\275\nj\353\2757\177\025<\223j\202\275\301\275<=gn\n=\362b \274\216\251\357\274\203\256N\276zX\220\2756\235\310\274\364b\252\275\303\364U\275\274\301w\275\010\263\263\275\342\371\211\275\036\202\265\275\217\230\226\274\357AH\2753\030\000\276\261\010\245\272H\365\237\275y\031X=\213q\222\275\351}\375=+\025N=o\215R\275\312M\365<\266\206\210\275\344\303\316=\033b\006\275~\260\032>\2754Q<\036\243u= \241\n\275t2}\275,\230\030\275W\301W=z\235\364=\031{.\275Y\324b\274\305\"\220\275\177Y\311\275\025D\245=]\253Y\275\016!\031\275\205\364d=;,\010\276\206\0338=\376-\225=\004\002\304\274u\372:\275y<.>C\026\326\275\246/q\2743\240\274\275\3113n<\024\353\017=\005\244\307=r\320\033>\033\014Z=2\310\r\276\324\363\370\275\035z\265\274S+\201<I\337)\276\037\267\221=\273Pm\274\002A\273\275\353\217\036\276\310d\001\275\003\227\261;|A\005>\236t\367=U7_=\215\251o\275\257\266\250\275<\311\303=\002=M\274|f\332\274\322\3026= \376\214\274\277\253\340<i8\'>\270\211\307=!\275X\275\370\256\031\273\262\300\030=\212L\005>4\222)\276\366F\001>\017\001\273\274\344\355\004\275Qb\205=[<y\2753a>=\025\374\007\276\022\272\301\275\014\332\374<>\033\034>\205\271\237\275E\006H\275\000\252#\275n\277\006=\220\200^\275\326\327\251\274\302\372/\274\001\027P<\244\313\014=I96=\004\243\026<l\356\3268c\030C\275\331>P\275\343\027(>kYX=\356\234\323<\236\033\260=\366\254`\274\010\314d\273E\254\212\275\201.\023\275\345\302,;!\320\341=G\234\204\274]L\217\275\263\222\244\275g\350A\274\374\347\253=3\350\004;\321\275\004<=\3308=\351\201\017\275c\266>\274\003\255u\275\312UI<-\244\030=o\021\305= (\266=\016\364\321\274\313a\270=\022]@\276\367\277\202<\210s\346<\317\204\032<\204\t\221=F\264k:\2201\253<f\377\375\275(\301\025=\347\3066=<\217\\;\276\327b\274\236il=z\t\016>\025\365\363<\016\'\223\275\233\207\034=\202\361\001>4\362\224=\020\336\017<\037\367\307=\002)J<Y\n\202\275\315R\020=\361\345D:)\260;>\310\022]\274\270q\260<\277H\332=m\245\216\275\000B\263\274\332\346\324=JE\232\275\\N`\274\244\307\003=\211\331\375\275K\337\r\276\224=G\275\310\213\224\275\333\006R>~\226\365\274\212u\212<\245\261\314\275\267;F=\t\345\003\276\350\257\032>\361ds\2759M%\276aY\211\275\253c\245\273\005\334\033=J\026\325=Y\016\032=\325\344[\275\236g\371=x\003/;D\332\006>\261A\017\275\341.\307<\336\315E\275\267\234\242=iQR;\363~\263=\001\375M=\\\3749\274|v\343\275\\*\207\275c<M\275\033\270\344\274\342\030\004\275\353\222b\275h\353~\275\362\246\240\275\360\257\272=m\313\204=e\235\225\274\204\022\r\276*\373\275\275\r\224,=\216!\205\275\346\'1=\225\201X\275\232\027\366\2753\205\243=\341y-<\357\007\331\273\231\236\326\275\310\222\212<\"\\\234=\205\347\212\273wX\212<\027\036\212\273\362\300\217\275Bg\203\274\264\000\207=\302@H\276\017M\276<P\025\366\275\220\2202=l\270\234=y\2711=\307pD<\240\373\030\276\010\262.<\217>$=\255WI\275\266\271\261\275b\016\025<\230\003\252=i\247a\275\006\250\255\273<~T>\255\356;\275\213\3409\275\236\220\375\275\366\205\330\275\333\300c=\336 \274\273\333,\267\2747\364k\274\201\024\241\274\2151\001\275~?\327\274s\310\277=a@\014=g\n\352\274\232\031~\274&x\223\275\277\320\240=\177\2347\274\177\361\201\275\327\303\'>\177Jt=\2369\235\272\333\361\253\274\341\345\276<\021/|=\177\202\220\276\277\032\001:\364\037\027\275\013\034l\275\005\257\332<\356\255\312\275&$\331\275D7&\275\365\252\207=kt@<8\244\200\274\013\232O\276\227\253\241\275\r\220\253=\"#1<\200Xw=p\325\212\275=\323\343\275\252\207\253\275\001\257\326\275\276\245\344\274\344\277\247=/\366\234<H\244\020\274C\243\274\273:\306\270\272G\337J;=\235\356\275\333J\344\275\205\021\024>\021\311\315\273*<\304<\232#\036\276\331\001\203=vto\274\001\316\211=V\356/>^X\236\275:\2267\275Qz\266\275\2166\346<\356i\213\271\006\027\200=\253/\017>\225\302\252=\200y\302\275\246\247Z<}\213\262\275\335m\036\275\373\332\352\273/\305\261\273\371dU\274\221\200\234\275\205\225\202<\353\214\266\275\260\271\004\275\203\312\n>gT\271={\355\351\275\342\'F\274\251\022\330\275\000j\304\275\345\322\321<\001\273s\274\210\362\260\274\341\211\231\275\3321\377=\236\304\"\276\377\375\230\274\234\225\240=\247 \021\275\346\347\026>\330\0010\276l\0312\276\\\324\246\274\213\3218\275\245\351\204<Q\257q\275TN\275\275\177\344\204\275\342(\357<w\257\375<\033\\\326=H\257{\275\000J\010=>\355\000>\244\034/=\261F\257\275\244\203\216=1\013\242<g#o\274\202\006\202\274J\332\264\275\375\325\314\275\016\032D=\220l\265\274\222\304\322\275 CU\274=\004}>n\313\375\274/:\361=!P\254<IQS\275\271\366\265\2759\036\270\275\2659\000\276\344r\206=\253\262\360\275\276\226g;\307\366\200=\230\223q\274\032Q\334=.\226\234\275\320\326\234\274\271hD=k\224H=$\2173\272\376C\007\276\362\254I>.\307\n\275hd#>\326\026-=o\233H\274Q`\001><D\000\274\177\001\232\275;\303\234\274L>\340=\333\330\002=\371\225\036=f\231\332<\203\372\213\275\017B\260\275\365\273\246=\251\266-\275\275\271\250\275\343jM=\264du=\306\322\222=\363\345o\274\335#\333\274\313\275\032\276\310\302L\275\020we\275\367\2652=\304 \351\275\335\225;=La\316\275t\366\270\275\364\355\353=\263=\t\275~\312\304\275g\373\332\274;\"P;$\014-=O\343#;\252=\234\274\353\t-\275\272\001\204\273o\370\002\276\324v\'\276\301S\032\275w\251\272=\032\334\326\274\276F\010=\245l\007\276\210k.=\017\036\250=\222\366\025\276I\374\374\273;\034\214\275\263\022\211\275\350{#=\014[\260<\366\345\227\275Q\314\202\275F\036\003\274j\227\007\276b\315\206\275\3766\013\274W\202\310\275S\302\231\275\251\243\205=t\233\254<s\225\362\275\'\223\212\274{P\314\275\256fE\275;\223\373=)\001\370<\336\353\003\274\332]\200;m\277^< \356A=o\020V=\357\004=\274\353\244C\274\007\000/=\215\350\341=\304NX\274\3465t\275\201\336\305\274\364SV\275\374\177\235<\325)\327\2759\026\216\2756\270\245=R\264g\275\353\2637\274&\264\003=\362\356\013>:\317B\275\254\322\215=\265\"\377\275\017E,<\013\272\200\275fZ>\275\351\200\323<\274\0044\274\232\260\002={Q\346\274\330A\031\276\253D\211=\265<|=\325 \006\276\001\224\327\275\031\254%>\275?9\275\320\324C\275\2150\301\275\0279\247<9^\026\275\322\243\275=\305\320\235\275H\317\017=\302|\253\275\360\254\242\274\334\335\207\275\277\324\207;(\311\365<\337\373\212<\350\234\257=\346y5=\216\340\036;>>\315<\353\234\t\276P\006_;\233\274Z\274\225\336.\273\252\010\022=\030\360\230=\023x\260=eg$\275,\230\212\275\000+\031\276\270\364\270=\371\025\220=\242\366\246;\035Q\032\276\265\336T=\215\343\234\274a\347\337\275\370j\324=\022\255\177\275`\343,\274\026\375\023\276\270\213E\275V\020\005\276\255M1\275\232\3479=\375\373\'\275\0109\365;\244\036A\272\332\330->\326\225\361=\304\n\325\274\2762\221\275\357\260@=\007o\207\275U\212e=\267\357\307\274J\016\203=\203\031\004<^ \'\276>\244\206\273*:8\274~i\322\275\021i\014=4\367\016>I\320q<U\002\251<rP\332\273\030~\250\2752\rc\276\256\315\203<\020\2104\275\212\353d;\324\005\264=~\232\377\274\225\204\013\275-p\330;\203\rJ\275?\310\221<\3168\207=Z5\336=\356\024\037\275A\253\270\274\245\306\201\275S\307\372=\253\201 =#\tQ\276\240\346\032=h=\273=\013\271I>\322\272\307=\025\312:\276\317\t\306<QW\032\272\007\223\367\275)3E=\363(|\275\0044+=\031\276\261\275/\365\007\276\313$\034\274\346\032P<\367*\236=\270\004]\274w\207\025\275aK\034\275O\232\316\274\202\026J\275\243\332\270\275z\223r<\263(\027\276\361\027\261\275\247\245\355\273\334L\305\274\366\3171<\311\273\232=\214j3\275L[x\275\n\325\313\274D\037\264\275\370\253\202\275\367%\202\275i\227\215<\351\034\204=:\311\361:/\3071\275O\242\343\275a\005r\275\255W\302<\303)\037>\241\272{\274:\027\251=\227|\010=+\2445\276\311x\230=D\252\010>\330\010\272\275\305\004$\275a\324\307=f\010\323=\020\177\236<\200\346\343=\225\267\370=\265+\014=4=\322=\352\321\022\275\272k\251\274me\016=\305J\277=<e\365\275\311P\314<I\201\006<\201!r\275o\324\225=[\331\003>\231]\373\274\276[^\275,\031&>\322\202j\275\363\204\251\273\'p\222\273#\343\230=\330C\036>C\272\277\274\233\254\313\274\213\333\362<8\021\344=\225[\217\274\2611Q\276l\304\223=\3128q\275\313\266#>i\031q;\370\274\243=LU\234\274\004\242\320\273[*K\275\230/\233<#\030\253=\000\007\231=\007\031\021\274~\207.;c\254\306\2747\370\300\274\032\265\243\275\304\245\243=}\207\370\274\305\353\013>\357\021\244\275\367\263\265\2749\000i=\244<\030<\304$X=\006\201\';\362ZY=\327I<=!\215}=oa\262\275\214\261J=\005l#\276\376[\006<\351\275\035\275\212\214\323=-p\251=\327\315\333=\373{\364\274\355\242\242\275\2005<=\034,\260\274\320&\207<e\320\304\275\005,O\2733\315\262=&/\2438W\031\010>h:\232=\314\315\312\275(\222D\274\304\232\014>\035\236\264=z\304\230=\354\350|\275\001\330\031\275\220k\300;\013\262\243\275\372Tj\275]\214\242=C\253\r>\010\240\371\275;\276)\275\256\352\204\275XU1;r[\014\276\376gs=\272@\301;\264Ay<\357\334\337<\245\373-\275\0015\275=}3\025<\344r\344;)Z\004>\353\335\332;#x\035>\214\023\237\275/u\306:\266\014B\275\326\301\205;\312\'\221=\337\\2>\271\306\222<\353\324\333<\360^v=E\352\351=l9`\275L\207\030\275\336\374h=\273D\346;K\272\271\275\216Z\254\275\003\222S>Cj\030>\223\205;\274\362\225\322\275\204y\214=\031\242\235\275\251\033B\274x0\376\275\036\372\220\2746\317\223\272w\272\201=\000\237\276\275\306\020\244\275fu]<\341\234\373\272<B\233\275\024\264#\275&\007\250<.\345\223\275\3427\263=%20\276x\267;\275]\325\365;N)M>\246\0006\274-\200v\275\034\366p=\201\336n\275\250\347\214=*\035\253\275nm\214<\264u9\274i\334\271=|`\226\275#\330\021\275B\231\260\274E\025i<\267\236\032=\205!\022>\233\207\t\275\031\001\321\275\243\035)>\315_\357=\222\240\262\275\307OR\275\206\014\333=r\251Y\275TD*\2751T\352\2757x\033=\232u\221\274\n\240\206=\247\026\213\274(\235\023\276\372i\006\276%\002\'=\t\037,\275\344\375\377\2737\305\251<Y\210e;\251\n\252\275\027pn\2755\252A\275\336\034\216=\366`\272=u\034\001\276\257)\r\275)\023\365<\312\352/=\t\332\317:b\007\215\275\002\2231\273\322\265\256\275\036\243\312\275\221l\000\276\356\214Q;\237\241\217\274\336\330!=L\302\000>\204\325\237=\320C\331<\016Ym7M\316\352\273\3206C\274\323q\253\2750\336\202<\260[\265\274\234\003R=m\260\250<,=\200=\372I\224\275\030\005{<\"\276\212\274\247\312\225;\301C\334\274\254\024\312\271\033>\030=\263\217c\275\320\2424\275\357,L=Lx \275\2037\013\275\017AX\276\352\312N=\304\335\225\274\3722\206=\232?F\276\335\360 >\323\324r\275\'a\202\275\353\r\254\275\241\324\323\275h.\364\275\342V\320=\261\271\267;/\033\260;\214\377\363\275\351}{\275x\237\257<\032H\346\275_W\201\275\331\334S\275h+d\274&\034\213>\262\271/\276+\305\241=\317\276\373;\363\230\317<\324.\251<]P\352=\021\245L\276\312\323\222\274\356\347\241=4\334\220\274z\371\332<HN\020\274KI\214=\232(\337;\004\302\341\273\344P(<Np\236\275\271\331\n\275\232!g<\270Z\027\275\267B~\275=\275B\276\330\222\r\275-t\000=r\221\316\275\342\301\014\276\2345\247\275\\\034\361\275V\213\260<\215\247A\275A\250\370=\263D\202<d\233\374\275\257m\306<h\211\003>\3211\003>\016\367N=\301\216\351=\007\325Z\273\022e\261=\341,\307:.\306\034\275P\322B=A\260\003\276Z\346\016\276f\321\332\274\177V\030\276\364\036\261\275\244\t==^e\222=\'9(>(\3555=&k\003=\310\023\202<S\204%\274\235@\371\275<\366\206=\2225\330<t\371f=\251\001\367<\316C\275\275\206\254\237\274F\345\251<S\300\253\275\365\256\247=D\226\236\275c\241\306\274\0014?\273\313\014/=bY\332\274\026u3\275\371C\237<\000\326\254<4$\014=7\024\237<\326\316@\276\004x\231\275\230\310|=P\231\236;UC\217\275Q\013\350=\2720\247\2754\273\001\275yp\250<+u\246\275\230_\362\274\r\'\213\275\231\032n=\313L(<;\253;=~O\347=s\031\251<\3452\211<\227\000$\276\200\335\334=\300R\316\274a\227\237\275\347\006\346<N[\216=\324\235\252\275\2376\237=M@\251<\230r\025>\2130\234\274\310\347#=U\323&\275\274/d\275\004s.<\261\360\304\273\222\236C=d\211\016\276p~\253=\375\212\031<\303\310\367\274\032\032\272\275\357U\356\274W\0266\275\221\373U<0\332\033=\356\366\237\274\311\316+\276\301\356\025\276\026\026N=\034\301\226\275O1M=q\022;<Tt|=\242\027`=\210^\r\273\330([<\016\311\272\275\304\016\001=\000\024}\275\376t\323\275\341\216\341=\2268\254\276\000d=<\343ao\275\367^Y\275*\316\371<\326\034\366\275 9\221\275\254F\221\274K\2371\275]\022\\;I9?\276\305\227\257=\027\376N\275_4\027<y\216<\276\345\275\022\274fF\260<\232\222\014=!7+>\370\336w=\005\337\323\275\346+\310=\331\023\235\275\001@\271\275\300W\267=\344Y\023\274T\361\024\274\336\020\030>!\006H\275\216\237\275\273\324a\005>\331\372n\274u\376Q=\374\261\010=l\267\200\275\030\354;=\217\237\343=\256\333\201\275=a)\274\205\006\210\274`\255D\276\367\314\257\275\203\211E\275\222}\202\274\2103\n>\342\261\232=+\326\357\2747I&\275\221c:<\026i\017=h\346\320=\200\344\356;Q\307\304;\005D\251\275\301Gt\275*s!=\003\274\215\275[\376\211\274\224\"\004\275\023\361s\274\376\031\001>\277K{\274#\254\200=\022N\335<\025\253:>\037-\357<\231\357\244\273\343\302\215=H\261\263=eF\300\275~O\250\275VyK=\324\225\334=\341\024\307\275\362\313\004\276C\231\375\274\213\243\240\275\206\025\242<\023=\262=H\204\276\274U\n\373\275\r\010*\275\236\374E\275\327\334\326\275\305u\263=<\326\2419\311\277=<,\371L\274\250\007\n=\235\027\346<WR\212=\277R\003\276\n<:\275\216\035\373<0\3361=\310\344\005>2\"\335\275\371\334\220<\306\223R\274\334x\005=\331\217\347<\223\335\340<#,\364\274P\371\231\275Hm\277\275\256\264q\275*\002\023\276\364\306\232\275\237\373\241\274\327\331\334<\253\276\321<7\305\362=\244\211\361\275\342O\337\275\337\355,\275\352\370%=\244Y\250=\276\322\357<H&\027=#\017d=?\223\206\275\024\361\037={\177\244<\271\316Y\275\024\360\007\273\322p\243\275\271\272m=\353\324\014>\035\275\227\275\342\344\362<u/\201\275\201Y\263=PR\322\274!b\024\275\224\315\273=\035<\234=\355\345\'=V\312u\275\323\207\016\276\243\201A\274\235\0175\275\361\313O\274<\313D\275@\326\004\275\177\342M\275\2308+\275\013\346\322\275\277\346\204=\305!\337\275\262\313P=y\301\\;\262\240f\275\207\017\236=q\276s\275\253\034\235<[\032\014>M.\235<\366q\254=Im\224\275\336T\001=I\275\2639\224\257g\275w\262P=\370\020\220=r\270!\275==\274=K\035i;\323\374\255<\213i\206=>\200\025<\303\342\355=\221NA\274\355\336\317\275\3509y;\225\020\004=\260\021\334<\333\030\276\275\355\357\003\273\272\371\262<\211N*=\2000A\275\275\360\362\275G!\232=\336\377\267=\t\324\016>\007\300t=L\n\303\275\201\365i=\r\022\247\275G\234\332=\033O\256\274\303\362 \275\0321\343=\031\353\252\275\240\312F;\"\001i<\233\377\365=\237\243\025>\360\234\000>\030[\252<\313\313\016>\247\367\305<\371\365\314\273\327J?=l\361\322\273j\274]=\306\216R=\270\326\336:&U\242\275OG\205\275\020\346\262<\037\327\301\275\341\r\035=Q\n\376\274\n-;\276}\355,=e.\314\272X\244^\275\365iE=\320\314\202<Az\032\274\214|\251\275\251\211C=\0358\336;%\347l\275d=\272=8\235\241<\305\331\324\272\217\243\267\275G-M\275\353d_\275\022\036\035\275}\034b\275\273\226\237\275\033\360\024\276\215x,\275\177\202q<\360\0102=\016\r\261=T[\247\275\016w\221\275\034\341\r\276\347\227\365\275\277\234\027\275\022i\010\276\025/\277\275\304\252\000\276\362\343\351\275\246\020\002\275\333\275\266=\254\252\225=\2515]=\372G\316=\216\302\030\275\372\357\325\275^\337\036\276\377\232l\275\357\366\371=/b\005\275\367\367M=\223j\000\276\233-\201=\3225\r\276\272\227\260\275\220\334=>C2\274\275lb.=6o\004>Rt]=g\2473\275\327a\214\275\267\335$>\323F\033>k#\217\275\250Y\217\275\240R\362\275\350+\307=\235\350\346=hSi<.\342\347\274\354G\231=\361\273\352\275\311\372\030\276\2171#=\030\205\210=7>\021=u\006\354<\3747T\275\302\243d\275v,<\276o\002b\275\253\316f=\217Fz\275\200\024|\275\262+\212=GeF=*\304\244=ZI\240<as\263=\265L\010\276\t\235\240\275\227`_=\004\355#>\372\262<=R4=\274\232\205\024\275\201\334B\274N\225\014=\205\242\005>7J\201<\0173f=8\234\322<\2403%>\254\006^\276|\274\256==e\352;\035\231%;\350\3701=\333\271\325\2744:\235=64z\274\342\351\373=GiL\275\245\207\206\275\377+*=F\203\352\275W\251\230\275_f\r=G/\365\274\2479\027\275p\270\332=\301\304\222\275al\364<\2126\'\276\"\252\310<`\327\021\276sp\306\275\342\310U=\303\273q=\254\367\362\275*\375==^\275\244\275\301\205\261=\311\251\351\275TV\345\275\240\3174<\323K\235=\025\336\003\276\241\006n=\234~\305\274\0339O=\312.\022\276\242\341\326=\277\356!\276\010\212\300<\3174\213=e\362\312=b\207\346\274\212\033\205\275e\251\206<u\325\307=U\327y\275\277b\202\275\260\242\311=\361\211\375\272\n\001q\275\232\372\346\275\256\035\275<\362\357\222\275P\227!>\021-\026=H\336\220\274D\026\262\274\273\373:\275\344x\245\275\367\315o<\344\3569\273 \320\023\275\337\232\325\275Q\2640\275\252N\016<\331\227\310\2744!\000\275Ql\303<(WO\275\230N\261\274K\266\033\276\223\353\327\274\302&\235<\030z{=S\010\267\275`\333\332=\315\305D\275\312\303\363\274T\313\232\275\001*\215>@\303s\273\010G\346<\010)\022=\202\254\312\274\333P}\275\203\324\216\273\362\201\217\275\313c\245\274\263\325\310\275?i\275<}\007n=t\365\213\275\376\322\023\275Pz&<z-\334\275|2\034\275$_\301\274\'\214\014=\004N\300<\337\340t=\275\233V=\026/;=4\3018\274r\345\214\274<y\237\274\212\247\004>e]v\275\243\\\020>qZ\373\275\323\325\t<\266\t==\261=\231<\033\262\261=V\325;\275\024 \003=\355\245@<\230\343\270<\350a\251\275\255U+=\200\351I\2756\205;\276]B\022\276\013z\016=\237.\006\275\251nt=\302\'\275\274\374\315\216<\221\265\000\276b\014\357\275n\227w=4\027w\2757\275A\275\004_5=\024U\222<wQ\202=\341,\344\275\342\362\351=D\214\365=T\221M=\225d\264=\242\2418\275\010w\333=a\275\204\275L\316\322;\223\365\243=\333\272\220=\222\021{\275U\302\350=\201\204\r=p\035l\275\014\252\241=e\030:>%\311\360;\222!\242<#\301\276\274\240;\205\275*2,>\306\357Y=\201\257\227\274\202&\005>\020\330\323\275\3056\032>\367v\225=\237w\241\275\364\233U\275\357\320\341\274\010`\245=\304B\263\274S@\266\274\314.\215<\373\277\322\274/\322\243=\2442\014\275\034-=\275\271\311?\275\374Q\340\275S\363\033\276\346\220N\275\251]\304\274+\317.\276\263m/=\234C+<\236\2158>-\240\375<\355;\311<\020\311\024\275\036\240\344<p\265\257\275\347\330\023\275*A\002\2747\025Z\275\007O\000>\317e!<\344n0\275\212)\r>\312\032\"\274]\221N\275\324\353\274={\335<>yB\250=\0251\002=a\366\367=\226\326\215=\324P)\276\333u\036\274\236\344\307<$U4;9\210\2339\323\321w\274-\253~=\364\001\004=\313\r\267<w\334\n\275\255\010#\275\370o\321<>\325R<-AF=K\271\251<\032\310S=\002\314\325=\342\3107=\216\\):\030\247\266=\317\337\246\274\r5\205\275 \2752\275\247\251\241\274\2772u9\310\354,\275\n\216\002< \340\204\275\304*\312=\244(\201\274\207\363%<\314w\006>^\370\337\275Q\343\201=vw\020\273\221\025\031<\014s\247<\034\254\367<x\313_\274\265\007\211\274\230\227\206<\372\021\021<e\245o\273\005.\222=\307\374\002>A\2008=\rx:=\014K.=\343C\r=\312]\006>\325\325\341\274\344\004\211\273\357\326\177<4\t\247<\236H\243\275\276\347\306\274\256\030F\273\275\331g\275\212\270=>~\275\001>\335\373\017=\245\017\005\276\221\037\232={,?=\304V\037>o\210\326\274\236\273T\275\202$\320\2753CC;\037u\017=\'\265\013\276\237E\000\276\263\337\253<\224e`\276\001\207\312=}\341\252\273\335\037\265=nX\241\275\250p\311\274Yn\257=\021A\031\276\242\330\004>\241\304\235\275\260Jd=[&?:\226\330\"=\023\317/\276e\255\365\275CT\246:UW\216=6\356\264\275By6=\\`\206\27546\221\275q\347j\275\032\n\\<zPQ>\262D\267\275\350\264g\275\330\305\263\275h\276\241=!OD\275\377O\026>\'u\006=6\027\377=v\221\200=\016\257\322\273\377P\266\2758 \016>\306\214\210=\375$\002\276\2328K\275\352\364\254=r\377\033\2766Ol\275s\365k\275\346`N<op\027\276\324\271\363\274\245+&<\032\263\017\275\231\017Y;]\036\005=z$\360\274)\264n\275\2723M=\315\303\253\275\r\021\343:\252\320\243<\026.e=\377\210\234\274\017jt=oU\273=\310\312\r\276\000\234\247\274&G\224\275\236\226\360<K\230\231\274\275\230\370\275\306\204\037\275\013]\001<%R\'=\352{\311\274f\333\344=\014w2\275\233\242\271\275/\035\252\275\030\274\325=\307\357k<\362\340\343\274.\266\006>[y\323\274e%\207\275\021\207G=Ef\230:0,\371<8g\265=\017\322u\275.X\211\275\320\224\t\276\332?\032>v\\\306\275\311uP\275h\177\236=r\t\031\275)\263\261\274\037\376 =&\026\267\274\360\023\001\274.\273\363<Bo\276\275\342\201R=\016%g=\224D\332\275\036\346\r\273\374\340B\275m\235\227<\362;\371:\326\351\357\274\317\265\315\275\000%!=)?\001\275\223\337\251\275\273\316\037<\350>\341<\021\366N\276\027\327\016>\026\221\371<\302\207\024>zn\007>\270{\024\276\313$\356=/\366\316\274\025\037\026=\365\005\020>\321p\001\274\243\306\237=\277\333\376\273u\344S\274p\265\334\275\354\262O\275\330\362h=\"@\340<\376\316@\275<\037\034\276\225]\032\275\264\305\243\274\255G7\276\303\267\310=\342\t\027\273\364V\266=\365\343\366=\373\331K\276O\341\001>RC\277=\236\304\006=\004y\261=\362\202#=\253\341W=A,\230<(1\217<\'u\327<\266r\307<Jn\r>\372Y\253\275\242\300\337\274>\355\010\276\257\346\335;\361\375h\274\204\350\003\275LK\332;\3353\222\274\315\2326\275n\331\267\274\343c\214=e\314\032=\262\330\002\276x\013{=\234K5=\304\376&\275\225\264\n\2756\323\337=R\336\271=/\360\323\275B\267\226=\n\307\311\274\352\274\\\275\352j\256=s\031Z\274m]\213=\023\252\221\274\314\330\227\275\032\361\371;\372AO\275\350\205\363\275N L<G\234\220=\372\372\262\275us6\274\033.\021\275\261\356M\275\222\241\257\273-\214\032=\243\273\247;\351\216\352\275)\357\242:\335\207\022\276\332\360\222=r{*>\030\254\340<\202%>=\021\242 \276O,\241=aU\000\275\006\313\004=w/\017=\272\305\222<~G8\276\320{\0369\377\357\362\275Tf\r<\350\316\r=A\356\305=S\210\016;\301\365\217\275]\210\206\2753\300q\275\277\216\027\275\025\364.\273\000\304\240;\264i\001\274\035\335O\275?\002\t>\313\245\024\275[x\032\275\006\230\265\275\025X\203\275\332\263\006\276k\374N>\224\000\017=\316\277\214=\263H\024<\002]&\2759\207\272=V?\213\275\334L\330=`\002(=u\247g\275\357p\304=\252\261\261\275\235\016T=\307Op\275tf%>~\345\240\275\177\322\363=\024\303\226\275\014\256\274\274\206\t\247=\223\022\332\274\362\267\212\275\347\274\032\274g\347\264\272:\311\241\275 \334\207=Lu/=\357K\307=Y\364q\276/=S\275\270w\"=$9\301=\275A\n\275\367&U\273\211\364\262\275M\333v<\315Q\323=\001\262\224=\211WB\276~\260\254=\241\222\342<\224\354Q=\303n\204\2758\025\025\275?5\222=*\250\233\275\261\373(\273D\025:\275\016^\350\2733(\377=\247&\n\275\336\002\313\275\204\317\223=\256\031\312\275\332w\264<\212_\232\275\340\3640=)\335e\275\217\254\335\2749\366\010\275\302\201\364\274\037\333}=\372\233\225\275\032D\272\275\3427\030\275\213\326\321\273\022\0362>\237\032\355=S0^=\313\\7\2760\024\205\275\245\322&\275\262\257\312<\260\005f\276\357Z\230\275\241\325\363\275\337<\212=\350-\255=\237\177\247<\247w\023\274Wy%<\225\373\024=V\3224\276\250\303C\275\276\030\373;\002\207d<\323\232#=\016\247\'>e\3137=\244\016\316<\353\223\226\275A\330\237\275\343@\222\275i=\200\274\026G%<A`\365=\307\250\335=gf+=?&\225=);\031\275\3722\014\274\033\372p\274\302j\264\275C\232\020\275\327\036(=\002\035;\275\006r\245<0\255\214\275\246 \036\275$s@=^\310\021>\372@\361<\332s5\275Z\343\221\275L\005y<\021\376\263\275~\201(=\312\371{<\330\\S\275x\245M\275P\242\327=2\370\216\275\030\335\353=\236\275\321=h\024l=MQ\264=%\204\212=\37404>F\365\271=\300\347\r\275T\305\2658!T\203<\3012\277=\024<\014\275y~\365<\037r\317:M\263$>\343L\307=\027\336Y;\255e\235\274OU\277\274\234\3566<\025FN\275\006\341.>\340\355\335\274%\245\242\275\375W\016=k\300\030<?0\034\275BX\223\275\022\204/\275\206\216\304\272\200\365y<\374\263*\273\177\024P=\337\315(<-T\t>D\274\300=\306\025g\27255\205=27\377:\007d\225=\3004\000\276\340a\345=&\355\304;\356\006\355=\305V#=\360\357\315\273\265\270J\275\220(.=|\016\322<\342\010\"=\334\265\202\275|\323`\275\305]\357=4{\256=\376\257\206\275Z9\331;`>,\275\244yW=\342|+\275\342\327\340;J#\254\275\232!^\275\243#\261\275\026%\201=\2548\000<\243\004%\276wn3\275\365%\001\276\375\236\353\275D\333\226<b\262p=\031D\267\274nf\021=p\317f\274\353\352\002\276B\211\275=\243\213\203\274\252Y\254=\001n\021=Bz\222=jYe\275\374\026\277\273RE\004=\360\306\333<7\271\261=\007\236[=\274\262W\275\177\245\302<\225\005\035<5\035%=\253\336=\275\270\205\306\275\021^\306=\037\306\177=\362[\007<\355\022\210=\351\302-;_\322.\275sx\223\275/\275\335=\022\331\353<\273\263\021\276\306Z\324\275\031\250\335=\304\303\312\275l\231\257\275\246\204\305\2750\211r\276\351\3503=\307p\212=\002\222*>\305\352\216\275\200\006\r\2750>\\=\332C\377<\244&\240<\3274\016\275\374C\256=\202\345\002\276\211i \276bl\227\272\027\267\364\275\2636\305\273Q\306\027\276\2107\262=\014\310\344\275\375@\275\274r\302\223\275p\213\311=\333\366\t=}\334\247\275\'rd=.\312\356<\236F \276\316R\242=\233&\245\2750\200\025:+=\200\275\353\327 =\373\306\030>!\354\010>\300\235\230\272\037ZI\276\362\005\014=?W\243=a\240\304=h\355\016\275\322\354Y=\321\377\321<n[\010=\353\007\320<\003u\230\274W\254\260\275\200\357\246=\374\332\364=\372Vm=\023\244\031\274/z\300\275\224\370\347<\004\033\007\275@X\033\275\317\302\302=\003\242M=I\032\213\275\200x\005\274o},\276NW\'\276T\206t=\306S_\275\001\351\324\275\3425\002<vz\342<\031\374\227=\370r\316\275\317b\315\2757w\271=\336\025\271=\375\331Y>\322C\206\275\331}Z\275\314\225D\275\266h\003=\261i\000\275r\261\002>P*\n\276\256\224;\273v\221\355\274S)\226\275\333r\004>\256\237o=mC4\276K\264\351;\352<V\275\265z\305<\032\315\022=j\017\355<\304x496\207@=$m\021\275\300+\206<,\375\270\273\270\022\212=\270a\217\2758\303\024<\003w7<\302Z\021=\r\323\371\273\n\354I=\020\373(\276\202N\365\275\336\0309=\t\315\207\275s\301%:\353%\036>\002\226\312=\362n\177<\026\345t\275}U\274=\302\360\266\275jV\025>\342E\362\275)\216Z=-\240\273\275\206\217\215=\037(\n\276\315\224\006\276Ha\217;3\377\005>\362W\017=Fe\255=!\315>\275\025\320\270\275\247=\352=Z\233\204\275\034\236\317<r\tQ\275\217\006Q<#\022\235\274\007\236\225\274%\014B\274L\275\206\275^i\242\275e\371\216=}\210\232;\260\314\213\275\263Z\016>w\010\217\274)\323o=\322\352\220<\332\005\201\275\345\321\253\275r\327\010=gT\213=}\365d;?\263\300\275\263\333->\226*\231\274(\006@\275@\222\273;\372\370\355\275\356\005\334\274\034\316v=Ws\310\275\007\305\340;\213\033\003\276O#\016;c\337t;\361/\347\275&\306\276\275\016t\010\276\253|):Z\266>\275\327{\223\275X\261\342\275\022g\233=\0059+\275\026T\272;q\271~<\262B\037=0\263\220=\305\364\323\273r\247\262=-0\010<\221\020\350<\210I3>\002y\345\275\007r\326\275\203\352J<\210\310\257\274\365\034\004<8\267f=K\177\222\274t!\r>\305\256\013>\r\274\022\275Qy\264=\275\303\227\275\216\273\326\274\223w\014\275\212\323{=D\030(\273\026\247\220<5Zn=a\317\373=~\030\"=\366 \022\276\207\326\025\276\030(\307;"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9122889
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
