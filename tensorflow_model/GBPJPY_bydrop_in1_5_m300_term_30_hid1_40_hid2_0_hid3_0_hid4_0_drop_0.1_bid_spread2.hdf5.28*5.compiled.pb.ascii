node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3298806
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "\267\374\316\275\274\364\037\274}\363\\>S\243\237\275u\226\334=\303h\343\273/\014\310<\374h\220\275I\006\222=\270\213\250;\032\327\214=\354\232\003=\327\'s=\332\357\025<\3750\001>\304\010\027\27699\030=i\251\372;X\202\357\273\364 \030>\032@\321=\304S\377\274\016R\377\273\254\031\020=fw{\274\266\343\013\276\006\214\r=\034\221N\274\265\313\232<f\345*>\243\223V\275\375\031E\276\257T\030=\342m9\274z\204\361\274%\335\364\2752Co<\320\205\210\273\376;\213\274\362\247<\275p\305\360\275\237\233\274=\346\340\214\2752\356\013=\276&7\275rt\302<x\265\021\275S\247+>\271\210\377\274\353\312\266\274\n\336?=\315\325\035>\251\234\352\275\310fU\275\227\241[\275O):\276!\321\247<\033^\025\2766\\t\274\337\202\221\274\257\300^\275\256Du=\001\321\277\275\263\333\310=0\351\252\275\313?\253\274\000\217\025>\377\024\374\274\006\020\031\275M\322\271=\271\nA\275t\2736>\223\362\226=\200\333|\275\0002\274<\306\232\256\273\360\322\300=\353\203\217\275!\351\023\276\003\334=\275\0351\003\276\3276\327=`g_\275>:-<\337&r=;\210\020=7\021\371\275\210\360\210\275\341:\276\274\371.1=\347\036\333\273RY1<\272\\6\274hu\235;xZ\341\274\240\007D\275\234\373=\275\247\362K\275_\226h=y\2154>\231\013M;\234\241(=\376\212\211<\352\214\261=\001\024\313;T\r\346\274\265N4\275\252s\236\274g\322c<_\300\021=i\005*=\231\316\010\275l!\001=\035\272\373=\236\342\201=\216W\031\276JM\346\273\322\263\226=%\244\006>\210x\035>W%\031\275\013_;=i\302\227\275\007u\021=\330\374\324<\007#\240=\031\245\236=\316\320M<\005il=\360\344\307<\222\035\017\276\371M\317\274\007=\257=\334\361\212\275\220\260\224\274\202\246\201\275\337\211\005=\250B\310=;!\302\275\357i3<\0023V;\014c\207\275\232\301E\275\031\374\026\276*\325\220<B2@\274\247\230\245\273pFx\275\224Q\336\275\263\271\260<8z\211:\037C\362\272\310F\204\275\177T\233=\302e\221\275\037QH>[t\005>\366P\220=\356P\204=\361?\215\275\246\003\034=\035\215\246=\263\222\331\274\301\240\243\275\2528\276<I\237+>^\221h=\272b1>\241,\261\273\'\333C<\325\350\347\274\222_\246\275bAJ=\242\006\252\275\223\007\352=\031n\024\275\211\235\004=\326}\334<\362\341\352\275\316\235\214\273\230\213\230\274+@\020\276\252\360\215\274\202\023\203\275\340\'9>\177\205\253\275\006/K>\255\245\3529jg\016=\210\245\r>\255Oi=\301\273,\275&s\264=\274\207\006\275/\2330>\247\373\'=bb\321\274\223g$\275\320{\"\276\370\373\236\275~\246\316\275e\\\321\275\276\307\r\275\361\032\025<\005V\252\275\303\336\262:\240\254\271;\351\210\r\276\000\267\233\2752\240\265\275\324\347\316\274\271\215\373\2759\341\207<\254\327\255\275\235r\303;\363\347\227=\244\314\253;\316\023\357=O3+\275\326\025\271=\215\033\200=\366\301\307\275\277\203\360\275L\247\205\275\375-\301<\\\200*\276g\250s\275\005o\214\275\003N\222\275\257\244#=*U\217\273\202\216\223=JCV\274\205L\251=\254\325\304;+/D>\373\027\262=\324V(=04\224\275\242\035;\276\031\356\206\2756\"&=\267\350:<\300\326\364=9\247\355<*U\217=\363\215M\275P\255\241\274d\313\241<\327\000\254\275\257z,=\205\333\331\274on\177=\376\234\250<\024\363\360=\237\343^=F\315\204\275+\236\032\276\010\333g<\260\216\373\275\314\002\356\2752 \017>\276\365u<\217\325\237=\312\212\343\273\340\262\326=\222\352A=\230\342Z=\201\221o;\322\210V;M\240\205=C\331Q<`g\'=bSa\275\317\342\031\276f\022\030\273`\304\327\273n\226\370<\234\324\255\275\376\252\030=\305\374\231\275\234\3024=\244\307\372<\2155@\275i\336\232=f\363\313=%\232\245\275\200ek=\247\177*;\327\347\306\274\320be=|\225\033\274\357z\356=\335\005\017>1\350K=\320\321\333\275\tP{\275&\304\306=^\356\210=vl\222<|\265\025\275\245<\360<\307#V=Z\367\216\275\273\342\232\275\252\203w=\341\340\213\275\035\031=\275\255\2431:\357\366\021\274f\250\212=O\263\216<HU\261=:_O=\355\332>\275\315|\022\275\\vc\275\263\224<\275l~\230=\201\250.>J@\305\274\246Hg=7\256\252\275\216h\365<L\033\261=\254\3279=P\253\352<\224|S\274\370\336\340\275\371\007\223=\337b\t\2742$\323\2736\010\017\2746vQ\275\201\325#\274\217Pg\275\000\034\204=\027w\002>\346\363)>F\322\023>\362V\335\271\267M#\275l\017\205\275\005\230\203\274\264O#;<\235N\274\224^\252=\030\000r=\311\334\330\275\253b\221\274\316\221%\276\255\207\265=Jt\221=\364\'\264=\330\322\310\2755\312<\275_\320*\275q\277\241<\2540\005>\370\034\013>}\364\214\273\211\003\205=w\002\235\275N\357\234\275\'Z\244<\301\220Z=\027!\307;U(I=\353\236\204\2757N\321<\3315g=\304>T=\014\224\314=H\275\377;\001\314Y\275\210\027\351\274\336\"d\275\227\226\031><?4=M\2717\273\336f\003\275y\342\241<\351\r\237<\000Z\214=\262\227\026\2764]^<\350n\004>F\017\\\273\270\036\271=\274\207\002>x6\337\275\311h\217<\274+\275<\341.\312=\201\232\207\275\313P\007=\276TX\275\013\034\272\274\341\245\237=dU\257\275\020\240q=\202>\326\274\353\365\340=\3753\335\275\211\267\000<P)*<\211\236$\274\203\3601<0\n\355\275\020\235#<^d\324\274\2445W=}\001\020\276\203\250\236\274\005\262\332\274\3149^\275\364\007\271=\233-;\276T\221\257\275V\0258=o\245\356\275\331.(>Rg\227<\373=o<gt\035\275\346\305*>\343V\225\274\235|i<\177\212\241=\2073\247\275\005\263\310=\374\363\333\275M\334\236=\002\004M\275\357\014\240=\327\033\370<`\000e=\004x\252=I$T\275\224\340\033\276\317\377;=\\\205g<@\tw\274y`\020>r\214P\275\014\213\306=V\034\262=\006%\263=c\227<\2754C\025\274\rJ(\275Bx\307<\307\365\356\273\370\223F=}\234\014:\211\036\304\273\004\024h>\037\001\272\275m\236$\275\314\313\313\274{x5\2769(\372<\216\364\356=m\327\234\274n\\\023=\363\025\210\275\022\371?\276\247E\014\274\365\340\226\275#\2077\276\031[\300\2748c3\275\334\326|<\210\031\'\276\205\201^\274\240\330\334\275\036X\210\2758Di\274\035\000M\274\226\017\273=\tIi\275KK:<\230+5=\234\317\275\275\327:\321<\332m\306\275\0367\313=.\370\007\2760\322@\274\232Yl\275\033\304\232=u\351\237\275\r\345x\275\034\302Q<\246\343\201\275\r\237\317\274\177\266y\275JH\023=\2364\036=\005\366\324\273\027L\273\274\263\023\243\274\313\371~\275\230\233\211=+\355z=q\315\t=\2048q=\343\264(<\016\250A\275L\354\373\273\033\363J>\343\330\016>1\344\002>S\362U\274s\307\235\275\211\223\023\275/\276\366\274Wf\346\275$(\016\275E\371\271\274.z<\275jsQ=\035Y\316\275\236_,\275\372\024(<u\223\324\275\030q\236\275\312(J\275\004O\037\276\255 \223=f9\216<%\310\231<\230:\210\274\260\327\270\275\320c\202<\336T\360=\261.L\275w\364?\275\250\365\300\275\224\303b=\372Yi\275\276\357q\274\376\216\327\275\033\214t\275\2679G\275wP\271=\347\324,\2743)\177=\217\030\305\275\245\360k=D \030\274\013\022\253=\360<\032\275@\\\337\275\014\347\321\274\263\306\005\275\373\257I=\001e\232\274\000\344K=\007@|=2\240\205<\320\312\340<\240wG\275\004\030\233\275X\345\231\275;\014\363=\2176\334=\003\314\'\274\344\360?\276&\215\034\274\"\ri<\241\204\004\275&U;>\3229;<\215\254\333\275+\037\206=2k\277\275_\214\244=\000\306\'\275pe\213\275\336\021\225\2758;\005=2\204\211\2759.\272\275+Ei\275@V\177\275~\317\314\274t\266\017\275\253\032f\274E8\004\276{p\211==\003M=PM/=\006\261C\275,\214#<\221\243\214=\024\2123\275\344\035\372\275,\244\263\275\260\212\001\276\223]\316\273\211\253?\274*\266\272\275\351\347\007\275j\004\330<R,->l7>:\200u(=\360E\014\275\2463\023=3\201)>\256\304h\275\210s\203=\304\310\t\276l\217\212\275\201\337e\274*\303\016>\205\210\267\2756\021G\275\261\215\365=-xV\276hm\033\276\253\371\264\275L\261\257\275\307\030A\276Q\ns\275Q \212=\245\236\265\274\343\273!>\0212\355=\371\010\240=h\367.=\016\035\343=\n e<\033\032\233\275\366l\374<\272J\276<\325\204\000>W\341+<\250A\004\276;\347h=\002\260\221=\265H\r>4\003J<\265\267?>\331\323\320=\\\204\022\276<\210\031=\346\210\331=\\<\020\275m\023\266\274e\n#=\362\234\005=K\351\301<\300\220\262\27532&;BZ7=xb\214<\024^%=.\350-\274\244\034\010=\026\344i\275\351\361\326\275}\204\356=\264\223\212\275\251y\205=\247\003Q:\2578\226<\363\026\205=\306\204\303\274\343j\301=V=\032=\353\366.>\027\273*\276P\216g\275\345\266b\275\025\2120\273\021#\311=\343\242\031>\033\357!>\247\272!\275\266\204\304\274\021\231\016\275\276\251\333<C\326^=\004\253}<\203\376\n\274\375\3548\275\267 \257=~\031-\275\340\334\234\275\016\272\253=\333c\213<\273\370!\275\022G\341\275\305\335*\275hS*=Q\211M\275\342qL<<\220\323\275G\010\321=C\271\3409\'\"\347\274\233\356\t=\334\036\364;\272G\314\274gb^\275\257\202\250\275u\275\251=\327u5=TR7=\223\036c\275\216\302\242=\205\260\237<\345\302\376<\210\241\t\276\366\305\223\275\207J\355=\226\230\234\275S\270I\275\320p\221\275\0279\223=\3132\367<\\(\021=\031\204\373\273G9\013\275\264r\332\275|\251\'\275]+i\275M\205\300<R\227Q8\322\000\205\275m\325\033\275\335}\225\272\235\023\305\274\273\341k<\346\276\241<E\246\377=\217\351\320\274\262\374\357<\250r\022\273_\224\300<\250\234^\275p\305\277=pC\255=\256\'\262\275\375\245\225<\323@\037>V\315t=\207\'\000=\213\321\207=\352\364&>6\352\303\275\362\240\372\275m\310\030\276t\212\215\275\357\250\314<\333\332I=\216\000s\274\271s\000\276\036_\344<F\377\301\275f#\215\274\223\236:\275:T\237\275\343N\234\275\312o=\275\205\320\216<\016\361\036\276l\032C=\227\0305>|e\353\274\315\365T>_E\213<\210\277Z\274=\224_\275\013&\325;k\332)>\037B\025\275\221L4\276\366D\205\275\3607\301\275|=\250<\223h&>\237y5=\273;\024\276B\023\207\275\357\235~\274o\334\003\275\361\233\361=\302\346\204=\252\221\250\275\367Z\256=\0175\237<\014\2338\275VS7=|\2200\276\274\314\036\275\231\371\342\275@Q\300\274\352\347\212\275\037\316Z=/\201 =\027K\235<TK\232\274\235\315^< \\F>\351!V\275\362L\"\275\036&\034<\324\307\252\275\t\252\034>\360s\257\273\320<\227\275\300WD>\377\344\331=\250\370)\2759\2605;\025\300\320\274\'\2020\276^FC<-V\212=\256;\216=1\332s=\222\2225>\375\212\037>An\260\274[d\020\275.5\272=1\034\273\275\366!\214;;\341c<\021\274\021>\376P\273\275=\317\363\2742t\020=\300\213\367\273\200\336\027=t\3465\276\003\020\243=\211\363\204\275\340v\363=\032K\241\274\010;\350\274Y\304.;\032I\276=*\326\200\275W\237\257\275\0258\340\275\003Z\300=\234i\371<g[x<\202\350\021\275\350u\321\275y\n\234\275\017\2239\275\307\252\343:yzr<\277\256\363\273;3Q\275\356\323\363<g\245i;\355\316\335<\234\315\005=\332*\366=n\355V=\267\373\300=\245\016\'>\310&u=\275\362\334=S#\006>\352\211\367;\177:)\275\365\366\322\275\301\035\233=~\344v\275(\240\230=\0348\231<\344\330!>\301\023\366\275\300\360\346=\010a(=2\025w=\317j\003<\021Lo=,Y\357\275\311\311\233\2753\316\t\276\300\263\237\275$\037>>E\356\316\274\247^,\275E\245\245\275\001\256\216\275\336\275\020\276G\267\205=7(\265<\033/\007\2762;\033:\331#\257;`\225\017=\330d\032\275\254\224@<OL\314=v?s\274\026\226V=\337N\000>\270\343\306=\017\357\'\273\024u\234\274\344n\220=wzu<\241>\246<\020\226\220\274\036]\347\275\2013\210<\n\254\002\275\352\263+\276}\023\263=\014\344\261=\332\212G\276\336\260\252<\202VR=] \230;LC!\275d\202>\275\353\231\337=\177P\005<\213\206\376\273\332T\201=\262\372\246=\036\301X<@\2554;\001\3651={\362\225=\303\231^\275\177\037f;\261[\226\275`\010\210=\327\237@\2755\024\r=\035\221\242\274\334\n\316\275\245\3575=.U\222=TFw\273\026\224\313=\225\316H\275\036I\226\275\370\326\262\275\235#\r\275dt\321<\262~\036\276\177\3061\275b\341a=\310\316\244\275\253\366c=-C$=\335\223b\273\376\211Y\273\377n\236\274C\201\353=uh\213\275f\257\276=\017\302\301\275)\010I\274$\355>=\342\265\307=\270+\261<\033\326(=!\0102\274\371m\302=A\255\332=dp\334=\005\343\374;X\241\275<\277\220\322\274\363\254\361=\375[(=B\364@\275\225\305\267\273\021R(<ud\324\275H\253\334=\301\303\t\274e\237<=8\0249>J>\243\275\210\260\362<\341A\026=\270\216D=\240\014\223=\035\355+\275\222t\216=&_A=o\225\261\271\250<\035\2762e\373=Z\321\263\274\264-\350\275\023\253\301=D\361\265\274\007\354\016>\253\010\017<\205\025\206\275\305\0130\275\211\003|=y6\274\273\341\227\'\276O\367\t\275\341=\301\275\035{f\275>\031\205\275\254\311\275\275\276\215+\275\007\016\252<6\030`\274O\230\022>]\242\277\275\267\352\223\275\024\374?<\356,\235=\325|\236;6\315\205<\025k\350=c\004\243=\314k\205<\000\227\364\275\223F\371\273(\303Y=2\371\245<=\320\n\2752\234\306\275\007\304\202<\\\255\306=\177\253\037\276\306s\242\275\003-\266=!\364Y=\006g\310\274#w\031\276\217\246\232=\025\016\207\273\030\367\360;\252\013\312=\002BO=\357\343-=\2069\210=\004\322$\275\356K\366\275\306\225\245\272\261\006j;\016Q\312;=+<\276#\001\305\274\267\2719\275\326\245\005=S\224\300=Z\265\326<0\255\254=z\215\243\275G\311=<\210$\333=\320~\301=\330v\315=\240\220\233\275<\177\203=\030L\223\274\030_\024\275\340\022\016=,@\201=Z\177M\275\3117?\275+\277\214=\017M\360<-\223\203\275p\331r=\203\177\"\275!l\272=\240\022\225\275U6e>m\302\227=\256\313\245\273O\235\203>\203\\\320=\010G\224\271\326\376\203\272=\251\006\276\244m\217=B\230\215=\231\352\242\275\320\247\354\275\337;\310\275\374\034\207\273Z\330\"=\023\021\312<\005\030\212=\\\177\226=#P\343=\246M\326=\304\270\264\275GC8=\215\177 \276\202\372R<.\314+<\343i\273\2753*\366\273\364a\246\275\245\307%=\354\037]=\030q\006>cu\000\2732s\002\276h\001\257\274\001^\236\274\375\251\242=J\337\361;\275{\231\275\tJQ=x\257\t<\373\206\202\275\255\202\363\274\303\'\262<\177)O\275O\033\376=\231\250\203<\'\257c\274)jK\275\370\253\256\273\215E\017\274\341\203\023\276U\037.=\023G\003\275\212\277\316\274\264\0033=W\301\006>\236\004\333\275\241!\252\271?\000S=U\352\257=\331\301\022\276{T@=\305\273D=\023[\365=\003\030\220=h\265\204<\261\222^=tj\205=6\351\031=e\225\251=\373{\253\275]\244\324<\332\216.\275\372\342\331\275\215v\256\275\242N\274\275e\017\322\275\235)\035=:V\024>\255\235\271\272\242\345+\275\025\001\200\275\203\025:<\3355\346<\230\323\025\274\246\346\234=\2279H>\226B\001\276\343\037\205\275\261\342\327\274|\031v;\223\313\324\275\025\331\252=H\305\326=uo\221\274\\|\363\274[\361?=\375\002\245=\324\306\334\275\262\255\\\275\211\372\340=\341\260\300<\032\035\275=ez\234=\227c\251<\235\214\022\275\234\'\205=6\235}\275z[\250\275\351A>\274W\372\223\275~;\326=\324\264\211=\306\250J;\022j\024\274\n<\257<\264N\245=;I/<b\202\000>\366\020\224\272\020\310\r\274\253K\330<\014F\013\276s\025\025\276|\2675\274\213\240\206<\373\\\211=\342\004\235\275\314/\344=\235\210V\275\\9T=hy\312=e\006j\275\316\301\274<\361p\275=\277\305R\2751\014\r\276\237?\340;\203\225\220<\034\377\210=\264\016o=\035V\272\274:Mq\276\024 \226\275^\332k\275\271\346\335<\352\022\243=\204\332==\335\026\205\2758y\330=\205\271\222\275\200N\177\275\262t\341=1\206\242=\206/\353<\323\273\251=D\016\314\275\364\235>\275F\361->8W\005\276\333Q\025=\030W\372<\007\367\363<\212n\033\276\003e\000>\202\021\221\274\230\316\254=Mv\235\274\257D\007\276z\350\265<X\245\272\273\360\014=\2752`c=QY\247\274\320\231\254\275\206.f\275\346t\037\276\322Tn\275k%\002>C\312\217\2732\032i\275\330|\025=\261\325\"=0IC\275\231\036\177\2754i^\275\301\205\016=\031\273\023>-\366\336\275\n\220\'\274\351\014\252=\361wL>\354U\226\274\022\3236\275k\331w<\344@\356=\311#\000\276\027\033\236<\026.z=\277\365\206\275u\372\317:\305A\227=\254\023\t=0\250\253\275\311\332\241=\300\217\006\276ci\223\273r8\371;<\236\301=\350\326\013\276\3622\241\273\342y\025\276\227\240\264\275\365\252^=\236\034Z\274\222g\242<Z\264\240;DF\230=\235\270[\275\017\201\253\275\367\312\026\274\204\005\232=\277\301\'>B\360\350<\315w\353\274\371G\302<K\321\036=j\007\307<\277\334`=t\204:\276\326\201\245\274\252#\251<x\265\231\275\243\263\301\274\177V;<\005\355\032>*\255\320\274\220)k=/\276\234=\022y\351\273.\246\316\275\\\032T\274Z\233\362\271}y7\275\371\354\010\276\217\314\334\274y\335S=4\203/\275\306\232\020=\365h\017>|?u\2754\\\013<\351\021\200\275F\273m\275a\204@\273Zl\010\275\006V\025>\n;0=\221\236\244\274G\022\014=\245RS=\013\003S\275\2444\332=\370KR=\347e\305\275\355\n\337\274\321\253\333<\177\335\034>\212\237_\275\226Mk\275\207{\232\275p\237\202\275Z\336\254\275\251\367\216<\031\353f\275\370l\371=\201\240\234<3\213m\273\364\230\347\274U\205)\275\250G\n\276\\\352\357\274\304\313\225=\373\371\347=\374_R=\322\372\252\275E\321r\275\251\023F>L\2052>\257Tq=\336k\007=\263\247*\274@6\236\275\317\035!\276\223\214\205=4@&\275\031l\216\275\304\3305=\317xj<\001Ni=\240\264H<\251#+\275\262E\013\274\341WD=0qw=\366H\337\275\001(\003\276M`N>\207\377\030\275\226\177\031\275)\022U\274\277|U\275\377/\'=#\324\226=\014\351\262\274\377\346s\271\361\273\246<\022\333\222\275w\246G=\314N\223=\036\371\342=\250Tn=\344 9\276\001\272\377\275\314J\343\275\332\343\204>\325\204(\275\355$\374<;O\023\275\255N\212\275{\007\267=C\354\031\275\305m\202<j\034\342<x\021\302\274\rZ\225=\007\031K=\272\366\245\275\334\202\306\275\216\317\365<\304\320\211\2751\363\324=$\231\345\275L\033&\275\213Z\254=\004\265\256\275p\355\203\275\351\022\031\276\302\250\274\275\246\221\241\274Mn\257<]\3464=\34579=\371\227\324\275\223\244\305\275\016v\245\275G\360A=\'k\221=z\344x\274\236\313\213=\335\217\206=\'R*\274\241\226\262\275\232S\270=\233e\021\276w=\016=(h\003\275\232\3220\275\240\3333<L\251A\275x\343\027\275\237\326\226\274\265\321\307=w+\340<cEd> l\350<o`s;\006L\205\275\237oD\275\223\367\356<{\037\006=g\313\200\275M2\340<B=\377;Y\3311\276z\304\256=\031\274\342\275\345\367 =\013\035\253<B|\256\274\222\354\213=\363\2367\275i\326\242=NN\211=t\266,<ec\237\274\356\247\364<\263\005(=\312-j=\211f0=1\361u\275\343I>\275LI\341\272g\233\374\273\227\203&\274q-Q>\346\322\206\273u\207k\275\226\331\370=\325\251\343<\\\350\026\276\303\246\337\274w\351\354\275\211u7\274\273W\n\275\344\262\265=\255\222\253;&\261\010\276r\240_\274\001(\222\274\327\226\2639\034\030\013\274[\345\216\275eg\361=\215\217\001\274\311\227j=\340\273\365<\336\n\014\274w\233\327\274\340 \355=\334\266%>\246f\223\274\323\335\206\275G\376\370=\345\021\207\275\253\034\334=\216,W\275\250\207\005\275\340\244\221<$p\310=\356\027\321;\211\300\023\276\243\007\r:k\016\344\275\216-\307=^\335\262=0\226\270=\301$\353\275\016\367\231\2759(v=\300:%>J\200\203\275\344\033\267<\342\267\'=\262\374n=.\033\236=\313\203\036\276Z\327a\275f\'Z\275\020\241\223\275x\263J\275\024\330\340=\003\373\210<\271\024S\275\241\251\257\273\301\315\274\274\201\241\031\275\367\321y\275#G\032\275.X\357<S\3108\275\264@O\276\377\r\211<\026\230\020<?`7=[R\355\274\r\371\n=\355\260P=]\032\203=\377\303\323:c\033\004>\356\024y\275\220!%\275\310\325Y=@g\234=^\333\342<\027\202\277\2744p\240=\231\212\034\276\213\006!>j\227\274=a</\276\241\373/<\232\210\"\276\014\313X=!\277\031\276b\232\257<\332\024\231;\364\345\307<\374\033W\275\226\352\275=\227\224\233=t\233\024\276$\315n=gx\353=\352\351\273=fo\037\276\220pr\275(f\010=\250\026\334\274\342\221\261\275.!\307=\002\031\372<S4|=\241C\017\276\037bg\275\205xy\274\002\256}=L\221i=j\347\207\273\317h8=C9\375\275\320\202\262\275p\221\270<\207\213\304\275R\373\246=\317\265\321\275\365,l=\321\373\363<\327\374,<\030\021\330\274\306\3755\275\206\032\303\275tH\337\273\226\261\360=\307W\231<\220\'\227<j\n\223=\234X\340\274\204\233z=\305\0314\274#9\220\275\2525\247\274U\375\261\275\000j\223\275%Dl=\005Q\335\274\306\376\177\275\216r\356\275\237\005a\275\320rU\275~\227\235\274\274\020\"=\310\017\344\275\223\277_\27571\341=\225\0178\276A]\376=\207\032R\275<::=\203\310\221\274\223\273\255=\372\232\027\276+\244\010>\216\361\\\275\246\345\354\275\360c\026\272\267\325,=S(\255\275\2772\205\275A\025\221<\341X\032>N\0046;\356\305\222\274e>4>\325\037\221=\332{\374=\207\"X\275\260\017\314=<\261k=\256\342\360=\216\202\017<d\272\235\275\225\307\343<\365W\r\275\312P \276\331\336\206\275\375\351\302\275\211,\033\276\250\022\233=i\277\216\275\246rj\275T\316f<\010\267\\<\010\325\312\273\225/~\275\345|\314<\324\206\214=\236n\234=E\317\232=J\036\335\274\210\213\324\275\345,\210\275\210\234\005=\223\303\001>\263s\363\274\005\003\202\275I\260\252=qBB\275\300\235\002\276\276\327\243\275@6\270\2750d\203=R\316x=17\263\274\"d\256\275B\327\256\275\241\000\357\274\364\360\346\275d:T\275\200|\237=\245b^\272~uC=\223q\231\274*\242\r=|{\341<\260\020\305=\022\211\260\275\333\370\306\274\353u\232\274vs8=Ms\254=\303\204P\273E@\203\274\266I\202=}\360$\276)\307\214\275T\375/=+\307\021>\371E\t>W\0304\276\235*&\275\250\345\004\275\235\372\025=\214\177\263=\226\312\301<\206\202-=~\305\026=g\275\241\275+\252\275\275f\230==P\356\200\275\034\244E\275t\303\273=\027\330\313\274(%?=\216\034\362=\360]\300\275p\201\036\275\305\355f=\275R =GqF<\343ZE\275Dn\202=k2\210\274\233\201L\276.\224\272=\360\236\255=@\007><\341\020(=\244\214\301\275,\224\035>s\347\371\2753\375\005\276Y\000\213\275\322,(\275\307\031\326\275U>M\275\377\203\201\275\224q\202\275\001IE=\326A\036\276zJ\302\274\317\352\311\273}8s\275U\352\177\275\315\343\020\276/\233\177=\2376\002\276W)\220\274\025\212\025\273\005\222\037\275\213\275 <\r\377\356=\250;p=\355`\254=\360\376\252=\026\\\'\275\306`\226=j \315\274\303*\302=KX$>\347,=\275B\200+;\343\211\301=\224\006\361\275\374`>\274\030\024\\=\250{\332\274}\331\342;\262\334\374\272\355O\024<\022\344\223\275\204\033\330\273s\261n=3\215c\275\340\256\264<\316O\252:H\366\006\276\360\300\241=\266\223-\276\277\315\377<\0346\204=g\374*\275\2745<=\003M-\275\211\3674\274\304\\\244\273\2215\320\275\237\274\330<\366\361\n=\n\266\205\275\"\2073\274\217\006\201\2750\252\233=A\304\254=\254\352\220\275\030E\222=\tp\001>i\027;\2757\255\375\274\353\325\241=\333T2=}\276\204=\240\341)\276[\243\026\276\n\013/\275\314HE<M\363^\275(\260\016\275\340\201\251=\367]\246\275]\261\221=\310k\003>\311\304\322<\032\307\216\273\006\200\326\274\'g\210=\357sW\276s-\322\274\363\205\025\274\365\257\355=\025\276\235\272\3761A\2769\213D=\225\352\320\275\251\253);\340U\314\274\250\3669\275\236@\200>Z\217\351\275\226\347\231=\311\345\004>t@\013\276h\363t\275h\336\021>3\231\240\275\036j\277=x\027\007>\315Mb<\221[1\275\333m\352=z\\\350\274\335\274\304=\343`E=\005\306\343=\212A\274\275>J\004\274\327\271\034=C\014\252\273\357e\261\274A\016W\275\262\302$=\240\310\031=\022\332\327;\252\355\t\276\026\273\271\2755\3228=0\354\254<\245\236\327\275\332\201\207;@\232\243<\366\302\355<i\211\273\275\307\2331\275\024 \230<\201\363\026\276m`\216\275\262\326\335\275\033%\222\275\230K7=\020Oe=n\374\'\274\367\326\251\275xL\025;~8\316=H8::\177\200E\275B\376*>7*@=\001\371i;\336\273X\275\271\2204=\324\325!>\244\322y\275\001c\364\274\254J\215\275\334i\021\274/\006\'<\3313\261<\2020\242\274\365Z\017=5\266)\276>0\354\274HO\203<kN\231=r\276X<-\r\226=\255I\226=\265\242\235\273\321P\023=\235\342\361=\264g\336\275\2358\302\274>4%\276\272\177|\275\374F\324\274Tf\227\274v7\262\274t\272\220\273\365\262\005>f\021\030=\270P\202<\225\030\317=\225V\336\274F\306\270=\207#\366<\242\211\313\275\tw\001>\025h\247\2753\346\263\275\336<\235=\374\221\r\275\001\227.\274uP%=\"\373\216;\227\237B=m\352_:<\r\235\2758\336-=)\370\000\275\274a\231\275\007\340\320:j\262\331=#S\357=\022\025D\275\330/\002>f\370\377;\257#\207=\335\301#=%\242\027=\302\314\242\275\033\275\265\275g\303\272\2728J(<\3127k\275\273E-=\216\n\n=\325\036\'\276\314\237\331\275\"ZR<\217OG\275\304\311\213\275U\035\215=`\325!\275\355\276M\275^F\256= \"f\275\224\240\240\275\031qi<\020\253\233\275\374\022\376<\313\335\016=^I\213=\356 \247\275\341\2363\275\270\363\224\275\025g*=\222\217y=\260\226}=l\345\177=\004\317Y\275jI\241=\004\2363\275\017Tg\274\215y!\274\353\265\364=\334\253\006\276\021\236\321;\214\2170\275\226\035\000\275\002\370*\276\320\302\203=\370K\300\275\037@\213<\017*\275=\221\303\005\275\212\265\217=\305F\217=\225\321\310;-n\362=8\027\356\275\021\273\357=\272`Y\276\273\334^=\205\245\227\275\177/\034=\257\236\304<\274\017\231=^\016\354<5\260J\275\354\247\234\274CeE\275\326\362\206=\311q\221\276\327\226$>\207\216\177=\351U\024>f\254\315=2\346D=\324w\014>\254\212>>\3572&\275M\262\246\275\230\273\232<\307B\213;O$\327<*\261\366<N^\275=\222\311\222==\n\371<\262\337\274=\r\332\243\275\251^\260=\223\346\261=\033\250\214\275MG\001>\267\353o=\340\001B\274;\253\266\275^p\350=\354\237,=\316\205\243=\376VT\274\216R\217\275BO\356\274?_c\275\303~\\\275O\356\361\2740\033\244\275R\333\024>\027\244\340\274-u\364\274J\003\220=qu\331\273bg\305<K)~=\217\007Z\275c\2470\274G\334\355<jPU\275Z\266l\274z\2110>\216\355\n\276d\345?\275\314K\224=/\371\246;=/\232\275;\r9=dH\310\275\225{>=$\300&\276-\255&=\035(\315\273\315\036\037\276\353\315\213=I\371R=g\177\r\275\335\2132\275X\300\303\275\2620\020\276\006\350Y=O\262\345=\362\347\026>R\373k\275\024\203\n\275Q\342N\273\313\024\320\275P\213\013=\024\315T=Z\010\263<a\254S=\351\231\020=\357\253\255=h\271$\276\276\355\303\273\256\322\212\275\210\020G=\034\351\232\273\"}\214=\023\017\266=EZ*=\256\022\034\274\344\353r\274\016\000\253;\310\354D\275>\277\346\275\257\2123=\277\245v\275\373\317\231\275\352F\251\275\370\320\004\275z1\303=\204\337\300\274\367\277\344\275>0\203=\212:\264<+\303\031>\270\334X\274\322o\244=\253\004)\275@o\033>\305\330\241\274\361K\240\275\365\250J\275#C\037\274kQ7=\346B{=\267\021\251=\027\000\345\275\367\315\361\275\211\246u=\375\236\376<$\256\212=j\344o\275O]w\275\345\215i\275D\3103\274ks:=1\331\333<\023\036O\276\333\234\265\275)\353,=K\327\201=%P\331\275^\374\256=yq\n>\325\";>\223\001+=\371X\327\275#8h=/d\303\275Y\222\030>\311\335 <\311\r\344\275\'\344\214=k<\327<\037\334\254\272\301\322w=\305C\236\275\215k%<\332\364\265=\014\303\335=r\354\320=r\230\344\275{c7<\205:%\276\025\000\361\271\004\307\030;\204-~=\002GB=Mca\275Bk\233=\371\360\246<{\373\000\276T\245\325\275\010U\202=\334.\227\275Z\301\210;\377\002\023<\212\2371=O\017\367;!P\233<\222\302\023=\020\334\363\274\306\355\227\275\265\336\216=m\2142\276Ji\033<\205\023$\275\224H\226\275\005\035\355=e\347\254;zp2\2758l\325=\327\302\010\275\232\332k=>\357P<0\274\304=\247\005#\274\231\370\\=\237O\016=\276\221\265=\227\243\216<\3607\312<\246\203.<\250j\220\275Bd\341=\0006\302\274s\306\375\275\337u\014\276\031\003\035=\262\364/\275\222\320a=\243\316,\276\377\221m=\224>\257\274\332\013\216\275\334G\215\274\337\357\t\276\023Gn=\362\247r\275\333\220\217=\276\300?\275?\032\020>\377t!\276\0070\\<l\271\356\274\t%\250\275\312#\222<\343\340\244<E\266\027\275\223;^=\223\004K\274\225V\335\275K\036\250<\333*W=\216\374Y\274\' Z\275>\316\254\274\317\237r=\355\'L\275\242\260\025\276\221\225\227=gT3<\203\255\314=n\350\n\276\307\337\227\275\032#\t\275\003}\256=|Cy=\376\003\220=\272{q=\271\010\205\275\030>+=d(\251\275\3539\255=\'\000\342\275a\333\025=\332#\032=\207\345\256\275\205\2611\275R]4\275\330\242A=K\213 >\220\342 =\347Z\302\275\353\306\327<]\312\340\275y\214\262\275Ey\224=J\026\032\276W\273\230\275\2616\334\275d\026\321<\325\235\312=\307nX=6\310\372=y\220\321\273\n\273e\275!\232\273=\001\326\357=\204\204Y=f\022d\275V\205\203=%\306\277\275\035\316\306\275\213g\350\274\2751\034\275Y\200\327\274\007j\330=\274I\031\276\362.\242=\371\267\332\275q\r\000\276,\313Z=6O\235<(jn=o9\221=\202\315\206=\025\022\352<\246\262\362=g\t\361<~\017\334\275D\022\365<\330\010\005\276\257\227\263\275\\\300\302<\244&\251=&\306\214\274\212\324\263\2753x\257<\261>:>M\325\216<\036U\310=s(\266\273\324|&>\034\013E=\244\215\327\275\245\225\232\275\347e\200\275wPi;\323\263\006\276\242<\363\275\313pV=y\270\026\275\233\363\031\276\273\216^<\375\237:\275\245\375\001=h\267\222\275\0348\270=%\267A\275rG\200\274\007\244\246\275Y\350\342\274\004\355\216;^\0063\275R\2641\275#`\354\275\256\210\204\275+r\301\275qp\030=\231b\326\275\344\317M\275-\004\340\275\222$\235\275\333\345[=\372\314[\275\247\337\223<f\262n<(\'\217=\300\201\241\274\322\027h\276vS\\\275ei\t\276;\302{\275\230[x\275\262m\004\276\365\312\033>\321\r%\275\353uj=W\357Y:HY\315\274+\206\240\275,\341@\275\376m\372=\215\326G=\\\"/\274\227\336H\275\014h\323<\342\305)=\262\217\341\274U\314\036=\2501\211=\202\310\242\2748\331\222=\254Q\313\275g,\224\274\371V\367<\225\022\351\2725S\214\274\030\267\243=&]\364=\370\210\214= \234]\275\233\230\032\276*\022g\275:\223\306\275\220\261\315\275\263\237\r<\342#\311<\031?\n\276DH\226\275\032Wp\275mmS\276W?1=\246k\232;9\363\211\275w\273\245\275\277d\000\276H=\270=`\344\023=\360\005\014\275A\316\277\274\372\0065\275\230G\234<;\334t<]\025\007=\323V\017=h\203n=\026jo\274qd\337\275DF\020>D\216\205\275\224T\261<\203)\213\275\267/(>\257-\235<\020\331\315\275N\376\202\274\036\'\302<L\307\245=\346\266c=\355Eh<\004\"\264\275\241?\032=!E\315\275\n\263\253\275;Y\003\275\363\246n=w\263\001>\177\221f\272\233\202\023=M\271,<\206\001l\275P\356\222\274e\364\022>\340y]\275n\004\267\274f\250\367\275\350\305A=Ff\320=\223\256\206\275\\\007w;\261h\013\276\204\203\034=\207\000\'=\305\007l\276]\024\337=\ro\004>\227%\n\275\222Cq<8\202]>\027e9\276h1\357\274\364\304\014=\320]\003\274\243\025\317=\237\232\'=\274\352\022>\363\301^=\367\351:9\256Rd\275\274\245E\273\262\226\020>,T\034=\331\276N=\316(\207\275\014f\234\275\027\206\234\274\345\3342\275\027=\364\275\240\001\334\273K\212\377\273\313\017\331:\027\016\316\275bBo=\350\003\367\274\267?\202<@a\244\275\315\021?\276f\037\244\274\320\260D<\017\341\272=\273\236\276\274^\233\300\275\275$Y\274\326\r\030\275\253\230\241=Z\222<=\275\007\022\276/|\362=\004[+=\324\200\033>Q\2666=(\211\345=\366\252\003\276I|]:\271\227\237=5:z\275\310\277c\2751\232\327<\372\004M\275\027\377\365\274\343%\260=F\207\352\275Q\340\205\275\032\300\371\274\227\273\344<\246\272c=W\222\241\275y0\305\274\222\254\243\275$\253\210\274\254\274\312\274\253\373\n\276\274\342r:\177b/<u\335\344<\207\240M=C\255\232<\275\246\300\275\245\224\267=\374\031\t\276\356P4\275&\301X=\311UX\273\212\262\237=\265\320\334= \342E=\243]\264;$w\302<ag\024\274c6)\275_4\225=c1\314\274Wx\361=\257\016\247\275\177v\351=`\3059=y\262\006\276\317g\224=\2571\307<M\3666=l\277\201\275\277\262\252\275\366\004\341\275\273\304\177<\250\204\356:\331\305j\275\001\004\026\274\177\024\255=\217\351\031\276\331\010Z:4UZ=\363\370\206\275w\360p\275l8\023>Q\254\221=\"&\312=\033\253r=H\t\305=\357\237\211\275\366\300\244\274q\221\224<^\362\261\275\030\246p=\232\310\006=\236\363\361\273\212\275\265<\330\346?=\244\254\013\275\375\231\001\276X\342_\275o\321\203\275\215\026\031>\000\010\000>\234\260,\275\2670\'\276m\334\303\275EeZ\275a\217A>~v\270;y\330\234>p\007\321<\005A\333=V\004\314=\245\312;\275]\006\353\274\247\254\366\275\273j\220\275<@\210<\207<\303=\263\377\312\275\315\216\203\274L\273\004\276}\374\'=~`\355=\316\267\253\275N\275\260\275T\006\231\275M\027\273\274q\327\306=&\000\345\274\000@\307=\260JF>xc,\273\027\372r\275\003\026\232<W\206\201<H\016e<\202*\304\275N-\253=\322\241\307<\321/\227\275U\3274=i\245\222=\230\217\001=\324\243\321\274\350\336n\275(\310\361=\030\201\303\275\330-\222\2743\272\271\275M\006\n\276x\276\334=\264\370\222\274\235\376\362=\026B[=\3536\260<\200P%\272\327\313\241\274\031\350H\275<U\376\274\027m\320\275\336\363\336<\3077\202\274\031\3045\275m;{;\023\2204=\341\215R<\207lM=\211\232\274\275\302\331\317\2759\202e=w\223\217=\255\204I=]\377\177\275z\240\322\274d\317\r\274\337(p=\010\031\224\275\035\277\360<-\nA\2755\321\002\276\276`\232\274\361\243+\276\361z3=\222\351\314\274~Y\235\274G\357k\275\320K\266\274\005\000\201=\302\212\252:]k\230=~\203K\2762N\220\274O\223\021=A$\323\275}\277b\274\277\036\326\273^\203B=r\370\361=\314\201\016\275\374\322\270\274\274|?\276\375\335\r\275\036,]=\210\317\314;\345\231!\275R0O=G\217\006\275]r\267\273\342\255\003\274\"\244\330:Q\233\205\275!\370\016\275\000g\225\275\247\221\357:\177g\232\275^\343&>I\206\203;\352;\331=\361\3744\275\372\332\276\274\270U\222<\360t\013=S@\371\275\264\035\347\275\271@\371\273\351\307\311\275\234\237\302;\217S]\275g\221g=/\255\003\274\373\270\276\275\254u\233=\302\301r\274N\020\223\275\234M\324;:/\237\274z\270\242<\300\231\236\275A\336n<\363\230,\276\301\005\251=\363\333\245=R\2556\276}\210\231\2750#\021>\023\245[\276\034\200f=\274\346\t\276e3\244<xrQ\275\2148h\275\253v\003=\374\000S=\277\0316\275\221\240~\275Dx\337\273\200%3=\365\267\325\275\331\241\025\276\206\"\222\274m\207\022\276\364\317\223=\272\007\324\275{2^=\325\3721<3y;=,\206\372\274\376\2715\276-\020\n=\214\003\367\274<&\001<n\035\005\275Gmu=\315\213\177\275k`\257\275n~\005<\031\013\306\275}\317\345\274*N\232=\201\001\027\275\370JA<s\363\036\274\334\326\246=\010U\305\274[-\256:\217\010\205\274|Q\024\276\t\246\254;p\033\252\274\031\230P\273\250y\022\275\177:4>?Z\240=\"B\237<\255\314\216=YB\331\274\020\325\305\275J\307\002\276\222\216\027\275\336\n\232=\006\233\027\275;4\230\275`\3628=\344\004j\275\302\250\026\275\250\014(<\034\032\021\2756@.;\006\3117=\023+\204\275\032c\346=\272\352\033=\372\267\277=@~\006<\211\361\036\273\264KB\275\275;?\276\223\370\222\274\023\0262=p\364q<\222.o<5 6\276tP\301\275\252\277\235=\024d\032\275\035/,=\311\303\334\275&h\216\275\246\3249=\377\342\254=\353\257\311\274H\254?=9\216\266\275\212m\354=i\224\t\276\244I\221\275\311\317\262=\'\016\241\2758x}\275F\342\241=\320k\236=\016<\317=\337\216\261=6\357\351=\n\037P\275-u(\274\335\252\320\275\324\211\342=\331\310\273\274]\370\334\274\367\222I\275\251<r<\366`\233<\177\313\303=\237\231\232=\020\301\335=ya<=\376\226\216\275{\345\307=|d*\276\354\361u\274\006\333\031\274;<\215=\210\007\026>\326Q\260=m\317\314=\325\310\031=\262\025G\274\3055U=\372E\201=Y\266\235=C\372\243=k\002\340\275\215\376\340<J\322\201=?8\021=_r~\275\372\272i=\177K\003\275\324B\303\275\371h\257\272\251\322\204<\250\277\312\274\2359\n\275\310\364<>P+\026\275\222\324!\275]x\003\276\373E\361\275.Y=\275\341\250(=\003\353\262\274\021\304\301;\031\352\020>\303\372\177\275\340\236\364=\306\232\234=\032\3708\276&i\222\275\n\022\003\275\375e!\2764\315c\275\326\0359=.O\023\275\304\372\212\275\203\"\245=n\270\322\275\210f!\274O^\322=\343\302\222:\246S,\275\261m[\273@m\022\276\270\020\275<\315\000\002\275\036\2276>GD\203\275|\337\223\275}\314\254\275\374R\326\275\007\355\\=w\215\271\275S\301\205\274\365T\366\275\036\233,\274!\340\203\275^\0211\276\265\202\307\273k\357\222\275a9(\276p\312\204\274?$\021>s\005\030<\347\374~;\341I\022>{\345\342\274\005\267\242=I/\375=O\243\347<\230,\324\275\245\363\327=~\361\037\276\356MZ\275\017\2046;\234\035\257<\352\305~=\243S_\274s\363#\276#\237\000\274I\247K\275\352$\177;i]\033=\232g,>Fy\266=\203\340\231\275\032]p=\363M\264\275\177Pw\275\240=b\274I\314\006=\344\022\324<ei\275=V\254\202\275_\035\230<\312\'\250=\277\230\204<\016\275\236=\243`\006\275\207t\246\274\036L\231\275\273\314\003>\'\364m=\024\027o;l\213\035=4\225,\275b\206\360=z-\202=\351\2610\276\274w\024>\200\020\234=\023?\273\275->\207\275\037\367;\273O\266\003\275\364x\023=\331\341\333<\270\311\326\274,\312\301=?\361\336\275\3214\274=-Iw<\'`\320\275\201d\001\275\244A\271\274\210\324\240=\223\2672\273\006V\031>h\225\202\2758y\300=\301o\010\274\234\305\224\275\3421#<`7\345<\206\312\001\276\330\302[\275\215\0144\275;\337\000\276\343E\313\275\rO~\275n\344\355=F\267\353<\244g^\275\203J;:\247\n\201=\023\212 >\231\304\310<\373\363\202<\005\376)<\367:\361\274\254TY\274}\241*\274\'6\311=\376|/=1\225\211=\372\344\251<\272\031\347=\246u\340=)2\206=\356\373H\275\322a\031\275\360\037:\274\265\021v\273/\330\301\274,q\362\274P@\023\2753:\272=:\2645=I\310\221<?7C\275N\026\271=e\236\027\275\030\340\264=\210\032\201=^\266\260<v1\013\275\350Hb=\365N\375=\264\347\324\275u\374 <\203\332\271\274\202\234s\275\256\037\247\275\205Z/>e\304\327<\271O\007=\327c\025>fG\252<1\274t=\246\323\305\274\277\371\242=\232#\303=\221\203M=\314;\265=\rC\010<1\277\340\275hX\250=\023\236\\<\2306\032>\tQq=\217%\214<\235\205\306=\274\275\303=x\035\344\275\233\367\001=B\330\037\271\261\t\'\275\034!\013>\274?\212\275e`\311\275\001:\014\275\035\'\223<\271\250\240\273\326\346\300\274\234\350\216<~2;\275\301Ld=\213\261\306=\370\022=\275\265\313\023>\315\261\260\274i\207\230=M9\304<P\250\024\276Z0\007\275\246u\t\275S\357\255\275\017\177\275\274\036\211\370\274\232\"\030>l\257D>OJ\031\275\002\372\322=\304\207t<R~\201=\302\277\217\275\314R\317=\344\210Y=J8\320\274x\031\226\274\2568\021=1\212r\274\377\242\030\275\334\300\366<;\364\033<[@\310\274\352\031\017=*C8\275\332P\240\274\266A\214\275\343\002\270;\030n\245\275\246\367\367=yHD\275\202b\312\273\2071\227\275\210\265:=\2222l\274B\373j=<n\235=\230{\314\273\0309/\275\347\006\033<*\365\301\274\225\025\332=\036\004\347<\037`/\275Uo\275\275pK\001\276\241\224\034=\273\273\207=\030\024\032=\026@\266=N.\343<-+\030<\342!\211\276 \250e=L\307\233\2757!|=\177\016\260\274\204\261\270\274\244\320\001\275\026\266\343=\313\252z=\3438\260\275LEH\275]\353t<,\374\223\274\214V\017=]G<<\343\272\215\274\363\024\037\275S\374P>\020)\304\275\240\2148>\033\311\240=N\377\234=\345\013\250\275\213\226z=\'\231H=\367\023\304=1.\241\275\265\264\220\274I\034\345\275\223h\232\2748\034\352;\214\352U\275\312\260o\275N\226\306=U\345\241;J\361\260\274\035\204|>\'\320\007\275H\276\224\274\333\237^<\303\225\365=\332\030\306=\262b*<\376\024\033\275\3627\311\275\344\003\013>\316[n;\253\212\253=\017\273\221<\205\027$>\360zc\274|\022\357<\313,\345=\330\032\272\275\010\317\260=\313\235\310\274h\020,=~\177\001>\n\255q\275o\2766<\375\351\002=\nz|\273\243\212\021=<\232\001;\256T\007<\320\240\355\275\350\001)\275!\352\333<\330\314|>\267e\207\275\260i\267\273\266\211\222\275\201\377D\275\003\270\334=-\005\263=\300\302\305\275\371z\210=\323\025\326=\3415\275<\320zu;\267\225\350=\252B\235<~\017D\275\tj\245\275\355\234\010>\322\007\273=i\035H\274\035\206:\276\260\352\206<\006\270j\272\223\031K\2759\260_=\"\031\211=\321p\225\274\352\032j<\350\230:\275\343\315\006>\341\265\034>5=\263=\036\202&<ww\033=\001\3536=\3331\217\275\2261\347<\361i!\276cA\034\2757\025\272=\226\002d\275\261k\021\275\327\311\201<@\341\255\275+\332\235=7\313\330=\235\036\312==\007\255=%\007\371=\345\226\355\275\216bR=\333\375\231\275\275\343D\276=#\226=\323\007@\275\\\234n=j\342\225=i~\005\275\364[\352<\310\232\014=\276\264\313=\320US=s\211\022\276\366\203\266=\313\034\263\275c\306U\275\026nq\275k\354.<\026\001\241\275\261wG\275\231\310\273\273d\017\341<\007\000\037>\251\0253>\256\266P\274\306X\330=Q&T=\231\265\024\275N\253\254<B\257\216=;yq=\230d\272=\030B\233<R\031\376\274\212\023\322=\003[\201=1\326\000>O\344\355\275\270Q\200;&\250\226<c\244\312=br\323=V\237\234\274\031b\325\275\253\335\301<5\373[=\212\"\003=E,\027\274h\016\017\275\236n\t\276\265\320m\273u\0353\273;\275T\275\374\022c=0\307\372\274\271\033\336=B\020\244\275\332{\010\275%\177\036\276\233\330\244\275\226^\302\274T:\023>\376\013\262<\251J\312=G\3516;5\302\376\275\325C\034>\347\301\362=\235=\032\2750U\214<\026\373\201=\333\226\245\275\353\357u\274\025\370\355<]\231\014\276P\244\234<R ==\210\367\035\276%\245b\275&\216\373\274\332\215-=^\034\215\275t\016\276=\332\343\222\274\304\237\302\275\037g\222\274\237\216G=\370!\014\276PB7\275\366\247\363<\345\360+\274\344c\376\274\376_\252\275HN*\275,s\247=jb\226\275\306Z\370\275Du\323;\342\003\202\275\0173\334=\037\255T\275\223\247`=\347\260Q\275h\024\200<\224\222\001\275`Ft=\326\3547\276\035\275\377\274\304)\203<\251\022+=\312w\217\274\377\027\004>u\343\373\274\213\261\274\275<\204\302\275c\321\202=\217+\372\275\203Y\321=[\247\243=\305e\311=\340\223V\275L\330?\275P\030\261=\016\033\351=/\002d=\225\334v<_\0035=\335\025\250\275\213\214\255=b\334\347<\305\230\037\275\316\234\002>D\022b\275D{\210=&-\035=d\370\016\276\033\265\323=\231\227>\275\023\365\230=\244\252\276=FI\336<\224\373\270=\355\"\242\275\311l\"\276\264F\376=\313\244\035=\230\207\243=\251\3461=\325\330\223\275~\034\216\275\023\262\224\274\337\347\261=\'B}:\311:\341\275\244\0204\276\013K6\2754e\254=\306D\027=\355w\212=W;\263\275o\274\206=\r\341l\275*y\260=4\t\330\2742&A\275q\316+\275\213\266X\275\201\243\372\274\234\017\320=\300##\2764\037`\273Ui?>\356\325\210\275&\331\333\272\330\032u\275\377\263\030\274i\300t\275 \214C\274\017R<\275\301\223\034=\2304*=\232W\260\2753i\272\275\3439\343\274\222\244\340<\341\345\214=\241\214g<\303\001\244=;\241^<\022eS\275\352B\231\275\031\263.\274\335&?\274\334\334<=~\230s\275\265t#\275\362|\235=hUG\275\231\037\250=\337_\213=\337U\r>LI-\275\200\373\027\276\010\273`=\306\021\225\275\277s\233=E\342\372\273\223<\226=\365\274\240\275@\261\237:\227J\035\275M:5\275\3026\213=g\220\"=S\364\016\275qb$>\024\346\002>\3063\026>\345\3554=\311g\355=\366\253\352<c(\217\273\346\320\333\274\227c\027\276:\336\211\275\316\343\t\276w\344d<S\272\256=3g\376=\312\327o\274\253kc=\\\017\205=yF%\274\232}\013\275Fu#\275}\330\014\274\26668\276\014\232\263\274\334\0043\274J\333\320<\246\t\032>\272`\317=\300\272\025\276\342\'\352=r\317\013>\236\204\006\275:\2744\275\006,\324=r\334\312\275\272N,=n\225\352=\364\'\007=\221\224\221\275NBE=\276v\213<z`*\276\231\314\000=\224\3209=\367\017c<T\244Y=\254>\024=\265\250\374\273\373\315\233<\257S\261\275\343!\265=\037u\240\275\334s\255<\313\0310\275!\204\367:\251I`\274\363D#=a\031(>\206\"\n=\373\330\220=J\337\333\275\007$\322\274\255\2449=\302\035\273\275\030\240/\275\275\332\316\275\215=E<\252\317\320=\273\345m\273\364u\212<*\017\343\275\375\027\020\275\356DV\276Z-\326\274*0\214=\3171 >\241@\271\275\335\212\017>)\306\207=:\243t\275C2:<\314\237\177=BD\237=\357\035s=\230Z\220=\3613\204=$A%\273\020Q\323=A\330\250\275\306aN=\240VE=e\'\000\276\212\310\263\274Y|\253\272\210\364\010\276\265\327\246=\331\030\377<v\303\365\273\256\nE=\361\010\232\275\213\311z\275|\260.\276M\252\244\275CI(\275\306<\201=\253x =b\273\225\275\002x:=\264\366\027<\247\302\023\276KH\252=\010~O\275\016p\007\276\"\352\224\275\376\321\367<5\317\'\276\243\323\202\275\351\026g\275\242\002!=\3220-\275\264\323\335\275(D\005\276\332\236\217<i7\005\275I\301\n\275iU=\275\276]\003\275w\226&=\264\370<=\355\332@\276i\347z\275\025\277\331\273\000\367\013\275\334\351p=\034\255\372<\235\216\273\274\013:\347\274\360;.=\367\202-\275\266\334\236\275\021\020\337\274\204\245u\275\217\221\372\272\026\253\t=\253M\342\275\274\350\352\275\255\274W=\030`\336\273L6\010=W\301.>\030Dr>U\274\306\275\307)x\275\3770\254=\350\305\224\275\233\276I\275\332e\260\274\344\264[\275\005>/=t\370\206=\3176\366\274\207\275L\275]>%\275 a\275\274P\376=\275\210\241\250<)O\014\276\245\005\002\276K\030\250\275\000`f>\370\356U=\373\210\274\275\305\360i\273lm\271\275\310\203\200\274z}\027\276\231\320R\274\277O\364\273\355\376\267<Y\274f=\017\355\267\275\244\216\265=q\004\221=\225-\227\275\025\370\277\274\254\334\310=gC\266\273anZ=T\016\025\274,@\377;\031\2266=\276LF\274\257A\235=-\321[=ff\251=\255\324\224=\210>\233\275\231\367F<\352\236P<\222\205]<-\3262=\234\205z</\341\277;\373jQ\275\025\255!>kZ\206\2735E\265\274\353\267\260=#X\226<*~o=Co\216\275\021\031\004\276?\301\326=u\270M=b\265E=/`\000\275\2662,\275\324\260\'>\351\326\342\275\023\332\021>\210\230?=?\336v=L\255\262=\211\207\246\275\230\227\202\275\336\354\261\272\356P\017\276\262\267\265<\223\031\243\275\364~\317<\221\215\205=\007\260\277\274\263\334Q\275y\253\307<\023z\342\275\320A\265<\235\322\234\274\030\273\006\275\003\005\361;7)\257<\347`\000\276\266^\230=\370\254\252\275\374\306)<#\031\240<]\331 >\251)\233=p5d=)\nf\275\236_\312=\001\037\277\275eT\037>\251B\236=+MO\275\236&\005\275B$\275=\350\351N=\\\251;=\3430\274;\220\355\327\275\020q\271\275\336\340%=\365R\010\275\350q\266\274\257\341\352=\376\3670=\231\343\262=Kp\240\274o\026\251\275\350Y\202\273\221\343\272\275\303\324\342<\',\313\275*\251\354=+y\250;4\241\272\275\206\3206>a\304\016\276\247P\216\275\000ad\275\265\321Q<\017\271p=*\372,=\037%\256\275\033\210\332\274Y+\327\274\333)\311=\323\216\322\274\021\347M\276/(\241\275\260\2134\275\375\246\370\274-\303\342=Sl\356\274/\236?\276\226=e\275\377\032\243\274\267\340M<j\2376=\003y\207\276qi\230\275\306\377\233<;E\327\274\203e\353\2742\327j\275\225\001\252\275}\n\273;\007\357x\274\315\234\201=o\251\317<\273\331\025\275\254\'\376\275\245\314\372=O\025H\275\\\200\266=f\207\010>M.\254\275\364|)=\345\200\212=\246\347\270=Q\264\334=\013\314I>|K\207\275\214\276u\275dM\241<\331\204\004>k\230F\275\271\311\372=1R\364:\251\031\336\275\343\323\224=\366\351\r\275\364\033\356\275\014\315\330=\"\345\207\275\201\315\257\275\202K\271\275g\200\276\274\010\320B;\007\3676<\263\202=\274\025-\332=#\3170\276\225\223,=\333\235\\=\2516\353=t\326h=\345!\357<\302\3258<!Z\017\275h\304\344\275\243\304\000\274\361n\262;\"\321\031<\000\266\257=`\251?\275\227\274\234\274\256M\235=a\244\344;\333\224\236;\007jj\275\033`\334\272\230\262W\274\2579\246<\365\313\224\275\202\372\306=\375\201Z=\303F\274=D\023\233<U79<\023G\007>\274Y\200=V\312\212\274k?\333\274E]\227=V\374\003=\245-\"=\224\237\210\275\206\234\242=\233\345\264\275z\n\202<#\n\201\275Q\313\211=<\311\022>\260mw\275\025=\020\274\205\250\t>\177\2065=\334\304h:M\302\313=mhj<.;\223=P\234\035=\2025W=\000U*=l_\000\275\262\356R\275\023\263\206=\226\366\215;[\010\327\272c\345\241\275~Q\342==\361\272=\020d\027\2768\327\337\275\014y\235\2733\016\362\275\022\320\360\275\2552\231\273\306\032\037\274[[\321\275\340\302`=\214\234\312=}\354-=\254\270u\275\0261Q=\215\332\243=\\\021v\274\265\204\376\274\337K\257=\335\001\010\275\237\343f=\266\361\013\276\263i\265\2752\257\321\274\217#v\275;Y\370<\306f\316\274\330Z\217\275\265\222\225=\313V\016\276\262cR<aj\004\276\247\333t=\234\234\370;\226\262\006=\024\002\220\275\332\205w\272\274\337\r<\205T\">\233\270\347<\231\276\375\274|8i<\304 \310\274\005S\003\275\267\177\201\275C\354\026=\"\266C=0\242\321\274\352\r\247=\256\275\020\276\202\274#<m\364\031\275+\005><(\036\312<\201\325}=l\007\231\275>\213\324=\220\033M\273cZ\227<\237\007D\276\323\362\226\275\275\336\243=\210\366Q\275\214\tA<b&\210\275o\004\311\275\257\354\273\275\241\234\224\275\262\226\266\274]\023\317=\343\177\227=\001\225G\275\327\031 \276\363!H\275\336\035\230=p\230\211\274\204Wc<\270T\251=N\027\361=9\001\265\275\344g\245\275v\252\267\275d\312,>z\341S=\343jw\274\323\246\026=\026\303Z\275\001\247j\275m\314\240\275\203\2764\276\213\255_;\277\251\267\275}\010!\276\360ns\275\265L\325=n\257\032>x\262\016=\360nM\275\0038\"\2756\207\303\275\017\376c=FD\241\2751\270\236\274r\332&\275w\373\217=3b\240=\031 \212=\227\252)=\355\213>=\000v\214\275*\365\246=\335\342\217=\372[t\274y\224[>x3\303<1e\016=c%\260=w\201\304=\004\367\236\275\035\264\363\275P\357\202=\037\203\270\273\306\211\220\275\232m\024=k[\367\273p\322>\276\026W\334\275\231?\254\275Y\365M=\262\022\017>\246\254\223=\026\272\210\274W-\236=S,\356\274\010\025\267\274\334\222\360=1%\305=o\177\272\275=\217\020=\016\204\247\275\231\'\201\275\335\204\203\275\237o\362\275\227\256x\273#\373i\275\333\201F<\316z\3459P(\364\273to-\276r\017\216\274\215e\203=\264|\216\275\372\321\353\274\376\017W<\005T\205\275\230p\346=\3044\257=\227`\235\275\035&\211;\217B\n\274E\322@\275\356\333\002\275\372\034\372\274.Ez=\320\212\306=&\320\303\275q\211\357=\332\006\\\275\243\317V\274\230C\026\273\365\230\203\275\347S\320<\320\230v=\225\320\365=\3667\255<\301\343!=\357t\325\275P\261T\274I\014\212\275\254z\222:\241\371*\274m\262S=\241 \021\275\263=\276=\264$p\275\033\251\313<\377zn:\"\250)\276\257\245\304\272\207\356)=h\005\275==\315O\274S\024\200=\217MJ<\364X\223\275\327\210&\275Y\277\307<\261j\271\275Buj=\364X\353=\201]2\276X\210\273\274\241)\215\274*Q\207=\235\336Z=\t\024Q=\252KB=0\271\376\275\341X?\274\303\027Q\2766\033P=\306\267\272\275\271\366@=8ei=\034\301\250;\014<\037\275\317>\210<\256%;=U:\254\275#\375\261=\341\342\021\276\223 \314=\266\235\003\275Q1\'\275*\341\364<\376B\345\275\200\301O\275\252\260\027>\323\215\302<h\266\265\275Q*\253\275\274\342\331=\306/-=G\221\271=\322\277\031;M)\256<V\200\014>\377B\200=\217\266C<\250\264K\275r\315\233\275\301\026\252=\001\230\313\275\016\027K=\314F!\275R\316\t=\026\032\313\274\210\354\"\275\230\034\016;?6\362\275\007\336>=\326\341\243\274\316\177\201=\254\217\341=\347\211\013>%j0=\335l}\274_\337V\275^\020\230\272\n\251\360=\317\325\020\276\311\232\267\273\231\361\366=\214\211\'\275V\265;\275\335s\314=\315\317_\275\351\245\021\276\350\223\273\275\\sb<\256\227\233\275\327\373\331=7\376\260\275T\301\240\275\023\353\355<B\363\324=\325\275.\276\312X\025\2762\3473\275\234~\306\275V\223\006=a\206\n\276\313\025\223=\342!o;\300K\273\275J\364-\27407\002>\234\224~=i\303.>\021\2660= *\332\274uP \276\236\035\003=\366\035\211\275\267wG\275\335pS=,\264&=\275\324a\276\237!K=4\375\r>rh0=\221)\213=\307\204\232\274\365\205\201\274\231\364\"=\037.\t\276\3631\023<1\271C=\207R;\275R\303H\275\214\362\334=\013\014>\276\333cM>0\354\"\276\310\300\214=p\214\272\275\360\330\214\275r\340\260\275\270?\232\275\"U(=eI\355\274\346\332c=j1\026>\037\033\227=;l\024\2734+[=o\212\036\275jwN=\3232F\275}\261\016=\301\330\3149\340\271\201=\375n\344=\373\023\014\276\366j\311\273\227C\013=6l\320\275\325\345\002=U\331v=R\325U=\224\373,\276\036)A=\236%\241=+OY\274\350\311\204=\330HL>\371\371\225=\305+\321=\246\253\005>V\221\220<[\032\200\275n\222\211=\260\nV\275\363\003\025\274\363\261\275;\234o\312<\3413\222=\251g\337=\376\354F\274\034\346\262\274\225\300\202=\231\211==\232\010t=\"\314\211\275e\233\016\276\0225\232<\234\327\272\275F\201\226\275\303y\275=g\365*\275\371K\304\273\016\013\202\273\226\007\200\275}\026\262\275\234]N=\013\242\230\275N\016\234\274\2634\231=\252\217\006=[\356\r=OJ\312\275>\321\207<Kb\035=qZy;\303\222X\275\271\203\004>l\352.=\005\032\202\274K\354\321=o\237\025=\220\177$=z*\210<\342eg=NP\016\275\300\342A\276\253\251\t>%Z:\275]5\n=\037\354S\2740\231\222<x\236\205\275G0\221=%\346+=\275j\355\274\233Y\266\272\007\035\004\275G\2371=\357]#<\r\360\244\275\376\257\n=\371\214\250=+\000(\276\360\236\207=\261\023\236=+K\367=\344s\242\274\025\236\245\275\354\234q\274\034T0>f^\224\2757[d=\321\256X=V\243k\274\0245\276\275[\253g\275S\217!=[,\236\275\262D\251\275\013A\276\274\240[t=\375!\257=\307Z\270<\274\353\256;\214\277\345<\224\227\261=\005\'\356=\324\262\227\273G\312O9\230$\024\276\356\370\377<15\272\273O\351\337\273\035\323\301<\244\375\311\274$\020\211<Z\307\360\275\265a \274\272\305\277\275M}\336=B\237U>r\212\334\275u\347G\275\231\323<>\241\246\312\274\001\206\014=\013\210\320<\371\242\"\276\320\t}<\320\276?=\242\256\365<\317w\000\275\352\217\353\275\332:{\275\367\360\220\273G\335G\275`Y2\276R$@=\214\2216\275Q{I\275\270\213U\275M\375$\274\364\323\232=\212H\243\275\214i)=zB\024;a\211\253=\0357\215=\304\253\376=\0176\017\275\221\307\264\275\362\360\263=\256\316\'<\343M\246=\271b\364\274>\211\341=\341\033\212\275\360G\263=\372\213W\275\276\307\265<B\337\231\275\361\325\367\274\303\223\211<.\200P<\225\215\362\275lth<H\342\323\275\203\001\006\276p_7=qa3\276\316\232\017<\221w\"\276b\375\300\275d\264\205\275\330P\246<v\250U<\273<\026\274#\222\325\275\026\345!=\311\033 \275\262)\n>\305\210^=f@$=\026\271n\275\006S\030>\235*\231=\360\217D=\265\373\005<\356!\375=y\365#\276\327`M>\000\357d<\205\010\275\275\324<\375=h\260\272=$\204 >\253\275-\275\326\006\006=\314H\232\274zJ\325= \227\356\274\200W\260=WI\361<\027t\231<\233\017\306=\235[.\275\217\373\230=\346\267:<\r=O=\310g\253\274\356\322Z\275\336x\337\274y\307\200=\017Z\010\274\260\003\357=/\247t\275\265\307\220\274\226>8>%\363\2159v\231\327\275\217\377\377\275\366\007\200<?f\026<\317W&=4s\003\276\001\315\236<0\375\316\274.\263\324\275\354\322\320\274\217*,\275>n\332\275\350\257\213<f\277\342\275FU#\275v\035\206\275d\000{<\241\035\223=\000\267\311<\200\363\320<\231p\246\275\311c\215\275\213Q\222\275\214\022\304<\256\r\253\275\365gs\274\345\005\367\273\374\027\326=z\261\003\276F*\241\273\267\220`= \035\204=Y\023U=\033\013\021=\310.\034\2768\n\036\276QhW\2756\210%=\364\021\377=#q\323=t\302\n\275u\350\234\275G^\302<3\265\253<\"\211\031<\202\365\022\275\347i\037=\360\226=<\230\3453>\\\nE\274\241\270\354=\357\311\003<u\374\203=\013\006\006>#\263\255\275l62\276%Ra\2750\263H\275<\335\007\275\277`\031\275\013\210\014\275\235\333\251=hu\253\275\234\013\014\275\342\033\332\273\206Z\027=\261\334Y\274\322\022 >\356\032\312\275V\220j\275\323v\010\274\276XO\275Dh\321\275<\035\356;\313\343\366\274\330\200\366<\036\337{=G\2173\274%\222[>\001\034i\275\021>\202\275\021\212\347\275\027\010\325=#\016\262;\362G\271=\230\351j\275\354\211\004\276\033\232\320\275\335\020\256=\350O\233\275\274\272\020\276\305U\007\272V1\033\276\273\253t\274w\031\266=\371\320`\274\236\345J=\251\323\013\276@&,\275\230k\307<&m,\275\342\013\032=\233%g<+<\315\274\'F\334\275\345\270\225=\366\240#\275m\204\302\275\371%n=\251\321a\274\373\034k=\014\026\266\275=\356\351\274K\222f=\202\037\246={\224?\273\364\347a\275\023U@\275\272\014x>\177\024\026>j\221\204\275\331I-=\221\213U=o\341\037\276Su$8\2766.\275X!\203=b\026\'\275\017/\250\275\321\321\026=\345K\'\274\337\243\211=\332 \232\275\256@\265\274p\023\232=Q*\006\275\226F\004>so\242\275\031\271V<h\006\003\275\200Q\255=\226\344\232=\020\214\221\274\276\327\n>\027\311\277\275\036\267\r\274\246\232\342\275\2501::G\231N<\220\240\240<\333zt\275\026\366\230<K\342\340=\330\314\033=\223\025\202\275\3461\276\275\335(\363<\221\224D\275vE\372\274\345\021\211\275\230\326[\275\270d\331\275n\023\023<\027\365\267\275\275\276m\275_<\265=\2329\267\274\331I\240=\245T;\275\255\260\353=*F\216<\010\262\244\275\306\017t<\260\261\223=$T\244\275\205\326\300=\276\375$\276T\036\323\275\3031\343<Q\254<<17S>J\034\213<S)a=\203P\345\273G\245\032>\030l\304\275s\203F\275\270\366\306\275\313\275\006\275\276\232\340\275\201P\305\274\357\364<=\307\271\331\275\356\003\024\276tg\n\275\266\001!\276\017\255\226;\026T\314=\025\206\365=k\030\020\275\325\242m\275\323/\260<\233\212\367=\264%\301;nH\215\275\253\241\321=\001\017==\224jc;\350\276\243=\307k\216=U\252\221=\215\247\\\274HX\207=\014#\006=\326\201\376<$\272.=W\241\200=|\352\217<fc\324\275\320\233 <]F\257\274x\035\357=\364\330\211<\r \204\275Mx\214\273\343t\340\273yb\313<9\236\247\273\226\372->\332\306\020>\264\317j;\241i^=\316\202\203\275\r\324\224=\350\2445=3\266\260\274\312\273\240=m\0334\276\233i\300={_\251=Pv\376\274gG\220;\337\016\027\275\024\262\275=\254\030\235\2759\250H=a\342J=\026k\321\2759\211\305\274\354\022@\275\277\322\363\275\016\364\311<\205+\270\275\267fP<\264\3741\275\020\233\000>\201 U=z\031\205=\370\003\302<s\216\325\275 7B=\305E\024\276\370)\271=^\016\220\274\303\242\215\273\316\355!>\325\244v\274X\0212;b\217\035\274\354\372\025\276\360,\271<\211\367>:@\204\000\275\372i\014>\200\311\371;\252au=1\250\\=\207=\203=\030v/\276:R\231\275\257\324\361\274\373\340\347:\332\005\310=\004\021$=\207\235<>}|\237\275/~\014\276\353\357\323\274`\227j\275_x\245</\024\357=} v=\3019\352=3\370\354\275W\245\002\275\322\372\321\275\243\200\314<\220?\005\276 b\350:\262\016\251\275\247\2347\275)\004\014=v\372\215\275\021F\032>s\270\211\275\001\004Q<\325\367\346=Q\344\253\275\227\312X\275\236Wo=!\235\002>\276\007\222=Lw\231\274&L\275\275mj%>\350\251\242;\235\340\000>\331\002\262\273\270\007\235\275a\006\326=\331?\201=\316\335\273=T\301z=\253\200#\275\326\013~=\223\274@<\371\355\020\275\2134\257\275\335L\370\275u&F<\241\325\016<w\005\211\275\362;L;\016\202j\275\224\354\343<\314\313\034\276\017\210\237\275\2250\006\275\202G\210=\010\331\346\272\003\335\304\273 e\303<\003\260$=\013)\325=k\n\010\276\030B$\272o\013\321\275|\017\250=&\231\305<\327_)=\255\224\214=\364\273\307=\350\373,\275P#9=\315\257\211\275\017C\231\275\35681=\274Wq=+x\340<\244\316\200=z#!=\372\236\037=\177\204\t>E\021\020>t=\334=\236G\275=\356\376Q\273>\342a=\324!\330;\217\351\347\275\016\014\233\275\013\247V\276\002c\202=\035}\264\274`O\022=w!\360\274\3551\003\276H\322\006\275+\374\315\274\304T\217=\231\247\253\275\206\007\226\275\232u{\275o\014\341;K\263\025\274\303\356\276\275t\216*>\301\t~\274\373\2330=-\374\313<\235\n-\275d\237\222=\2438#<h\274\221>\372!P=\342\373\355=\267\233y\274\003\203=\276-l&\275\256\214\337\275\210A \275?\272\201\274\233\000\223\275\005^9\275\006\214\211=:\250>\275{H\364\274\342\376E\275\241\372\336={\367u\275QJ\026>\344\310-=BP\370;\263\2008>\03795=\"\322\257\274\252a\036\273o\253;\2769\034$\275\221\314\020>h<o</\330\243=@\270\001\276\207\326\002=KO\273=\010\346\224;\240\266h=\232\032~\274d\237\033>\324\250\200=m\004\265\275\245\033\271\275q.]\275W\370\356\273y\364\035\276\006\377\261\275S\261\216\275_\221}=y3\331<\313\265%\275xx\317=A\025\271<\364\215w\274\215\242\200\2759\350\275\275\204\202\305=p\246\256=A\330\365<\227\353\305\270\377\344D=\254\212\210=\022&\007\276\337\235\271\275a\220U=b\354\332\275\367\217\316=\305*}=\004\025\001\276\230;\250<\211\026\341\275\355d\204\274\215e\232\275%\243\016\275\362\005\236=\024\264X=\\\353\230\275\363/c>Sf4=\367_\352<+j\322\274]\237\241<\027\260\030=\224\"\211=\347\276\223\275}L\337<\234\227b\275\377.\n\276T\266\026\274\223\010:\275\202-%=G|\261\275(\330\330\275\363\022p=\224\t\352<g;~=\324\302\260<,\230(=\014\304F\275\203\020X\272%\373\375\275\256\365\266=\017*\021=\340\342&\275,\303W\275=3y\275\313\237\372\275\216<\202=+\350\000\275\367g\315\275\025M\026=;U\263\275\326mG\2747\357\301\275\213ZG>\364\031\210\274\013\001\245=\262\2072\274,X\"\274-\234\206<\024\333\230\275\255o\332<\363M\374=\022\304\252\274q<*=%\222(=\024\215\373\274\020\326q\275\271;\253\273\361\020\251\275\376/W\273\312\2401<\363\366\312=kB\232\275\205q\252=K*x\275\264\004\202\2744\266i=6\357\021=\213\243\216=\353\031\222=\203w\371\272d\225\204\27409\337={xH\275FS\311=\314\365\026<\346\020\325=g\324\025\275\250w\364;5\234\351=\363\234\027\276\305\334F\274a\302\222=\230\344p<?b\037\275\352\210\271\275\231Zv=\254n\t=BF\233<\022\342\267=\rC\014>4\244\237\275%P\226<(\2348<\006\004\026>\r\215\361<7Y\340\275\335u\004<\350X\\<\357\245\311<A\267\224\275\325\032\022>#>\232\275\177\r\010\275\223G/=\234#6\276\314\017\320=2\354\232<\245\376\021<09\370<D\341a=kMq>P\377\025>Uaw=z\3319=f+\272\275\374\2069\275\377\244\211\275\343I4>,$\230;\365\206\377=\036o\244=\312X*=\371\376R<(\023\215\274)\215\377=P\200\300\273\353\330Q\275f\351\317\275\272\334\203<\n\212\245\274\r\324\230\275JZ\204:.y\037>l\313\261\275\010\023\014=\013\373F=h\367g<\251\241\376\275\035f\016>\244\2671=o\205\021\276j>@\274Rqk=\232\361n=uMe=\313\275(=5q\006\275\2660C<\302\244\223=\370\242*\274\377\021x=dC\205=\271u\225=O\210\265\274W\317>=%j\320\275+,G\274\336\270\366\275\330\235\365<\003\362\376:H\313\345=\342\252\311;\314V\251=\021\224\275\274\006k\004\276\234*\377\275\307\177\030\276\030\251\313;\316\027\231\274\207\325\367\275\204\320\335\275\025\334K\275\366\226\330=\261\234\037\276n\245\252\275JI\205\275\177\020\004\276;d\332\274G\225Z\275\211\243\316=\353\025K=\211y\317=\302\007\374\272I\321\254\274~\337\000\276]\177\313<W\320\325\274!\315o\275\234\340\214;d\3173\275\341\007\245\275\264\267-\275|1\021\275@\243\232\275\027j\256=\256\2200\276\024\226\017<P)\246=\r~O=\260a_\275+\320\246\275L\013\334\275!\344\277\274W6f\275)\354\214;\205\354\226\274\321 \366\274%$\204<\226\324\277<\005@:<}\325`=\243>\n\275g\033\033<S\276\277=\337\261\321\275&\347\220<\031\257\243\275sk\322<\223\374\277=\3616-\275\276\223\242=\216W\036=Y\013\016\275\336\375\202\275Vn\254\275\373,M>/\001\242\274\221!\314;N\301==v\267-=\276a\373\275\330\n\242\275l\023\315\274\237\357\347<5\366\231<\250\211-\275\217\220_=g\202\345\273\206\354\034\275\0019\003=\346\217!\276\206\025\360\273\314\t\253\2750\346\355\274\201\031\016\276\307\265\377\275\360+\253\275\336\2700=\3023\007=i\014\237<\375\014\027\276\362L\305;[\235\204<\017\301\022\276\375\013\321<G!\201<\346\205\300=.P\357\274*\325\222\275\200Lm=\234\036^<Fo:\276^v\275=\272\312\205=\007;~\275e\342\t>\207zy=8U\003>\236m\276\275\236\255\233=\333.\352\2745\351\021=N\261\364\274\237\242\321\274\265\3013\275\277\200\001>\017\202y<\374(7\272M\013j\2759\342\177\275?2T=j{q=\260l\225<\360:\265=\231<\200=6\352^\272pq\355\275\212e\310=z\327\r\273V\3309\274\340\246\234\273\372\3650=\365\306\275<\352\364\355=\007\236\207=\021\365\220=\236\223\251\275\226\317h\275\306\337\260=6+0>%\362\306=\014`\356\275m\\\210\275LS\002=z\322)\275\271\237\210=^\263\364\273\020\242\026\275\277\275\336\275\231U\236<ND\363\275=\204D\274\204c*=\310Q>\275\025\355\344=\353\360\253=\2048\223\273\273#|\274\202\203\224\275@\022!=^\274e\275\233\255`<\302\023\022>\033-\306\275\252_N\275\275\334\245<t\255\330=\035\353\335\274?T%\275_\331\017=\216\"\264\275h\345\017\276\03597=\007\203\036>\317\331\010=\315A\367\273`Bk\275\333\372\265\275\013g\242\274\301\210\270=\371e\256\275\007\336\205\274Q\266\267\273\264\216=\275?\370\244\275\3449\276\275{7\304\274\371\320\203=\014\256W\274\3717\006\276\222C\302\275\351\252\265<&A\361\275{\326o\273\325\351?\276\204 \235\275\275\300\343=\221\252\233<\351U\364<v\260\022>[\037\214=\004\361k=\336\263\031\276\302J\035\276U\005\003>\311\235\266=\374\351)=\330{%<\212\347\036\275Dz\200\274\274\020\026\276\242\036\025=7\275>=4nC=Kj\215\275\256\005\003\276\237\361\321=is\006=<\236\237\274\020\305n\276Gj\243=+\'\036<p2\000\275&\016\n<\037\202\217={\375\360\275\004\210\220\275UN/=\260\2474\275Fq\221\275\213\267v\272\024\256~\275\361\203\003\276\031lX\275\210g\221<.\241$=\270\033&>\276\254\020\276G\0174\273\357\006\233\274\343\233\1779\177\371(\275a\253I=\314\235\252<Kx\306=b\272K<x\337|=\272,\356\274\377_%=\246\276\241\275\016\301A=\301\r@\276\351\360\001;v\312\314=\250?\260=\343>,\276\213\335\013;m\370\371:\344\376N<\345\027\004\275\366f\003\276\242\237\026=\312\301\362<\303E\257\273\"y7\275\275d\274=\237\334\211\275h\306t\275i\352\033=\324w\205=\021\206\310\266\354\232\272=6b};\374cr\275\022\2351\276\371\200\220=z\312\312\272\3326\025\276_\033\235\275\357\232\005\275\031F\n<,j\014>\331\205a=\345\344\373;g~\\\274\276.\225\275\333\260\"\276++\205<!\313~\275E\023\247<\220F\371\275#\275\032\2763\225\337<\373b\260\275\374\033%\275\260\330\244\275\270\3039\275\217:\355\275nf+=\'\324\243\274\306\200\357<\001]\026\275\251XN<\326\243\253\275x\027\340=\331+*\276\332\013$=\212\321\002=\'o\322\275;\351\350<\\J\314=\373Lv;\007\361\264=Z\230\300<h2\234\274\375\356\203\275\240\to\275\001\315\262=\030 \275\274\267M\263\273\267\276\351=\010\305\252=\330\215\236\275t2\324=^\020\261\275\235\204\016=h\217\334={q=\2743\230\263\275\237t\254=\302X\004>\303\341\237=\336:7=!{y=R\337\343\274\373 \210=\301\037\000\275u2\230=\030\223\332=\n:\022=\224\273\326\275\n\225\316\275\236\276\231\275\313n2=#\271\254<\235\2634;\253$\206=\353\321\230\275GT>=\210\"\204=p\004\017\2759\265\t<\251xA\275\034D\240\275\337\333\244\275\271\031~\274,x\024\275|\2348=\025\326\200\275v\3533\274(\333!<\3730\321=\227\326\211\275n\255\016=\177\026#=N\241\335=$\225\355\275\334\374\305=+\354,=\031g\331=\013\324\271\275\316\367\033>\206\306&<\270o\240\274\351y\362=U\204|;!\036\354\274\252$s<R\'\207<\251o^=V\355\023\276\317\315k\274C\202\325\275\222c\033\276[\375\257=5j\006\276xd\210=\n@\t\276\037\226[\274\305\373F>=\271\022\276\010f\010\274\035\200\330\275\307\323\227<b\271`=j\036\242=\256#}=\324|\220;t\031Q\275k\374\025<\210\032?=\237\272\003\276s\221\017\275\3340\r=a\007P\276\\\300>\275(\252\253\274\016\272\036=\251\243\022=\360A\272=\324\214\271\275\034\230\261;\004\223\351\275%\217P=\313Q\210;=\022\230=\036\201\260\274\316\322\272\275\245\007?\275b\036\232;\010\300\021=}\233\334<|w\036<8\032\344=&\300\035\276y\207V\275\245o\242=\021n\324=Ld\222<\001y\211=J\324\264=!\213\312<\226,\000<$$J<\270!\203=~#\177<n\216W>\360\032\242\275\2702\316\274\203\274\240=c\306\013<\037c^=2\231e=(\324\304\272\345~\215\274\277\257\373<n\355\216\275\304h<9\004pQ\276\341\305j\274\344\357j\275o\014\032=\317\224y\276\300\362\311\275\246\035\234=>\276\324\274\373\242\223\275\373#\346\275\351\360X\275\355]\350\274\036w\233\275\202\036\215<\200$\223\274\211\373=\275\202S\004\276T\243\020>\315\234\010\275\327\321\225=\267#\022\276 q\276\275\027\364\335=\341\261.\276[\031\345\275H\220\275<1\241\257=\362o\024\275\315\216x\275\217G1\2759\034\205\274\350\215\377=@u\362\273/\365\304\274\327\033\221\274\002\256\030=\'\305\260\275\247\032\325<<ZQ=\\\341E\2746  =\222h\235\275S\227\024\276\303j\213\275\365`\261\275\236Y\343=4\263\212\274#U\307=\240\304\234=\332\230\237=\263\003U\275gi\021\275\"&\274=\013v\255\275ac\353=n}[\275`jk\275\020\260\244\274\216\3177=\037\3732\276~\254\376\274N\024\302=\203~\204<\204\371\007\276E+\220=\201t\026>\322\376\206=D\215B\275\246\037\252\2753\352\027\275\213\312\037\274\346\341\216=\226\226\010>W-\254=\r8)<\246\322\272\274\274\233!=<\326k<\t\245\241<F\036-=\022&\244\275\267\3152=I\335\020\274\365w\332\275X|\362\274\366&\003\276\365-4=\3013\337<\352 \236\275h\376|\275`\372\213\275t\266\252\275\235q\337=\202\253\002=\024\373\337=\210\356\037=\305\r\224\275y9]\2741~\275\274\000T?\275\301?H\275\375\322\031>\273(j\275\361\250\350=\234\007\305<Si\030=\360\360\234=\005\212\316=!\331\035\2765\016e=\373\225\252=\t\027\311\275\255\260\326<\001\241_\275\007\245\215\275\022yy\275>w\037\275B\005-\275\274<\211\275=a.\275\360\224\362=!\312\271\274N\270\332=\343}\242\274Vk\264<nL\304\274ZDP\275\353\262\244\274?\007\333=n\247\317=\023Y(\275V|\302<\232\'\216=\'\222\025=:D\025\276\007\034)\274\206d7\274[\224\241=\361$\276\275N\276\322\275&\036\313\275\225\025n\275\352\265\000\275\273\323\331=\260ee\274\265\256\251\275\345k\003<$8\235<\030u\026\275\340\373\242=\016\2070\275>#\366\275\021\337\263=}\244\236\275\334\014\275<\3579G:\352\312\\\275z\217\217=\373\206\261\275\206\227\356\274h\344\273=\027\244\275<\2309\013\274\207\200\341=(\352\270\275\250\274,=[T\274=\234\226C\275>\023f\275}\320\237=\376#\224<\370\203\r=&<I\276\271.\337<8L\025:\236\2579\274\233,\350;I\241\002=&T\021<\340\373\230\275\241\002\212=\351\256$\275\325\203<>0\314\220\275\347\274b=\301J1\272\362\213\333<\252k\217\274\331\240\037\276\250z\000=\023\206N\275\277l`\276\343\024\324\275FP\035>\\\300\r\275\257\325\026=u\342\231\273\237\3143=\376\226\007=Z\231\361\2757\374\350\275\337\352\016\273H\262\001=Y\271\336\274\177%\313\275\346\302\315=\244\030\r\276_\343\213>I\r\223\275W\216\023\276\351\225\374:\002\325\360\275`\205\252\275\331\262\243=\023\257g=\013\356\226\275\377\357\371\275\262C\270\275\243\205\261\275b\342\372\275\301t\215=WW\215\274(\351m=\341\034\236;\320\234\307\275f\232\266\275\203\336\211\274\351\036\201:\007s\200=\234\340\250=L\203\311\274\271Y\322\275\021\313\016=\n\367\342=\355\313\212\273\325\001\213<M\271#\274\177\265\004=k\332\024:\200\237w=\020\234\204=\251\311\325\274\264\235N<\333\227\254\275R\326\n;\250|\261\275\267\272\373<\340\307:<\341\303(\273\365\312\322=:O\301\275DB>=_\265_\271\257B\006>\253\357\377<:\n\007\274\324\001\311\275\336O\346=X=\335<\377C\250<\222\330\224=C\375\373\273>\347#>-\250\013\276\346lE\275\004\217(\275\325!\333\275r\262\002=\232Hb\275\313\231\024\273\000u%>\n\343\023\276I\324l\275g\033F\275\237\323\213=\327x\001>\201=\014=\254\332\231\275w`\302\274\324\360\212\275_\275\373\274p\263\021\276\037+\001\276\025\256\223=\003w\010\274k\245\326\274W\231d=\213\327\252=\276\364c=\222yV>\322JO\275]\2444\274\345 \363\2733\241\003>\206g\341\275\214\005\025\275G.\000\276]\"s=\022c\"\276\372\221\232\275\007.\220\274Me%=\202\346\305\275\267i\312\275\364\036K\274\311!\231\275|\330\260\274/\006\246\274J\264\333=\261u.<\332\217\340\275o\354k=\033\353B<\277O6<\213\270\177=E@\240=\027\'\301=kN \276\367\"e\274z^\214\275<#\344=\201\355\000\274\327\226f=\351\272\270<\223\341\303\275\267c\230\273.\376\035<\314m\027\274\307\236\373\275\314x\002=?\322c\275\364l->y\241\337=\314\006\262;\001(\023=i\013\037\274 \242\237:]\212\030\275\333\031\256=\0348^\275*\373\226\275\351\"-\275{j9\275\020\341R=F_V\275bS\025\2745d\275\274\\\330E<\033\',\274\030D\032\275\034i\234\274\227/\203=\211\354\036>\227\316\235=\213\025\320=t\255\305\275\021\177(\273\315@\030\275Q\221\204\275\351a\027=:R\030\276\021f\353<\027\364\361\272\214g\353<\246S\336\275\'S\263\274\323\0237\275\217\245\335\275\312\000\341=\023\345\013\276-\341\">\3158\010\275\326o\t=_\304\301=\n\356i<\326\213\275=a\317\037\276\220\213\374;x(\205;\"\221\022\276\301\305\014\276k\210\006<\275*\341\275\032\226\335<\3631\244<\'\316\223=KX\303<!{\356<\202\020\035>\277\235\235<\273\002\025\275\254\033\316\272\220\351\366\275\243A\316\275M\230\311<\323\242U\275\203\331L=0\031\264=\333u\230\275F\230\306\273|\0106\275\300\346\364=\240m\026>\333U\371\274l\303i\275\245\371/>\374\307 \274F\216\003>3p\276\275\252i\'\275\377\374\231<\232\027\260\275ca\007\275Y\247\324\275\360\277\200\274\354\250\213<b?\230=@\247a\275\216\301\r\275\202k\003\276\213.\207=\366\033\021>\245\204\374<Ec\315=\242o\315=\212L\024\275\nF\250\274v2\265\273\351T\261\275.\306\201=\206;\216=\234\336\314\274\334\375s=\305\377]=\017\345\210\275\021\217Y=\347@\014>s\231\213\275P\201\004;\275g\341<\377\272\351\275\014\273\037\274}\024\033\276\300\357\307=\207\324@\2759\256\263\275\336\343>\276\237\364\020=\374y\031\275 9\222\275\364\014\361\274\240B\005\276`\206\367=\264\214`>/\000\214\275\256!\022<\363\301\261\274r\2571<\020\000\206\275\r\275\323<\314\213\370\275Pl~\274S}\257;\215w\272<i\3232\276\340\305\317\274\254\006\013\274\210\241>\275\332(\350\275<p\335=\020\'\206=@{,\276d\233\n\275\303\264\232\274\"\004\376\275/T\203\275x\241d\274<\342\300=u\202\031\275\314\3613>\343\235c;~\205i=K\314K\276u\337\311<\360`\320\275R\333\\\275\227.-\275\342\361\254<\303\237s=\343\023\033\276\300d\250\273 B\000\276\3674K\275\030\271\212=e\350\230\275R\243\272=\310%\315<\361\221\220\274\203&\223\274~\321\205<%\030\213\275V\020\017=\005\275\302\273\264\316M\275\323\306\357=Z^\001<\321\273\224=\351\247\004=~\n\t\276\303\310\200\274\0053e\274\257h\367<\002\302\303<\025\242\324\275^\351\024<\0032d=j&\273\273\342I\355\274\364\265g<\023W\235;\303mG\274\253kU<\327\272^=\336\201p=+q\023=j\345w=[\233\236=\377\026\"\275\236/\312\274\027\231\254;G4\224\272\233\207(=\00059\274\371o\373=\261d\367\274ML!>Mg\331\275\267\200\367=k\\t=\026\210\035\276{\314]\276\304\003\227<\305is=\335\344\245\273iF\326\274\375\275\003=QBt\275\275\"\231:)\343\212=\277<6=\003\023\221\275\310\253\371;\026\353R\274\264\362\211\273\270\315\273\275\256\334\t=\014\346[\275E \t\275 \206\242\275\354->\276j\366\300=\256\013\013\276=;\214;\255\376\373;\201\224\026=2Q\031\276\315S\254=\364\346\354<\335\0340\274\330A_\276\253\265\204<\2325[\275\367\264\220=\311\355\351;\241\270 \275\377_U\275\246D\n=\2553\371\274\376\263\332=\234\016\217\275\201J\345=f\027X\275y\225\375\274\023&3\275\245<\360<i\363\201\275I\324\007\274\023vj\275=\241>=\3203\024\276\333\273\342\275\010N\227=\257\177:=![\037\275@\357\247\275\276\017\220<\1772\035=\357\226\261=\304\022\332\274\227\\\256<\006\224\226\2756>h<n^\315\275\220\341u\275YL\021\276\326\3045\275\213\351\322<6\355\036:\341@>=T\302\266;\300\300\343<\375qB\275\032C\220\274R\271\270=\376k ;ig\373\274T\\H\273(Y\206<C \253=\266\253\266=ng\255=G\317\235=\274\013\237\275V\355\005\275/\257\301<\323/\216\272\224$ =\316\215\312\274a\017\347\274\322GF=\300\236\263\275\233\327\314=\303c\024\274 \307\235\275\337\026{=\024\363\027\275\226\2249<\377\327#\275?\325\317<\213\014\031\275^\204\203\275\336\370%<\3650\276=fH\304<`\210!>\026\314\330=\265\346\340<V\373\251=\024{]=C\362\013\275Z\327\215\274V-#>\321X\330\275^\254\251=o\202\232\2751I\341<P\252_\275\3223f=\250\370\237\275\004\007\250\275x\'\263\275\r/\371<7w\207:{\004\347\274\242\'\361=u\230\t=j\2329>\313\363\010\276\207x\317:\025\020\342\2747\231\224<\346\354\006\276\366c\031=\004vj\274\326\335\377;\203\317@>ML\026>\024%\333=\367!\252\275|\262o=\375\325\245\274\233\035&\273XWc\274-\246\213=~\030z\274g\342\315\275L5 \2757\223\301\275\322\177\222\275j\257j:\360\237\244=\252\217\212=\272\365{\275c\357\032\275c\t\323\275\3657\335;]\227\336\273\263\330\272\275\227?\'>\305L\377\273\357\206\232\275\231\020\307\275\202\350\031>6pZ=\253\025\264\275\360\331,\274\2073\334\274\332\322\002\276H\226\361\274\t\206\336=\324\305#\275\025\346\302=y,2\275U\225n\275 q\023\275\354v]=WO\336=\211\376\242;\202\237\322=\366$N=1A\367;\241\252\031\272Wzj=\227+\353=i\3644\275\304U\002\276\347\026\013\274?.\272=;\020\177\275\3708\016>\330j\257=\203\365(>\034.\337=\005n\345\274\345\237l=\376\247\225\275=\023\212\272O\321\004\276I\364\000>\365\243D\275\263\321\255=\232\370\006\276KN\224=\'\346\340=\242E\241=\213`\004>I\340\206\275\266[\317=\323\264A\275\317\'\'<\243\014m\274\371v2\276<\377H>v\235x\275|\263\325=\203\n\335\275*\276\311<\030z\377:\220\320#\275\247/\335\275\023\321\237=<\344\020<\214\240\307\275\233\356\264=T\002=\274H\356?=\222\206\222=B9\207=\026[\202<v\203%\276\t\263\277\275\002\321\374;\307po\273\241\034\242=\332N\265\275\t\215\225\275\223\250J=\254\334R\275\277P\376=%\024\237\274[\213\001>\363D\241\275_0\375\275\001\3550=\337\341T=E\341?\275\321\021\210\275\215\302\233=\265cI=\230V <n]\240\275K\212\251<\03164\275\250\310\213=\\7&\275\315\rA\2756f\005\276f&L\276;\025T\275\257\327\246\275.\254A\275\347\007\024>\212x\013\276\031\276(<j0\237=\331\274\026\275\374\002-\275\022[\000\276\245>\007=\234\305\034\274\226\365\221=\276\202Z\275vW\216\275\200S\200=\016\310R\274R\270_=\277\241\003\275\234C\221\274Qx\254=\361x\243<WTa\275\200\354\263\274\270\302\225\275O\235\277\275\310\255\026\275\002\020\305<\304\235\315\271\316\201\215<\224\274\247\275>+\276=\237\351;\275\252{P<D\260\254\275\311\035*>\'\\\354=o\302\007\276\371\376\256=9\225.\275)\344\035\276&\213\014\275n\264\236=\374\252\371<Xc\325\274\006\013F;\006\n\250\275\326\231\300=E\313\210<N\272\366\275\'\373\322\273:H\206\275\024\347\000>\026\213\267=^\263\230\274.\203\321=\37440\276\340Q\027\276|\312*\275\010\014\246\273\230U\237=\331:2>\373\254\301\275L\267\266=\272\326\300\274\303\215\242\275fwX=C\310S\275\301n\253\275rX\244\275\364*\227=Z\036/\276\343n\"\274\254.#\276\351\216\312=%\253]\275\021\330\305\275<\274&>\363\017G\275yL\277\273\006Bm\275\323\270\221\274\263Bp=\036\002\361<\257\2375=\350%\373\274w\035\201=[\000D:\347x\006\275\353}\3749WQ\266<<\221X\275\242>\347=5|y=b^&\274\315n\232=\306`%>\3003\224\274\370\207 \275\251\r\260=\370\005+\276\337\013\264<R\326<\275\313\010\313=\2401\t>\275\267\036;\220\270\021\276\222\361\322=\264\\\312\273R\211\245=o\251\207<\352<\244\274\026\246\034\275c\244\"=\231\010\245\275_\342{\2751;\213=\207\0078=\225\324\223<p\3170=<\203B\274\270yf\275\340\347N="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5584848
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "bp\305=\353\273\230<Fr^=\000\253\376<\017O\226<k2\236=\227\002\251\275\206-?\275\376\352M=x\227\321=\270\001\274=\252h\245=MR\256<\356\r\025\274\347\327\000\276\352\214\377=\323\0042\275\312xJ<\000\273\305=\333\2308\276\037S\240\275Iw\345<\360J\326=>\177!>\352\223\344=\005\221\350\275Up\016\276\2316\232<w\037c\275\301\331c\274\343\253\021>\000\315\323\274\311\342}\274Fz~\276y\210\256\275-e\020=\250\002\233=\365&/\275\253_\360<\222\372\234\275^\277\221=Kb\340\275@\212-\274w\030\310=\361G+\275E\024\201\275)\033\255=;?z\275\302\264\303=\022\216I\275\336\0164=\277\340\027=>H\033>7\346\026\275\364T\022>\007nw\275\240\253\247\275\264\207\020\276\333\t\007=\372\026\222\2758\332\373\275\007\371W=\352I\272\275\320Fd<:w\205\275z\001^\275\234\032\r\275\001\241\304=\343xD<&\0076\275\325d\340\275r*\001>\273\344\211\271]\272\232\275;\374\024\275\035\355$=\225dt=\032\314\024\275~\312\364\274\332\217\267=\342\016j\274.}\360=-m!<\026\233\231=\225\002E\275t\247\230>\3023@=\244j\241\275i\024[;\021s\351=2\2443\275\022=\006=rs+=\021\366W\274w\341\375\275\206~\033<\210\016\256;r\312\264\275\230Ry<O[\352\274\216\027\212\273\212\t\324\275k\2514<\220\312\352=$\244\261\275\312\330w=\367x\312\275\316:\033\276*\\V\275^\361\237\274h\2732=P\035\225\274\361\327\014<\'\307\324\275\0203\320=CE)\275\001\277\337\275\032rH\275O@\030\276u\254.=\202\211/=8\233\001=\rS\222=\365\250\375\273\263\233\252\275\032)\254\275\2007\246=~K\216\274x\312M\274y\375/;\360\220\037=\3407\355=\003I\220=\031\r\265\273\333\374\353<M\211\360;~k\005=`\031\227<\010\350\253<\t\210\213\275c\323m\275S>\336<\313\013\025\275`\306\310\275\344\014\014=rK\034\276a\340\3339\312\213\272=\003\232\331\275\247\205\302<3\327\251<#t\006<\n\340R\275V\317\020=Y\242\373<\374\362\005\275\370\300\340\275\177\036\331<\333Bp\275\376\367*\274T`\265=\336\277\322=\211\"\270;M\350\255\275\235\022F=\307\266\377\275\271/l= \235\376\275\202\354H<\230\376\027\276h\310\007>\250\366\037;\252+\265=M\215E<\307X\r\276zR\355\275\247\206\204\275\351\312\350\275\251\320\006\276X\233\265\275\374\221\252=\237F\321=N\210\370\272\003\004\230\275\262\242\036>U\275\252=5_\355<\204\352\274\274\334\251V=\343V\225=z=\370=\016s\201=\"\345\271=q\203n\274\211mk=0N\265<\022\314\303\273.\242\331=\321_\276\274\354)\264=\177~s\275o\357\r=\316\356o\275,\311\217\275\201.y<\273\225q=\266~\002\275\234\356\244\275Tx\315;\260\355\025\273ZQ\007<\321\353\024\276\'\227}=e\322\031\275\345\016\026>\006\276\343<_\321\212=Lw\367\275\000*\230=3\316\201\274\274\375i=\231&\267<\020\037\237=\210\362\323=<U;\275)\024a<\177D\247;A~\014>\205\315\034\276\235\250@\274\022\324\207;Q8\260=}\271!\276\300(\007=gA1:\345!6>j\333\352<\251\300\330<\311n\315\275&\270\004=\013W\n\275|\2765=(\2010=.\202\022=g\310\232\275t\177\310\275/\225\370\275\233\033\021;\303W-=\377\375\016<-\373%=\366\225\370=,W\377<\334c\221;\036\2415\275\177.\352<@!\005>\325,\333\274C:\255\275\262Q\334\275@\350\021>\006J\342=>\275\024=\304x\225=\000@|<.L\314\274\323\201u\275\307J\004\275\237r\333\274\006\215\033<l\200\354=\370o\r>\177\324\014\274\rv\225=OdJ\275\274\267\262=\237\361)=P\030\200\273}Eq\275u\230f<\2156x=<f\004=\000\305x\275\351\277\336\275\365\256\341= }\251=N\031C<\226\304\020\275?:\232\275\211\026\364<\340\322\242=\036\332\321\274,+\376\275\330P\221=D\'q\275\004p\337\275\335|\346;\031\013\333\275\360[\037=\227=\304=\217\342\020\275\276\236\034<`\237[;\274\341\200\275\3256\002>\203\340}>l\004~\275\355\223\210=\353\0214\275\367\223O\275:\344$>\022\343b=\260!\237<\023n<\275\320j\002\275M[e\275\347y\343\275\352ST\275\275\350h\275I\262\222\275z\232\225\275Tk\345\275T\374\217=cQ\313\275\246\203\201\275?\000\372=\250\314\265=\313\2157=3\004;\276\201\344\271<\241}\353\275A\311)\276\003\034\022=\366\374\351\275U\337\373=\rAb=\265]\017\275\370\311\367\275\027\310\302=\254\254\273:\351\304\017>_(\016\276\037\272\020>\3753\217=\266\342o\2754$\215\275*\203\335\2757,\252=\315\315\300\275_\020*=U\221\301\275\373\224\263\2740\301\250\275.\200P\275\320\026\177=m\225\304;\020\310N\275\237La=sI\331:dn\235<\355\330\367\275v\017&\276!\301\3209\371\322\023=\245m\235\275\242\266\001=Pq\237\275\366*\302=\026\341\201\275\337\343\n<\301\003t=T\366\217\273\'\017\033=:\"\2039\323\236\326\274\266,\300\275\023<|=\002\361\222=\016\340W=\204tY\275e\001\363=\333\252m\275\022(\276\274hey=\264\0243<<\264\005>\340\272W\275d`\254=\322:\261\274\223\035\214\274T%\211\275\375R\000>\371\377h\275\277o\020\275\361\001y\275\322n\231=\371\022\005\276\315\371-\275s;\260\275\271b\025>m=\031>\304xl\275\224\305\230=\313\020\261<\276\230\025\276\370I\263\275\272\244\212\275<\336\032=\305\313\224\275\213\206)=\243\2324\275\221re=;\247\002\275\177\030d\275G\rD\275\361\'p\274\006\211\314\2748\245z\274ev\264\275N\213\326<-\316M:\326&\005=\026\364W\276\352U\"\275\346\231\003\275\2150\022>&\201D\275k\273\315=B\353\246=\302\024\025\274\025$E<\353,\232=o\r\033\275\033<Q\276*\230x=\201\226[\275t\033J=A\305=\275\244&\037\275\270\277\313\275\2633[\274\206\014\321\274\236M\361\274\225\224\014\276\334\372`=d\016,=\217\245\353\275\331\022\007\276\276\363\213\275\204\301\177\275\017\022 =\215$\035\275~t\244=c\346\013\276\206 \321=*%\230\275\367%A\275\364l\201=\346\260\006>L:\223=\267O\327<\275\370\014\274\223\332\246\275-\274\027\275\313\000\226=\366\206\321\273@\247\330\275!\314\273<r\322\247\275\306p\243\274\016\036\256\274\343\343\205\275\374`q=lG~\274\266\005s<4\356\220=y\004\023=\302WM\275\233\021\234\275\352A\376\274Mx\272=Y%O\275\274\336+\275\331&\240<W\372\315\274\347\312\240\274\315\023\272<\210\r\236=\2629\252\274\375\026\223\275\345\265\325\275\037\253~\274\240\360\241=\230y\320=\336\307\214=n\312\010\27649\241=\350\226?\275\360\030(>\237\022+=\241\\\305:\324\204\376=_uc\274\210x\327=\002\266\024>U<.>j\362\374=\343V\233=\014S\214\274\232C\357\275\242d\316\275\254\262\371=i\241\356\274D\021\223\275\322\333\204<\375\333\036<aR\347<-\220e\275\263\367\205\275\227\314\010>\200\367\252\275\301\017v\275\002cS>k=\356<\354\032\\8\224\026\004>\262\021\213\275\344*\";\247\222z=-GB=X`<=\\t\372<\025+\347=C,_=&\246(=t\005\326\275\321\'\251=\326\005\223=\370?\263=E\360Q<U[\271\275;\276\223\275\370n\003\276\201W\321=\0227\366<\253?,\276\2435e\274s\332\333=#\223\367;OAc\275\375\247\243=5\372\317\275\275\227\000>\321\322l=i\210W:7\246\\\276%\235|=-\353\207\275~\230~=GuK=\0052\222=N]\237\274\261d\361<\210I\353<\022I\261\275\346\357\356;\245\306\327<u\360\213\273\334v\226=\246w\214\275\035$\323<E\036\227\274\360f\263\275oj<<\334\363\207\275\377\013\002\275\347\214f\27304\273=\374P\304=)MD\276l\252i=n\320`\275Qv\336=\032\242X=\304\024\006\276\376\037\315==B\037>s+\343<{p\263=&\230\202\2754O\035>\257s\206\275\265\033\357\273\016\010 \275\332-K=)\341,=\343A\014\275k\024\033\271\223N<=\210\202\022=i\261\002\275R\306\343\275\321\232\257<\334}1=\037\230\r<\271\226S=\320\332\231=\313\263\264<\271A\211=ET/\275\3537&\276\363\311\031\275|4H=$9o\272+\003)=\313n=\273}\345\210=\\\014Q<.\243\223=uir\275\327\273&\276\370st\274\002x\210=\215y\324\273\0027\254=\020Y\233=\177\334z\274\030e\212\275\220\204\\\275\236*\025<\013.;>\360|\262\2740\233F\274\204\236 \274\200\265\233:\231(\303\274?\304\341<M:\235\275\363\003\007\276\261K\324:\315\035&=;\246\235\275\2330\211=\206O\232\274,\201\271\275`\301\256=\257\306p<\273\205+\275\00664\276/\r.;\322c\213\275\003T\031>8\271\226\275\234\253\336=\013\240C\276\270)0=\"\206\030\275i%\201;\355zv=\276\322!\275\342o\314<\205\262@\275\303\254\272<\036.\001>\0040\035<\342\323V=\227O\274:\304Q\340\275\245\202\304=b\312\251\275\032>\255\275\345\333\275=\356\270,\274\354\213\326=(\214\320=\345^\316==\261\326\275\203\256;=(#l\276XY\016\275j\221\345<\177|\313<\235\321\025\275\324\352$<\200!\254\275\034c\2729\362o\200=#($\274\264\274\023</4\317\275a\364\033<\254\203\243<D\001\325\275y\267}\275Q\017f<~\023\004\276\017\234G\276ub\205;A^\017>\335\\\247=\375\026\025\275\271V\356\275\271L@\275k\212\377\274\013YI\275\304`\036>\006\236@=<\034\321\275\273!\036=*\256=\275\300\262\265=#\362\355<\\\250\266;\334n>=.\3707=D\312\265;\214J>>\250\273\247\274\267\365w\273S\202\005\275\260>`<\030\317\020\276VB\033\276F\307Z\275\336\245\014\274|t\217\273\215P\274=!\217Q=\256\277d\2759\201\233=\027=E=\202QR=\276!\207\2753\254\302=\\+\244=9S\225\275\324\026e>\025\037\001=\220\372$<v\326\217\275W\316\301=\203\231\324<7\035\t\276GT\343\274\313#\274<\321KX=?4\031\275\245x\234\275\260\031\361=\222\242\027<\341\037u=L\313\277<\005\223\211\275 \265\303=:.\323\274<\006\267\275\207\374\270\275\2155k=\260\356I\275\322Y\262\275\3129\207=\213o.<Q{\350\275\252\270\023\275\356S\241\275\213\345\256=\354\035c\275\236{\214=\333\356\001\275\263uq\273i\331\210<\'\360!<U2\373<\326\312\363=\346M*=\203\320\277\273\351\334\240\274\346\313\260\275&~\207\275\017\344\006\276\256\340\003=L\213\220\275t\336\313<\254\305\200\274\";1>\350\'A\274\001\0235\274l\220\244<U\311\007=\334+\031=T\264\202\275\230Q\244=\031V\241<\315a0=5p\255\274(\355\361=\271\245\002\275\356\032\036>\324\364\337\275q\034\315=\327\242\252=\'\235E\276\214\243\365\274\346*\023<2\025\230\275C\3668\275\346\242j=/\246\005>\306\351?\275\373r\002>\360j@=\274t\\=d\023\251=\211\317\265\275\330\311A;3\247\016;\332\303\310\275\245\217O=\301\352C=\316\235\363\2743\243\222\275\306\031\217=\261\002\222\275\301^\336=*d\020\275\303\345\332\274\256\240;=\215\373\204\274e\034\257\275B\341a\275z6\365<A\016\342\275\001\314l\275\252\013\210\275\r\r!=\372QE\274\343!\033\275c\006^;\224n\361\275\264\331\014\276\234\325\311=P\"\331\274y.\336<\013\240\242\274\253\016\232\275\360\216,=\360(\036\274\360\371\221\274\217\317@=\211W\353<\346eq\274\337e\362\274x+\342\275\227\355\214<((\001>\031\344\205=\315\335\317\275s\304\204=\255\024\026\275\247[@\275<\013\035=\363\205\260=\243\206\234<\204\n>\274\245\332B>\354\326\001\276;\375\202=]fD=\332\304N\276\017\2124=\330\222\320<!\220\246=\352\261\245<\265\201a\274\254\037b>V\273\312<\224\004\037\275\270\344\205=7V\241=Z\005q\275\330%\'>;\371\361\275\007\314\001\274z^\330\274\310\351\005>M\310.; |\306\275~\003\244=\331\203\026\275l%\220=\251\330<\274\233\020!\275>z\242;\2178D\276W\002\205\275\367\375\370<fL\007\275[\333\r>D\017\002\275\2111\">h\266\233=Ex\034=\000K?\273\360\3514=\321\3419\276\264#\265=\215E\267\275\270\316\341\274\013\263.\275(i&\276\213y\202=8\361\240=&;\322;\3471\r>\214\276\352=\210\231d=<\"\020\275\030\337\n\276\311\000\n=\001L\320\274\247\213\277\274\332\264\036=>\220\265=]}\374\275\263\327\216<\235*\246\274\223rj;{\376\316=(A\304=%\366\317;+\2214\275\353<\274\275\255X6\275\2079\277=+\006\304\275E\363\205=D%=\274\321%\213\274\200\227\352<\017\013\263=\033\352\317;,\n\360;1\324w=z\203Q<\222\330x\275\r\010\207=xS\325\275\201\336j=\016\344\305=\243\034+\276+\003\227<v\332\n=\344:(>\345M1\275UY\214\272\302@\"<\026b%=u.n=\235\003\270<\363\236\216=\210\303\215=\347?\021\274\331\264\216\275\221?\261=\302J4\275\317\227\341\274\261\n\303\274N,\037=o\354\245<\267z\266\275\215\216\244\275(\004\001\275<\370\007\276(\201V\275\n\367\"\275\356\311\200=z\200\t>/um\275\355\205\023<\002\254\310\275\332W\\=q\305.\274\377\232\264\275\211\315\244\273K8\252\275}\234m=\317B\024<\212c*>\025B\320:\222_i=\350\353N>\232j\216<\345n\361\273\0074\202\275\353\365\207\275\230\n\244= \374\023<\3400\331\274\355\031w\274\236\364A<5\332:\273\265\241\243=\310d\262\274\307\033m\275\032\354\240\275\250L8=7]\240;W+->X\263\033\276\031\303\217=\217\305\034<\375\t\333\275L\323\332=W\332{<\213\276N\275\2128\t=\241s\016=*\271\270=w\2702;\022\022e;\023\2303\274\300\006\n\276a\006\331\275\307{\217:\005\272\300;\\,\226\274\333m\026>\356{\272\274\302M%\275\203\367`<\223\204\266=e\024\305=`\r\">\314\207\034\275X\226H;\300\214\002\275K\325\213\274^pJ=pL\014\275\366)\037>\n\277\241\275[\245\025=\306`\331\275jE\313\275kI\367=bO\360<H\\R\275\366\343\334=\221\364g\274\275!W=\0160\207\275\306\320\321<w+\022\276\223\204\254\275?\303\023\275\206\362Z>1\300\230<Ua\353\275\215\350\023=\374\372\217=s\210\204\2756 t=[\354\242\274WFh=\370jz=\320\374\332=\316\271\224\274\220\233J:\327@\365\273\022\361\"<I\267\001>l\003*\276C{\003\276d\253\023=\212\245\321=6A+\276\031\001\017>\240\027==E\244\000\27635\252\275\000\215D\275\376X\'>\036\305\023\275\240\025R=\324\213\210=T\320\305\275\232\'7\275j5\343=GG\203=\022\314\340=Q\231\214\275\016\000\245\275\360\tJ\2755\022J\275\206\037\203\274\375<E\276\231\315\232\275\244Mp\275E\204\252\275[e\323;\333\314n\274\025\3353<\223\311\331\274[\346\352=q5g=\021\260H<#\300\021>!9+\275\367\021\365\274\022E\021\274\351\023*=\217$\245=`\233\353<\324\350\006=i\342l\273\0329\276\273|\322\022\276\260@\003=$[\r=X\r\236\275\224\032\204\276x+\027=\220\377\233\275)\275\256\274\177\250j\275\220n\264\275s!\240\275\342K\227=\206\221\205\275N\247\245\2757T\365<\244\035\343\274v\216\262=\260n\337=3\373\326=Q\301\246=#@\353\274\006\220]=\217\336\013\275\252\374\023\275&\351.\275YH\211\274\317\033\003\275\367\373\212=\246\026\246=\211\036\244\274\337;\221\274c\n\270\274\301y\000=M\300\261=\356\001\217<\237x9\275\207\245$\275\355\360\276=\275\001 \274\317Z-\273\342{a<\027V2=\t\240\261\275\275\000\244<\200L\'\275?d=>\204q\255=\335\317:\273\035\024\311\275?\337\304;u\263\024>^\032\313\275\200\371e\275\234\023\022=\261\2138\275\337\327\r\275\034#\037>%\007\310;\247F\371\275S\311 <\322\252\245\275\026\354\247\275o\221\236=\234\351\216<\350.\252\275\314/\341<\275\303U\274\036s\004=\327\201 \2745\232\266\275\226\351\300\275r`x\275\2448\r\274\257\244<\273\276t\217=\326\372==\033^\324<!\235\320=\250\255\177\275m\300\207<\202K\023=K8Z\275\213\376D\275+*-<\330\360\331\275\301h\370=\332\t\251\272\032 \360\274}\024\331<\240\333\350=\365\3144\273\205\222\224=\273\317\271\275\236\033R=\246\224\342\275\250\347\363\275-\327U\276\316\373\222\275\343\006\312<>G\217\275b\337\343\274\336\006%\276\200B\240\274;\271\200=\356&\014>\000i\216\275U\213,=t\327\325\275\312Y\305\275\230k\276\274\362\314\343<B\360w\275\322P\367\274\302\r\301\275)\253\016\275\177\214\216=\266\315\356=\"\274\312\274\014\254;=E\344\267=W\314\363\273?>\236<CtF>\222\t\035\276\2530\315=\243\320/=\352\231\301\275\246\213\302\275\340\371\250=\264F\021\275\275(\035\275\266*\367\274\325-\330\275\215FR\275\215i\032\276jkT\274#\236e\274\205\344\007\274\236\277\336=;q\254\274qo\031=\320&c=\375\t\331<\020r_\275\367\332\032\275\245 g=\317q\304\275\343\276t=\027\354\327\274\367\252\003>{\335\027\276i\311\036\275\224]\212\275Mf\357\275\330?^\276\211\252\226\274\014\367m=$\227a<\024\332D=\247\215\346\275:0\031\276\265m8\275\033\351\225\274py\250=\260\243\311=\362w\032\272~$q\274\207\232\030\275qN\200<]\323\334\274\031&c\276\320\271\014>^\372\202\275\201\016\211=4,\347\2755\266\262;c\261X\275\241\312\242\274\246F\261\274^\264\274=\254\366\277\275\241\316P<\226\257\263\274\263\376\323\274!\342\333=V*\023\275\007\245\003\275\353\352\202=\253+\350\272Tt\250<@\206\027\276\346\022\217\275\260\003\315\275\035\270\200=\321v\006=B\305\274<\354\317\257\275!\030-\275\246\334\201=\332\252\345\274\237y\031=\202\220[\274[\007\305=O\035\'\276\223\247&>0\237\005\275\177\240\333=\361\224\221\274I\236\367;G9\252\274?\331\232\275\362\032\270\274\266\346P<q\210\t\275j\261\303<Z{\n=\374\375\023\275\002z\024\276\210%\335\275q0\205\275\353\017A=\325\314\313\274U\020\232=\r}\203=y\341\031\275\201I7\274\200}\243\275\352\225!>\375\374\320<\n\0140\276J\273\362\274s\032\213<<0\214\275\326w\330<]\242\004>T\032I\2756\007\203=\326g\311=\301\256\330<\241\246\202=\375!\320=\220\277\247\274>\333\247=X<\221<\241GJ\276W`\034\276\'\337\013\275\353\272\014\274\206\273\255\275\354\202l\275\225w\022\275\335\305\031\2767\250\377\275\374\374f\275\010\371\357<\307\211]=D\342=\275\360[\262=\'\322\330\275F\233\253=$\310\020>\226uP=\207\307%=S\002\212=\233\021&=\265\034\321=\217j\203<\255\335\006\275\207p\211\275\204\270\305\274\351CD\275\242\330\354=\226\373\325\275\r<\">#\216\017\276\246\255\224;\312\370p=\307,\256=Z\227\347\275\021{\002>\235\225\264=F2\370\274\317\377\224=\357\260\222=\027 \270\275=\255$<\200\360`\275\231--\275\246\362\304=\035\t\207\274\246D\371\275\226G\247\274n\215\313=@\271\377<\276\033\310;B\257\274=4m?\276\374\201\002\276\375\2177\2741\374\005\276\254K\204=\336WE\273\204F\227:@\377\237\273;\326\341\274\271MW<\227\323\r=g\200\326\275\264\341\241=\216o\016\276\324\'\t\274\026H\013\275\032\245n\275\357\324-=p\215\003\275k\316^\275\314\260\303\274B\273\013\276u\367\232;U4\304\275S\177q=8\013@\274\336\377\363\274\242\345\017\275nEK\275;\031H=\335\325\020>\213\237\350=;\363\223\274\020\201\272\275\234\254\032\273\016\224.=@\022U;\'\2043>\367\341\200\275\247_\242\275\300\215\374=\177\232\246=$\341Y=+M^\275[\006q\275\354<\217\275\261\326T=\033\256\036\275%d\231=WX\032;\200\016\217\275K\204\213<\227\337\367;\316=\211\275\364T2\274Fr\006\275U\266\327\273\206\025\002\274A\204\200\275\377\325H\275O^\256=\016\256\\\275\305\030\303<H\024\303\274\237 \n>k\004\224;\006\327\211<,\255\345<\276\302\240\274=\376\314\275\372<Z\275\302&\017>o\242\013\275n\316*\275\307\254 >2hy=M4\355=\346:\001=\004V\364<V\263d=\277e\013\276$\315a\276#UC\275\225\3754=\256/$>\211~K=\010\236\206\275Rc\315\274&\301\234=\005\225\332\2757\3601\275\334O@<K\276\254\274:\360\242\274\357\313\345=\323\217\346=\212\032]\275yp\205;\022^C\275vr\020\275\010\036\212<\021c4=\210\310r=\0227,=\n~c=\200B\206=,\341B\276\310\264\356=<\314\274\274\267\373\332\274\006I\225\273\016\346\031\276\312\360p\274\221Y)\275\310\333\262=\0325\223={\255\322\27518\251\275\375|,=\226\222j\275z6K\275\005\352\224\275\336\357\252\275q\220\235\274P(\232\275\020\nT=\204\006\346=l\373\237\273\363\355\202=\037\016\r=`\260\201=\245:\334=\307\007\222=H\342\034\276\320\025\303={w\336\275\303\2666\275[\314\300=K\010\340\275\230F\'>X\207\005\274\326U\370<\203\020W=.Ms=\021\016\313\275\221\325\263=\013\350\221\275\320\241\264\275\034\367H=\231\263|=^\215\001\276/\036A=N\266\215\275\203\000\372\274\334\205\255=;\037E\275\214\356!<9\276V=9\025\346<\337\217\323\275\305\361\320=#\375\272:\202 \317\275\302\331j\275q\341\244<\253\342\202\275\354~\002\276\303\325\223\275\207\371K\274%U5>*=\326:\334b\307=\017~\303\275\n>K=\247I\264\275s\221\027\276\231;\007<\325Y\252=\0207\031=\322\212\312\2751\365\221=\353\3753=\334\310#\273m\305\333=\246\217\304\2750\272\303=/O\003\276\224s!\275\316\023_\272p\377\340<R\234\231<\261\252$\276L\037\025=H\303O\275\371\253\311=\014Fr<yd\252<\241H?<\367\246\226=}\317\363=v\372?\275t\364V=\276\226\246=\357\232\302\275\3528A<\034UT=\026\363\244\273\210\240\262\274W\016\306;/\240\276=\355{\313\275mG\321\275\271\306i\275bZ\347\275d\337\310\275\373\322\273\273{\366F\273\316\352\203\275\207\275\275\275\377\312\262\274S\213\267\272\372\251\264:\302\272\351=\357!}<\213`I\275\274\007\003>\205\302\214=>\374\277=#TY\275\302=\362=\375\021\254\275\205\246 =\334m\251=\377y\370\274*l\214\275\362\350\256=\016\010\275\275b\342\335\275\314\t\221=\334O\232\275\002+\227<\263]\235\274\026\005\025\276\324\270\"\275\005\301\227=\226\2538=g\200\316\274\t\317O<\373\017\031\275,\365\021>\304aN\275\215\271\232\275^?*\2744\230N\275\236\007\014\272\241\365I=\334\3736=\230\305\025=\334\236x\275\3673\263\275.\262M>!\272\r\276t\303\345\274\257\246\306=\333\256\324:Y\002b=\360B=>U\013\\\275\312\213F=Q\261\312\275\'\212\333<\253\033\214\275\213\216@\275\313\371\014>\333\302\037>\315\214[\276b\215\334;!\335\217=\204!4\275\300\372,>\375w\262\273\"\375\273\274\317\371\310\275L\206\216=\333\335\373=\004\031\317=\330FU=\352\217s=o\205\372=\021\360\364<A\320\306\274X\250\001\276Af^\274\240\242b\274\365\274H<8\324\037\276G\210\342=\023\356\250\273\225\316\342=~\226\311\275C\362\213=\3125t=\314\t\227<\266\217^\274JpN\275p\024\247\275p\233\260<\301\247c\275o\322\004>H\370`=\376\020\010\274\207\023r\275s\032\211=\246<\352\274H76=\271\260\036\275 \016P\275\343\254\037<M\n\001<\204\021?\276\300\204+>|D5\275\351Z\013\276\302\037\252\275\205\313\376\274\323Z\210=\360\302\253=\267\341\312;\243\241U\275\304\316\254=\377\257\217=:\352\347\275\007x\022=\346L\246;[\254b=\305\272\213\270\365X\355\274\346\006\214=[\374\332\275\256\207Y\275\276\222\266=\007L\225<t:\205=\201\367#=|\"\305\275\2561\243\275Z\034==)\320\300\2750\032\252\274\236s\023=]\2729\273\275j]<\021)\375=\340\222\037<Y\233R\275oX-\273R\216\321=\"\364\'\274\364\024Z=\006\003\347\275<\016\344\274\017\345\363\275\212\332\341\275\201\351\343<\026&\220\275TP\343=\274\034\273<f\337\246\273\321\223a=\030\204\225\2754a\237<\317\312L=\005\367D>\216\221Y=!\275\003>\340Q\037=*\262\035\275\350.\r=\351*\304\275.\341m=;\3238\274\271\247;>`\373\020\274\242\213\020\276W\267[\275\361\247\325<`\024\227\273\237\204\245<\007\236\314=\250}@\273\216H\316\274/0\016\276\333=\211<\rv\006\2751\0361\275\202_\200\275\2125\312={\310\254=\342\266q\275\262\273u\272W\006\033<\341\335?=1j\271\274vO\303<\324\035\223=\364\007\277=\3435\000=\305@\345\2753\343\334<\037\245J=\0069=<j\364\014\275\037T\252\274\0074\025>\243\023\230\274\335\000\003>2-}=gH\222\275L\316F<\205\356P\274\205\004\230\274\007\\\274\275}\353\357\275\256\005\245\275\203\240C=\311\314\217\275l\323\014>X\216)=\023\010\261\275\307\227\010\275F\241\246=\007\325\016=\205\002\267<-\265\034\275&\2667\275\355\361Z<\262\014\324\275\017B\244:fb\300<\0015\3319\356\226\356\275\272)\034=*,\214<\004\346\356\275\277\272\247=e\310\371\274H\304\333;\243O\r>:R\264=\231d\224=v\204j\275\337\302\203\275\226\323\217;\205\006R=[}\016\276\027\323\347\275Hv\234=\247\022\362\275`\247\274\275K\375v=w\200\022>p\025\036\275>\276\226=!W\276\275\271\221d\275\355\303\204\275rO\216\275rR\312=5:!\276\021\350\261<\nw\317;\036\343b:\356u\357\275re]\275`w\241\274\346\"\004>\023\273K=\030\373\267=j\036`\276\335\036\245\273\032A(=\335\205F\275\201\215\277<`I&:\244c\317\275U\303L\275i\350\212\274\213\362\030=x\232\226\275\326\232\032>xD\327<9\014\212\275\315\312\322;\002\203k=\221\250\347\274Ra^\275o\320J;4xi=8\363\274=\255\221\371\275c\031\336<\251\014d=3!\254=\324?\'<+?w\275\227?w>\233\353|=[\234r\276d\245\351=l\007j=\223\334\033>\277\322\237=F`\031\276\257e\270\274\030\333\227<]& =\330k\017\276o\356\353<\220#\334<W\330\350;\267\212a<\276\255\240=\0316\276\274\237F\316<\371\227w<\324\251\213\275\240\273\272<\203\325^\2756\324\247=OX:\275\355W\357<1\227\252\275(\207\212\274\354\327\245\275\374\\\002>\202\301\274=\243\353%\276?\350\250\274x\363\256=\317\324D\274\0233\030\276\021X8\275k\343[<5$e=\324\304d<QS\242\274\273\304\233\274!m\333=\365\0042=@\224g>\311\035C\276\365\222h\273:\033\336;U\330\224\274\340\250\025=Vd\005\275>\t\207=+\317\274\275%\302\200=Fk\256=&#\020\276;\343\027=\255\230\n\276\225Q%>m\'\220\274\201\271\353\275,\222\000\276\362\013\310=U\321\226=\375\217\013\274\337\306\375;\021\240\265=$_\215\274Tyz\275\034\355G\276C\226\363<\311-\336\275@\352(;\216\315\r\276\t\005*<\027\375\005=8\2122\272\251z,\275\345\343X<2_\021>\215\027?\276\n\214\370=\315\325\031>\010\366\327:7\304\002<\177\241\177<l]\206<\365\021g<\217\374\374\274\366\024\344<\306G\031>\002\n\360=;\342\337<\261\325h\275~\352\005>\361\321\215=\364XA=\356x\246=:\003y=\340\376>\272\365\255d=\006\374\030>Upi\275c\210\327\274$\246\255\274\365\265\240=\275\222\350<\316L\266=\346+0>\333`\202<\nI\203\274q\331c=f4\213\275}\374\225\275\021\246\005=sW7\275\212\302\274\275\021\207\255\275\372\354\206\274\004\232Y\275\357 \374\274\t\034P=\354\340\241\275\375\220\245\274v](=&e\336<!I\251<\276\033\004=\304ae\275\035\370F\274\037\221\220=\301\2669\275m\356j\275\233|\232\275\007N\255=\220\340f\275\367\204/=\243|\000>\006\007\246=\334\004\223=\177\333\326\274\222\225\261\272.\310\177=\205\251.\275\322\220\255\274\204\343\240=\230\313\303;\304S\013=ZI(<\322\326G\275V\254\262\274\360\320\271=\362\217\306</\200=\275\325\210\342\275\214\263\331=,H\035\275\223\377\024\276-\335\211\275\006\213\311<{\247\271\274\020\344\247=x\251\022\276\254cz\275\367\3455\2758$\010\276\023\317\275=\001\\\033=B3\347\274\351j\240\275B\273\316=\231\260\021=\021=\343\274\034\004\026=uo\036<\342\335\336=e,\200=!\237\314\275K#\265\275c\203\225=\260Y\372\274P\262j\275\320P\331<e]\234=\327\031\364=U\023P\274GB\'>\245h\346=o}\013\276\255$0<z\203\334<}\215\026=3\252\025\275\037N\301\273\363r\016\275\366\350Y\276\306\271\010\275\376\357\324\275\313\237\203<\212\220Y<\377\246\026\273\244=(=\304\020\235\275_S\035\275\007\325\207<\023\260Y\273:T7=n\313\306<\370c\211<\017\236\204<\"e\240\275\227\3601\276\224^Y\275\004\003\000\276\304\322P<\336L\231\2758\226\214\2752-\363<\177\261/\275\236\343N=\n\277N\275N\017\245\275(C\017=\342\226\004\276\272\272\306;\017\327\310==\275\027=K\250O<\325aT\2758\306\354=r\363\205<\260\010\233=M\345\036\276o\021@\275g\202\202\275[\270\261\275G\222_=|q\314\273\341fM\275\026B\030<\345\031\275;3l\\<\367\245\224=\000\300\"=\321c\030\2741\277\223\275\023%\254<\343g\010=\273\310\"\276\3332\005>+k/=\020\030\036\276\366E\263\275\203\022(>\354\017\326=\314W\'>V\247k\275Rl\001>\232\005\007>\245\020\230\275z\204\205=N\361\304\275\334\377g\275\300\217\302<K6\363\275\001-\263\275:\013,\2740\343\320<L\212\273=\364\315\216\272e8\273\275\274\177\263=\373e\351\273\237p\"\274\207Yf=\022\277l<0u1\275\021\036\022\276_\204\246\275d\246\317=YgE<\337\2367\275\204\301\316=J\333\323\275\346)V=\264Y5=\363\270\270\275\230u9>\354V\020\275_\020\356=&\252\254\275N\374%=\237\301\013=3\372\303\275$\024C\274B[\232=\242\270\226\2757~\207\2734\356\005\275\275{\031\275\001LG\274`y\247=s\362\366\275cR\342;\352\010\004=I\262k\275\332 \226=\361^\032=rQ\177;\347\203{\2759\376\364=\222\374\316=^\017!\274\254s\026\276x\203\336=\304\020[\275~\240\313\2756]\326=_P\013>\030\307\303\275\260\322};P\234n=\231c\245\275\'\262y\275M\356\001=\037\035\007\275W,\332=$|\306\275#\035c=\250\250@=\270P3=C$\007\272e\345\216\274v\203d=\274\374\024>\317\337e=4\362\323\275\242\300\204=\362s\237<C\277)>IZV=,\367\216:\241\325\242=o\215\332<\377\211\264=\216\236\275<\300\313.=D\0274=\306P,\275\203\240\016\275\226/\227\275\2373e=A\332\r\275\334\326\230\275P.C=\223\002#>4d\245\275\256\317y=Jr2\275\306\206\035\275\n\342\230=1\265\036>\355D6\275\232\367\271=\313!$>\226w\247\275\362\3471\275\0303\200\275\304aD\276\r\231\005\2761$V=\273\017\343=\037\247\320<(D\344=\016*3\275\276t\201=\303\237`;\302\2702<\356\322\021\276\350\215\200\275\244=o\275\262\014\002<Q,-=?\3237=\251\006f\274W5\333=\207y\216=\204\350\236<\332\215\343=\374\261\024>\336\000\261=\213\303\213=\203\002\243=\025J$\272\235\377\304\275Iz\277=\272\217\235\274\316\320!\275\253\216\312\2749\353\310\275y\006\234\275\016\300\276\275d\236\327=\333w\271\275\273\337C\275\026\201\030\276&\017\217=\341\366\034>S\225\355<\331\370\252=\016v\316<\014\"x\275\222\2713>\302\206\t\275j\023\201=\324\"]\274\327\377.\276\255H]<\256\"\250\274z\310)=\")\005\275\035\005\240\274A\212\313<\333/\216\274\020\246\r\274\201pJ=\271\333:\275\030i\314\274\363\321M\275f4\322\2748\344x>R\037z=N9\311;\300\224\360<\216\364\206=pn\002=\205x\t\276E\227\026\276\227\303\234=3(3\276l\260k\275\302\361L\275\336\033.<\t\326\273<\021P\000<\377\331I\273\236e\226=:^\026>\002?\224\274*\231\t>\003\316.\274\020,\243=\007=\177=a\017\330<u@.=\n/\353\275\375\375\243\275S\300H=;.D=[\370\352\273\301@x\275\306\242D\274iQ_\275\254\314\352\275\354C\016\276\362\260\215;\272\274\246<\037K\001\275\315\257\217=Q\'\320\275\2237\270\275\271%h\275\\+\301\275\332Y\252=\373I/\274\342\357\225=.\375\254<B\212\347\274\225\207\245=\r\265\220=\272fx=K\233\006\275\014\021\311\274$\2440=\002\317\213;\304\231\253\275\271\204\025=\305I\335;\253Q3>\373\'\335\2754^\333=g\270t\275\364v2\275\333\350\025=y\3506\275\374b\220=\324\252\317\274\324\243o\275\3065\206={\210M=pj\236=\313^\252=^N3>\341\375\221\275J}\227\275\017l.>z\307\201\276m5\217<\347\225K<\306\276J\275\035\271\276<\r\3510=w\331\004>\207:}\275x+\340=],\272<\352\325A=\377A\327\274*+0\275\223\322\225\275Y2\003\276K\336\254\275\341Fy\275\355\037\220<\366_\\=\016\204\347;\023\362\010\276\3520\023\275x\362L=VZH=\234E\304\274\205\022\000;\220\372\344\275Nd\232:Ic\026=\223\357\223=Yj(\275BH\010>\003\351\320\275k\'\021>\002\n\022=\323\261F\276=\027\334\275\274\241\332\275\026\272\241<\212\242\251\275_\357\245\275\307\177\270=\256\211\321\275\326\304\347\275\326\376\032\276=0\204\275\330\336t\275u\223\030=\210\362 \275F\306\216\275\271ru\274\010\216\006>\324\337\310=\3664\272=\303\270g\275{\257\223\275\256Z\203=\202\032\325=\347\364\322\274w\252L=~\017\017>\365\262\364;J;\367=\023\3556=\306\005\r\275\217p6<K\\\224\275\033M\026\274&\203\204=\0333\231<;\353v\274\030\322u=\340\006\252\274\277;\215=H\355u\275\371\325\242=\374\214\005>\010\231\372\274\203\262\341=\215\335\025\275\253<m\2748\243|=}\\@=\037\250\232=\336\034\337\273\327-\321=\315p\256=\217\337\001\271\330N\367<\035\262\232\275\222\323\223\275\344\226\364\275~\210\243=9\017\317=\252K\212\275/y\317\273/g\372\275\361N\025>\2243\245=\000\217U<\224d\007\276Gf\216\275\257\035<<?mU>H\341\250\275\326\350\225=\366}\211=$\326`\275\036\236;\275~\002\315<\313\310\301<\313/\311\275\237\r\036\275\027U\246<R\3108\273\032]\334\275\275\233y=\031]\313;\034\335s\275\340r$=4\347W=\333l\226\275\246!\373<\365\345p\274\263\224\276\275S\335\365\274\312\2636\274\306ka=\343\001)=\nlW<\343\244S\275_\204\000=\035\253g\274I\345\202\275\0348\367<8\350\314\275\227-P\275\260\303H<\352\334=\275\233\343\362:b\317l=T\363\316=\342\243N<\374\036\240=4\211E\274\202F#;\223^z\273u\t\t=P\377G=FG\353\275*\023\022=Q\205==\273\310\373=\352\302\217\275J\366\200=\261\330\240<\275iV=5\016\270<\275X\357\273\2059[=\352\014\215\275\004\266\304\275M\275\220=\034\3033<\2714\022\275\314\210}\275\226\251\t>v\361\260=\373\234\357\273x^\304\273n\276O\276\226\354\017>\323\236\256\275\344\304\366\275W\306\020=\377\262\307<i\370n<\367t\016\276\344\366\302<\232\037\301\275V\027G\274d4\213\275p\2525=\352w\003>\013\344\033\275\031\215\337<\361\315X=\320j\036=\303OD\273:[\215\275\020\217\273\275\327h\200=\233N0\275>\014\312=\006\004\342=G\332K<mu\032>\350(G;^\213a=\250_z=P\262\024=\030v\003>\241\204d=\372\013\241\2745<c=\031\023\256=W\313^\276\354kQ<c\240\317<r~\204=8\230\346<^/\234\275\333\351\004\275\245y!\273D|u<h\\\251\275\030\2206\2752S\200\274\013\273\210\274!a\211\275\005\367]=\306\252*\276R\"U\274\270\026\203\275(\343U\275\231c\305;\360\034\005=N\\y=3\351\364\2736\253\372=\256,\247\274\301\354{:\341\2716\275X\343\343=\357\016`=Y\203\005\275:\222\351\275\320\374\203\275!R\347<0\236\227\275\2633\233<Q\236&=\004\021\253\275@\001\356=%0\231=%^\262<4\371\200\2760\331 =3\362\235=u\016\r>\204\273\227\274\372\256j>c\322`\275a\202O=d\317&>M\337\254=\003}\351=\003\212\n=\2634/=\337\327\340<\247\272\334\274\361\354\304<\223\311p\275\025\363\013>\341\2331=Ld\366=\021\202\265\274\341\032*\275\337\277\304\275\"\373I\276\206q\254=\245\314\225=}5<\2757f\322=Tm\313<\320\263\214\275\272l\005\276K\005\014=\0263S\274\314Y\212=i^\n=\207\351\237\275\376\210\307\275\346\311z;\n\262\006\274\014:\311\275z\266\242<\222\247\026\276wpc=&S\300=\301&\266<\2457\210<U\216\331\275\350\3663\275\227\245\246<\200\246\213=\307N\263\275t\270z\2747\0301\275\232>7;\210\231\316\275%\036\001>\014?*\274y\362\321;\004\020\350=\360\3468=\362f\037=\027]\341\273\310B\202=\3636\2049\246\275\211=\036\0221<Sn\004>\273\220\232;j7\306\275\320W\221<Y\227\307=\000\314\267=PBU\275\001\021\276\274\214\371\306=\345e\252<\364\177 =g\200\177=/\310\366\274~\350\236;\234\226\364<\270\226\212=qx\032\275\030\264t\274\355Qd\275\342\210i:&4\">/\335\027>\351\237%\275\365\256\362\274\313\341\t\276\341\033*\276\027\372\310=\212_\007\276\205yB\275\303$\027\275\032\271-\275\355\0029\275\222\235\275\274>%\023\275\372\315\033\275c2\262\275\216q\001\276\345b\316=\227\252\230\275\250\314L\275\353b\271\273K\324 \275\327As\275\023~)\274,\220}=\220\254\251<\273\034\036\2759s\270=\002<\000>\257\027\247=\363c\350<(\252\254\275B\332\016\275L\223\213=)\352\277=zvF\275\311\234\365\275\375\221$\276\243\316\247\272\363e\326\274PmP\275t\264\003\276J\355\010\276\217Z`=9\"\247\275\023\326\003\275W\342\333<\340O+=\013\320\366\275\001\212A<\205\006\t\275\'oD\276}\255G\275\"t\256\275b\237J=\371\243\212\274\"\247\351=!\272{\275}\376\233=;\034\'\273\344(\304\275mD\350\273\306\341\324<\257\324}=\347m\211=\240C\211\273\221}5>i\340\202:\002A\226=5Te=l\357\214=\323\207\020=\272\031\215\275\251:\204=\231\265\277\275tL\026\274\247|{\275\024u\316=y\370%=cv\033=#\037\210=\253\370\001\276\311[\\=\n\343\245\275\332o\355\274\376\326:\275/$\222=\363\237,=\316b\365\274\034m\022\275\223\370\241=R\364|=\355u8=\201\233\360<\006\334s\275*\255\210=p=\"=\347\235>>\026\321\236\274\203\310&\276H6\263\275\027y\275\275\272\330h=\224}\271=\nY\230\275\0330\331\275M`\007\276\220^\246<t\257\">\340\274\017\276\306\005\373\275\013\254\230\274T\233\221\275\203B >c6\343<m\351\343=\375\211\207=\253\032\217\275\022\256\034=\351\372*\275u\214\017\276nK\'<P\335\025\275\300\036.\276SAi<c\270z=h%\250=\320cX\275 P\020\276\025\372\001\275\001\335]=\177\2636\275\207\372\332=\224\'\362=6\271\310\275\207a\214\273\341tk=:\231\200:\320\225\303\274\226[W\274s^\'\276\253\3627;j\230\002\2769H\200\275\370\323(\274\232i\217\275aE\313\275\241f\020\275:\204\333\2738>\220\273T\007\302\275Z\tB=\\\3051>\366r\342\275K\356\335\275`_\206\275\274\266\205\275K\241\301\275\210O\335=\243g\215\275Tc\014=\034W\004\276\313\213\306;\243\037\252=\354\247\021\276\n\267\006\275\312\352\020\275\321\206\003\274\367_\253=\252o,=\ta!\276\210\232\272=\215@\033=\313I\321=\363\022\200=F\013.\275\317P-\274t\207\243=\261\370\374;\247\326\367<\351\021\265;\"\250h=\234\354\365\274\3558\262<\222\230\305=\274\032F<\303\307\346=\255\203\316=\r\257\201=\204|\226=ANl\274\250y\221=\221\200\306\275\234\2132<\213.C\276\340\324\341\274|T\020\275\337\\\005>\242\266\345\275\353\035)>\346\016\237=]\177\213\275\260M\277<2\234J=\345J+=\313\352>>\311\202\360\274\303<\241\275\277=h=\330\324)<I\247\231\273f\234g\274\3224\200=RI2\273H\274\301\274\236A\210\275\350\225\200\275\303\245J\274L\255\'<\023\330\254\274F,\205\275\324~\362=\002\247g\274<\343\222\274Yv\363\274\005\301\312=\370\351\326=\247\222\243=\242\202\261\2752\341\n>\314\001\375\274>d\264\275\031\322Z\274S+\220;\320W~=@\323#\276\314y3=\243\324M\273\213\177\217=\024jH=\375\343\236\275b\023\243\274\372q\031>\323\341\036=\330\323\016\276@}\257\274\356r\262\275r\220\320=\374\010\032= \236Y=\300v\332<\2649\235<\361x\013\274\207\356\312\275i\177\377\275\256\003V\274rh\264<\351\244n\273>w\002=O\353\010>.\034\332\275\354\345#=si\332\275\272\357\317\275\2278\230\275\333\327\332\275lS\213=$\333\217\274\244a\241=?d\326;\232\014\346\275\357{\370\271\'-\267=\013\3514\2766\365\010\276H\267\013>/5i9\023S\201\275s\267\360< AG\275\030E\263\275}6|<Q\261E<b\364\303\2758\266\201;\320\036\203\275\013_\233\274\255<x\275\374\327\266\273\316\034(=\232n\271;\347\310R\274\372\244\316\274:\330\271=\247\016\334\275\002\377\276\275\022\355J\275}\354\344\273\337z\007\273\007\017F\275\236\204\224\275\327\'\261\275b\241\362<\354Z\t>\017\014v\274\2214\276=\306~\030\276\233\024\303\275\022\027\030=\032L\240\274Y!\005\275\037\221L=w\370\224\273P\211\007>\r\n\201\275\230\315Y=\313,z\275\036\3377\2761\271\355\275C\362\255\273!\305\303\274\203\311)=\257\231g\2754A\334=z\247\r>\020\334V=\374j\233<\302\242\204\274\354\355\373\275\356E\000\275\356\324\364=y\345\250=X\271\240\275\376\005j\2758[\204\274m1\026\275\t\257\266\2755?N\275Zz\037=\242v\315=\372\375\325<\373r\010\275\372\236\221=\316F\204;\025\275^<p\023,\274\256\3640=\262Y\026\275\336\276\374\275\270\271\242\274{\202\316<`/2=\rj\215\275\301\305c\2769\376\030\273CX\372=\27067\274\223kc=\254\010\235\274\354\201I\276\004\316\021\275\322\365\200\275\375\201\016\276$\251,\276?!\224\275\252\246\336\273.\347\200\275\332\311\203<\014\352\300\273\332\345\375=\277\373\274=q\263\346\275BD\315\2751\312;\275E3\355\274\204\247\263=\243\311\031>#\350\244\275\204\327\204\275 \351\371\274\2076\026\274\2459)\274\376\270^>\265e\264=\345\320\211\275D\201[=^\377M\274\347I\203\275\n\361\366\274\257Pu\275\376YD\275@\\\255\275m_\262<\016:J=\177\003\330<\324n\345\272\210\241\244=.\254-=a\330\233\275\236\035%\276\334\223\034=\246@\211\275\315\251\335\274^\005\277<\314\203V\275\364\245\'>p\306\224\275\005\330\236=\'\321\202=\213\340\211\275\3745p<Y};\274!\013\212=\337\257|\275\001Z}\274k\352\262=\373\025(=\252\274\227\275\275\263\245\274\030U\244=\014jy\275(\316*=\376y\212=U/\355\275\204%6=\310\255\302\275\013a\024>\r>F\275\211R\220<\013(\344\275\030|\322\275\336\307\241=\372\367\235=\326\026\350:\034\003\306\275\022\023;\275\233\311\325<\267S\210\275E\321\256=\322\2314\276\007\333!>\330d <\002\303\212\275\346\335\203\275E\300\260\275gw\004\276[\304\362<\277_H\275bf\377=\236\004\031\275c\377\007>\250\241I\276\332\274\377=\355\374\021\275\313\205G\275 \252\227\275\224`\334< \0069\274t\357\224\275\027\204\262\272\331Z\r\274\013\252\304<\266\312\244\275 :T\276\'\361@\275\315R%>hk\351\273\270J\022\275\376ph=v\027]\275%\236\026=\'\r\220=D\2067\275\243_\245=q\332m=\030\311\023\275\207\001\211=L\274\203\274]\323%\275\252\317G=\315\262~=\350%\274\275q\301e\275K\021\251\274\343^\375=d\001\265=\340\037\352\273\260J\272=i\262\303=\314\002R>\247\273\303\275Q\020\207<\300b\206\275\233#\251=z\252\037\276\321\t\244=i\316\226\275\230\272\007\276\367\372\345\274\030\303\323\275\300\270 \276\2348\032=\205.V\275\217\271c\275c\016\274\274\233%\271;)V0>\207\240\354;!0\226\275\3626\321\275\373\373\252\275\260\204\212= \225\277\274\367\350W<\327\243\303\274{D\214=j(\265=\351m\242\275\272+\311=\243 \206\275$\223\210\274\206_\305=MNy<y\250Y=S\302K\275\312 \300=\226\215p\274\374D}=\362\013\205=\322\315\364\274![c=\366z\032\276\034\367\265<\256\247\001\276\376\213\352=\222\261o\275\352\230#=N\025\237=\345\322\261<\302\014U=\315\343\250<\335|\373\274\333\232\035<\303\\\277\275\332h\023\275{7:=\327\270\255\275\'i\211\274\232^\226=\3211X<\272\252\211\275g\003\276<\265\306\000=8~#\276E,\314<\323\027\255=\027\364\350\275\244I\347\274\245\274\236\275\356fF>D\251\226\275rT}\275-\217\024=\260\017\366=\373\203\343; \260}=iU\234=7\257\202=\221?\273=\277j\327<Z\223\005>\301\211\251\275\342\254\300<7T\217=\221A\213\274\235-~<\211\302b\274J\224\t>\245\221\246=\032\0001\275\253\344%=d\234\014\276k\245\225\275\272\265\036=\350p\356=\224ca<[*\246\274 [\026=?\227\242=\372.\336\275\226*\253\274\300\035\264\270f\2148\275\016K\232\275\013FQ\275\334\225\333=\020~\217\274\2007\337=:\326[\274\352F\206\275wy\231;C?j\275f+7\274\227\302=\275x\035\n\276\t\225\363\274_!\253\274\2315^\274\353\204\362<\253\007\213\275\023\014\257=\304D\337=\225\231\233<D\036\"\274)\013\366\274f\037\304\275\2230\261\275#\007\323<1\264\252\275\254\335;\275\251E\013\275/\346\223\275,\356f\275\344\034\334;/\300h;di0\276SvN\275\001\250\307<\262\334\331=\273\305\261=\227A\005\275Q\232\307<\252HQ<X\226\032\275\373Z\245\275\304\366\013>\023\331\322=\267\214\020>7\252B\275\252\204\227=\031\rk\275\207\226\372<\240\315\205<\220\335\277\274\266@\274\275]\321a=V(\214=\211\006\343\275W\t\003\275Y\231\354\273Ez\037>r\200O\275w\274\267\275[\271\002\276B\321\257\2756\247S\273B\244\004\274\016\256\034>\2318\357\275\254\345X\2766oY;\035+\351\274\315\311\210=g4\303\275\354`\242\275\177\020\224=>r\232=\360o\016=L0\367\275[\002\337\275\013\207\222\274\260\227\254\275\r\267\227\275\220\341\247=5*\014\275\231\241\221=K\222\241\275a\344\210=Kw\000>\262\230\247\274J\204\320\275\337\232\275=\270\216\303;n\026\246\275\331\305\022=\236\3739>\210\024\204\275fV\351=rr\241=b\\ =\351\223\202\275PR^\275\021\027\274;\307\354]\275Q\025 =\221\037\320\275\"\001\261<\'h3>\207\000\206=\215\'{\275uMb\274E\367q<\031\334\303\273\017\365F=rJ\243<n\350\253=\376\031\275=\t.6>\362\2456\275fYX\275b\240\010=nD\022=\016\265z\275c\366\271\275F\\w\275\007\340\"<\345\321\025>\274\237\271\275\205j\303=\026\367\010\275\326\361\361;~W3=\200\033\316=\235H\016\273o\327,>\331\347\002\275\244\231\374=\361\030\316=9Q\265<gR\221<b\374\006\276\276O\254\274\005\263\200<2\373k\275P\025\210\274\027n@>\304>\316\275E\271\226\275l\201\266\275D(k=?\032\005=\275T2\276\3038\320<\345\336m\275v\344\006\276\377M\260\275D\275\324\274\322\316<\275rdq;}\257\200=\366|r<i$^\274P\365\006\275o\310\234\275\233\260\005=\340)\031<(u\347\275iy\261\274\026\270\301=\010\302\024=\351\201\270=\230\200\205<\rgZ\275\364\256\037=\244\340\301=3\224\026\275\327Y\014\276\201g\024\275\022 \356\272\\\321\003\276\007\244\r>\243j\360=\255P\327\274>D4=\340.t\275>\363\t<\026p\230<\373\322\246\275/\365\t>\314\214\006=Y\005\352;\201\275\327\275\361\036F=\004\325E\275\246K\327=\241q,=\232\3551\274\321\236\034\275\313l\276\275\30646>\311\2430>\021m\010\276L\2269>\265\320W=\210\272\377=\205\377\322<\2641\261\274\236\342\202\275\321\342p=x<6=\214d\317;\356\331B>pk\010<\246\004:<f\375\273=t|I;9\022 \275\024\223\234<x>\270=\272\203\211\275\301>\242\275\220\344x\274I\367)=_\"*=\244\3569\275\315c5>8\230\360\273}\300\037=u\317\245=O\014r<v\034=\275\0051G=\310\365\306=\335\0254=\2522P\275\344|N=\207&E>\256\236\213<\377\346\'\274\257\271\375\273\254\274\3119O\356\013>\370#\202<5Z3\275\200\261j=\341.\307\275G\370\n=G\247\306=X\263\010>-t\346=\261\347\232=\372\340\312=\325\343\371\2754\001\204<\213\267\020\276\326\007\233=\375\240G\275k\000\320\275C\"\213=`\367\260\271\312d\200\274\216&\266=D\352b=i9\020\275\'\007\376\274\004\016\323<\243\363\264\274\375B\345<A\300\241=\347\201\003=|\014\'\276\301\t;\275\020eA\274\200I\247=G\247\350\274\246\262\347\275`;\'\274R\271\315<\346\201\202=\317\341b=\312&\266<\'\257\242\275\005h\216\274\035\366\247\275\344\373\314\274\"\366\343\274xL\n>\307\356\305<\214\364\030\273U\261V\274\353M\226\275\302m\233\275\372%\210<\253b\034\276b\377\232;s7<\275<\232\303=\020W\245<\275K\252\275qw\002>j\334\235\274\233>\007\276g\020\036>~\224Q=\376]\344=;\303\204=\350\265(=\001\3029=V\026x\275\212\004\005\274\350\025O\274\027F\354=\007\327)\275\022\332\235=\013\226\252=S\317\t\276T\203\021=\261\210\214\274\245\210\024=\314\244\235\2757\200\267<R\006\200=\342\026\245\275\222:H=\304\244\305\274T\354\027\276\270c#= \216=\276oa\220\275\307M\207=\260\343)\275\350\305a\275\367\316\216\275/\205v<\221\312\004=\0147\327=\273@h;I\251\374=\340r\245\274z&\240<\224\276==\r#2\275\260\214\365=\021\362E\276F(,\276p\014\242\275}\310\014\275ve\201\273f\311:\275\373\035\235\275\322)\255=\317\360\n\276\000&h;\016\277\374\275Y\340\222\275\234\035V=_\360\206;\037\210f\273\025\014\305\273\354\206\204=,\006h\275\254\360U=h\263V\273\252y\367=\2331\221<\3355\243\275\277\252\321\275\r*W\275\037z\220;:\027p=\332`\007;\347\304N=fg\355\275\001\204\006>\272\237V<\3149\242=\255xW\275\037l\275\275\344\023s<\365\r\251<y\257c\275\277\342m\275\312$\314\275n\024/==\302\204=\006\2134\276it\345<R\272\032>\002\305\324<\263L\303=\374\354\303\274fb\256=\357=\025>\273]-=\247\037[:\315\273\264=\273T|\275\306+\203=J\2623\276\223\333!=\233\344#\275\037\030\346\275\260\255\203\274\203KC=\243\345\r=\036\216\275\275\357+!\2764\373!>\010\206\030\275t\237s:\213e\233\275+1\346=\2409\246=X\374\002=\313]\263\275\301\314h=BI\373<*\272\214\275\215\310\273\2753\021\343<Ap\320\274A\225Q=`\027\017\274\334s\357=\033\002\200=\325\007S=(p\311\275\031\205\265\275\321M\320\275}\371\014>,//>}\010\355\274\244\356\311;L\271$\276\370\233\177\275\37536\275\2413\225=\251\037\265=B7\021>q\331Y=:\371\320\274v\232\307<sg?\275\t\223d={\322\247\275\000\323L=\333\373\307=\037\260\363<\334\312\027\276\367-\306\273\362\263\261=\254\273\336<kMj:X \035\274\261\025\256;\274\256\203=W\030\023>1\333.\276l\245\314=E\255\363<\rEi=\304\357T\275k\240L=\023P\361\275\234\025\213=\000\021\005<\322\321\314<\345\212\322\274\336QD;Q4\266\275\245/\352\274\035\265z<\367\232\225=`G\273=L^\017\275,=O=\275\220\265\275\022\221\270<M\201\256\275\204Y\004\275\355\031\341\275\375SI\273\276\000\304=\255\207\010\275\027\204\342\275\311x\277<\020\t\375\275\242\242\210<\252w\206\275R\247:=\005\3045\274\314\365r\275\360\235\325<\224/R\275\377\003\212=\363\017\360\275\265\377C=\005\227\317\274\335\320\247=S\003\005=^\352 \276\206\272z\275\301w\271<Uld\275\013V\020=uSj\275P\363\264=PI\200=\006\247J\274\332\314\271\274\365&\251\275\022\320\247<4\nr\273\247\033\242\275e\273I>\031<\311\275\301\341\005\274\037\305s=g\262\262\275}\340\003\273\005\226R=z7\036\274zy\353\275\214/3=\252m\227\275\247\307\243<V:\356<\335FS=\260\036\204\274\254\353\006\276K\371\230=\211n\301\274\332\242F>\270\200\203=j\252\353\275B\216\030\274\022\250\356\273 \001\212\275:1h=\356\277\272\274\333\262$\275^\244\217=\211A\225\275?\370\224:\007i\375\274\n\325\016=\001\355\336=f\316\202=`\365V=\007kz\274\341<J\275\241\303\326<\276\215\346<Z\301\306\2747\022\274=\ni\346;o\263>=\374\363\312\275\340\001\201=\215\307\232\275\270\230\250<\242_\001=8\311\014\276\327/\257\275\367\325\n\274 \372\334<\033e\203=\353^\360=qL\367\274I7\266\275*\016i\275\017\n\340\274\016\326\227=\277Q\301<i$\t<S.\276=5[3\275fc\242=l\2024\276=@b=\242\371\200\274\2302O\275\370[\244=+R\210<\236\004$=\0142\270=k$\213=E\233\202\275:\302\340\275\314\330\177\275\206\355W\276\230\200]=\003&\017\275N`\377=\274c\031>\305\220\311<\337P\353\275\313\243\034\275E\255\333=\322\251\303\275\221\200X=}-\344=[\237\217\275\250k\022>\245\017\013\276R\224\017=\021~\353=%\025+\274\364\017\235\275\256\267\326;\216\313\333\275\230\306\203=`w\273=\007\366\363\274@0\366=\177\274\265\275~\377\337\274`(&\275\266\325\350\274X9?=\223\262\202\275\353\273\327\275VL\000\275\003\335\224\275=\335\271=B!5=*\321\206=\255Z\302\274\326\337\213<hC\376\275d\027\315<\363\327\233=\343\236\213\274\330\020\t=\2511\022>R\340\033>\340y\312\274;C\354\273q\354\025\275\245\261\372<\360\247\260\275\241I:=\332G,=\\\313\377\275\245\032v=AT\252=\351\"I\275uz\327\275\225\305l\276\210\302C\276\274VC\275cW\001\275\356\273\377\273Nx\016\275\021@\214\275#\2340\275L56=\017e\362;\242\236\366;\267\r_\274\004\237\266<a\027\303=\3031}\275V 7=\355\354\016:G\367\222=w}\235=\266\030\220\274M\n\220=iSC=\237\246\010=57\020=\231\266\317<\246\327\223\275\027>T\275\347\204\'\275\222\252\"=mO\302\275\231\245;\274 \235\315=\321\261\026>\375+\222<\177\355\030\276\316\026\240\273\325\227\201\276\375%\332=n\024\233\274\312j\271\273xT0\271\\l\001\276\271\303_\275\306\367]\275\351\207\001=\357b\232=\311\'\314\275\374\027\'<\022\313\310\275\213K\317;\246b\201<\270\353F\275\352y5\276*\333\236<\025\233L\275\t\357\357\275\276\324\256\275#\335\032\275J\r\000\276_\271\323</\026\027>\"\373\233\275\374!\201=\035S\000>@\036\213<Zm\377;v\322,=\265\212\247\273e\222\372\275B\236/\275\267k\336<CYX\275\250\217]\275\364\022<\276U4\021\274\317<\346=*S\260=\263\300\211;\315\017-=D\352\'=\243#/=\007\305\010>\335\343\327\275\344\245\253\274 T]\276\374\261\270\273{\022\231=b^==*G&\276\301ZG=\366\366;\275s\305w\275\365CM\275J=`<\2754z\275\340L\351\275\347\255U\275\202\303\"\274\"|\213:\006:u=PL\025\2753E$\275\226E\231=\365\"\006=XQ~\275\262\307s<+\313\215\275n\026\010\276\334\236\236=\272q\246;\324.c=\276by<\177\234#=\002\247w\275\374X\320:Za\222<D\232x=\262#\224\2750\315k=\227\223\003:\223T\303\275\226l:=\214RB\274\007\323p<\272\372\225\275\351J\213\275\356\266\266\273\243\304\345=/\033\231\275\034\216\013\276Q\366Q\275@N\356\275\3517#>\324\213\234\275\321@9\274\241hX>\251\205\034=>\315\240\274\221o%\276\371\330\220\275n\367\357=:\271\317<\037r\002>\373k\252\275\215\355o\273\000y\337\275\200\r\365=JpI=4.6=%V\241\274M\254\223=\2418\261\274\346\247Q\275\254\031\260\275\373\244\350=\010R\234\275\266\026\375\275\254&\264\275\220U\273\272\263\024\001<\024\317\273=\215^\202=z\336\224\274\002F\210\275\252\241\267\275\264%0\275\235;\276\275\237\2175=\250B\232<\021\230h\275dm\321=Aw\243<I\'\227\275\354\271\001\2741\022\227\275\037\217\315\274o\344M<O^Q=MH\013\275[N\330\275\364\032;=&$\325=\242\244\205=\324\277\347\275\252<4\275\260\272B\275\270\271\225\275\321\371\302\274\rmm=r\272\336=\212\023\357\274\027\373\374<\346\212\206=\261\305\255=\321l\030\275\217[\\\274$\276%>o \304\273\333\255\211\275\236-\264\274 ~\037\275&L\303\275\262G\307=\357\213f\275\255\373W\274K\371\252=\371\036\357<\212\240\247\275%4\217=hK\277\275*\366\032=a\210\024<\204%\273=\342\311}\275\014\025\242=\346\326)\275/\267\017\276\354\273\252\2756\032\257\275\315b\330<\256\204\331\274PC\314\275\263N\037\273\203\001\211=\224\356\016=d{\216=-\203Y\275\013G\250<\255\315\371=\216k\030\275\377:\002\276c\366z>\275\223\262<\321\034,><?4=s\335\221\275\246\257\364\275\320\245(\275{\245\3069\023[A\275aT;=&\306\003\275\314Z\367<E;r\275\014\341\317\275\000E9=p\324/=\025\342\355<v\336\2739\254\334\001\274\214\235\207=\361o\346=\217g\267\275\017M3>\326\017\340\275y\300\221=\250\341\321\274\200\035J\275/\363\031;5\277\301\275\210\001\"=\213\010\021\276 o\335:U\335\356=}\340L\275Cb\266=\363\267\024<\225,\321=\333\340\314\275\341\337\342;\002\203\350\274\373.\024\275oq\233\275\0247\272;1\210B=2y\022\276\246\372\254<\234\024\253<\233\345\273=d\222\340\275\377\376\215\275&\244H\275\263\314\352=t\036/\275\200\002\363<\203\034\305\275q\260L=3|\'\276?%\306\274\342l\241<\372a\002>i\251\027\276\300\276\033=z\251\244\275\357\215%\274.z\242\275\217\030D\275%\3664\276{\214%\275\272\364\247=E`X=\205\236/\275D\320\002>\320\343\237\275\033g;=\315s\374\275\234\363\237\273sV\327=\232:\365\275\tla\275\364P\343;c\366\037>\'m\t\276=\001\317\275\010U\005\275\307\"\247<40\027\276\300nx\275\362\213\247=``\006=\262g\241\275\347F\360;\342\204\211<\302\371\027=\341kJ\274W\374$\276\344\354\000\274[\034\350=R3E\275\203\364\217=p\327\'=%\234R\275\256\365\003;7_\216=\223Q\352\273\277\230c=mr\023\275{\010\'>\341B\242<e#\013<xRi\275\323\314\005\275\252\010\006\276\354t\342\275f\374\255=\364\004\343=!\231u\273]p\313\274\2747:\275\247\276w\275\022\212!\275k\227H\275Z\225\325\274\236F/>\354\3478=\200\334\260=\271^\344=\242\023>\275\357\030\021\276:\251\232\275HHE\276\341U\232\274\212g\220\275#\014\241\274J\312X=\002!\244\275\374\'<\275R\377\320=_\205\256\275)[v\274\214N(\276PD\316=\370f\270\275\"\004\352\274\327\3461=ORy=\315~\336\275[\'\207\275\212n5\2761\327\'\274\222\347\270;\247\302\026\276S\244G\274]6<\275\316\233\364=\331\3630=\253/A\2756~\214\275\215\251\254=mb^\274\235\212d<\033\333\251\275\202\343\027\275\346DQ\275\263m\213;\203\007\207\274g{\005=(\n\231\274f\305\372;\346,X>\214\001,=\034\227\340;\240&\201\275$m\256=\335w\355=\302[\005\276(f=>\035\237(6\341O>>\232\272\245\275\207`\240<\000\3311\276\216h\202=4\033\233\275\212\260\373<Q\002\";f\221F\275LG\226=\261M\227=\334;\004\275Q\210<=V\245\372\274\306\251C\276o]\004\275G\216A\2756\023\324<\'\357\005>\t\013\034=S\362m=\242\022\347\275`)\004=\376\021p\273\272\310\365\274\177\004\002\275Jd\233\274%\030\204=h\207\313=\025K\230<\3757B\275@\315K<\323\311\362\274\232\217\323\275E\334\023\275\035\016\332<e\236-=\261\005\274=\0160G=/\325\020\276\021~7\275\362&\'\2764\t\017>#\332\025>b7\221=\351\346\010=\245\211\316\275to\260=\223\353\372\275G\221\236=\317WL\274\324U2=\"\007\246<\3057\271<\337\242\210=>\366\r\275\341\322c\273\305\314A=\210\226\342<\027`b=W\'\213\275\211\272M<\357X\354=\320>\263<\003>\236<\320\363\234\275\355\013\277<\013n\377=\265\361C\274\214K-\275A\342\017=\202\326\010\275\273#u<\233\340B=\203\036\262\275@\212\037\275\303\232W<\202;\257\274ph\263=*\3046\275\004\201x\275\245+\026\276\327\021\241\274\010\212u\273\260\240<\2751\373\030\276\203\373\206=\376\030\375\273\016Gg=\366\020?\275!\223\022\275C\236\200\275\267\003\266<|N)<\276*\210=[\020]\275\315%\343\272\3210\202\275\206\323\002\276\025\236%=m:\316=\330_\375\275\23200\273\257N\227\274\332\024\354=\302v\026=Rb\317\275\276\277b\275Y\230\t>\316\025\270\275\022\007\377=Q*\010\275\\r\021=$=%\275\007@j\274\263\373\260\275C\325\204\273\240\206\215=Z;\241\274\325\325[<\366\361\223\275\250.\254=\335\274=\275\254)\n\276I\377\305\275;\001\224\275\352\211\222\274\206f\001\276)9\244\275q:p=]:\262\275\316\334#<\377\277\334\275:R\335\2748_\221<\346\016\201\275\346{\005\274\323\013\250\274\n<\224\274i:M\275\256\200.=\321@\356=;\303\002\274\262?\177=\006e1>\216\255\344\275n\304\302\274\344\347\270<\314\271\017>\004VV;\377\006.=E\265\204\272\310)\377\275\373\353\306\275\201\356S=\372X\"\275\014A\215=\027C\207\2754@;=\r.8>\n\r\243=\377\204\010>Zi\214\2753`\340\2753X\231=\311\244A\272w\206\306\274\006\366+>\236\204\205=\356\374\264<\224\377\307\275\340\340\353=\370w\205\273\206\335\276\2757\355!>\235a\224\275t!\347=\256\347\202=\263c\245=\201+\207=\336`\016\275{\016\307=t\023\n\275\343\356\302\2742\203\024\275\333\323\r<}\341M\275\256\363\213=\353?\326<\244\244i=2Q@>S\037\034\276\365\314!<\247\261\331\275.\265r\275A\236<\275\\\026\263=G*\275\274r\036\225\275\242\347\343\274[\322\352\275\3445\000\276n\371A\275\227kP<\306B\374\274`O$\275t\260\021>\014\032\216=\037\307#=x~\356\274\374@\210=\273k\207=\177\226r<\342\301\017>\2311\341<Z\207n>\016\214\032\275\364\234\353\274\3364\312\275#\233\321\275\246.\314\275\330\242\355=\305|\014>\370\260Z\275\024\326\004=\211\000\007=ml]=\322\364\003=\2106\230=qsm=g\271\005\274F\221O\275\020,i<\230\221\272=9\327\362\273\276\372\367\273[\026\330<\350\033)=f\323\255\275\006=&=~(\211\275\347?\227\274\377\311\246=3\307\010=\333\353\214\274\032b\276=kQ)\275\367/\262=\274\032\030\276\217d\374\273U\374\337=\312t\017\276\3676\357\274>\377\317<(\220q<o\030\321\275Z\300\372=\270\271\241\275\241:@=\201\221\023\276 \010-\275\250ke\275w\025\026\275D\311\034\2755\256E\276\341h_\275\365\222\304\275\200\204\233<\2176@\275\246\2300\275\377\314\260=c\003\370=\202\252S\274\275\004M\275\005~\355\2747\254\034=\327\005\365\274\266\273\362\275Wx\317\275\236\363\204\275\362hP<O\002\341=\240\001\035>\275\321\007>}\214D=EL\356\273\373\007\264\274\th\262<)\267\256=E\261\016\276\266_\021\274\345\033\203=\274\202\275\275\320F\252\274\250\322$\276\010G\201\275%\371\220=p\243\376:\232*O=\254\317\037=\213s\362\273y\255D<\027\036\223\275\224\007\312=\302i[=\247M\255\271\211\341\035>\327c\017\276q\373\020>\324\221\273\274\333|\345\275\2672q<\341\263\217=\272\000\242=\310(0=\'\225\301<\n\307\325\275P\3024=\364\304\014>\203\270\226\275\231\346\241\273@\272>=\244\2454\275I\374\233\275x!\226=\014\327\237\274R[7<\307\223\275\273\'\341\362\274d\017\241=\346\300\303<\206f/=\307\007\206<\230\036u\275\342N%=\331M\214\275\351\"W\273,\255\313<\300\364K=-LA\275\277I\237<c5\337\272\'\225\207=\365[1=\211\234|\275\030\220\235<8\236\274=|\244+\275\355\256$<\235\367@=~\207\313<\237\'\217;\3730\343\274\"W\257\275\256\r\007\276\252P\266=70:>\226Nm\275-\024\260\275\252U>=\264\232y=\022\r\335=M$E\276\365\027L=\201\303\350=\347a\300\274\374\370\347=\275\237!<\316\263\002\276\275oA\276V\3343>\246\274\010=\022^\261=v\037\266=\325\016\213<v\230D\2754\200G=6\013\\=\365S\201\274\306\306\020<\301j;=\223\3735\276\332\372\301\274U9\334<{\365k=\344\225\013=\301\367\370<\235\004\225=\251\340T=\302*\224<\306A.\276\017\235\261=\327\204\307<\276\264\n\276dz.=\341\027\334\274uwD\275$c\270\274t]\001\276h\237\271\274\360\265\230=\026\037\n<\026\006\253\275e\200\234=\221\033\255\275\027:\320\272`*q\275\214\202S=O\324\037>\300\021\213\275\324\007\351;\336\374x=r\303\306\275\252\351\003=>\275g>R\367\242<\215T#\275\031\335\333\275C\022\223=\304\273\005\273S\352\310\275\234\376\000>\2039\363\275\256\2024=\033\252\226=I%\303\275#\203l<c\247\234=\021\266\314\2752\212\000\276\373\244\247<{\207\217\275\032\014\307\271b[\030\275KU\213=IF\355;\004\033\305\275y\237\003=\260\321\322;)\325x=]nk<i\256\270\275S\024\275\275\204\2335>\235\226\334=0\":\275\\wO\275\236\017p=\034\t\237=v\236a=\036\245>\275\310k\020\276k\253\355;\335\025\177\275\367\261\345<\275+E= \235V<e\216\202<I\324\245=\211\000\303\2758\244\222\274\337`\226;u5\303\275_P\000<\224,\207\275J`\013\275\324.<<*\r\371\275\351\277\034=I\t\315=\n\000\t\276\327O\023=s\2556\275\004\331\265<\r:\212<c\341\264\275\353\\\234\275\335q\250=E\250\364;\250\306\"\276\325\n\235\275\302\366\026\276\266\335\212=\332\335\235<\r!\304<O\252+<B@\226</\302U=\240T\251\2734\325\303<n.n\275\372~\r>\364\213\225\275\345\217\300\275\237\364\000\275\353w\271\275B#\217<\316\357\234=\004\376C\275\033\342\365=i\244\">q\303h\275\244\251\353=\320?\266\2752 \271=*E(\276\324G\021\276\270\222\275\275<\250\273\274%f\205=\253\207\317\273\373FU\275\361\254\343\275\275\010\257=e\325\033\276\366`\324\274\3563@>\211\231\202=\336\257\305\274\260\343\324<\307T\222\275\275a*\2753X\207<\223\322\367<@\333\216\275\210\336\356;\371\234\014\275\347W\274\274\340\032\260=%\031\354<\262\303\273\275\207l\030=z\006*\275FF\">\336y\347<\225\006\236=4\261\001\276\206\321\225=\035\226\255\275OS}= ;\004\276\300\325\321\275`$\232<#\031\240;M\200\314=\0331\326\275\014\270\016\274\355o\223<\231\350\305\273~\220\201=Y\330\211=\001\203$\275\354\3640<^u\303=,cR=*\201\307\275\312\351\277\275\354\010\030<{\017\334=\330)0>R\026\241\272\342;\001\273\332Q\264<\303\220\010>\356\207V\275\014N-\274\364e\355=?\200\340=\317`\020;8\271c=w\262c\275\223\205\360;`\356\251=L\341M\274q\251.=\235\225l\271\014\376\267\275\213\034I\276\337\210\233\273lfk\274>\354\025<e\242\"\274\003d\223\274\010\017V\273\327\224A<\317\233\333<\324\007<<\206\271M=\356L\266\2753\251\005\2760Y\010>\364\270\376=\014\300\341\272\0018\211=I$\310\275\373l\256=\332\231U\276\242\305G\275\224Z\002=VO6\275\320=f=\260\341+\275\r$C=*\"\350\275Y\312\242=\330\347\357;\264\202\212=\301\207k=)\037\262\275v\244\244=\0171\243\274\364\n\240\275X1\372=\237L)=\377`@>\002\003(\275\234\377\227=\316\205\370\274\031(.\276\016\226\3439\0269W\273\277\352\303=\360\310\r\275\267\300$<+6\361\275\363\261\360=\'\225\317\274\351\302A\275\340(E=`u\363<\2225\007=D \267:\034\300d<-\236\206\272-\256~=\213\332\302\275\315\275d=\023L\332<s\254\023>1\311\352:<\002\270\275d\220\326\275\017S\320\275\2335\263\2740YT>\323\260\252\275\223O\352<c\n\331\275\2411;\2756\2151\275\315\222\231=\032\243\317=o\373(\2745\033\001>/[\276:\236c\002=#\025b\275\356\260`\274\3708\217<\234g\340=\013\264\'\276\212`)\275[\231\220=DM\335;=D\200=\214\367\315=TC\036>\201\2273>\007(\256\275\005|#\275\233\313\327=kbN=1\301\264;5\306>\275n\261\225=1\373\225\274\243\031T=\251\366r\2711\306\235=\310\3058=\215I\255\2751\215\223\275\365\270\035\275\234\220\247\274\000\237\021\274)n?\276\262\343\216\275\177\365T\274%=d\275l\273\357<\007\256\024=\355l\001=\257.\t\276*\203\221=\006\237\343<\025\002\344\275\324M<\275\033m\272<\223\255J\275\350\273[<\272x\037<\353\241b\2742U+\275\030g8=d\346\262\275!H\362=\326\214 =-\254w\275\\\225\271<\035\177\320\275\356b\254<\241\276\305<(\261\376=\334;\312=\207lB\276\374f\343;\271\242H=U\360\244\2754z\026\274t\310\366<\321$L<\035B\200\275\246\306\264\275\275{\261\2747\007\273\275\235\234\270<\330\317P=\320\272\233<{:\227\275\315\017\224=r\257M=\"\222\242=\"\323Q=7{W\275P\363\036=\330$*<\253:\210=\3111\263\274\242\030\302\275\222\315X=\024\356\323;Nk*>\373\260\266\275\356P==K\305*\274{1\030=x\366\233\273K\370\025\276&V\217\274\275\035s\275B\247\215=\252\tm\275sO\306\275\316\336\r\275I\250 >\331S\261=\350\324\215\275\244\206\244\275\320\224\321\275\231\341C\275\033Z\004;\201\215\301\275\273\301(>\255<\016\274\300?\000\275\324\262\217\275\027\237W<\220\203\201\275\376\340\203\275\254Q1\275\343\323F\275\'\245\235={\350\000\276\201\265\377;\"\031\370;Aa\207\275=\260\367=\034\026f\275\356\350\021>\027=M\275:\001\313=\034k\035\276\325i\242\275O\310\212<\303\037\344\274:\177C\274\377\234I\275VM\262\275\203wo=C\360\"=GK8\275IfP\274\274\3709>\370\221\307\275M\371\020\274\307?e\275\212c\317<}\205\310\275\034\036\360\2758\257J=\270w\327\275\035\330\022\276D\021\237\275L\033\312\275\300\0358\275D\312\303=b\n\342\275=w&\275\036|a<y\000\\\275o\345o=7\276\212<]\240\310\274b\237\227<:g\224\275\266\3367\276\276\200>\275\311w\237\274+/\263=\213\211\302\275\306\217\237\275\033\303\001=\275Q\344\274\222e\214=\307&{\275C\373\255\275\177G\256=\372l6\275\377\247\203\275c\037\266\275\270\037\216\272\355u\037=~&\031\275\307`\302=>n\270\274\200\305\350<4\325Z\276\314D\006=4\317\016=E\'\273\273_\0007\275\343\332*\274L\010\373=`c\301\275\235\266\307=\262H\013=z\331\255;!\322\234\275\231\326==\312\362\235\274\252\021\002\275\315\306\222\274\343\251\'\275\020\260(>\344*\027\276\337A\027\274\350\210\345\273lN\373\272\350\350:=\t\277Q=B\315\006=^\363\037>\212\215\315=@\307\223=\356\351\205>\304\331\r=\304~\273=\016\360z\275\342\n\200=.\360\327=\302\034m\275\347,\210\275\245\331\223=u\362\n\275\2777\302\273\323Wj=g\300?>\365\315\232=\340\236\331\273j\367\212=\211\221\026>D(\303\274V_==w\321`\275\342\273\360\275v\230U\274\037S\021>\226\244\361=\024\356\236\275\275$\006=h\274\233\2759]\331\274>\001\222:*\026n\275>\275`\274J\335\021\276>\250R;Y\332\311=\203\323q\275\247\004O>6\353<\275\275\311\261\273\035\300\312\273\324\0204\275-\223%\276@\200\r\275W!\215<\215\307L=Z\224&\274\344U\r=\006\244k=\223\026\342=\277H=\275\211\362\265=g\350q<om`\275\252\037\303=\324\350\247\275\025\304\362\274\3650\264\274sar<\201\3400=\037\274\244=\031B\353<\210&7<\276v\257=\222\272\001\276\317k:\275\3163\274\275\'\244f=o4\357\273A\371\267\274\214`\013\275~>\334<l\260C=a\035y=\010\334\001>:\037f\274\221\202\231\275\237 d\275`0^=-\346\201\275\024N\273<\361u\247\275\204\215\002>U\2011\274* \222=\337\370<>Q\356d;Y\020\327=a\036\033\275\007\315\211=+\356\035\275!\2452\275\346\006\232=\022\326\214\275^r\327\275y\243\324=\360bu\275\201\366\272\274\3076\2449OU\016=\207\326B\274I\242J>(\030\220\274\026\373I=^\323\020>h\317G>@\307b<\261\343\020=ou\r\276\251\017K=mh\267<\303\356\205\274byf\275\177\344\306\274\261\301\002>\304K\225\273d\216\023\275\000\272i<\313I\025\2768\240\036\275\305~\227=X\333\230<J,\032>W\032\231\275Q\350&=\250\007\002\275\272\302\267=\013xX<\316\366\357<^R\006>\2402\307=1\301\213\274\344\343#\275Vx%=\326\2268\276\262qc\275\217\333\'\274\233RG\275\264\024\331\274G\n\353\274Em\302\275=*\224\273\251\256\036>\261\004\314=\022*\025=,S\246=0\355\036<\307\333\031\274(\306\236\275+\201\006<\177\341\263\275\227\255+=\005\003\252\275\021b\226\274\200el\274\257{\004\2766\306\226<Q\261\357=\344\227R\276`:\017\276\013S\033=\216O\235\275\001]\375\274\227\020\211\275\236\334+\275@\225\262\275\037\241\026=cUR;\204\332\257\275\035o\245\2733\253\212\274\030\261\276\274\203q\017\276\020\036\333\274\205\273\336\275\314\343.\275=\343\033>J\312\346\275\212\263\206\275\322A\203==\032\030\275\027U6\276\203\232\200\274qOA\274e\250\313:\204\270_<*vk\2755[\362\274\233\367\235\275\231\334c=\257v\034\274\276\320\026<\016\252]\275\031\335\005\276V#\363=zr\n\276~V\301\274\303y\356=5\201\216<\004g\367=\322\221\271<u\235S\275\303\263\251=\336\345\303=\201\361l=!\177\313=IX\245\274\267\254\320\275\221\311\244\275\264\207[=$\374\243\275\003\224b<\277[\331<p0\002\274\242^P=\315]?\274\340\274\301\274\336Q&\275\241\277\237=##\243<\356B\331=\346..\274d\025x\275\211\r\237\275\314\255W=E?\260\274\346\343V;{\210I\276\350\376\267\274\001Z\227\275\345c\315=a\236\214=\265\257\314<i\014i\276\001\254\037\276TE\247=\177T\370=\323\026\236;\262\232\007=.\005\036\274\306\203I\273$w\352\275\220\\\035=6[\322<8\347\256\274\r\213\210\275F\300\'\276\010f\025>ZC^=^\242v=Y\336\326\274\327\326\246=\251G\255=:_\000>\211\007\230\275\310\274\375=\353\313 =\247\317\034\274O/\"=L4N:.\275\247\275\r\226\216\274\nU\223<\327-c\275Y6\000\274Vx\347=\347z\270\273\360\304\240\273\304\306\001=\350M,=\215^\206\275\237\212\017\276\277\006[=\347\323\234\275\034\352\310\275\272\004\302:\277\031\020=\363KF\275\377\300<>w\304W=\223u\001<\320\200\032>\310\002U=\216 q=\207{\315=K\326\005\275SB\321\275\227\274D=\306\001\033>\242\177\324\274 \3045=\222.\277\2749NI=Q\2535=\300\254W\275\250\344\326<\211\001\224=\263\307\304<\221w\n\276\305M\247=p\006\343\273\266\373\342\275pM\247\275\220\272\002>t\256\357\275\342\234\311=EA\203=\330\036\224\275\301\031\025=w\3709<-#\010\276I\253\n\275\303\364H\273\351I\200\274\360\200\243<m\031\215<)\345V=\321\342\376<\303\256\202=\303e\241<\362\204\3118\306=\033\275\247\354\013\276\021\010\225=\177\355\t\276\027\013@\274G\343\026>\004\361Q<\347\256\321;7E\n\275\"\002\267=\224\3744>^\212\367=\1774\254\275p{\305\275\243|\235\275\320\017\207\274\342\272\222:~/\365\275\206u)\275\351\252\367<\301\217\346\275\275t\225=\000\034\277;\272\360\037>\262\216/>+S\034<\265!c=Z\304\036\275\301@d\275\250\020\342\275R\377\373\274\356\375N>\342f\030>\337\002\263\274\350\021\342<\366Q\372\274\013jG\274\341.\247\275\003o\372\2757\232\333= \013\207=2\371%\275\023U\237=^\204i\2741F\234\275\315\032\276\275\\\307\364<\211\311\224\275\300\'\251=\247\356M<G%\270<U\351t\273\024\256\264=\352\3149=\343\316z\275\0206\261<E\301c;\377\007\270=\267\372\233\2756\365\237=ecW=\"\225\227=X-\307<H\353(\276\2328\250\274+F\265=\272R\221=t\313\321=\331S\313\275\345?\331<!\006\004\273e#\000>\321\322\216=-\366s\273|V\035>\352\201\240=d\260\251=\216*9=\205\276)\276\005O\203\275\216D\034\275\263B^\274\335\254\027>\243\306\345\275\0270\032=\276\372\t\276\232\331?\273\326!#\275!\320&=d;\267<\247\346\326<\322J\357<\024,\244\275\235\205\271<rW\260\275\264\312\350\275;\262\325\274$\215T>\027w\276=\214\254\247=>\354\346\275)\036\377;\226*\261=h\346\261\275\273\037\310\274\315\275\256\275\345\204[\275{Y^\275 \223\257<VZ\000<4\313x\275\017\230\255=j\035\345=\241\225\026\276K%\271=\314<n<\314fX=\321\001.\274\246\344m\275\027Y\354<\254c\222=\177\242\246\275\361\353\354<\356\\\212\274\322\303\350<9\313\240\275\365\247$=d\035\214=\301\320\017=}Lw\275y/\036\276\250J4\275V\262\016<\"\253\334=aT\247<\270\r\232\275\230\247w\274z\223\242\275e\263\020\2764Z\300\275\222\026\016\275\026\"\300=\"s\210<\001\200\256\274\020\356\275=\017c\226=\260\366\035=w\252\032=\324-b=o)\311\274\270\274U\2743R\262\27520\033\275QS\006=\202BL= ZH>JI\276\275\321\322\006\276un)>\027\367~\275\2303D<LS\254<\271\326\352\274\360\307\006>\254\303\227=\372\317\254\273\374\\\203=9X\314\274g0\335=G\202U\275I1\271\273\017\350\200=\310\240\255=\251\332\025\275\016\320\272<|\347\266<L\252*=\023@}<.N\025\276\025c.>\036\030\"\274d[K=\243\202\270\274c\323\230\274Y>\275=\237\274\237=\364^\236\273\252 \t\276\235\353\277=\246l\t>\376f\306<0\306\'=\377\371\035\276!2\002\276S\260\013>\023=e\275\357\312;=c\226r\274%\323`=m\376\010\276\246oL\275oP\241=\277?\361<\025J\242\275j\363\033>\222\307n=\016-N\275o\352~\275\235:\225\275\323\266h=\343\252\n=\025\303\364<\351^\234\275%\236\214\275\323\304\336\274\367\365\254\275\203\340\275\274dd\034=\265I\367;\263c\217=\r\310F=U\325\003=n\221\327;\366\226z=\361\274\006=\'>\274<j\014\335\274\270\300^\275\2071\251=`\213\361=\372\021\324\274\357^\206=\320I\306=\027]\264\275nc\257=\345. =\2300\340=\310:}=F\264\256\275[>O=RK\262\275b\243\265=\356\306&\275\232\265\253\274\337\337\271=\2304\205:\317\206\002>q\006\242=bG\374\274\2241\005\275\243Vk=}`8\274\375v\323\274\006\334\030>\272~\357<\236\265\013\275a\357\204<\213&\217;\031\036M\275 \210\031\274!\3321\276\270f8\274M\362\001>:\202\325=\000V\321\275-b\327=\337\001[=7\254\275=4\037\014\275\272y\332\274\352[\n>\3415\314=\344\253\226=\007\224\232<\320}\r>\255\351\344=\245\tb\275\177\367\307=\307\265\234=\231\307\033>H\332E\276d\020u\274jl\327\274~v\307=\204\245P\275\031\006\031\275\3716%\276\255\360\014\275-\325\277=\362\252\026\274P\315\307\275u\241\022;q3\325\275\277A\314<#\214\241\275\003V\273<#\033\305=\010Wo=\337u\002>\025\212\325;R\014\257=?\372\231\275]4\311<\373Uf=\217\262\210<\211\025\314\275\016\251\273\275\26268\274H\323\221=w\022\215\274zL\342\275B%\202;\310\'2=\233\3158<\312s\222<\014u\221\275\265SJ=\233\023h\275<P \274\212\020C\275\301j]=\014Bw=\036\352`\274\"\";>\234\262\232\275\257\244\225<)\212\203=\212\2779\275\021\211\r<\321x)>\\p\213\275\206@\300=~\372a<=\334\366\275\342\260\020>k\356\035=v\344\257\275\001\255\027\274\3055\211\275\322u\237\275S\211\264=\266\275O\275\331\357\205\275&.`\275\312x\217=?|@=\016\224J\275f\257\351=7\017\220=d@\r=)J\343\274\'\'~\275\364\200\300=C\340(=\341R\034=2\321\030\276\274\213v=\354\312\356\275\356\032\230\275:\247*\274\241\205v\275\300w\264=\261\365\224\274u\201\272\274p\0009>p\262\300\275\"D\220=\226\016\005>C\"\"\275\205\007U\275\0356\021>\267\337)=|[\272:\361Q\271<\312\000\266\275\322\025^\274\316\246\302\275s*\027\273\223\345I<T\350&\274\271\301\316=8|\302;G\327L\275\016?\346=\321k\222=\271\274L=m\312\221=\000k+>\252\024L=+\033;\274\307b\032\2768?i=\272\307/\275\214A\225\275\2132\344=\321\306\322\275<\350\242\274\272\214\314=\245a*\275\244\267\202\275T%\003=\322e\231=\020\373(\276\002\347\r>E\006\002\276\316,\242\275\255\354\004\276\037A/\275\030r1\275\263\346k\275\236\224n=\367\004~=\272\351\032<\234\312\014\275!\245\214\275\306\016\203\274\257\355==d\334\234\275$\343\356\274\324x\306\274C\017\3618=\274\230=h=&=\021-\244;\344\361z\275\372x|\275-;\274\273\362\244\222\275\356\316W\275\\]\225=Z\010\367=/<\\=\364\026j\275\210\036F\275\250\376\004\276$\241\323\274\2459(\275\207\037\224=\021?\020>\225\377\037\275\307\240\327\275\344\377L=\343\353t\2759\240H=\013O\211<4T\212\275\373\227\223=\263R\005=\322\035\310=b\215\324;V\373\025\276\254\324\202\275m\206\254=\021\364\343=A3\340\275z\241{=\250u\254\275u3\254=MR\374;\360\360\373<t\373l\275\272A\376;\373\013\255=\023$\236\275Cy\001=c\325\210\275\253\263\351<\273?\244\275(a\212\274\267X;\276\030\372-=YQ\273=\242o\240=\341\325\217=\323\"\204\275\216\222\370=\364y\235=1k\220<}\317\356=\210\003Y>\000\tp\273\234\202\317\275\2340\206=\275ni:P\221\314\274W;\360\2751r\023<\270\223\304\274\001\217\010>\005;J\276$\326\353\274a9\357\272Mo\205\275\006\271\374=i\371\016\275!\035A=\330\007w\275!\365\306\275\21375=\337\202\354;X\253E\275\2371j\273\200\367:<V\313\013\274\341\372\365=\023\023\003=_:\274<\352\373T\274\027\261c\275IM\001>#%\026\276\251^I=|\274\347\275\307!\354\274\220\3562>\0261m=y\246T=\022v\266\275\007\374\374<Ng#=}C\234\274X\021A=s\016\324\275q\034<\275,\202\335\273o\274\250;\332\320\241\275\357\221\261=|\351^=7\263\264=\002\004\201=\340\300\217\275\372|\245=\317\212\035\275\343\271h\274S\263i=\370\005\223:-LI<z\272\315\274\342Ox<;\227$=N;[=P\230\r\275\370\215Z\275u\301\001:\340D\271\274\317\236\024\275\264n\033\275cg\177=\274\003\210\274\027mg\275#NW=\320\367\331\275\347t\236=\020\234i\276\341\246\200=\250\323\354\273\000O\315\274It\271\274\016\223\316\274hD&\276\246J|\274\211@\323;\202\364\006=\314\002\264=\177\016+<Y\326\335<\021\2762>\224\266?=I\361\365<\205p\373=b\nv=Vg\221\276\006S\\\274\246tV=\253P8=\266\241\325\274\224\367i=\216\245\244\274\000\225A\274\261\363a\275g)\"\276<\242\317\274U\230\243=\200\3120\274\004\246\025=\220?\245\273l\013\033=|=\215<\030,\001\276\336\206\003\276?\241\t\275\007\250\256\274>\'\221\274\210\372\327\274\323\363\321\274\252\0329\274\232\302\006\275\304\353X=1\002\206\275.\326\235=p\343W\275\265K\244<1s\271\275\217gz=e\270\005>\266\n\247=\327\322\027\2758^\257\275\354\200\036\275\205\341F\275H\275\200=\236\340$\276\274>\223=\231/\002>\222\033U=\002\314\347=\2343\352=\322\236\002>G\377\272=A\370\221;\267z\024>{*\360<\336(\212<\006A\t\275\034\205\246=\347&\374\275\361\177\313;\336\302\350\275\"\267\201\274(n\337<\267l\021=x\312\222=U\343\222=tN\232=\003&G\275e\271\215=\024\371\321=\363\203\240=\002\230\332\272\305\237\355=\241\264\030\276\275\214V=Lx\031=\316\236\023=qyF\276\007\004\361=\330\352\240<\363\231\'=\266\216`\276\217o\002>\377\321\325\275\321t\223\275\263\324a=O\306\036=\372\0261\275\371\302\254\273\361/\034\276\317\020!\276\376p\276\275\'.\261\275\207\024\300=\237\300\307\275\217\252\263\275+\222\022=\017F\223\275f i\274.\215\314<c\332G<\202 H\274!\2228>\227\361\372\273\035\372\244=\030\'[=]\367\004>\204\010\364\273\215\350`<\t\034\004\276Ne\257=\323\026\211=\213\326\365=\276\356g\275\351v\'=\374h!\275!\377\343=\202\242\203<z\205\007>1:^<\350\032\272=B\275l\275\263\240q=#\3703=\232\"\013\275jd\305\275\357\310\333\274|\031\326\275B\374\354:\r\342\350\275%\361\371\275\310d\227=B\030\313=\001{\034\275\254\365\003\276\311\247\376\274\232\214\307=\030\234\001=$\265G=\216w\233\275\224\234\244\274\205\000N\273\213\352J\274\3344\027=\035\227\006=\261EB;Y\027\217\274\352\212\352<1\226\034\275\013d\014=u\351(\275KQ\240\275\372\247<\276\305J\267\275\r\r9<\316\366\314;\216\235\037=\r7\271=]d\031\276\237\003\301=\2121\261\275\235\342\345\275<\363q\275\023\030\232=\333\234*=\236\235\214\275!\354\205=+o\355=\264\352\336<<\215\343<\276\262\030\275\300\370\337\275\204\222\231=\277\337\251\273I\325<=\322L\362\274,\240E>3\275\225=\31443>U \220=\2223\376\274\2374\002<\211O\376<\nf\277=0\262\352=\331<\347\273d\024\337\274~\035\234\275\013x\275=h\272\223\275K\023d\274P\245-=X\214y\275ep\377\275\017Yi=>p\230=d\250\014>\004\020\325\274\363\tl\276\345\363r=/\377\0349\301j\003>\032\334\361=\253\232\215\275\014\013\">\361\307\206=\373Z\010>9<\026<\016\317\204=f`J\275\335,c<\302\220\311\273\302\361\024\275\215\225\335\275@\204\265\275\031[\004=f/\317\273\235_\276=\242\010\222\275\025\267\306\275\262n2\275Q\223\031<\002\007>\275J\266\204\275x\177\272\274\217\004J<\310\371\210;\340\365@\275:\300\235;}Z\034=\310%\232\274\016~[=Zd\036\274\371\002\251=Lp\262\275W\236\331\275\375\312*>\254\220\275\275\036\263\247:\373\020)\273=.\304\275\373J\317\274\215n\237<-\365\034\275\013\337\350=\023\031\302\274\240\236T\275G\027\001\274"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 136543
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
