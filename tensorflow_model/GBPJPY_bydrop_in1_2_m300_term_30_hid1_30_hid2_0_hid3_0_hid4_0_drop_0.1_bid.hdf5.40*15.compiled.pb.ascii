node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6057623
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "V\014k\275\330o\032\276\233?N\275\377\316\210\275\337~[\275\376Z\354\274\001\330\261\274i\367\331\273q~\341\274\225\030M=Z\026\032\275\020\323\333\274\266m\226=`\311\201\274\331\024\265\275ex\212\275\023\010\244\275L\353o\274\005\250\254\275t\333L\275C\371\360\275\303\344\256<@\200\223<n\203b\275\324p\004>\207#\316;\007\271\262=\2218\330;\275S\221:\260@\332=\234\312A\275o`;<\2560\216\274\340v\202\274p\207,=x}Y\2752\207\360\275oT\021\276h\330\023>\257\324A\274\242\020t\274\016\377\350\275\230P\317\275\231/C>\026\207\025=\354_\023\276\221\342\210=\234&\236\2758\255\007\276\361?h=\327\334\177\275n\t\257\275sr\240\275\272\316:=\341\2026;\376;\211\275\223Q\224\275\361\233\214=!_\231<\353\302\266\275\312\302\000<\253[\035\274L\251S=\021N\023\275\357\370\005\274H\007\342<\3665\321=K\2324\275G\324\337=\327@C=\260\202\036\275\375\310\357=\370\264\340=\276\021\222\275\003\024?<\241\252\230<\235\016\377\274\302Lg=8\035*\275\t\243Z=?S\264=\351\224P>Qh =/\324\326=l\030\014>Q7\030=\271\0071\275\374\320\032\276\316\251\305\275\010\025\261>\003\340\233=W\027\025>\231\351\217\274F\271\020\276F\343\363\275\031\022\261\275\206\330=\275\271j\221\273\036\220\262=g>m\272^\200\243\276Xj\365\275\2437b>\244B\311<\351\362\323=\005\275\362<u%p=4\204\335\275\314V\334=\326\303#=K\217\245\275\004I3\276\202l3=\202\002\365\274\010\033\257\274_\220*\275\263)\235<\355\350\037=\277l\357\275P\265\020\275<\023\302<\225\357e>E\331w<Xhw\275\262E\263\273_\266\261=q\301\207\275\366c$\276\357\341\033>\001\377\274=\023\"\213=\375\t\020=T\243Y\273)\206\312\275*\231C\275\217G\244\275\212%\001\276\211\201\272=&\325\226\275\241\362V>%\035\001<\2544u\275y\260\023=\2460\225<)Z\020\276\211xe\272[\002\231\274\023\346F<\226s\205\275J%\373\275Q\023\243=\244\"W=\217m\255\272\237\354\311=\227\222$>\302\212^\275\361\262\274\273\366ps\275w*\235\275\202y)\275\"O\330<}\277\317<\260\332N\275\025!K\275\364t\035\276u\256!\273CF\263=`?\210\275w\0079\275GQ`\273\223\341\302\275\266\211[\275\240\3735=\031\373\023=)\036<\276q7\233=\020{_\276\361I\347<\236\227\315;\200\211 \276\265\225\326=\002\311I\274\374I\021=\353W\314<\037\003d\275Z\2529>\376\246\234\275+\331\241=\224\035\n\274}Z0>(\344\342<\254\263\305=\261K\022>\006\220\022>!\254e\275\342\344\343=d\251\205\275d\314\001>!\302A\276\250Xi\2752g\202=\261\3675=\345t\025=\221\203b\275\n\352\206\274\377\023\341\275L\010P\275\214\303\206\275Om\220=\334_\024>\361\2670\275\214\322\227\274\337\307y\275L\037\373\274\310~\373=\237\366\236=\334ZA>D\350\177\274D\000\361\274\3254\200<\355n\023>B\213t=\224\270\022\274\220\037\014=\225\024J\274\260\230\224\275\241&\334\275\257\203\335\275\036\014\036=\311\276\212\275u\006\000\276\022-\364=Lw\220<\030\r>\276\321\203\322\275\007\220,=\267d\301=\333\250\344\275\227\037\206\275=\0231\275\331\214\203=X\337-\274qx\244\275\217/e\275N\214k\275BR\367;\216\031<\275m\361\007\275\350a\241<\372\313,\275\326\373\234\274Z\233>=z\243v<|A\n\275F\010\035;%\3411\276\3775\004\276\"_\003\276\017\007K=\017w\261\275\223\371\376\275\027C\232\274\020\207\221>\r\324\002\276\036\275\000>kh\213=\2737\020\275\034\225Y\276\246\'\255=\252^\016<\340\013\250\275\247Q\204\275\340aI\275\347\031 >\325]\023\275\"e(>\365\006\016\276\316\255o\275\3170\307=\\ \272<\316J\217\274\302c\346<\035\007\005\275\235\253\317\275\224\312E;\215\022~=\306\253\302=\013\320\252\275\227\200<=\376*\236=5P\305=,k\014\275\304\203\251\275\212;\225\274\305\004\025\275]9\254=P\374\007=\261\315\240\273\332\324\272=\233\034(=\357r\300\275\245\271\030>*zn=kYP\275\336\252\234<\010\303B\275\276\354==\207\360\343\275/\365v\275\340$\013=\025\\\273\272\"\373\226=X\301\001\276\346\006v>p\333\213\275\231\230p=z`G>9!\002\276i*\224\274q\365\252\275>\273\007>\262C4\276\251\236\272\275\356[\016\275\326\330\367\275E]8>\321\360x\275QC\304=\254:\200=\224\205\254<\267+d<H\254Z;\360\326/<\004\t\210=:\211#>J+K=\262\"\203\275\027\313\r=K\215\274=\341\022\253;/\231\273<A/2=\301i\313;\226\300\244\275\010u\241=\345Bv\275M0\313\275\\#\354\275\351rz<Ba=>\207\006`\274\240&\300\275\233\374\022<M\342\r\276|\352\002\276\\\315q=H\020\250\275;GB=\304\303\216=\016U\030\276c\007\220\275\200\002q\275<\\\007\274#p\323=\233,\254\275nP\363\273\257\351~=\014\252~=7|\353\275\363)O=:\231\250:\037]\241=\335\364\025\275\302\237\024\274YF\342=\225\272\215<\352\312\035=qz|>\265G\273\275\374C\300=\222\367a\275\330\214\275=H\013\376=\034\"\330\2756\010>=\321\353\273=\366\345\267\275C/4\276\323\267.=L\202\356<\266\320\225\275\023\362K\274\375\206\214=\202\344\255=M\342.=\256Y\374\275=\224\216\275\3039\237=^\276k\275\036\314|\275]\361\210=L\364\177\275\237\326\263\275\313Y[\275\370\277\261\275\201\376\033\275\003~\244\2745pK=\346\021v\272\364B\243<\337\221\241<\235\210\253\274\264\262\244=G\261\257=\177;\035=\375v}\274\2653\226\275\376\323\211\273\341\033\002=O\225\004\275\226\225A>&Xg<\333w\316<>\356\003\273\347o\265\275\n{O=_p\331=\242\357O\275\232\335\032=L_\254;\351\325\223=\256\210q;\334\017\256<\224|W\276\246\nF\275\300\274\240=\333\377\323<[\010l=\250\276\023=w\312\210\274\252\223\254\275\244{\345\275OnT\275x\310\024>.\303r\275\365\315^>@\355%=\264\271J\275\266\005\370=\216\235\006\274\037\213\031=f\203\023\275\350\001\023\276!\010\355:\222+\244=\026\t\341\275 \260\371\274~\354\037=*\327c\276?\0268>X\177\n>\344\216\227=0\035\266=\270\3000>$\230\207\276\246V\227=\353\237\337<\313l\255\274\n\032Z=\210\001\036>C\n\256\2757\037\226\275x\335\254=\345\332\340\273\036\320u=\003\2575\276\304\257U\276\177\356?\274b\303%\274\223\213\035>\002\025\306=\004b7\276\302 ?\276\257p*=\324\275&\275\252\274\003>r\342%>`\037\031<\341\257\027\275\220U(<mw\226=o\200\035\275j\363\003\276\300\2623\275\327+\007>\233\316\340\275\363\003\222\275\244iI=+\335\035=\241\255e>\350\220\025\276\005\310\243\275\274\242!=\314\363^=5\262\321\275\371\033\243=\251\207\226\275\376}\010>\341VU:\313<6\276\330\247\334\275>1\331\275\301$\223\275\200\334\313\275\217_\2626\361a\031={\213\260\274bZ_\275V\237\257\274\264\233\263<i\255%\276\\\213\204=\177\376\256\274xlY\272@p\366\275h\033\332<\273\035\336=\034\004\226\274<\005!;\370\306$<-\010\235=X[\'=\376)\214=\340H\247\2753\344\031>\024\t\022<y\212\177\275J\201{\274WD\260=e\303\220\275h\242!<\345\334\001\2752\006\253\274\033,*=\367\025\221=\202\006\276\275z]\002\276\001\301?=\340\311\027\276\265\334\233=\2409\256\273\000\351\020\275\351M\'\276\301\004\207=\370[1\276y~\312=\224\374\247\275\365+\344\274\332\324\233\274\251\2078\274=\314\221\275o7\323=\3546N=*\\\346<\267{\020=Z`\310\2748\372#\2758\017\202\275V\353%\276\241\225D\275\337\3173\274\305\226\n>\364\251\367=\323\237\340=i\363\177=\272\304\201\275\215\3411\274`\337\004>\301\361\373\275\3233\344\275\201\027-\276,\270\213\275\270\355w=\366C >b\353w\275\240\210\034\275l2\t>|_m<a*\205\275\367{\003>$b?=x\003\223<v\350\342\275\335I\243\274\371\240\032\275m\000\006\276\342-/>\267\310\202=\371R\034>^\243\243=\305\374\217\276h\027\013\276\232v\201\275\236\3569\275S,\007=\n\204\237<\005\215\324\275\216\251\005\275\315\314\035>\234c\233\275\315%\330\275\021\202\344\274y\325\202=qm\"\276?\312\246=zK\360\275\230b\034>\\,i\275\2027\001\275r\377U=i\244\242\273#Y\335\274\362\027\316<}\221\250<\006\340\373<\230\330\334;&\277\201=W\023\300:\355\367\221<C\2025\276\034\324\326\2754*\251<\2222;\274\325\221:=MR\375<\230\362[>l\312\037>\346\275\207<u\263\005\276\207\213\371\275d(\310=\226\257\222\275\325i\214\275\014\266g\275V\225\216\275\373\031\301=\031\217I\275\245|\031\275r\214t\275dZ\370=8\350\377=\372\202g\275Wn\322\274;\357\263=\3517\316=n\363\036\275\317\036\004\274\330\001\004>\016\rn\275\370\270\301=1\022+>\201\2366<M\302\374</!\246\275\354\224\177=\340R\242\274)\001X=\002l\341<\271\302\'=.\233\313\274\320\241\331\274\260\024$\2745\020\247<)U9=\235\270H:l\230\233=\273\340\023=]%-=u=}<%\013l>(\364v=\016\360\320<-U\256\274H\":<~\332\331=\"\233\027>4\345\301=\233w\307\274*\274\370;\016\377\302\275)\312\265<~\343A=\206\177<\275\361\265p\275D\327\314\275\\\224\214>\357\375J>\221\372\001\274\344\021\315\275\317$J\275~&\'\275A\260>\276\205\323\375\275HM\270\275b\313\003\276<H\340\273P\036\261<\212\361\351<\272\216~\275\350o\020\275w\010\200\274\336\216\351<\263z\367\2754\334Y\275JI!=!o\231;\373\002\327\274\024\335D>`\274\021\276\207\362\226\275D\326\350<v\366\006\276b\250\362\274+/\370\274)\223\210=\025\343\277\275\203\342\177=&.\307=\026\205x=\352v\316<{\260\330\275r\033X=7\230\014>{t+>\303\351\307\2746/\327=$q\336<.\327H\275;5\226=;\325\252=\217\256\375\275\025\252\037\276\372R\000>W\004K\276\036\250\377\275\323\246\255=q\224\350=\237\375\207\275H-\204\275\237\007$=\003\266\373=Ki\201\274+\337$\276\273-&<\031\036\031\275PZ\025=5\357\207< ,I=\375\277\222\273_F\366=@0\032\275\257F\353<\335\375\306\274\3423_\275\261\330\251\274d6\255<\236c\277=\020A<\275./\306=\360\225==J\001u\276\316\"|=\337%\023\276>B\230;\353x\250;\237~\332=C\371\377<\227\362?=\010\221i\275\372\211a\273}=\374=\t\373&=\025\006\001\275\273\336\213\275\372\364\335\275\"\034\025<\t\371\014>\344\203\330=\311\272\3219B\244\322<\227\333\262:\371U\244\275\240d\275\275\225\345n\276\324\007\265\275\026\220\033\275ST\310=\227z\321\275\245\274\356:\245\014\025=\031\270\375<w3\036>\002G\003=\371\r:<\342e\224\274\347W\207\275\300VA\275\343\3179\274\366\225\t\275,\n\377<\276\335\225=\375\344\352\272\005)\317=\250\341\310\275\003D\231\275\200\246\207=\325\264%>[\032->w\370\222=\340\312\341<\272\252\010>\016\370\263\275P\226K\276+\207u=G\263\272\272\031\365q>\351\327\342\275\253&F\275\314\025\231\274\352&\220=lI\013\276O\342\007<\306\214\2148\212\273d\27556\342=6\020\254=\352\033\320=\371\350\322\275\262\257 >\200\326y=\3574\362\274\3079\022\275\"\275\343\274\200Y\366\274\303J\342<_u\350=\316\212\016=c\345\227\275\364\366\311\274\030\250\352\274@\310\357<\3706\372\275/\375\005=\005U\250<\314\206*\275\006z\307=M$\225=%0\005\275\257\230\026\275\0177\023<\331\332~\275dU\216\275\231M\273\2747\375\377\275R\237\354=\303\365\311=\275`u<\001\315N\274Q\314i\273|\200\014=\322\334\214<T\002E>d\247\234\275\367\332b\275\267I\204<\222{\343=+\223;>`)<>\241\241==\372\227\014\275\341\214\203\273|G\253<\260\210\354\275\202n\002\276\251md=r\374\245\275\323ol>q#g<\007m\372\275\251[V\275\231H6>\036\277\313=j\334-=\025L$=)\345\'>\226\215\311\275d\351\243\274T\266*\276\242i\376\274\'\007\342=T\255{=\350 \227\274\231\351\267\275U\023)>\220\017\r\276\212?\300=\212mG\276pd\326=\305\014\321\2754]\213<\357_\027>\242\343\246\275\035\303n\274Y[G\276\023q\217=\017\013\"\275\264L\306<\376\034\014\2749\301\236\275\3700\314=\371!u\274\206\306\002=SH\275\274\234\253\317:I\332\301\275\024\rB\275$O\341\275\"w\001\275\260\366\201=;\370\221<d\347/\276\373\027z;\037!\365\275 \240\325=\353\352\016=\270W\000\276=W\210\275;Z\000\275V \315=Z\310\222\275\224\230\222<\206\263{\273\225\007\006=\373\322\022\276\0216\264=\022\234\202\275t\342!>W|\024\276\030#:=\235\025\264\274?\272\314\275D\364\271\274\310D\210=\267\237\204\276\243\236\006\275Fo\276=\314\'\222\2756\245\245=\203y;\274\262\230\212\274\333\'s<\327\201G\275\263\250\006\275k\037\273\275Ro1\275NX\t\276\221\252\017>\244\'\377\273\333\367\004=e\320\274\275\217\026\242=@\026\343<\225\033\003\276ws\201<\230>\234\274+\025;\274 !\325=]\214\251=\331\320Z=\2746>\275q\030\'\274\300\227\340\274\246\350\233=<\037\245\274\265\274\264\275\006\336\372\274h\330\\<\274\321N<\345\000\337;\023ZL=\336\037\264=\340\345\304<\201\002\030\276{\221\204\274\356X\032<\306\335\311=\333\r\360=\371H\361:\360}r=\267\013\022<3\352\222=\300\'\231\275b#\334=\212Lv\275\357\036\237=\355\024\242\274x\240\375\275S\017g\274\371\264\311=\027@\000\275FF$<(\005\351=J\261\000\275r>\215=\370\262]\273\337O\242\275\372:\021\276\3652\377\275>\352!\276\201[\274\274\265X!\276\342\205e===\327\275\202\245\255\275\260\234\364\275t\226\367;\244\331\177\275uE\r\276r\000\237\275\230U\231\275`\352G>\3633\305=\336h{=\004\312\272<\327\211\343\274\207H!\276\261\362\200=V7c>\320\365\243=\362\376\255=\033\316\217=\022{\345\275\305\240\035\275#\347\342\2759UK=\370\232r;\0031\003\274`-\277\275\014R\034\274%\355\226=\333\2549=\031\200\000>\322\206\302\275\036V\342\2753D\316\275n\325\\>\355I\302;\361\274&>9LC\276$\327+\276=\3255<,Zf>\320\363\025=@\310\245=\257\327D\275\206\215\t\276U\243Y=\031\214\362\275\261KF:\342N\234<\277\232Y\275\260c.\276|&N<\206\204\325=\315\263\370\275oJ\267\275|\305\005>\341\352\313\275B]z=?\260\205\275\365N?\275\326\261\316<\035\2073<\tN\247\275\246\205@\275\261\333\350\275\335\323\232\275d\377\326\274d\332\332<,QX>\306\200\322\275\316\214$>\375\350P=\333\2639\276%\234\006\275X\'\033\274UUT\275\265\205\006>\030\326\375=.2\302\275&,s=\256\242\350;\026}L\275m\204\033\275\352\205\320<\310\242\215\274[\311\027>\344E\276\275ZH\\<\273\200\202;\220{\241=\256\t\363<\022\343\031\275\264_\r\276\034\177\223\275UD\222\275U\212\037>\0330\177\274\240H\230\276\317\251\">\361\022\231\274\201\3442\275c\261\273\275^K\314=K<\016\2765m\335<\375i\343\274\345%E\274\341\255k<\326T\251<%\230\261=\001\251z=\021a\353\2736p\030>xc\302=\337\207d=\227\316\245\275l\352\017\274\250\340W>\234\214\214=m\013\324\274\346\326|=_D\205\275\227\252\201=\236o\231\2753\330M\276\303\216*=fO/\276\017\023\321\274M\222\213=\363w\320\274\336\264\233=\234\234\241\275\234\360\246\275\317\205\376;-N\327\274F\307\253\275\377}\305<\333b\240\275\031\340\303\275\243U\024\275\224\254\206\276Q\2609\275\367i\006=\341q\364=\345\371\006\275\2540P\276~\321;;s\344\007\274\335v\034=\016,S\275\226J\025=2-H\275)S\036;\351\371\357\274\027\216+\275\371\312\245\275\236\201\005>\217\377\2009\322\274\217\274\025\322\277\275\177\263\225\275fD\200=\227\207\004\276s\356\262\275V\023\006>7\361\027\274\304\254\003\275\230\215\254\274\027C}\275\022\035\013>%]%>\033 \303<\316[\233\275N\\\215\274r%Y=\370(\360=.\020\214\275\373oq=\3356z\275\014\237\264;C\343C=\\\353+>mGP>L\252\024\275~\321\373\275t\233\277=\354N\177>I\267\360\273\376\326\177=UB\204\274\217i\037\276\000\2028\274\354\277W\275$U\013=\314X\212\272j:l\275\220kE\276i\261\316<W\261\030>\021\334\234\275\217S\265<\305-\026\276\242\223\352<\261q\024>q\263\214=\306`}\274X\363\264\274a\371\267\275\n+\237\275\3672\310=V\210\034\276q#\025>\037<\342=\307\321O<\213<\240=\362P\214\275\255\234\223=\203\253\037\273\000x\002\275\263\334k\273>z\240=\010F\350\2756\250\033\275\026\007=\275\262@\304\275_\217\273<\331\020\034<\000\362\224\275\344\326\014>\363U\252\275Mo9>\231Q;=\305A\270\2746\236\016>\220\010\275\274>\351\031\276\006\277\243=\177Br=\314\315\216=\206B\235\275\211\347\257\275\214\226\035\276\204\004\214\274i\350\263\275\363}\301\275\261X\246=\220\243<\275\360^\322\274\220\331&=\356\365\013>ka\001>\376\234\257=1\233\n>\344\337\010\275\271\351\235\275\242\376\037<\256\357\r={\250\327\275\3242a\275.]\220=\342\336\342;d\361\330=kC\276\274_[\035\275J\234\021=\225\206\021\276\331\301Z=q\000\232\275\037_\354\274\313\232\277=\326,\032\2757QF=p}3\275\307\374\357\275\032\032H=\327\247[=\020\361W\275\377*\236\274\237x6\276O\255\310=\346\213\210\275p\246\370<\236\327\207\275\273\030\302<\032\206\222\275\370\020Y\2755X/\276\307\372\273\274\\\214\031\275\3741)=-\246\245=w\020O>\356\245\264=Y\375\005>\263\322\265\275\017s\030\276\344,U=G\331\215<\367C\213=]\025\274=\272\374\205<IT\032\275\007\372u\275\014\353\"\275\350\367\370\274\"\312q\276G\026\244\274\372\350\330\274\226\227I\275\027\216\267\271a\265\006\276\020\355\306=\226\314\345=\267\306\r>\326\375\014\274\270nM\275-8G=M\212\232=5\204\275\274\021\227\235\271~\004]\275O\213+=Q\235\246<\303Y\211={\033\306\275\275\037\027\276>\002\306<\021\352O=\301\210\\=4\026\265\275#<\035\275D\2624\275\226\013\363\273\216\036\364\275\304i\025\275u<\034;\370\004\t\275B\353\230=\272\316\233<\212\020^\274\342\304!=+\307\220\275\332Q\020<\224\213\240=\372R\202>\220\313]\275\333\213}=\325o\265=\220\203\036>\354\224!\275\"\361\253=\250\217f\274\007\300\214\274:\017\320=\3056\003\275B\305\311<\370X\210<K\306\227=\333\010T\275\200L\324=E\206\236\275zV\013<T\246\206=x\215\254\275=\326\004=\031\275n\275\330\254\271\275\327\204%=\366\373\006=\371Y[\274b\302\000>L,$<c\307\215\275v-\330=\353F\335=n\331\006\276]\241\t\274\244\333n\275\331K\020>\305w\025\275U\260\001\274\004\267H\275$}\005>\212\357>=\224g#\276\202\256\312\274D\362\006\276\235\274\206\274A\266\n=\004\270?>\364\004\233=+\206\003\276\231|\n\276\231\026\'>\372P\370=\332\227\377\274[\307a\276\030\353\376;r{\024=E\277\374<\351\204\360=\341\352\n\276\013\005\005=\006c\333<\351G\300\275\350\301\t>\231\203r\275\200\267\216\276\337G\331=\375>\033=s\250\242=\214my>*\254\203\273<_\372=\232\257\004=7,\232=xT\212<{\021\370=b\311\246\275\361\307\264=\000\"T\276\215\235\345=\232\305\214>\253\216\251=\255\252\241\274\253\202G=\257wW=k9\275=\274=C>\342\370\204\275J\212\275\275\343\221\324\273V\323,\276\370b\256\275k\022@\275\370\264\355\275\337\237\206\275\351\032\037>\3653\020<Go5<xq#>\237;]<n\226\215\272\274]\352<3c\027=\223\321\371<\241p\021>\000\217\277\275\202&c\275\037\300\241=\360\331\030=1\242\240\275\254\347\204=\252\351C\276\257\324\252<EU\301\275{,\037\276\177\315(\2706\353\214\275\353\322\016=h\246<\273\352\262\273\275\230\247\235\275\353.\025>)\235C<\021w\004\276\303\331\252= D_<\370\302a\275\335\007\022<x\265z<\300Sf<i\311\211\275\374/\331\275\341\364\327=\211\332\025<\245\354@\275\302Y\222\275~\230\025=\321\375~=0\305\256=8a\321<\354\';\276\310\233\227\275 \250*=\324\354N\275\350J\001<\272\026\314\274\261\rX=L\200\235\274\235\323J\274\322&;\275\366q#\276R w\275\371Q\204\275\344*F=m\301\303\275\372\002\025\275\225\261\312=-\274\271\275\273n\377=\\\3173\276\r\313n\273\023~7\2757\314\202\275x\247A=\267\226\037\274\242\357\254=w\3137=\317\303Q\275Q<\232\275+X\345\2742\273\206\275?\341z=3C\274\274\313\321\030=\210]0=U\373\312\275\341\344\216=\366\002\266<\327\315\257=SRY>\253e\252\275\344\216\335\275\345\033)\276i\274{=\202I\337=v\335\214=\323\242\037=\347f\303=\2427\326=n\035!\272\001\361\311\275\032x\213=U\026\300;\274v\317=\003\037\341<\035\333H\275\376\217\201\276\344a\251<\225y;=\224\264\321\270\307&\271\273\340\373\325\275\177\332\277;\321\000Q=?\000D\275\341\336Z\276\003\324\243\274\002\004\225\275\202\326:\274\000\003D>\316\014q\275\210\261\335\275\007\252\357<\326\336\267\275\377\356\007>\376\212\365\275\002\223^=Z\377]\275\303T\373<\335\001t=\023F\350<W\227\023\275\270\212\332\275\245JM\274\237\335\327\271\003-\261=n\0269;\373\023\335<K\350\366<\273b\205\275\33726>;\271\000\274\210\226\272=\036\304Y=`\005V\275\323\327\017\275\241\002\313;\362\216j=\033\005\253=\377\026\342=\300:F<}\300\221=s\253\212;)/.\275\253)\331<\256v\221=x\323g\276\326\322\210\275\005\364\373=5\'\370\2751\002E\276\254\264\345\274\331;\324\274:\n\344=\205\004\\\275<\315]=\257gU=\003iG<\020V\022>_\331\274\274\025\001\200\275\266#\017>n\032l\274\257l\351\275\002M\343=%-U<\331\250\035>\220\301\213<\301Bv\273\373\2745\275\027\020\356\275m\265\001\276x+c<\271\034T=\233\031h>0\013\013\276\221\000\373<\312\265\234=\246\210\354\275!1)>\027\265j\275X\372\302=:6\375<n\365\207\275h._\275\347J\222=\300\235H=Z\351\311\275H\337\032\276\345\304\261\275\361c(\276L\276\355<\317\311}\275fw8=h/%\273\365$L\272\010\314\240\275\331g\010\275~4\t\276\317\375\336\275\322\353\200=\260\230\217=\366{\374<\013\216(<\322>4\275\304\017\020<x(\347=\0061S> Y\205=\235\2438={1\t>\007\354o<\032\230=\2759Q\017\275r\211\230>\002<_\275\226@\013=\244\332\306=d\220\331=`\r\006\275\233UN<+\354\236<.0a\273y\3753=0\177\241\275\206\237D\275\n3g=\260\001\312\274\023\006\325=Q\251\325<\004\375\304\274\357\235\202=\324\223\342=\275\016\202=\317\253\204=3\301\000<g\036\274\275\2405\016\275\203\307\257\274\362C\371=\372\240Z\275\000\235$>\375!\247=\340\003\277\275\245\351\342\275<*\211=\006\204\336=\260\366\336\274\376\334\273\274]\372\033\275\325\360G\275uFR\276\025\255\301\275P\342\025\2768\224\223=\267\230\003>\033/\034\2768)\322\275@\240\215\273\203|(\275\265\375\002\276\324\350z=\226\267\313\274\263\264T\274<V%\274\017Q\021\276\230#\346<\007\375,>\351j\352\275\2638\203\275\215~\210=\227\331\313<\222\214\005\275\340\276\363\275\010\301#>h\225\216\275\214\211\273\275-\033\240\275\022j\227\275\025wd\274\317\244\004\276\264F\233<\376;\n>\350\241&=\022\027\260=\346w\010>S\016\240=\346K\232<D=F\276T\313\253\275\237^\007\275\251}\367=R\220\360\274\276i\210\275\311\373\245=}P\326\274,\373\345<\272Q\033>\217@\006\276\227\323\205=^3\347\275F\264w\275\301\022?\275\031u\303\275\243\2369\275B\251)\276)\325Q\275w|.\275M\316\311\274=\373\256\273\202X\202=X,\313<A\211\020>\016\204\215>\023\356t<-:\363=\3519A\275[\350\355<\227\0273\275\242\300\t>4B#=W\330v\275\324b\353\272\274\205\214=R\214\n\273s \316<\323\263\256\275\3738\200>\270C\307=\232\\\227\275\355\333)=\323J\304=P\305\225\275\263\246,>\202p\014\275q\024b<]\007\253=CS\307\275\350\251q\275\0358s>\346\356H=\231\037\264\273\363\213\334=,\201\222\276l\236@=\006Dj=\224P\t<\207\204\364=\365+\213=\250\252\232=e\023\336=W\2602\275\337\375\022=\305\353i\275N\207z<\220\357(>#gq\275k-$\275o\347\305\273$\025\004>\027\n\270\274\217\017y;\204\247\210<Q\345\241\275\004t\337=\240\244\\>\300\2114\275\364\3416\276\375\306\372\274\376\231\275=\230i*\276A;\317\274\353\315\272<\031\234y\275u\347b=\024_1\275oFx<\253\350{<\347\206\301=\353l\216=b\355K>{o~\275w\001\013\275v\2118>\000P\327=p$\212\274e\036\223=\231\247\006<\232\211\206=,;\361=j-\253\275b\035 \274S7\303\274q\332y\275\324\203\235=\321S\216\275\302\306\274=\000QE\275I\272\n>4\313\230;\301\331\301\275\177\177\306<]\301\"\276\355\"\221=Hg\314\274\n\245\275;\353mq>\301\003\266=\374\037\360;i\360?>\312\224\225\275S\237\266;\303\006\003\276\027?B\274<Y\202=\316Q\222\274$M\366=\230\377\332<\221\351\363=*e\234=\306\024\032\275\232\271\246\275\202KP=_H\210<\332\\\211</:\302={\\u<[\345\002\275\245\305\003\276\264\245\275\275hs9>\340\356[;Cf\316=\010J\367\275\330\362\377=\274\256=\273\275DP=\270\221\321=\375\355\264\274L\026\236\275\303D\211=/\372}=\005\204\324\274\017\373T=`$\020\275\005h\250=F\321\366\273{\220s<+C%\275\035\033\202\275\005\323\026=\374\320X\275\371\006\246\275\\\341@>/\202\021\275\354\271\210\273]\036\271<\307\302\177<b\212\007\276\020\304+=}\304q\273\"lS=2\250\202\275F\352\245<\"\030z\275]\322\261\275\2219@\274?7\203=\346\256;=\355\267\251=\265\272\207\275qC\332=\330\327x\276\362\211\\=\211H0=\177]\353\274\361\017]=\256\006\355\273#\022\344\275\034g\255<\365n~=\300H\364<\355\251\031\273l:\324<\244lK\274\260\313\177=\"\027\271\273\275\257\010=\237\302\213\275\252Z[\2753K\364=\254\303\013>m\023\224\274_\274\000=]\302k>x\334\204\274\371\304\200=\270D\216\275\026\257\022\275\2351\016>3\023\374\273?\334\016>OW<\275\371#$\275q\305\250= \0353\275\006\014\'\274\354d(\274\3660\350\275!\214\030\276\327\327\304\274\301N\234=\257M\304\275\223\261\037\275\213\035?=\215k\341\275m\307\256\2756C\241\274b\032!\275\331,\000>\325|\226\275\235u\320;~\3522\276\216_\304\275\201>\316=`\231\024\274\310\310\304\274\3547\356=\222\217\256=\342\002\220=cb6\275\217.7>n\354\370<\270\374\244<\212\000n\275\305\264\345\275\016\376\367\275@I9\275\236]t=Fi\201\276\202MW=\312\025\277\274^\370\211\275\025\\\343\275\230x\177\276\314D7>\321\032\225=\276\367!>{\002\362<\345\376;>\312&\032>\303\020\211\275\273\274\264\273\234u\263\2759\001\001<\342\320\000\275\275q<\274\265\205\334=\360\302\253\275\013D\223\275\243\365\325\273!\352\255\274\217\315\232\275\016X\367\275\206\255\270=\301\330\001>\022\304\245\274\014r\207>\371>)=\0068t=\307\002l\275\255g\'\275\317\242\245=\353\253\007\274\351#\031\275\024\236\327\274_\345t=\300\013\005\2766\370\342<\376\346\260=\332G\305=\016]\231\274\205\330\273\275j;\221=\357\327_\275zqL<w:\204=\257\0178<\225\373\307\2756\2773>\272a;=\006\240\255\275\305=\335\272\006\027\202\275\252\306\t>\241\3158=\370\314\007>d&\267=\305\002\207\275\253E\251=\3060\235\273_\355\225=\026r=\275\361$p\275\322\271\336=\374N&\276\"\304\246;\277\020W\275\356\340\370=\220\222\334:a\343\333;\020p\261\274\246\024\340=\226\366f\275\330\371\355=\177\372&\274\374u\324=\244{(=\230f\030\273\023N\236<\330\325\311=}\245\315=\032\217\224\271\3463\202=\243\365\223\275\331\252\225<\203e\023=\000\242m>n\005+\275X\245\364={\227\310\275\3266L\275\247\007\344=!*<=\220M\007>:\232\036;\'\341\255=\025\020\204=7[\225=[\242\274={\324\330=1\342\223\275\376/d>\256\254\345=\322/\033;\266\300\317=\240K\205\275\037A\245=\255#\364\275\373\277`\274C\371\372=\320B\344\274\216\377-\27639\010\276\267\376g\275\237_\221\274\225 \010\276\352\261\010>NE\214\275\030\357\326\275\240\275\343\274rZ\317<\314q\315\274\201\205\177=j\013\266\275\036=J;\024\036\211\275\316\271K>|T\314=\030V\206\275\260\037\300\272\265\323\327\275\3265\005\276\310\3558=:\316w\275\365\2100\276\213@\374\275\023\211\005\276\2778\323=g#\001\276\304P\202\275\261y\001>\0213\023>8|t\273L\362?=\303;\365=\321_\016>\231[\224<t\013\277==a\326\274z\001\364\273w\256\311\275\312\t\367\275+\327\001=\027\301$\274:d\t>a\363*\270\301g\265=\254\304\253=\301\377#><d\347<\312&c=\305\267\240\275\"\320\221=\010r\255\274\270\013\t>\226\2214=\302\265\343<\312@\014=\342\2053=\333-:;pPn\275\025\031\221=\314T\207;3\264\353\275CN\023\276\243%)\271\203&t=\36343\273\026\307\250\275\223\032\302=2\022P\275\364\357\005\276\027\220\215=\307\353\256\275M\200w<\022^K\275\226\305\n\276I^\224\275\"\251\026\276\017\235)=^\000E\275f\363\014>\361rT<\022\215\333=\264;%>\313t\326\275?;\321=\226\242\220>\221\261\240=\275\210\t>\330\034\213\2758\033\201\274\245\001\002\275\3537\360\274r[F\276{\253\004\275\034\027\313\275\201\300\321\275I\372\304=\267}S\2740\247\234=\340\222q>25\236<\027\032\257\275\033\221x<h\261\263\275\363e\332=\263\314\223=\224A\320\275L\2775\276\001I_\276\212K/\275\342Ti=c\261\177\275\343\272\036=y$\032<9\203\000=`\025\022\275^\t\033\276\234t\030;DS==/E\336=\373r\252\275\203\226\000>\266\204\236=\256 \334=\354\027\177\272\020ru\275\362\277\241\275\347X|>3\363\321=,-\223<\237c\302=@\300\360\275#\256\211\275\267\311\241\275\206\014\023\276rx+=\273N\345<\177Z\224=\325\032)=\364=\n\275\230Q\304\275\3140\013\275\351\212\201=d\037\321\275>.\t<\267-W\274\356!\374\271\232,\017=:\270\036\275{4|=\355\252\227\2754m\333\2740\306\026\275\374\331\327<\340\022\317=Z\r\002\276\275\216\020=\202\277\333\275\242L\003\276\374\r\355\274s\313\037<\rf.\275%\331\275;\376\217\226<\327\344\212\275\365c\021=\274$#>\365\225C\275\014H,\275!2\r\275D\254\237\275s\271\367=km\264<\251\264\275\275\347\2050\275n\r8\275B\245[\275\273b\025>\363\221\004>w\234\223=F\237\257=\265\275\337<\350\262-\274\376\021\260=\035n\315;\315b\265\275\206\224\324\274\263z\224<G\224\251=\236\305q<v\375\235\274\367&I\2765\013\025\275E0<<\306\221\033=\014\313\217\2753\323R<\326%R:OR\336\274/i\373;\315\212\203\276un\315\275\000l\332\272\005\021!<\352g\254=\316\364\305\275\304\220\006\275\004`\250\275\352\330%=]\275\240=\361\222\010\276.T\262\275\270$C\276\333\215\213\275@t\234\275\016\002{\276\336R\370\275e>\363\275b\363<=\302\"+=\374\026w=\227>];\302\'\341<c<\304\275\235\275*>\254s7>\nZ\202\276U\010\267<\211\221\374=$#\002=\202z\366\275\346\256\303\275\"@\310\275\264.\247\274\021w\333\273\314\"\334=\036\225\360=2\376\r\274xS)\274E`5\275/;*\2762\275\001\276D6\r\274\343\r\215=\275<\372\275NX\247;\246\031L\275\351>D\276_\266\374<\354.\237<:,#\276\357\027\352\274\345\237\257=\216\032?\275U\014\031\276\321\336\212<\350@\237;O\001n\2756\177\303\275~\177\013\275\204\003S\275Y=\t>v\r\251\274w,\324<V\237\235\275$\306\003=\341\276\272\275\366?\350\274\266\323\354<]\274>\275\r\274\370=\203\270\r;r\272\223=\254<\203\275~\224\034\275I\315\355=H6\203\275O*\205\275h\242$\276\022\006\010\275\242\351&=\244\344y=\361 \342=\204\031\244=~\365H\274\031-\206=\232\302\037>\302b?<>\272y=\271B\310=\206F/<\223\301\351\274\235\255\253\275\300\316a\275\276\347\314=6\030\306=\304\301\232=\210}\361\274\021\361\272\274mM\316\275 N\265=&-E\275\355$3\276@!\320=\257\230\367:\334\020\364\275\024\251w\275\311}1\276Dh\010\276\013\271\362=\006^\276\274\023\365\264<\002\326`<\350\346\344\274\tn\263\275\200\236\310=\242\210\r=\320\237r=\267%c\276\373\030\327\275E@\236=L\013\352;\345O\001\274\322\314\233<q\275\003>\r\260\224=\340D\204=\262\033\313\275TF\241<{\357\364\274\333>\316\275\375%>\275\233P8\275\257\350\204\275Q\272\003=Zg\355=\265\237\216\275hc}=$}B=02\315=~\214!\2758\357\272<T+\276=\344\357\304=r\277\241=\016\031\334=^lY<\217?\222\274\222KF\274\341\257\300\275\352\324\024\274\302\234\360\275<\024\'<\217\306\250;\202v\374=3\310X\275c\213\346:\233\324\272=I\225\265\273\227pE>\031\246\365\272\376R=\276\245\340\372\275\344\212\211\274\372\r\n\276>b\021=\320\204\310\274\326\026\350\275\351\354\036\276\221d\005=\344\261\241<N\247};\333?\265=]`\327=)\010\006>\310r\004;=\201v\275\006\355\n\275\315\364\357\275\255\355\202=\344|j<\244\264\305\275\263\361.>e\271#\276,\027P\275\256\252\340\272pw`>$\370k=s\004\201<o{\010>G\373\">\257&\017>>\211\316\275\252\\\265=\267x\336\275\374uH:\003\217\200<F\304q>oUo\2758\216\t=\322\217\340=1\225\331\275\005\214\334\275\240\3560\2739m\341\274;\026\223=\223\253\235\274<n\343=\005\031\200=3v\204\2759\2000=Xh\230\274\313a\301\275\'\366\371\274\177\311\034>e\334\025>|\342\215\275\n\312\006\276`\006\331<\252,\257\275GbX=E\266\273\274*!\347<2\344\030\276\233\301Q\276}\313\031>\267*\327\273\352\203\235\275\312\r\305\274\322\"\003\276\351T\200\275\t\r\300\275\013.)\276\311\240\224=\004MM<p\337\240=\212\242\257=\316\021\321\273T\371\211<\232f\221\275\262\323\215=\216\243\332=\210\367\272\274\357;\242=\277\025\325=g\252\205\274\034\222A=\246\023\254=orc\276\357\216\033\276\037>\223\275\014\361\017=\226C\220<\rqk=\014\217}\275\272\212\230\275\365\005E=\334_\250\275\020\373\004>||\355;k\274\017>i`\017=\334\034\027\275\004\352\227=\033\337\251=\0043\352=R\260\261\275PO\010\275]\037\002>\364\350\266<A\231\317;f\272@\275\255&\331\274\343;\336\275\251\014\234\276\211\272\332:\302\177\330\275*\032\017\274G\311\203<+\226\264\275\302\341m\275\313\3728\274\3122\372\275\020\332\231=[\t\376=F\341\t>\000\377\002;\275\246p\275\031\201$\276\027W\t\276:\372\t=\362\260r\275\373 \372\275\030\222?=\022\266\322=\204\006\320=\253\271\242\275Na+\275<\342\340=A\301\002=\253\247\006\275=\033\353=Y\353$\274p\214\032\276\232\027\010>\036\265\222=\014\026q\275w\353\030=\225\010\250=\205\237\315\275\nO\253=\267\004t\275\203\317\364\273\036\315\377=+\206==|\312\240=\225\341\332\274\373t\031\276)8h<\353\030\025=\"\005\224\274\253,~\273M\357/\276n\323\262=`\235\362<\337\327\205\275N\221\245\275\221\240K=v\267\013>\305\'\223=S\301\227=\236#\177\275no~;\3676\207=\230k\\\276&\256z<\2413\257\274\014\357\305\275C$g\275\2766\303=\376d\361=\352\237F=\344\377\271=\014\242\241=\027\340\251\275\251r#\275r\366p=\037\230\346=\"x\204=fc\203\275YF\033\276g\022\324\275W\266l=;\202\023=b\342\"=\366@w\275\356\n\020\276\364\301\217=\265Z\226=\254i\206\275\272\217\376=\326-G=m\377)=Y\3544>q\2110>J\317\273\275\316\0048\275T\026\266=:L+\276\354\013\377\275\227e&\275+\014[\275\\p\002\275\355\220\201\273\357\0060\2757%\t\275\320\250Q=\370~N<@\222\003\274\010\200\220<\253\024:\276&;2<\311yT\276\334\350@:\320\232t\275\202\036\350\275}\310G=\022\273&\276\330\026\">\330X\177\275y\374\\<qh\326\274\312iL\274v\232\004>\303i\205=\313\360\024=\343Ml\275\254\203\200=\262\260\004\276\265\257\014\275\274\352\330\275fj\205\275C\\\351=\251\251F\273\'\3523\276\350\252\254\275CO\n\275\300U)=$\334\226\274\203O\225\275K8\364<\234\331S\274\234\347\270\273\241\320\262\275\270\025B=$:\204\276\347kw\274\3124@\275\267\367&;\314\250\263=\251\345T;0\023\027\276K\032\010>B\345`=\010\347\262\275\010+\224\274\332\371\201\275\322\352\251\275\233\344l>\270k\203\274\200\004`>\267>\214=\352ap=\017\370\230=t\330\276\275\020{\240;V&\307=\026\346\004\275\346\010\220\275\221\350\227\275T\333\252\275\352\nv\275\321\215\221=\251\327\240\274\262\333\264=zv\376\275\014\334(=\245,<=\364]==\212\016\372=\214\022J=S\274A;b\351\307\275K\357\321=_J\204\2743]\222=\371X\217=\344\250C\275\222(8=\023\000k\275\037`B;\2631(=\362\246\235\275d\031G\274\376E\273=\233a\n\276a:\222\275]\332\203\275\270@Q\274\242\310\272\274\215d\321=^\177\330\275D\342\'\275k\320Y\275\212\203\016=\243\233}\275M\302\225<\324\244\352\275\220Q\234<\371\325\276\275]\313\014\276\356\2518=\346\352\343\274+\235\262<\356n\013\276\350\3071=\262_(=U\246E>lN\244=$-\214\275^\'Z\275\361T\214;\2614\024=?\177z=c7\225\274\237x\177=\177\266\372\275\265\246!\275\007U\024=\020\226\331\275\226P\354\275;\350$\276\223\263\304=\326\342\365=<N\036=\226\304\370<\033\252;\275\030\307\027\275h\3032<\033#\202=@K;=\251-\277=\227\300&\276L\320/\276sN\270\275\256\2049\276\251\252A>\302\335\350=\334/\003<Y!\323=\323d\344=6C\023\276@/\330=\276\267\310\274\325-\"=\210N\031\275\367\2338>\236\375*=\274,\330\2743aP=\241\254J=\232\336k\276\032\r\314\273_\252\003\275U\313\301\274\232\004\030\276\243\272\243\275\260\364-\276b+J=:\352\251=?\267\031\2756a\020\276\033\006:<2\304\020\274?\n>=)\001\307=\327\021\355\275\334z\024\276J\034{\275X\022\r<\351\313\354<\035X\026\276^\327\004\275\t\267\200\275\220q:=\217\336\366\274\023&\001\276Lw\016\276\373BL\275\2119\205\276\025\224\242= \227\365\274e\267R\274h\205\020\276\220@\034>\347@\260\275\t\031\214>\265\201\225=\327\211\026\276\2678I=\037\212\024=L*%\274\244\327H=i2W=Zh\321\275]\324\223=E\265~\275\237y\212=.j\037\2769\253\237=\332\322/=\260\346R\275\023\221\323\275k/\306=\275\037\003\276\017J\002>~\t\360=\216\t\266\275\247b\031=\350\333\022\276\266\261\337=\361\007\346<\365\026\337=\207\340\316\275\310\370H=\206%\206\273\241R,>\270\336M\276\300%\214=\264\234b<\204\321\350=\204\222\000\276~&\261\275\316\277\200\275\316z\250=\340\260\324<\257\020&\275k\315\230<\222\010\272=\376\331\031=\216}\270=w\r\326\275%c$>d\000y={\273\016<\023J\250\275\021\360\231\276\217\362\237\274\347>\265=\310\325u\275,`\236=\247\233-\275\247\037\035\276\242\270\216\275\217>|\274\031\254\376\2757\260\212=\255\003\204=\253\017\314\275\230\304\346<\037\377\236\275\272\372C:r\364\235=}\225\232\273\317A\332:-\007\006\276Q\324A\275\330\"b>\356=!=\3512\220<\022\327\375\275\3448\007=\032\032\021\276NiX\275\004F\342\274Z6\'\273e\022@\275\247\277\2059\342\321z\27426\237=t\035;;\23350\275\026\325\256\275N?h\274\203\371\036=\334\202\315\273$m\003\276\255\334\341\274\307\375\275<\007bC=\227\3418\275\211+2>\226\245\222=\250\r\307\273\223\305\255\2748\037\313\274=\316\206\275\327R\245=G\210\236\275?\302\032\275)\034\327=\212\370\023>\354\337\220\274\327>\260\274,\215\031=\007\330\\<\261P\213=\035\352\201\275\320\017\336\273q\360\020\273V\322<\276\240\222\233\275M\357e=\000um\274F\261v<\211\336\333=\355\233a\275\031Ha\274\233o(\276ap\373\275\3578\007>T\t\002\2753\211\233:\002s\024\276Y\261\227\275B\366b<\345V\021\271\241\0203\274\372h\223\275A)2=\231\017\237=:G\030\275\250`\333\274\346\375\021=\252\264M\276\3445j\275?\317}\275OC\240=x\3457\276\'\214&>\005\343.=\017Z\204\275\310.\304=h\\\205;\345z>\276va\274=\2047P=\030V$=\245\256E=INF\275pB\013\275\314\254\245=M\027\215\2764\275\314\275\274G\001>8\231\301=\366\022#\276=\036H=\365\242\331=`\376\210\274IN\206<#%\224\275x\320\312=\223\021\257=$\355\276\274X\234\330\2754_&=\315\326\025\276+\215\206;\035 \322\275\014\037\317=~\255f=\276W\007\276-\326T=w^\216=\241\337\007;\327\262\241=/\301U\275\243\224e\275\322\'\374;\241\016\276=\222}A=\264\232\217\275\313|\322;\206\237\251\275\210FH<nn\277\275\245K\017=\271\214\360\275\037$\227\275\017\361\t\275\331\205t\274m\334x=\'!)=\006\244\250<\347D\036<\272\000Y\275_\352\324\275\227>\342:v\241*\276e\202$\275g\312N\273W\0335>\325e\331=;\232f\275\017y+=\t\340\001>E\274\370=|\334\241\274\025\225;=x\216\301\275\205:\372\275\030\210\007=\034\336\016>\030\340j\275-\370\002>\273\247\010>\362AG\275*\356\332\273\323\261\245=<\203\273<\327\260M\276\313Q\332\275Y\361\035\276;{\375=2\212\203\274\326\363\207=\334\0131=y/\213=\317f*\2763$^=U\237\200\272.\206/=\246\230\003\276\256Na;H\267\301\275&\0257={\362\233\275\277\263z=\341[\016\275\"\002\271=\215\246R\276\255~5=w\0015\275\306iY=\344\345\337<b\003\263\275\370\266\r>C\354\013=\236\214\'=\350\307\212=\033T\337\274H5-\275\311^\244\274V\310\325=v\364<=\233\320S\275q\003\267=B\373]>\230\376\346<c\213\237\274F~\350\275\265m)\275\320\372O<\017\342?\275:\313\013\276\250\377*\274\330\255\337\275\343\361\202\274\211\306\221=\256\217\306<\341P\201\275-u\355\275\\\271V<\346\312\025\276o/\013>\226\326\343\274\036\362\253\274\341y\004\274\343\340{<\317f\242\274\371\246\010\276\242\243\214\275>\377$\276\244\301\025\275\277\273\352=\225\035\033\275\253N}>\022\233\237\273[\344\255<hW\267=8\021\211<\266t\023\276s\353\207<^\272\014\274\276\326\371=K\231G=\350C\220\275iU\320\274\274\341,=b\010t\275\326\334V<\030\226\334=\254G#<\212\0025\276\245\253Y\275*\242K<\276\032+\275\304\n\033\276T\003\003=\254I\006\276\312\300\016>\317\324Y\274\377l\363\275\2712\356\275L\264[>\004\335\232=\325\316\004\276\254nU=\352\316\240=\211.\364\275\224\000\310=\\\014j=Z\0057>\233\267&>em\207\275u\271\320\274\010\223\004>qA\211=\337MM=\321\230h\275\2033\003\276e\007\t\276d\352b\275\335\372\323=\347\315\020;\362Y\221\273u}\212\276\215\005\345\274\035\016P;\275\035f\275p\031\321\274p\274\365\274\375`\\>\021c\222<\335T\323;B\'\242<\332\304\236<\225\253\231<\373\336\254\275:\004\237<{S$\274dt\001=\006\215\237<\316*T\273\371\035{\273\303\r\246\275\345\233g\275h\024_\275\276\235->d\"C=\300\006\037\276\334S\023>\023\363\364=\2533\374=q\361P\276\323\336m<\rp%=a\255?\276\301d\r=j\246D>\363\347\234=Q\203\212\273a\354\227\276\347\375\001\276\311\202\010\275$X\263=7\330|=\341{2=J\331\213=\342a\257\275\'\225E=\211\236\020\276v/\322\275SN\323<\215`\001\276h\375\033\274\203\336$\276vb\007=\243,\213=\013o\"\274q\235\236<\276s\202<$~\026=\006i<<\344\374+>\322\352\232<\013\207\263\275\007\274p=\207+\032\276Oz3\275p\365/>\024\376\260\274uf\270=\253\317\212\2758\210\337\274?\003q=4\377|=\355\306O=c\203u\275\337%\340\275v\324Y\275\354\322\252\2748\266\346\275\366\336W;P\r\241=?%\234\275]\375\024\273\261\346Z=+}\006>7\025\000>Rd*\275\314\256\036\274\330\247\256\274yZ\301\275*\026\355<j\020-=\010!\232=\351 \224\275.d\304==]H\275\024\340-\276\030y3\276\377[\022\275\r\242\361\273\201\312\005\276\252H_\275\267\334\364<v\023\217\274\376d\000\275\215\023p=p\365\223;niD>k\333\t;\201\302\307\275#J\257=O[\216=$\003\016\276_1e\274Sq\274\274\346V\202\275\001\036\323=b\275\202\274\253R\213\273\331*i=|\231\025\276\341e\213\275\344x\004=\207\254Q\275E\242\310=o3.<Cp\353<.\337\230=)\237\371\273Uj\343<\372\361\220<%\207\024>\267nP>n\n\245=\316\034\316\273\000\254\316;\177\372\265=\253\366\235<:R\217\275\014,\221<\270\356\204\275\346\013*=\337\377n=\023\315\212\275\325\275\005=@\216\333=r\2432\276\263\271>>\001\262\375=2S9=\215\362\220<%pU\276\243\311\013>\337\323\247=\274\016\313\275\330\344\357\275=2%\276\026\213\033>\270\335\003>\227\010\n=\275\030\335=\341`\014\274\205\304U\274tg\364\274\2420\227\274|\035 =\210G\236\275\360\024\034\273\035\232\277<0N\035\275GR\264<UD\301\272\327MW=\304\344\037\276\t\237\361\275\224\3146>\372Pt=Xle\271\242K\241<\331\3024<j\316C\276\216\2222>L3\312\275\346\033\316;V\017\036\276\266\275W=\203\302P\275\361T\341\275\301\312\312<\235\270\303\275\022W\326\275,u\271<b\274\'=\357\311\256={\277\036>\371\372:=\275\215\215<{\200\341=A0>=u<\266\275\\\324\312\274\371\225\244=\232\r\245=#\032\n\274\000\252\030>>T\"=hY\001=/Q+>\262n\320\275f\010\317=\370\350\341=N\375\334\274\252\234v\275\302\362\250\275P\255\237=\270\006\326<\341\254(\274\371~\321\275K\317\214=\332\341<>\210\357G\274\363j\036>\353\344\343;H<\364<\242\236\225\274PF\317\2759e>\275\244\200Y>\273\310\251\275i\273\023=:\200\332\275\222n\200\274i\372p\275\362\000\375\274C\347\260<[\347-\276M\273\223\274\245\352$;\211\031\016>j\000S\275\2169\205\272\226t\355\2757\032D=\332@\353<\256U\300\2749\247\366=\254\2742\275\265r\326\2750\337\327\275\256\366\336=\354N\265\275Um\001\276\233\364\204=\r\2227=\323\314\346\274B\361\023=\312a\261=\231<:=\374\301\004;\204\230\212=8\334\354\275E\243\231=b[\321;\206\341\376;\305\246\202\275\312L\311\274\266B\250\272\307\212\300\274\206\374\250=!\240\355\275\347\257$<@\266\372\275\333\010\360\274\017\247\347\275`L*=\t\216\302<\010 \310\274\375\253\266\275t\263\036>\242\345-=\375uK8\306H\223=P\305\301\275\017^\014>(\025\214=\200\360\202=\010\257\\=\006\337\336\275\270\033\224=\276\246\373\272-\026J=\315\270\215\274x\356\023\276\236\276\005\273%k\t>\3624\341=\037\216\250\274z\000\023>_\007\355\275\213n\242=\273@\372=\227\202\343=\341\371\333=\025&\345=\253\332\005\275\363\257\335\275\255\340\334\275\361\021\247=\350L\017=\370\267\025\274\200\262\024;S\323\013>e\362\256\275\217\367\363\273.\227=\276\014G\325\275@o\230<Py]>\2504\005=\004f9=\210Ca\273_\235\026=MA\222=\244\370\213=\025\235\005\273?\326\035=`\325\243\275b88\274em\343\274\213\257[\276q%\027>r\000z=*\232\205\274\223\320\240\275\0373\266\274\242J\341<\'\315\037>\274\246\025\275\270v\r>\265\240\212\275\260\210G\276fZ\376\275t\365\250\275\226\\\367\275u\222\033<\3142\003\275\251c?\275\3328\336<\343\224\236=\317h\027>\344\271\264\275\216\376\217>\2758\344=\205\363\344=1\316a\275d\222\r>\034\357\303\275\371\226(=\0032\272=t\010\237=\347.\325\272x\363>\275\313\373\330:\276tJ\275\323d\205<\022y\313=\370\304\341\274\361E\240\273aI\202\275\336\326\210\275\254\372\034\275\342h\361\275\246Y\306:[\376h\275\243\332\t>?\202\303=\020\241!=\r\306\014=b\352E>"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6587757
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "z\"\333\275\354\231\373;X/\306\275\231L+\276\014=\024\276\221\3477\276\001\316\347\275\316\312\310=t\215\031\276/\300\032\274\022\n\261\275<\034\363\273\272\203\245<=\014\r\271:\260j\275un\004>\224K\343\274\0077\215\274x\253h=\320\216\366<S\036\021=\232\254\201;\036x\315\274\026V\206\275\035\325\323<=\362\274\275\270\342*=\322\314\205=\337\225]\276r\227\242\275wgZ=wo\336=\336&c=\2513\033=\312\3328\274\371\335\027={?\366\275\374\365\205=\265\007z=\360\326\030\274\0344\211=G\321\343\274-\220\314\275\361D\356=\300\327\323\275?\214\024<\325\204*\273f\321\331=<\211\216\275\034Ym\275*&\t\2764>y>\\\202\023\276Y\271\224=\234@\026>Q\225\204=\212\235\312=N\320\233\275\0247\221\275K\3517\276\222\3666>^7\353=\204w\306=\023X\267<\217P\354\275\200\344\326\2756\243O>\020\"\016<L\0345\275\252\320\251\275\216b\005\273\334\024\234\274BW\275=F-\035>S\010\203=\346^q\274\323^\313\274Dz\245\275\302\010\004\276\203\354=>h\030\022>7\343\376\275Bj\304=|\007\031=\373{\260=.\364\303\274\r\342\232\275\032\002\010\275v\\\242=\361\036\213\275\021\233\256\274p\266\272=\017%)\275\243o\343=\2478\035>N\215\206:n8,\273\331\235\337\275\323\246\223=\320\335|\274\343 \374=\343\201\272=I(\231<\345\336\200\275\334\342.=\014\3530;\034\013&\276\027\213\204\2757_t=j\317m<\375\0178\275\212\037\373<\346\236\344=b?n=\336\303d\275k\360\214\275Z\220\255\275w:\344\274\3008\022=\235t\021=\r\251\216\275r\251@\2762}\341=S\216\314<D\365\205\275\342f\373\275$\245\365\275\335lG\276v\017\224=\376\334\026>!\243\367=\253\211\225\2753\320F>4\331\352\275{\020D\272X\020(>\016\273\251\275\217\345\010>a\362\342=G\017\237:QF\375\275<\256\213=\231m#\275g\337\241\275\020\310\007=h\364\306\275~\273\006\276\255&\310<\367TH>Lz\002=\002\237\361\275\342OL\275X\331\210=G\256G=a\262\027\275\203\232\311\274\307\356\264;\0271\017\275\007\363\376=@\275W\275\274v\001>\314D\341\275\321\023\032\276\303,\036\275\315\002\361\275@\030E\273U\214\277=\234\"\220\274\214\033\367=\255\260i\274\265\373\300\275\035\210\202\275@\225\"\275n\232\201=\264\307\337=Rq\321=\023$\237=}I\016>u\003x=\226d\206=\274/\236\275\234\\\003=\t%\016=\202\265\013=>\r\333\275\262\022#>\r\242}\275\0101\252\275\205\314\016\274\315\207\323\275t\206\354\273\022\277\014>A\354\277\274CZ\177\275^\275A<\211q_\275hb$\276\316\1770\275\325\010\272\274\325!\030\2755\177\356\273\'g\312\275x\311\037\276~\035\306\275\243\365\222\275\234r\361\275P\216-\275\205\201\224=j0\002=e\221\203=U\374\027>\314[\211=\027\332\305\275\264\316\203\274R\200\'>\3363\247\275\302J\267\275\357\2670<\335\034Y\275\2245_=-\005\001\275\331\230\006<\243\254-=-\"t=\177\0322\276\266\240.\275\302\261\007\275z\200y\274\260\310\035\275:\372\241\275\002\231\264=\030\330\367=\332\000g;w}\021>aT\254=a\'\312\275\254\262\207=\243\374\313<\244\'\233\275|\002\311\275Z\014\343\273\027\t\r<Qz\034\276\3124\371\272\327\311\224<\366.B= G\036\276\225G\017=\032\022k=\305\332g;We\261<\223\373\374<\371;l\275E\320\365\275.\234\300\272F\014}>\374\275\r\276 X7=\ru\346<I_.>\373\354\t>\334\000\221\275K\347@=\233\260s=n\206\263=\216\267\n>uY\335\275\261`\026\275S\2177<\307\267\013\275\247#t\274\ta\n=\251;\003>\336\252\030=\362\232\255\274,\242\201=\252\007\335=3\254\340\275F\241\343\274\001\322i<\324\323\265=\331\032\002\275?\360\372=\310\013\204<s\230\210\275F\025\211\275\302\231\264\275pQ(=\301\333\256\275\367\277a=XjO=f\353\273=\026\373\230=\356\206\240=A?\321\275<\271*;3\342l=a\321]\275sN\013>\2463R\276\307Z\010\276i\020\036>\243]p\275rX.<\242l\201\2757\326\254=d=\326\275\\AW\275\274\n\037<\004\320\322<U\250\002\276{z\034\2769\023\025=N\332\346<\036a\243=\310N\220=%EK\276\321\365\024\276B\321\343=s\352A>6\342V\275\337K\227=\323\267\032\276\230= >\263d\033\276\231\316\006=K\320\230<#:(>O\202\033=\301\361c;+\246\351\274\217`G\275M) \276x\030\276\273\343d\032\275\341\311\020>3\302\333=\251\202\246\275\271$\275\273\316\251\360\275\213\r\210\275\322\007\031<\313\272\034>F\323\300=\266G\305=\353\345>=\347XA=\273\223\347=\017\002\320\275\240-N=\311\237\255\274\251\232\006\276\035\374d;\356\266\241\275\340Eg;\210\273\333=\214i\262=\233\364(=I\360\020\274\351\317\346\274\215\255\006\276\212\346z\276@\324W\276\200\305\242<\260\366\347<\230\346\274\275\324N\273=\014f\255=U\014\347\275H\371\361=\224\0335\275}Nd=y\">\276\360\353\201\275v\203\227\275\357w\n=-\211\313=\303\014\251=\230i&\273)\216f=\211f\r\276[\363\227<\2331\025\275B\010&\275\225,\013\275\022\004\275=\301$\001>\220H\234;^E\234\275\204iB\2757-\237=ks\353\274\316\261\037\2751V\325\2721\362x=&\360\024\275\026#8\2758\200\204\276\221e\355=H)\277\275\313\354\215\274\307O\233\2750\002T\275p\242\034\2747\033\030>\331h\036;sS\202\275H6\254\275\323hH=(I\333<#I\344;2mH>)d\003=\353\312\203<\277vG\275[\032\310;8\337\014\276\036uR\275U\017+>\014\301\270=4\002\302\275\212\010\010\275?\221d\275\267\223\346\275\317\216\363<YC\261\275 \'0\276\254\376\350<\205\232\312=6\276-\276\3131\t>\377\344\317\275\241\253\006=\222\222\016\274\273m\014>c\210Q:\314a6=\245\352\371\274x\036\237=\263\036\324=N\000Y;\254\223\027>\264>\356<\251\317\261\274pP\t\275\252\241\352\275\026\371\237\275\330\023\017\276Q\211\301\272\013$\374\274\023\365\022=\000\222\005>\230\316\304\274\264\202\200\275-\361 =N\245\373;\237\002f=-\037 =\211\336@=\360K\360=5\036\025\275Y\334\355\275\2623W\276V\327\350\273S\311\022\276\270\312\010\276\027\274\366\2750\311\007\275\315A\205\275\310Lk\275\224\364%\2758\346\026\276\205Y\306\275t\263\242=\343\034\263;\317^\r\274\364\'\277<)\357\322<\033\240\301\275 \021\340\274\003\352O\274<\356\321\2751\202 \276\025U!=E\023Y=\371\027;\276\264\251\247=\353\")=uf#\276D4\002;\321\334\321=\331\255\320\274\177\2202>\342\337r=\236\036A\273)\253\225\274_\004\221<\344\315\032\276\371\300\025=D1S\274M\3146=\024\026\231<\207u\340=\0229>>\347\030\001\276\006\310\352=\230\351\240\275`\266\013=\343\207\005\276WB\022\275\342_\234=\324zb\275\335\324\240\275\373e\252\275\327\327{=\334\320\031>q\335-\275\304-Y\275\365\343\025\276G\345\236=_\247\227\275MF\265\275DP\330=-\\\003=W\370@=\260\035\307\275-ZM:\032Q2\275\2758\206\275N\275.>:\336\311\275\200\226\274\275\231\263\245\275\253\370\245\2741r\242\274\314*W= \374\016>\007~\315\275\300\365#=Y,@=\006\'\343\275\267e\317=\355\232f\275\005\306Y=\206\260+>\246X\221\272\2403\273\273\321\005\005\275dd\271<\272q\264=xV<\276\367\022n\274b\006\177;\020\375M=\017u\016=d\355\347=\224\357\205\275\365\216\202\275s\004\022\276\347Iz\275\025\030\230<\323\230G=\371\356\334<\0179\t\276\230\014\017\275V~\200\273\217\024\034>P\030\265<\313\266l\275\210\222\346\274<Xu<\003\276F\275\375V\010\275\265\243\367<\014v5>\021\360\006>&\363+<\304_\316\274\036g\210\275\321\275o\275=Cr=\216\346\023\275\213\025>\276\244RT=>`\315\274\207uL;\362#\322=\026\365u\274%\332$=\016%P\275\037\207j>\010\265w>GT\036\275\215v\321=c\263\324\275\350\277=\276\343\350\352=\017\003\305;\367ZM\275\325\225?=a\254\217=5c\'=d\336\007>\225Z\215=\026D.\275\246\322\337\273\231T\370<;\211\226\274<\333\301\271:Q\n\275\032\345\254<;\n\r\275\242\215\331=\313\243j=uW\364=nM\314=\001P\035=\216Zi=S\251\247<\001a\272=\372\306(\275\366\203\231=z\227\254\275u\374\002=\246\366+>\030\t\303=\215\016\007\275\017Ex=\244\325V=\366\001\007\276\250j\257=\313\262M\276\307n\236\275\036\314\243\275(\'K\2750\240\201=Z \234\274\344nZ<\312\203\266<\240t\277\273\361\223\270=Z\034f\276\313,e<\352\354\360\275\037\321(\276\343R\267=\001\333\020<\354\000\257\275\267\023\275\275V\350d\275\336\372\357\274\007\001\217=Q\277\332=\214\376Q\275\257\036\276\2721Y\025\276\210\0039\274t(\216=\201r\353\275\313\325\265<m\345.\274\310^\217;I\205s\275\014\251S\275\274]\226=WTP\275\367\303A==/\267<|7\344=\376\365Y\276\226\213l=\371rw\274\366\270\010>\036AD<Pa|\275E\237I=\221d\304\274\2757\333=:\000\223=\343\"\010>\232\312\037>mx\030=iYi\275\202l\000\275\360(\301\273\246w\314= v\014=\0310\"\276\316Qa\275v\003`\274\254\005&\275\347h\014=\252\336\245;\023X\324\275\323v4\274\033\316\264=\333{\255\275\255\323\330<\366\233w>\375=l\275v\221\373=\236.3>1d\217\275\010\337\n\276\351\330\204<\350\261\235=\027\377\026>\224\241/>\225\252\300<\345\336>>?\253,\275c\251 =k\306\330\274\256\240\223\275\245\251c=\r\235\336\275\321\357\377=\237\271\237=6I\\\276\027\257/>\013\271(\276\177\026\302\275\021\314\352=\205R\t=hmd\275\262\346w\276\301\227\304=\n\234\023\276C9\013>1S\300<\354=\244<b51=\354\261\262\274\263\203{\276\336\351\n\273I\335\247\275\324\310\254=9?9<8\024m\275\204\253C\275\331$\246<:\260\331=\315\334\301=\266\005\"\275\2359\237\274\231d\026\274%t[=\340\311?=\2314\037\275R\253`\276\240G\024\275\252_%\275\343t\327\275\220\355\t>\'se=\330S\303=\332\310*>\010S\245=\303\223.>\313\251\024>\277\356\271\275\024\001\004=\352\230\246\274\374O\220=?\316\225=\0336\307\274jw\337=o\360\037=s(\304\275\265|{\274\240\300r<\242\314\340\275A\367\253\275\332\260~\2753~\302\275\'\347!=\242\033\271\275\312\315\310\275<\345M<\203L\002=\331\347\017\275\342\300\341;~\3565>-\257\r>;i\245=\027<\337\275\275\r\240=\376# \273_sA\272m\322O\275h~\023<\246\303 \275\322\022%\275\267\266\006>+\031c=\374t\272\275\246\274\310\274#01\276\214\226\272=\0202\232\273\330\010V\274>\364l=\236\234\227\273V\024\336\275]E\214=\315\367\023\275\024\355\252\275g\365y=\3101\216\275\n\205\004\276$\005)8mx\t=\233\017|=\2741\327\275\237\223$\274\324|?=\247\374Q:p\301`\275\365\3613\275\204!\003\276\203_\024\276a\200\330=4L\350=\257Wl\273\220\3326>\t0\261\274@+\215\273\267\240\211\275E*4\275\016\3067>\2326\313\275\224\0221=\270\214\016\276O2\372\275\315\200\013>\t\203%<)\n\'>\026k>\275w_\322<\3707\301<\006%\352\274\264\360\361<\221\370\344\275{S0=5\237\302\2755?\177\274+\372\204\275\210\214\261\275\254\332\270;\035V\231<\304w\255\275\355\272\333\275\205\275+\275\230G\326\275\202\177\217\276\271\205\261=\221\035\021\275\261\374\031\276\367B\224\274I{\217=\216\224v\274Grs\27557\351=a\277,\276M\226\215=\301\372\t>\337\242\303\273\261\265s=nk\226=\257\232\276=s9\202\275o\305W=?8\007=\354\021*\275 \246\323\275,o\350\275!\340\330\274\352\216\010>\300kj\274QSs=\351\3041\274[\201\000=\212\027\245\275-\255\323\274\354\003\336<\214\\\371;\217X#\276\200u\206\275\260\023\233\275\'\272\257\275\005\341\002==\265\217<H(0=2\323\206\275\325\263\216\275h?\255<\317\0275\272G]\\\276\354\211\376\275\003^\014>\231w\034<\3316\033\275k\203:\276\\\377\260<\327\217\020>\200(h=\342\n\325=G\375\314<\237\272\022\274\307o\320\275\030\247=\274\000A\264=29\257=\004[P\275\004\225\362\274l\312~\273,\217\304\275w\363\300<:\315\n\276\240\252\233<\226\244\234\275\226M\037>\256\340>=\346\213Q\275\221\352?\274%\220\034>9gQ\275\205\2753=\3610\255=\231\265\330=\024Ka\275\245+\316\275\233\2618\272Zi\031\276\340d\004>\\\nQ\274#\324\311\275\302\316\001\275\002\270\213\2766\016\364\274\330\254~=\215\221\014>\007o\203\275\203\271\025\276t2s\275B\'\\<\303\367\337\275\271\032\t\275\223\206\301<\246\326\226=\n\203\355=H\351P\273D\372!\276[U\n\275\361\345\337=\376\305 >\341i\r\276\201\004c=2P\350\275\363\264\\\274\243\013\360\274\002\3317\275\221j\211\2755R\230<\332\357\006=\254\036\205\275>\006\265\275\215\266\343\275 \232\242=\246\274\330=\014/\t\275\215g\356<\247?\314=;\027\364=\241\013|=[nn\275\325!S;\227@\340\275(\013\000\276tU\300\275!\307b\273t\0033\276\227\243\343<7\245\326=\221\\\311\275S\231/>\277=G=\031\253M=$\331\213<\262e_\275\212-\373<\353\3305\274\274\225\000\274c\322Y<\t\271\202\274n\367R\276\037Y\253=hei\274\343e\324\275\030Fu\274\376?\221\274\332h\204\275F5\340<\327\245\'=A\203]>]\273\341\275\205&\253\274\226c\r>S\024\347\273<\005L\276e\230\310\2748\t\032=\273\177\373\274kI\013\276K\"\362<$\203\212=\330\014x=\013\215#=\252\317\333\275\026\016\365\275\324\275\235\275\220\266X=\216\006\203=)+\002\275\035\031\267\275\345.t\275\007\345I\275J\205\334=\303(\304\275p\236\r\276\305\024\224\275\257\356\n>\332M\010>\311\2524\276@\216\351=\276+8=\255\002\000<\222\'\300=Y\342\341=\365\356\256;\311@\241\275\201\263:\276\026\236\233\275\337\024\247=\254\370\016>\372\321\342\274VI\234=J\230\262<\024.\330\275:\207z\274y\014\277\275\272l\366<c\3765=\355\002$\275a\001\240=A\341\315\273\277\347s\275\273\241Q\275\003\211\005>\242\224\266=\247F#>\000!\237=W\017\240=\255\246F>\006S\213<BR\037=\222\010\271\275\253\315\242=c\005\266=\206\315\255\275\373!L\275\375\000\013\275\322\033\211\2766k\266=\0130x=\234^\336=\362s\340=\300\274\271=F\2353=\350x\323<\330g\336<Q\270\003\276;\021J\273\234\224\3459) \033>&\263\263=*\320\r\2767\'h=-\222\032=\264U\324=\036\016)\276(\242\266=\335\002o\273\337g\216\276`\315Q=\246\016\254=\322h\232<\3336&\276x@*\274\356\345O\274\301\304\354\274)\363\327<\037=\034=\302;\274\275\032\343\024\276\265\177-=\343Y\036\275Y\346r\273a4\227\275k\016\r\275\261~\233<\241\240\022\273\033$4=\354]\272=\256\337q\273\240d\354=\221MS\275x\242\017=\010D\250\275\261\223\2449h6\217\275\340\027\010>\351\243\326\275\226#^=\255\303\310=\241\210\306:\310\t\316=\274\323\316\275!\232#>\334l\014\276\356\225\026\274\376D\360=\304\324\245\275-\202 =N\372\310\274\347!\226\275,{\026>\000\240\375<\201\262\022\276\023l\231=\373,G\275Ty\250\274\245\216\025=\251O\302\275\365\245\023=Q>\034\274\367\242-\2769\026\204<\177\323p=CV\215;\337\324c=\317\365\006\273\026\342G=lf\334\275c\245\022\276KZ\206<.\336\001\276i\334\033>\310z\203>qWz=\3006\025>L\220\212\275R+\214=\205\010\324\275\321\306\006\275\314\3653=\376\351\'=f\262\331\274\002\331)\275\001\275\216\274\256]\202\274t\250`\276W76=&\244\326=H7\343=\376\371.=\250\235\303=yT\327\274\257J`\275\363Yb\275\013\006\334\274\300\001\002= \337E\274[\024\005\276\354\277v=\037@\025\275d\343\224=\251\016\214=\\\324\236\275\352\003\331\275h\240`\275\271S\006>\033\\^>\346\251\003=eO\010>)\215\001=\252\324\210<\306\244\257\275\024\230\241=\016\013\n>lo<\275\003?\201\275\250r\302\2743\355\347=\317U\345\275\306\004\375:\365\304u\275x\306\014\274\036\317\224=\203k\314\275=\232 >\007\247!\275\"\026\013=Gkg\275^?\352\275\355\t\302\275\215\210)=\006\332\251\275\314\242]=o(\r>\323\013\235\275<\001\247\274\204\313\272\275X\027\2338\325jt\275w\345\304\275*\376\360<\245\240J=\340\313\020\274\200p\221=[9\020\276Y\346\211\275\006X5\276\247\026\244<e/\206\274Vk\244\275\033O\245<V\356\331<\225\301\353\275\3549X\275\267\257\376<c%r<.\222\233=\246\266\366\273\351o\033>\262\252\t=\366\376\001\276\224\005\021\276-\025\010\275\024^\223=\003z\000\276\002z\236=\3322T\275\007Yr=aB\250\274\216\342 \274\017\237F\276s\352\227=\273\211\207=fY\262=\300_q=6\364\251\275\256!\014>\327\267^=,\335!\275\315\303\207\275\325zg=\033\226|\275\254\025\210\275\314\350\376\275G\'\330=\275bV\276!\023\376\274GQ\331\274\354Dl\276\333h6>q\020 \275\325\216\352=\345i\330\274\253\253\325=\337T\307\274\003R4\275\030\032\025\2760\323\215>\270n\375;\330\023\021\276\\\000\005>\224\360\212=\247\243\210\275g\321\022\276\223Rw=\302\003.\275\n\364W\275\342\302\034\274X\233\235=\207T\031=\033\020\244=\007!\311<m\r\227\275\263\r<\275#\264\004>\262\251\332=~_n=\277r}=\237\n\r>[T\365\274\265\037\255<\323\003\026=^\306\262\275\243C\301\275\'\302\005\2748*\367=\316^-\275b\020\275\275\267\001\220\274+\227\004\2760\271X\276\344C\307\274\303\353\300;\n\2562\275\322\363\007\276c\232\260\275\013T\351=_\034\245\274\206X\204<U\213\310=H1\360\2758m\301=\264F\250=\211\332\347\275\200\310j=\000\346$>\240\333o\275\035lV\274%;\001\275\334\207\001\275S\203\315\275\200\271\202=3\306u\275{a\246<\313s\230=\257\276\212;\335I\020\276\004\257\320\274\t[\372\274\355\230X9\002\205\332<,$g=\242=\027\275(\315\177=\334\023\304\275\2254R<\215\373\006\273\233b\213\275\261\306I\274\356o\377\275/\316v=\346#\241\275i\330\033\273\225\377\352\275\377\3645=_s\347=\252\206\223=\211b\372=\005i\246==\255\014>`~X\275x\345 =\271F\351\275\371\246?=T\275\202\275\271\250\213<\026=\200<\2720\">\266\303\033\276l\250\230=^ d=\213\000\220\274k\026\000=x\274\203=c\036e\276\017\r\264<0n\330\274j\004\223<\0233t\275\202e\013>\203\030\371=;C\312<ej\030\275\037\301\322=?\027\002<U\014\257\275\207\235\214<\306\315\361=\r\270\307\273#Y\303\274\030\316\221\275\214.\261=(\206\227<\357/\237\275\205\253\352=Cg\036\276\016\221\004>\235)R\275\304\322\231=\227\244\220=\nJ\367\275\'\264\333\2759\251^\276\t\264\312\273M\203\202\275\204Q\"\276=\034\341\275\213\304\332\273\203Wa<\224)\234\275q\250E\275\305\335l\274#\330\263=\005\346\312\275A$\021\276*!Z\274\257\205\370\274\002tS\275^I}\276\332:\336=\251\026H\276\214E[\274b5!>\251\302\343;\344\307L=\237\277\257=}+\004\276z\307\037\276\252t:\274\337\325\016\276=\274\277=\203a\346=\264\2316\275:j\005>?\313\353\275\343\r\303\275\001\224c=\315\274\325=C\340C<\"\374\360=FS\256\275\305x\330<\2474\324\275^./\276\230C\240;kk6<]\220\r\276u\024+=\257/\306=\004\271\271\273\315\265\372\272\317;i=\374k\264\275\270\231\244\275v\355\032>\020@\023=\255P`> \274\361;!\003k\275\031\316\203\275\017-\270\275\261\300\263=\336[\232=<\270\t=\237\004\275=HF\017\276*\002\002=kw\030=\372\345\004\276\277\361\376=\030#k>,{f\275\335\366\243\275\036Z\203<\320q?\275p\036\025>\367\331\037\276\362\013\031\274\314\207\325\274V\3356=F\310v\275\315\357\000\276\005\330\325\274\010\234\024\275J\302I<\376\254X\275a\\\252=\036n\232<Zt\340=A\301R\273\342\237*\275\003\034-=\335\300\301=\016\r\234\275\333nY>;\220+\276\302d\004\275\312\342\024\275!\222\020>8\016#\275\341K\303<\315\255\006\276\250<L\275\211EB=\200\314\"=\211\232T=\350\305s\275l9\353\275e\375e>t9\215\275\223\205\235\275\r8\233=\004Q\231<\264\312?>\312\301\002\275\017\315\313\275\322Z\254<}\017j\275;\005\272\274P\325\213=\261\327.\271\220\020\000=\023|\n\275UH\220=R\023\032>\376\245\206\274\346\242[\275\2432V=\3038\302={\3714<\361v\016\275\372\2114\275\005\312Q>\014\335\021\276v\007\377=\200\333e\275\214(\225\273\025\353\037\274J\034\243=\313$#\276\314\356\372\275\013\264\200\275\021\014\276\2757*^=\301\265\374=\240\207\363<4\2673\276$\231:=\252e$\275\"\033$\275\371\346\235\275>\212!=\n\347%<.7{;\237\356A\275,U\t\274\263\376\230\274Yz/\275\226\212\250\275C\3403\274\2343\363\274\336\010\232\274}9s\275|\212\000>N\2214=\025\004\320<\014T\037\275H\232\221=\275\257V\275\226\346\007>\024\307\265==\363\010\276\r\352\351=\375mt\276\272\304\241<\350;.\275\255\2456\274\033\230\366\274\342|\314\275\004\225\341\275\323\r:>>~\206;2b\274=\214\270\253=*\001\202\275H\250\263=\204\312\353=nWA>\233\202\360<\345Bh=O\340g\274\202\373H<\031\325\213\275\214\005\'\275\306Wu=\\\247\354;\035N\351<\360Uc=Io\227\275\240K\361<\370Cz<\303M\375\275\032\ns=3\355\347=\3019\036\276\340\237\350<b\033d\275\t\023x\275\245\216\226\274\254\221%\276>\240{\275\215\342\260=\010\270\t\276}\220\003>t\346R\275p\370\200\275W\337J\276?\201\003>\311\367\301\274\312\261\275\274q\376\315\275\000\2218\276\204\364\033;C\232X=\014g\252\275\263\000\303\274!\006Y<\371\003M>}P\036>\212@i>w\225F>Ac\370=\327y\240\273.\031\325\274\317l\244\274|\376\030<m\231\330\275\264\2311=\242\300 \276.\312*=\357p\255\275+\301\217\275\370\343Z=h@\235\275\242\212[;9\211u\274\362\201\277\272\357\205\365\275\305\022\261\275\200\r\377=\327\200V\275\215\362\221<\373\234\006>\227\332I\273\375\031_\274i\377\r=\326\362\023>\022 e\275\003\014\202=\350\264\\<m\3360\276\225F\236=}\277\212=l\344N=\367\327\323=\276\201\032=S`v\275\270a\367<\212{\231=\340\357\220=Q\t\027>\241\222\224\275\211\334\000><\220\016=>\330\023=\216=\030=G\\?\2765\210P\275U\254\352=Kp\206\275q\366\320=\274\230\216\275\217\263\005\275d\240\005>\027\202\023\274<\014-\276\014\224{=P\023$>82\222\275\354\365\301=\326\374Q\272j\2549=i$\210\275H\243m\273[,\340\275\334g\255=\244\246y=\252\374\247=x|g\275^\320\327\274\365\243%>\3019\366<e\265\023\275\014M8\275\321u\343\274X\231\235<\240\343y=\311\"\007\276<q\263<\205E\232\274)E\267=i\241k=\0038:=\231A\007\271d\264\216=\332\3702>\034\331}=\020\266\202<\\\310\005<\225t\253=\264m\177\275\220\024\204=\002\274\220\275wS\360=9\216\001\276\035\033{\274[{%>\027ON=\266\260C\275\246lU\276\006\307\023=8\217<>w\262\326\275\010r\347\275\226c\225\275aK\277=\330\241\240=xM\304\275\216~9=\253\353\007=\345\220\246\275\224\025U\276\354*\336=\021\207_=\235\325\373=\001\326\207=;- \276\002\375A\275Mo\214<\211\307k\276\374\325\253=\207\321\013>\326\361\005=\347\241\304=\351T\020>\277\0010\275\005~\303=\225>\265=\244\010\216=\0014\236\273\213-4\275\263x\326=\244\177%=\241\3477\275i\226\231=\316\271\"\275\025\276\203\275 \231Q\275U\324\271=O\'#\276\t\333\367=\2715\r\2764n\020\276\331\277\327\275J\302%\275\007s\263<\332\274\244\275\342\r\371<\000\243b=D\3647=f`\005=\347\315\262=\270\016\262=\2157\322=/k\225\275\370`\246=\2477\332\275?0\322\273X\300\342=^.\317\274P^\237\273Q\3344\275\033J:\275\225N\022\276\271\356\330=f{\235<\300\257\203\275osM\274\257\2229=\330\265\276<7\365\031\276\211zl;5{/\274V\205\177<\036\005\245=\315~\306\273\353SP\274\356\037\006\275\326\2347=6\350\210=\3354\256\273R\344\021<\177$\343=\016{\352\275x\275\334\274\303\310\014<Z\t\370<\365\2313\274^e\305<n\370S<w\356a=\"fS=t\350\333\274\327@[\275\000;\232=X\207C=3#\213>r\233\001\275\010*9>\261[1\276\265.\000=\242\264$\275\017\311\013\273\031_\344:\036d1<\007\037\013\276\332U\240\274\267\226\207\2756\245\241=\230R\305\275\371\352\230\275x-\347<\273\267\375<K_\024\276\230 \013\276/\025f\276\224\204\300\274\323tZ\275\270\251\306\274M\324O=%z\037\276%\226\373<Q9B>\036\325J=1\332S=6\215\227\275?\254\214\275\334\307\t\276@\321\311=\217\370\262\275\302}`\275PY\227\275\337\223(=\'0\207<\202R1\275>\215O\275F\261\316\275ah==\034V\356\274\020\236\022;~\\\333;\325m\277\275\254e\246<\342<\244=jS\201=5Z\251<\335\366\345=\202|\225=\261\215\204>V\017\232;I\363\013\276C\300\316=\021\305\320=\020\034\033<\220\245\035\275\022\255\353<\337L.>m&\007\276\014O\022=\340\006\234\275\310\034&\276 \025\323=\214\234\255<(\217\212\276]\347\350;\004[?=\335\r\234<\t^H\273aI\021<\213?$>\001\341r\274s\372c<j\230\002\276\365|L\276\321\371D<\201l\343=\353\247\033>7\213\302\275\230\253\266\275\035\2114\275\\g\235<\257}\252=\201\270\264\274\224\274\t>\256C\223=]\320\332=*t\301\275\337\355\221\275\213Q\321\275R\371\264=(5l=:\201\266\275t\235V>\361V\241<\347(w<tw5>5\321\242=\352\2131\273\245f\335\273:DV\275\252j-<\256!\001>\203\357!=x2\201=H\3568=o;\2528{\337\246==)v=\216\334h=z\0018\276\341\n%>\357\303\214=9\316\016\276\036\220?\275\344\026\005>L\271\007\275\374_I\275\343x\032=:\363\231\274\367\000*\273\244\010\370\274\245\024\230=tg\010\276\n\246\250\275e\013\033\276\020\202\021\276UL\013=&\001\022<,\017,\275\243\325\315=\023\365 =\211\233K\274\r=\272=\306\320\273=\316\220\371=\244\2451>`\334\004\275\361\343\375\273\215\263\235=\205\200_\271\374&w=\326\267\270=\002\266 >\367\334\253=\337\007\334\275\034\003&\276\255c\334=3]\360\275\273\017\350=\2302\224=\366\234\202\275\313\231\"\275\037j5\276\264\271\320<\252\255b\2743\203,>\372z\230=\010\022C=\3045\221=\026@w<\355`,>\350\247\306\275\221\254\007<&\n\335\273;\272\224=G\371N\275\215\200\211\274\250\222\262=h=W\275\223\344n>\335\362\341\275\214T\270=x\021\307\275\256(4\275-\032u=\234\254\026;%\237\274\275Y\006\205;\342\324\035>0\372\177=\346\262\306\274\210\026\235\275\027\010\020\276?\371\274\274\337@$=\265\234\341=r\004\265;\3039\223\275\355\360\241\272\2335\377\275\365\340\017=si\302\275D\343/\274\240\000\030\276&\204\260<\342\360\226\274\321H\334<U\315\260\275$\023S\274\246\212\006>>_\320=\037,\004>\316\026\016\276\240\204\363\274\366\204H=\362!\307<Av\322\275\237>\330\275\036L\007\276\265\017\327=8\267\031>|\361\374\275\027\352\246<\036\353\272\275\347\333\'\275,V\245=6\217\272\274\304\264<=\206\270\325=_b\222=\211\272\177<HZ\230\275\211\0352=p5\264\275\247\211o\275\\j\213=\352\320\010>\177\353R=\027\323\217=\341\030l\276\253\374\321\275\370\325\024\276\253\231\t>5\356\347\272\310\276\227\275\006|\210\275\202\"l>P\322T:@\021\353\274\"\311\315<9#\201\274\242\332\t\276aW\034\275R76\275\207u\347=\256\203M\275\211\003\021\276\375\023\200\274\260\343\233=\355\311\\\275(\245\330<\265\026J=\316\200\210\275\364\271\231=&t\354\273U\017o\274\2353\243=\254\022\r\2760\017\200;N\202\017\275i\002l\274\221w\304\275aX\333\275E\345\211>\304\351\010\276L\020\316=#\216\354;0\2565\276\334i\001>\330w)\276w\317\367<t\355\n\274\254JB\276\377\326\340\275T\023d=T\347\030\276W\t!>\253-\236<\325[\022<\263ro\275n\273\026\276\356Q\311\274\\P\232\273\271*2:\304\2251\275\005\332\232\275\272H\225\274\267k~\275\201\212O=\203\rM=u\266\252=\201\327h=\207 3\275\274\325\347\273M\226\224<ZVZ\275Y\263\214\275e\330\267<\005\276\031=\26429\275\0238%>/k\254\2757\200\331<h\355\376=\332\243\375\275hi\224=\306\273C\275\306\375I=Dxc=r3\025>\377\3578\275Y\330\300\275\263qs=\032_d<\301\340\010\276\027\226\037\274\373\246\263\274\264\264\332\274#\0338\276C\302\233\275\\\275M\275II\213\275\266\300\321=\360\202x\2732gX=\313\n\366\275\222\361\227=\310\235\254<\341\2606\275\206\262v\276\306\0033\274\346\300\325=M\2153=\3011\357\275K\250\035\276C\200\221\275\215\224\341=C[\211=\305<\313=0\232\307\275\237\305\t\274\276\330\\\276\035.\252=\254;\024=\327N\027\276\'\376\'\276j\366\202\275\2229\261\275R\204\256\271\200\253?\2767b\324\273X\023\017</\362\'=\237\342\000\275M\313\t>\341(#\275q\374\230<\016D\024\276s\256\n>\347\3132\275\373\272\276=\227\t\322\275\204\306j\276\362\337A=\177\353\021=\223\314{\273\367\347\004\276\231\324\220=_\214\025=\2026\210=\305\216\005>F\246\205=u\241\332\274\262\306\321=\000\341\265\275\203\035\000>\ttl> 3\270=\243\353+\275\211\216z=\351\370\031\275f\211\202\275\337\3364=\013_;=O\221\302<\333\302\227\275\010r\000\276BY?>\270\301\231=E\336\277<\211\003\352\275\030f\254=n\261\242<!\006\030\273\037\3202=h\227/>\245\304&\275\372I-=\0250\313\274\212\200\r\275\2356\352\275\010\223\337\274\310\320\n={R\350=C\313\360=\212s\345<%\334\230=\314\202,=\325d\351\275\'\324\263=\3051V=\020\267\312\273\213\204\314=\264\341\003<\340\333\311\275\377\370\\\271\245r\310<D_w=?I\333\275+\247\306\275\025\325\230;\271\337\253<\266\304\206\275l\357\344\274\346\361\203=\344a\231\275\250(f>\313\206P:p\373\302\274\220\235A=\177\251\246<\374x\361\275\246RN\275\275i\205\274$\260k\275\215\332\215\275\026~{\275;\227\241\275%\357\322<\337K!\275\302\376\377=SM\033=\037\317\210<\336\260\365\275\0056\325\275\272\207\312\274i\332v\275\214|\375\275\367e&\276t\252;=\204_\037\275q\316\310=\025\3146\276\353\2512<ZP2=\264\216\020>\025\230\266\275\336\275\362<\360\3706=_\345\205;\374c\n>\310\025\023\275\3208\r\275\016U\022>3\246o=gi\021=+\324\016\275S\003g\275\261:\325<\265u\235\274\365\346\000=X\325\n\276&;B=U\342\305\275\210e)\276\n)H\276.\340\252=\374\351\356\275\366\005\332\275Zf\312\275=\256g<\034\272E\275\023\345\025=\376\313\216\275\215yq\2756t\253=7\251(>\332\361Y=\007{\"\276\017\321@>\265\202\326\275\227\3100\275\224\265%=Q\311\356\275\347\024\365\274o\332\001\275\220\213\226\274\243\367#\276|\\l=$\212r=\234\213\217\275\326\n\330\275CX\347;\207\344\215=\364\254\310<Wq\207<B\266\010=\325U\226=`\005c\274\020%;=\305\253\'\276\243\0304\275\2540\021>O\016\024>R\035\324\274nl\346=F\216\337;\206y\032\276\376p\232=&\370\336:\2678\210=9X\230\275\311\334\326\275\220{\312=\3041D=\252T4=\362,n=\223\202\004=\202\305\364<\354G\271\275z\350\276=\2645\002\276\r\1778\275\n\213\006<\032\363\000>\323,\204\275ut\205=q\025\017>\363\206u=\230\010\362<q\027\277\275\265]3<\207\362\n\276\375\264\002>\033\363\337\274yt\024>\220\233\370=v\006\030>4^\021=\226\201\">\246\357\005>\201\202\001\276rC+\275C\026\306<s|\342\275\375.\007>thu;\346\215\037<R`\300=\034H\032=\354\223\002>\321D\276=w\217u=\270t\220=\341T<>\265B\324\275\344X\251\275?\246\265=\321\372\253\274E\270\005=M\t\000\275\206g\271=~z\254\274,\013z<\006\'\034\274\352\374\313=\302]\203\274\3277E=\221\231\201=3\237$>\336\032\373\274*\3676\276\267b\250\275t\3452\275[\310\023\275\251]\236\274^\240\332=\271\353Q;\367\312\376\274\373z\316<tf\013\276\005\374}=\302v\037<9\374\345\275\tw\004\276t\224\323\273\256\022\'\275\037\225\364\275L\253s=\357\236p\275\271\2358=\224\265\001:3c\003\276\310\312\320<\347lk>yI!\275\333M\204\275\267\343\337=\016l\352:3\357\273=\\\210\366\275\034\037)\276\273\363\232=\305\233G\274i\253!>3\255\370<\366)\241\275k\307\251=b08\274\024\230 =\371-\311=\004Gw>V\232#=\203\017+=R\221\311=\230W\210< \251\t>\027E\022>\013}8\275\211Rb\275,L3=\002\031;<`v\n\275\251\000\214\272{\330\354<N\024\233\274\224\271\233\273\031\013\274=\034\201\014=u\251\356\275\315\"\004>f\\\032\276\345\352\301<D\271o<\002\007\010\276\354r\311;zO=\275\270I\217\275<\301\301\274\342\243X\275\226<\177\276\207\261\n=bs\000\276\241_\260<?\222h\275hV\304=\221\225`=(\020\342\275e\027\330\275\002\225P\275?\"S>\206j<=\036;\r\2750~\344=Y\257\244=\200\373L\275\034\216\266\275*\307\312\274\340d\260=0\216->Z\340\303=\213A#\276\311n\263=z\3554=]\317\016>\3557\024=NE\265<K\351\364\274`\355\021>\'\203\006=\247sv\2752F\275=,\231(\275\275\003\370=m\225\216=D{\356=Or_\27593\003\275\222\244F\276\031\372\r\273\263\007%=J\014\034=\034\335\200<\376\264\005\276\366\307\216\275q\036\234=\257\254&\274f\304@>\020\273\372=g7\244=\223\350\254<T*\352\275\275#P=\242\nY\275N,\250\275\366\366\216=\321\353\306\275\225\305\'\276<\'\014\276\234T\360;\331/`\276\334\246\305\275-S\343\275&nA=O\330?=\206B\333<J\210w\274g\271b<\232H\305\275\266\331\265\274\000Z\262\275\226B\342\275\335:J=\200/\266\275\345\300\214\275W>\352<\315\357\n>)\322\360<<\205\302<\250\256\277<\210t\206=B\210@=5)\022>\236W*\275\230j\326\275\322\354K=_Dp\275\033\240\313<Iy\024\276\245\250\275=*\314s\274V\014\375\274\233\024\245=\257\310\343\275\177\363P\275$30\276\332\255\244=\'_Z\276\t1\335\273Ji)<\035\224\026>\375u2\274\210\375\251\274U\243\225=\215R\335=\035\022\025>v\353\205\273\014\270:\275\'^\223\275\346\336@\275=C\377\275\275\226W\272\277\260\n\275\275\024\334\274\025\212\346\273\010\237\">\367\310$\276v\335\301\275e<\333<x\034M\276\254\200\270\275\010\325\261<\353\276\010>\277 \223=\030]\207=\357k\370\275\376\303\347<\007u)\276\206\246\333\275\250\205M=\344\372\276=\031\224\362\274\220\222;<\014.\033\276\370\350E;{V\326=}\242(\274\317\2204;\217\313\025>5\236\005\276\215\312h\275\361\021\242=!\327\357=\232\314\316\272N\353\232=m\0217<\370\013\341\275>5X=\331\203b=h\355Z\274 \260->\234\355\002\275=\212\203\275s\001\000\275\262\213\244\274~\274\t\2752\341\006\276\311\332\317=\2060\200\274\257\363&=\331u\024=P\343t\274\225)\331=\263\t\003\276\314\265\266\275 \216\315<\3304 >ui\250<\374U\276=\247\206v=\336y\255=\312a\325=\351\373)\275\200\353~\274\211\030[<\245p\205\275v\314\232=\177\337+;V\234\205\274\357\254\322<\341\013\241\274>i\365\275b\256\355=\312\203\373\275F\262\177\275\335\217&=\226R5=;\266\305\275\355}\330\275\0043\316\275Q.)</\267<<\351N\255=\022\271\336\275\313\036b=\0359\274\275?b:\2751\2459=W1\373=\310H\207=D\345\327\274FD\241\274@\207\207\275\300X\231\2750\300\322=eJ\316=\037\002\r\276\271K\'\274g\331\227=\314R!=\277 \240=\264\037\000\273\004\3365=0Y\212=1~\332\275\032Z\343=Y\240<>\013j\275=4\200o<\255\237\346=\323+\224=\010G\230\275\370\034\r=\366<>=\024C \276\373\237\002>\210\325\331\275\341:\212<\334M\300\275\020K\022=\354\0217>S\216\336<\375?\240=\025\330\030>o\221n\275\211}\215>B\273\r>\343\212 \275\0063\n\276f\350\023>\002\267\357=\367*\311\274\273\374\r>I\376\t\275S\301\312<\262\037\267;q\306\020=\306v\223<\277\035\013\275\237\233m\274c?6\276\214\367\020=$\333\230=\277\341B\275\206\201:\275\207\310\335\275\207\276\317\272\251\340\200\275\014\370\347=n[[\275hV*\276\360P\026>#\006\020=\255\354\364\275\352@K\275u\244\252;(\330E\275W\264o\275o.\177<\330\327\200\276\332g\373\275\364\020+\276\303F\273=\261\304X\273#\253\013=\331L\234<8;T>\222\n\'\275\213Q\356<7\324\333<\231\271\315=\222\202\021\275\024\376l<,\373.\274\306\221\377=^\237\377;\276\336\020\275\027\315\037\276\205!\336\274+\304\220<s\351\275=D\273f=\201?\233<\372^\263\273\254\326\004\276\007\003X\276k\006z\275\371M\244=\347I\036\276@L\304\275\203)\362\275\303K\357=\277\270\n\276\226\036E\275\237\210\312\274`\334\206\275\344R[=e\2763\274\363\223z\2744`\\=H6;>\305)\017\275\262\334\336=\376\3322\275\273\036\247=\222\'\244\275|9\342=W\260\202\275\020\354\332=\352\203\204\275\035h\021\276\300\300\250\275\2546\227\275\302\311+>\227\032\323\275#\271\017\275h\237\222\275\370\003~\273\262\214\326;\242,\234<\233i\037>\\\273\t;\023T#\276\332E\275\275UE\322\274\256%\370\272\310n\262\274\247\261\351\275\"\033\260=\006\355M>\304\'\203\275\310\334c=\023G>\275w\026\032\272M\363)>\270\203\007=\235\016\376=\220\0211=\201\367\231=\\2>=\3242\201=j+\226<\035\265\246\274\3416\320=<\020\224\275.\373\024>\247S\274\274\335\237\342<\017]\214>\264\302\304=\256>k\275\206\266\324\274=\247\010>5\317\344=\"2,=\256={\275\203\325\037=NH&>0\227\274\275hSZ=\254\351\355\273\367\332\251\274Mi\335\275!\332\001>n6\241=\002\247\030\276;\334\036>\213FA\273b|\252=W(\256<%\247\352\275~a\261\275_FG\274,\376\004=<N\223\2736g\237;\345\256P=\231\204\254=\224\231\276<i\202\237\274\201u\237\274\312\034\203\275\3515\030\276\360\353\364=,\204N\276\312\334\213=\310*\024=\000j\370<\262\377\306\274\326\211\022>pO\333\275O\372Q<\3420\327\275b\347\371\275\231\026\301=\274\327\212\275\035N\217<\210\210\r\275\004\306X<\007S\003\274\013r\022\276\211\027\364<*.\235:3+&=\375\251\236\275\224\215;=X\271\3779+\231\212>Va\006>N_\272=I\351\220<\005\036\372\275_\241\020\276\3733\024\275\364\273A<\006(\216=\351\213\300\274\262\312m=\267\233Y\276!7\013\276\023\302\020\276A\352X\275\333\346=\275\276\341\310\274\366\020=\275osT=\211-]\276\243\3674\273\263\343\262=em\200\274+\035\236=\016|/\275\303\264\203\275(z\004<\001\370j\276\226\253>=\315\372\036=\257\322\004=\036\212\002=u\242V\275\335\003(\275\3257T=\003~\334\275\032\0058\275\220U8\276\2673\234=\242\357Q=w\331\252=\266{\363=-0b\276\375\217\311;\025\237\025=\377\006H>\376X\342<\010\363d> \335\211=\004\263\003\275\277nx=\006\223.=\322\007\240\274P&\361=\275\377!\2752<\332\273\374\254\254\275\0137#\276\366X\201<Q\023\022\276}\305\332\275\277\306\220\275\320,\300=4\252\\\275\334\212g=2\212$=h\270\374=BE\204\275}\030l=\312\020\202<\353\003\005>BT\373<\347j\030\275LQ\"=w\2332>\304\375\201\275\202\363\231\275k\017\034\275\364a\306<R\261\003>\024:\3479+\275\262=\376\216\245\273,\3470=~\366M\275\374\207\026\273\037<\375\275S\000u=\226\211\233\274\344\356\017<H\320\357\273\310qy=i6\363;\025\205n=~?\265=A\241A\274\351\330\343<\016\217\314\275\3315\373\275\344&#:\ti\036\274\322\344\327\275\332\035)\275\n\334\212\275\256\346\243<\273\231I\275\270\027\\<\026\005\260\274\0105\330<\214\177\037\275MXp\274\217h\364<\037\356>\275\224\023\321=\2747\205\275\001$\003\274\344\357\302\275`\007\017\2763\344!<\013O\310=\335\301Q>\275\330)>BN\243=E\307\203\275\326T\036\275\325\017\362\275\316\2324\275\np%\274\3672j=\250\210w=M\355\344\275-<\231\275\206\243\347=\201%\201=\025vC=y\203y=\377\241\246\274\327\"\232=\276\002B<\245\205\306\275\026\240\002=\004\177K=DD\224\275l\367\253=0i\251<s5`=\224\200\230\275\236\002\364\274\320|\330\275w\211\256\274\276\337?=\311\235\007\274a\362\007=b6\204\275\';\244=[\270\264=<Hr\275\343\340\215\274\356DR\275\310c\237\275J\256\027>\253\333\262<ed\177>\010\025f=\024\263\003>#F6=\263\022\367\273\232\240\221\274,&\004\275d>\023\275\030\364H\275\'\274@\275$\364\010=\213\247\000>\233(\265=\363\254\203<\346\254\033\276\340|L>\271\016\311\275\373_\365\275\242B,=,\200\010\275@\033\274=+Q\271<\036HF\275z\034\265=\325\304\010<cq\202>3oX\276\327\223\033=\273\350L\276\364}\010=\252\352$>\27081=S\332\230\275\323]T\275\213\277\177=;\374\302=\021\267\320<K\t!\276\340V\233=|\250\344=\227\024\267=\226V\025\276Q\257B\275\202\264\024=\263P+=d\017\n\276\323-T\276\n\353\027> \315\002\276@\375\302\275\303\362?\2745\206\027\275\376\266\021>^\306r\272\010\034\235\275Op\247\275\021\266u\274V\314\034\274\345s\025>0\324\331\274\2728\216\275\277\213u\276\256M\021=\031o\314\274\rZl\275\373\250q\274\327k\007\276r\350\237\275@\211\231\275]\333\363<\230z\340\274\275\247\027>\2466\233<\014\246\376\272y\233\340\275\206\214\351\275\302\307\t\275A\324\344=ld\376\275\235]\305\275\303-\025\276\204\367\276=\307\272\262\274\224\021\231\275\334\221\312=\277N\243\275_LK=\375\313\351\275\223\252\210\275\032k\232;\235\010\303\275\303\023\023>\272H\023\275\352\001\361\272\240\276;\274\223\002\354<b\212\247\275\205\007\375=_NO\276\332\305\223\275\006\334P=\306\3710=:\360\226<\026\004\206<\317\206\001=\376\377\327\274\2441\013>]\350\260=\261\264\244\275YW\242=;\0002\276T!\221\275\340\201\370<\207C\366;\311\303\300\275\005\000\311=\200\\\020>E8\356=1\360\347\274\241-\355\274\326v\277\275\024\n\316<\271\217\t>\372\362\217\273e\340\035;0\226\350\275o\214T=m4\265=c\307Q\275z\206\006\275,\"\264\274\311\222t\275\023\002\210\275\260\350\352=\202\021\017\276\215\372\274;\245\351\005>\343k\211\275\033~\274=(\231\375<\300\225%>\365\235q\273\036N\224\275\021\227\004\2753\2030>\336M\263\274\336\2131\275{ar=W\001V=\356sJ=\334J\372<\273\037\002\272\037b\026\276\025l\315=u7\222<\270W\253\276l\203z<\236\214\007\276GHZ=XR\205=Yv\236=\223\372a:a\331\036\275\252\341i=3O\317\274\357e}>}\024\262=Ze\306=\371\\\326\274\201\224q\275.\234\276<t\007\031=D$\037==P\334\274\t\366\335\275l \351=\374L\">7\374X\275\256\rX>7\277I\273\354|:\276+\233\301\275\234\327\025>\357\344\263=\365^\354<\231\262\t=\356\235\211\275\235LD=%\257\332=j\364\315<\270s\332\273\007\373t=\376%\213<\261\2008>d\207\342<!P{=\356\222\324={ve=\036\272\024\276\377\370\331\274\250}\300<\014\351!\276\205\236\367<$\362\230\275\242\307\251<B\365\032>\002g\322\274\362\326\345=\376U\375<K\267o\274\026\216\344\275\345\303\026>\344O\225\275\026\240$>\275\267\330<r\377\026\276\032\314;=\303\274?\275\301k\342\275\362R\336\274xR\306=\370]\261\275\356\202\374\275\354\243,=e\256\247=\257\361X\275\321e3=\341ss\275\244\347G=cl6>\001\302\'<\317o\317=\373\303\244;\377}Z\275\216\301\261;VT\356\275\313\327\211=LG\000<\004\330w<ZH\273\274\014\336\271=J\271\310<\375?\277=\272qX\275tQ\377\275\345\365\253=\250\232\207\276w\267\027\276\352\242/\275\253\000$>\236\370\370<z\023\357<\330\246\276=\200\217I=%\333A\276\234#6<\365Rj\275\356\211\023=\335j\\\275\370xu\275\271-\266;d\0267\2757/b\275\'qz<\3204\017\275],\225;C\367\007=\007\351\242\275\354\006\314=\211\305\232\275\033\343\201\274\356\263\001\276\277+\303:\177\337\034\276\254o\213<@.\310<\242\250n=\255\200\217\275L(\256\275d\306\n>\351\306\261=\234\035\245=_\000\344\274\262\313\234\274\226\221\253\275\n\321\355\275\305\217\203\274\263)1\276c\020\230\2740\032Y\2753\001\223=\231\014\005=w\221\231=\371OW>\335\354\207=\\\230\203=r\025?>\336G\264=(p\303=g\220\372\275\237\350l\274\025c\204=C.\035\275\202\273\323\275<\320V=jqn=\203\252\205\275,\360\342\275\316\317)\275\235\370W\274\306P\371=\241\222 \276I(\274\275Bq\025>\352\021?>\275\265\020=\010\243q\276\002r\304=\205\241\252\275\360P\320\275\014\320\306=Y!\324=\314q\215\274C\301\010\274\307\250\335\275\002\326q\272K\325\021\273l\220A>2\002\242\275\316\350\026\275\244H\242=^\362\236=\023s\260=TD\002>\373\326\335<\321\3417\274EO\224:\325`+=\025Y7<W\2141>\321\226}<d\nG>\\8!>^6a=.\204\032=\001\320W=\336b`=\270\220\217\275\303\362\232\275\255\231\250=p\270\026=\262\224\264\275\271\017==\361Y\177\275\201d\332\272h\003\237;5+l\276\352\263\r=\353\261\353=4\\4\275:g\355\275S\027\020\275\236\244\234\274? \322\274\021\205\247=\365\353\030\276\306\020\317\275\302c(<\'\331\223=d\037\325\275a\322\347\275\312\365\036=NM$>\361=\363<\3458\236<\331\324\255=H\016\354=\\t\375\275\201\255\210\2757\362];\244[\316=\342]\225\275\276\265\364\274\212<\345\275\035\306#\275\325+\261=FVH\275rT\275\275\231\030\014>\016\002\345;K\357\302\275N\227\215=c\'\352=\241\277D=\323\274\n\275e7.\275\025G]=\257W\230\275\270a\000>E\356\314\275\200C\236<&F\'=l\"\356\274\360gN\275\237n\216\274\000\001\003=\3708\261\275\351\363\247\275Y\312*>o\020t\274\301\"\033\276Qc\'\275J\305\003>\007=\207\275*\211@:\023\022\034\275q\273\311=|1\207\273)\027B=\225\322\224\2738;\361=\311\207\256\275)y\034=\213\326\235=\226\257A=\353=\236\275\260\265\365=;\031\332=N\272\277<xl\235<\274C\265\274\257\211\031>\304-\271=$\212\363\275\032g\004:\322\312\020>\025\034\355\275\357/\361=p\260\002=\361\021\356<\304\271\334\274\316\256T=\332\242\304\274\0076\320\275\351>\t=\344\021\305=i4\372=E\313I\274\017\004c=1\320\033>\007\324B\275\360W\261\275\231\303\256\275\211kY=\371%L>\337M\351=$\353\332\273\232\n\246;\"\263&=\032\377(=\301\316K;!\276\336\275\026\001D\275a\n\017\276\034\203 =Z\223\035\2766\223\301\274f\301E=\212\314\021\276\3036\262=iW\214<.\370\271\274r0Q>\3724\360<6\016^\273\014I\340<\356\331U\276B$\262\275\000\367\237=-7\262;\261n\241=E\336?<\247\315\016>\010kL>\332e\027<a\222o=<\n\273=\014Xp=\377\334k=\001pP\276Nn$\275\357\001\325\275=~\244\275\335I\333=\212(\354=\346o\341:\264(\325<\224\2743\275g)\032\276\356 q\274)\370}\275Z\354i\275(\301N\275\016\243\367<\241\337\005<\r\354d<Ep{<\231\356\217\276\273\"\002\276\217\217\376\274\266E\325=x\214*\275\364\304s\275\373\346\201\275\325\357\241=\216\205\331\275-w\227=u\357\007=(\213z=\321\004\210\275\256:\324\274\031$\224=Y\325\201\275i\332>=\327\275\021=\225W\332\275\270\2600>b\312\257\275\177Q\'>R\267\027\276\253\201i<fi\356\275\372\223p\275&\375\354=\000\2571<"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3610566
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
