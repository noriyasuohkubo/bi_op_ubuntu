node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2445225
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\266\202\213=!p.\276((O>\335a/=i\225\221;<s\346\274\033y\027\275\211\200\027\274]\231B=\213h\240=(?\326<\207\333\322=Y}\307<\207\221;=W \007<W4#\276\266\241\007>\272\341|=sQ\211\275d\340\206\275\031\221a\275\327:\302\273\321w?<\021\317\340<\224\210\022\275q`e\275^Z\316\275s\n\306=\t\024\004\2742\240\n=\325;K\2758\310\022\276)\366\201\274a\225\223;\010\306$\276\321\304h=\201p\316\275\266\261\307<K\303\201\275Z\022\254<\372A\233=\330^\313<\3108\311\274\200$<\275\310\241c>Qe\343\2755m\210\275\177\306\217=8D\325=]\250\372\275\276\026\365\275L\232\247=\264\361\203<\362{\232\275\226\003\240\275L4Y>\202l\210\275\377\212\002\276A\370\222\274\2639\234\2734q\255\274iGT>\266-\366<m\250\343\273s\377\324\274z\373\305\275K\375|<\264\250L\275\320\021\376\275\242\317\202<\332S\234<\"\345#>A\t >i\302R=[\247[=\r\230B>\3745\340<\240*\260<K\316\375<\034s\246\274\221YM=\003\373\023\274\021\354\261\275\207\274\016>Fn\021\276\323\003\261\273\177,0>v)\036>\014\251\203=\177\247\271\275\217\034\t\276\347\336\371=z\377\202=\360P\261<\377c0\275\233\025\371\275\031\257\025\274\r\271(\276\215\276\302=e/\307\2740\255\322\275\267\312w=\221e\261\274R\272\343\275 1/\275yY\030\275-\001V\274\2550\235=S\r\253\274\034\247\205=8\262\330=\307\031\321\275kS\036\274\005I\302\275V\336\266=\243N\255\275\272\214D\276\347\\\n\276Fx\035\276\201!6=\223\2439\275\275\326\002\2762b5\275q\025\000=\265\246h\275\322\253*;\235\373\203<\330+\t<U\000\304=\006\250\'>X\302\202\275\357J\275=\030^\274=\337\002\022\276S%E\276/\360\273<\353\253\215\272\302\\\217=\232\224\001\272>\242\305\273\225\357\215<\311\305\234\274R\250\336<>\241\237=kY\304<K\226\374\274#,\250=\346\003\337\274\210D3>;\254\222\274\377\020\202=\272\310.\2736O\352<\256\013\335=S\235\363\2742Jv=\341\226\034\275\355\004(=\237\026\"<u6\204<\222mh\275_\303u\271*r =\214\370\325\275\r\245 =r\230\026<\2267\252<B\3307\276\3219\264\275\324\352\322\275\3540a\275\033\220\022\275I\220-\274\266\252U<R\353\024\276\253\313(\275\004\352;=\312\361\350\275W\010\327=\027\004\256;k\251B>\237\257[>9\353C\275\262\342\377=\240\2111>J\334\305=\021\350\276\275\242\220W=\210\323\212=\246ID\276svA\276I:\260<R\330\355=\023\307\300=\035\n\005=N\337\r>=\353\323\274\nV\005\276\267\220\033=\320\346\211<\341a\261\275\337b\373<,\2009\274\307\374\354\275\216\024\003\274\335\305]=w/H\276\351 \315=\341\0269==a\307<\270q(=\315u\324\275x\006\244=r\231g>\234o\255\275\3269\\=I\250\036<.\351\037\274\277\373\272\274\300\315\303=\010\314\177\275\034\261\201\275N\n:=\032\336Y\276\361\310+>S,\330\275\275$>=6\257\223\275\363\277\231\275\3237\214=\223e\232\275Tf\213=\370\302\372\275\265f\260\271a\307\206=\317f9<\225\"\000>\3751J=\236\236\036>`#\025\276\330!S\274\313\233\032\275\214\236\341=uf\350\274\t\007\250=~F\320\273\375Q\031>\314-\346=\325U\271\274-=R\275\025@u\274\322\257\354\274\030\262i=VP\000\2756\347\030>Z\030\205=1\034\240=\234\205\206=\177r&>\377\306\274\275\220\351z=h\350\022>{r\220\274\215\031);t\335h=\241s9\273B\r\312=\002-\033>\243\223S>a\340\034\275\241\344\366\275\032\331\257\274\251pl=\013\240G>\354\201\000\275_ r\276%(\023=N\335\031=\315-u=\227\303\235=`\327\254\275wsg=\361\321K=t\301\320;l\303\212=\252\032W\275\\7\3049{{>>h!K\275\240\311q\276\213\231\023>\2525\216\275<\242\303\275|\315p=\254\027\274<\226qy\275\343\203@\276\270\304D\274\200\227\254=E\311:\275p\220I>1\260\332\274}\022\031>S\032\311<\363\305_\276\005\245\345<\304qp\275\020N\r;+\013\327=D\272\256=b\314\251=\363\306H;\216F\010\276\002\025\200=\n\324`\274\361\rK=\365S\220=GUU\275\310\270k\275\320+\035\276\321\021\216<\214\tL>k\266\271<\337\3600>\177\243\336=\363\354\212\275\301\016\246\275\210\r5=\031M[;\006\231\004=0\316H=\261\311\026>F\323\265<\344\303\021=\262\224\336=\274\360\026\275\261i\020\276\241\354\346\275:RD=\227\212\234<\256#+\275\277\373\210\273\221a\233\274MwO<\363\322\324=\233n\250<\275=5<\336-\353\275-\350\261\275\'\221\202\275\251MR\275\320\330\027\275\353\t\340;\226[v<\373\\c\275E\346X=\n>\276=)\\\037\275\377\272\204<\370\333\220=\241Z\273=mW\007\274\302\332\273\273\231Pf\274\257W\031>s\324\342\274\222F>=\026\362 \275\350\370\204\274\225a\310\275\360\362\257\272\215\024\025\276\371[\035\274\211\316\362<\307\256\277\275\366S,>\023<\211\2757\226\033\2758\364\304\275\230g\270<\310\355a=\301\020\205=\325\301k\275\316\334\036\275Q\364\234\275\010u\014=Z\270\370\275\006\3440<\243u\375\274S\2239>@\222\024>\376ch\275\002\353l=s\206\204\275\035\376\017<\247\344{\276\340|F\276T\021j;\356\030(\275\337\315q=\306\013\271;\371r\334<Xo\235\274\320\307:<\221\341\243\275\345\320\366<0\270l=i\206r\275\350}\225;\023\207u\276\000 \215<\206o2=h\317U=bY5\2754r\010\276\025\020k\275\227\365\302\275\255\212&>\331\355L\275\313r\222\274G\t\322=\206\371\264=\240\361&\276}\306\261=\276_n\275\322=\337\275\374a\351\274\216\023M>\231xl=\364\335E<\245\317\271\275\350\2242=\324U7>\247\017\314\275\375G\352\275\222X\321<\005\276\324\275\366&F=\277M\006>\343\367\210\2754\260)\275\220\313f=\316\347\\=\0302L\275\306\255=\276\360\023#\275e\257\326=\335\334\371\274i]\"\275uF\034>\374\234\037=\235Jw\274\262u\340=Fc\032\275\276\030/>A\270\022>b\220\326<\254\263]<\306\376\n=\333\001\005\276\353\224\021\274\353\006\245\275\377\3760\275\200|%=\002\365\323\274\334\212\304=\255\215:\274\241\210c\275\251m\004>;\323\344\275\317yF<Ta\023>T\207\341\275\226q>\276g\210\221=^U\272=\345`\215\275\347|\377\275\263s\346\274\270\241t\275T\016z=\370\006\207\275+/#\274^\370\205>9n-\273\362\260\020\275r\211\204\275\021#\301=\226\275\221\275\367w\017\276 \373\r>t\202\266=:\266C\275!>\223\2757\305;\275\310\027r\275sS\345\274%\324\361;o\0315\275\245\237\354<}F\001\275\234\234H=\002\312\333\275\002\243\373=\207\233\013\27592\233=\024Fp\275F\017\313\274I0\315<m\367\342\273\365\2403=\273\\2\274>\301(>\204\267\034=\331O\233\275Fd\356\275\032\314\337=\252\005\213\275E_?\275\302z\317\2757\264\023=X\363\000\275\316\006;\274\216A<\2746\023\366\274\350*@>\200\033\010>4\215 =\220\233\035<9}\325<L\245\347<1@\177=\253I\314\274\260\3772\276\213\341\036\273|\351\235=\277Y\000\276 \226\214=\343\253\016\275pS\";9\265Q>\373 \026\276\0236\222\273H\030R\276\331\010*;\356\323\244\275\233n\021>f\234\213\275\243\241\333<\203\233\\>k\370\363\275J\361\343=\354\316 \276%&S<\307F\253\275*^+<\036\257\217<+\222\227=\273D\342=\251\257S\275u\"\264\2755n\312\273\017v\334\275~X\000\276\277t\220=)\005\232\274\360\311\327=\"=\r\276\227jv=bw\321\275f\024,\276\242b\243\275\222\005\315\273\030\300c>\231\026\001\276\317\016X\275#\243t=\037[\373<X \212<I\256\023>\210cV=]\325\215=\311\241\021>=u\352\275\024,\206\274\250=\005>#\025\004>\320\346\232\275\344\244\243\275\275o\225\273\257\351\362\275*\252\231\274+f\205\275M\273\030\275\227\265\325=\343+\247\274\036\003?\273\317D\353;\317\206\024=\332\262:\275\335\212\205\275*g\250\275~\303\003<\316On;G\266\026=\24765\276\217\027\013;\267\333\312\275\223\266\267\273.]\210=u\206~=#X\337\275\333]\350\275=g\202\275\367\250\226=\302\t\246=\202[`=\266`T\275\260`4<\247\366(\276\200\266\035\274}\364\303<\314F\243=\367f\'>\262\036X=\310)=>2\372\354=M\023\262=\371;3\275\364`\023\275\337\032\276\275\310k\324\275\032\254n= \366\232\275j\027<=\021D.\275d\003\200<\265\377\302=\211\343v\274\204A\225<\256\014E\275`d\205\275W\252\341\271\204\263\364\273\036\331\204\275\265\254\355=}\377\247=\316s\260\275|]\201>a\373\036\276R\350\337\275\354n\267\275\203\256*=4X[;,\365\033\275$\327\312\274}k\032>wd\250;&2\016>\321f\307\274\232\251\201\275(\343\303\275\267L\252\275\345\207\035>\375\204u\275bm\005>7\263,\275*\220I\270\256\026\000\275O@%>\347\232\030>=\250R=\341\353\036=\222\303\200=\020ej;X\315\212=\360^\200\275\360\301\220<M\256/=\310kr>\223\0020>\222\241\023\275\265\021\330\274B\032|\275k\306\206\273\360\351l\276_%z\275\250\263\320\273\220gR\275D\316F<\353\246^\275\013\365:\275+\203\324=-\224\005>\340B-\275`c\000\275\347\200\233\275O\337\203<\331\002\005=\233h\307=\033d\021>\3624\206\275j\326\034\275\353\244\212\275g\344i\275\212\037\002>\336\303\213\272\225\022\332=\330\367 >\352%\232=\342\256\341=\302\345\352\275\267o$\275\246\316U\275\210t\222=Cb+;\177[\006>q\026\t> \014\317<I\020>>\236\211\025\275\340\321\323;>/\225>\253n\213\275\320\245\205=\353\325\032>\375\307\273=\261\'\256\275\210\313\022\275Fp\366<pm5=\252\023\261\275\3248\255;\354\363D=\355\254\277\275g\327G\273\252\267\337\275\304i\277\275\232\276*\276\260\372^>\254\022\246\275B&o=\002\355\202\275\342\351v=Hi\202=b\321c\275\325\200\266=L\245\262\275\030X\034\276\364(\355;\026\307\376\273\n\3441\274|\224\223=\201\212*=\353\252G\274\307\275[\274\245E\225=<\234\342=\013\334\n\275\203\2310\275\361\254\036\276\224\r\262=\342=e<Q\310\271=\017]\000\276\333\273a=\356\014\271\275\261\250\003\2730\257d\276\003\025\026\275?\\\236\275H\024\210\275s\243\006\276\001\222\305\274W;\203\274}\201B=\224\330\255\275\014\322\276;,`R\276v\330\344=3\245\310\274\235\200\202\275\222)\346=|\205\324\275tP8\275w\310\016=\022\336@>\016w*\275 \342\342<\025m|\274\330\237k\274\216\242N\274\310\230\340=\340\264\177=\'bR\275\273KA\273\310\014\000\275\242V<\276\343\210\016\276\336\031$\2757\031(>X\216\253\2748\333\021<\006\035\265=\361\020n</ \"\275~\326,\275J\225\305=gX\005\275\364\315\212=\266\257\341=^\333\017>\216\007\207=\245Z{=\013\0168\276c\030{<\255\326|=\315\005\317=\023C\331=\364\226$=C\307*=\216\350<\276\250\017\227<\323\261\275\273\201+\004=\374-\222=\253\025}\274\355P\362=\010\245\244=\204\tG>b\006\020\275]5\335\275N%\274\275?3\232\274I\005\010>cf\221=\363\007\373<\0233\370\274\021\222\203<ec\236\274rv\377;\316\033]>\237\360\274\275l\213T=\177\311\262=\023\260\210\275F\035\367=\034\375e\275\305\221\265\275=F\250\274\310\276Q=S$N=\327E\006\276\340\n\216\2751g\032\276\026!\020\276p\317\251=\233\221%\276\260gb\274HS\"\276\215\3523>\'\205h\275\2504\313\274\327\002\251\274 \004\025<\243\307\217\275\266A\225;E\204(\275\274\264><\355?\016>S\251\311\275\337rg\275\2631e\275L\r\362<\341\3001=\276\022b=U\341;=\\~\316\274\037\342\300\274F\317\027\274\031x\024=o&3=\255r\245\272\351\241\271<\264\314n=k\233:\276\301\350z=\355_\030\276\027\330\316\274gL\261=W\312E=\364+\021\276\215P\032\276\270\025<\275\265\233\000\275\212hF=\274\207\317\273u2\010\274\000\010\337=\010\021H\275\240/y=\334:\025=N\352\205\275\347\235\300\275\021\377\260\274\247\234\014\276M\370Q;\004\257F\273\250\247\000\2762\2412\276\364\3226=\374l\005\275Y\206\r\276\300\336:>\323\334N\274j\323\266\275\017\n\322\2757\227E=\201M\304<\210\000\017\276\363:@>!$\276=9\266\205=W\003\313=\220\023L\276;\210\246\274\373C\264\275\262\227\315\275\010\231\257\275G\366F=S\233P\275\327\340J\275\214\017T>\212\303\323=\347=\355\274\244vM\275\247\375!\274c\352\265=\021?\230=\251\350G=6\253\263=\003G\203\274LYO\275\332\355\014=\005\2743\276\306\212\265\275G\246\306=\267\002\300<\032\360\002\273\311\244\242\275\213\032\223\275\\\344\330\275`\322\347\275\274n\326=\276\006K\274\332.\252\274\235s\363=\254\2724\276\367~\327\275\377:W\275--9=_2!\276\346\027h\275\374l\263\275t\300\336<\302\365\341=\206\365\277<=\316g\274.\211,>\206*\373<\035\374.>q\300\267=\023\0013\275H\375M\275\264\324\332\273\032\344\225=[\335\247\275\220\230\361\275\332\266A>\233\206\253=\320B\267=\233\213\306:?\020y\275\322\234\010\276\031\304:\275\370\314\351=\214\306\025>\021\305\235;\263\314-\276\000\3518\276\314h\316\275H\241\360\275\020]\250<\353ln:\317\312\212=\237\344\200=\226\3139=\013\002w=\264S\317=\236\350\347\274\203\024\271<\013\nv=g\372%=\254L:\275\255\020\333=\334K\210=\340\013\222\275b\300\372\274b\353\017=\006\231\211=b\311\222=\377)\302\275\253~\221=\331Sn=\3062\025>\301\334\227=\216\214\364;\024M\310\273\277\035\211=\202&=\276M\354Q\271B\225\264=\036\341G=c4\221\275\335H\365=1\233%\275C\231\306\275\215Kn=\371\373\010>$L\013<:G\r\275\355!+\276\335\221\'\276\260\037\262\274;\266\303<t\0340>\267bJ\276\370\342\005\274\373\017I=a2\255=9\013!<u\264s=\211\223\325=\262\300\374;\'\361\200\275\273\301\273\275\311%\265=C\2055\275U\303\352=\345\204\370=\345s\336<\270\313\322=\370:%\276\262\355\202=\200\322\273\275\342\325\362=\264\353\251<\270+q\2757kx\273\270_)=\023Y\223=Bm\227\275\r#.=\313\267\253=l\266t\275\313-\323=\030N\233\275Q\031\355\2735t\002\276\345\025\026\275\n?9\274\376\270\036<n\0131\276\275\243\267\275\267\017\001>4\r8\274\027\313G\276\337J\017\276\003]\237\275\306\2466\275\231\333/=6\375,=\237\323\206=b\375\350=\252D\020\276vC\\<\016\216\344\275\373XZ<J~\322\274\263Y\227=\277n\226=)\313R\276\334\025\260=\305\335\344\275\325\216 <\302\362\374=\036X\024\274\025\177\035=\036d\260=\006\014\010\276t[I\274A\375\323<\206i\234<9\301i;H\236\305;\007\2045\276-\023\334\275O\252\033\276\t\342Z\272\352A\375<!@\255={\371\312\275\000g \275`\2603\274\232\351\231\275\323\357\346=\216f\034\275Bei\275i5H>\337\353\203\274o\364K;\"\2113=\357\232\222<T\301\353\2757K\322\272\021\242\264\274\302\346\000>\"\322%;3\365\304\273\3227\303<\177\007\371\2758-\270\276\327J]\274\330\356q\275\271?\204<\375\017\034=\375Ji=\332\344n=\265x\016\275<\271\211=B\211\221\275\231)\334\275@\314;\274\330\215b\275\376\233>\275\344C\013\275\233\373\343<v\206\262=\351!G=\212\336[=Dw\244=\221~\310\275\342\211F=\311 \262<L\2336\275X\033==\227b\304<(\"\211\274\360]T=\240\\\242\273\025\211\214<\302j~<\026[K>\033\003\275=@\375\224\275\312Re<\027\356\347<q$J>1\351J\275\003\311\236\275j9\026\275p\010\367<.1]=\335\340\010>\245,\300\275\267\213\236\275\374\335%>\026\277\005\276\212\220$\275\332\201\n\276\026\377\332;\240\311\245\275ig\243=!\n\237\274o\312\212=\314TB>\341J\r=\324c\315<{\021\346\275\362\307j\276\016\317+\275\207\372\014=\200\004;=U\021\000=\003\n@\276\312a(=\352X\006\276\315\242\341<\335\263C>\204w_=\264L\021>\267\200\020\275\220\343P\275\324\013\031\276T\014v\276\352\177<=\217\234\305=\212P\225<B\315h\274\373!\360\275DT\344=\317\356\355=\257w\035\275Z\365W\276\273R\330=h=\201=B\004]\275h\320A=)\353B\276\364n\202=\207L\237=\266$\341\275;a\344\275\033\214x\275\230\204\235\275\213\336\001\272\344\224`\275\201\017\356=\345\324\006>v\205\233=6Q\017=\220\017#\2764z\273\274\027\220\222\276\230\"\352\274\233\3271\276I9 >\334\265D=\362;\005=\031\034\272\275\200%\031\275C\344\212=\342\300\022=\346x\006>\341\r\261=\3309?\275\224\336\022\275\364(\353\273\324\024w;h\306\013>\332\216\024\275\336\026\276\275)\255\206=\024+\272=}\2513=\325xV=\305\244b\275\235\272o=\313d\024\275.\340\327=Kx\252\274\357B:=\326\340e;\302\221\273=S\r\033\276\362\243\277<4s\227=\257|\252<\031\314\333\274K\355\204\275\307[&\275\317/\344=\212v\270\275\326q\t=\n\035\315\2759\001\272=\271qN\275\322V\343\274;}\327\2759F\010>\351\323\265=\371\357\010<G\332\363\272k\022\330<\0373\301\275\242\362\340\274b\003\025\276@\307\022=\212\214o<fBt\275\360\267!\276\264k\032<\343<b\275\313E\260\275\016\344M=\201\203\200=iP\031\275\205\036\351=n$N\275k\003\244\275\2205\212=A}\016=\237;\004\274\213\302\036\276oF\007\274\360\360\006\276\252\355\027\274\240-7\275d\222\256\275\n\014\261=\232\221|\275a\205\332<\271WD=>\213\021\276\334](\275\364T8<1\205\337;\0324\023\275\277\343h>1\037\252=\254\265\376\2756\303\226=\007]1=\277`\017\276\341\374g=\276~\347=\026\330\t\276\032o\200=\363\244#\273\372\013\351=\371\0209\276\355\271\310<\276\335\362;>:u\274\331:\003\276\224\017:>\213\260\270\275\250\016.=}\204\332=\310\036\272\274\337\2208=ah\347\274\204\031\224\274\310\210\240\275\217M\302\275\352\266\260=\341\331!\275trD>\362\371M=\\\371\260=\271\240+>\241\251\204=\313\327\0169\350\026\254=E\006\366\274\3649\026\276O\343\272\275\341o\354\275f\325s\276J\363W\273\340l\215>+\363\224=\004\224I;\331\0043\273\350\304\026=\364\031\262= \270\220\275}\t\333;D\365\r=y\204\240=8\220\030=\r\213F\275\235sd=kK\037>\365\3142=\353qY=p\250O\275\331\243E;T\000B=\277A\034\275\r\257c\275\210\364\304\275\007\325\235=u\021\t\275\032B\315<\034\334@\275\355\352\r>/\225\017\275\t4#\276\346d\016<\365r?\2755\016\227\275o~\370<\261\t\357=3x\"\276\220\265\010>\363R\324=e\010\210=f\266%\275\210p\241=\313\n\357\274^-p=\377\006\216=u\234\220=a\242\270=\033X\226\274\202h\350\274\347\264\375;\210F\363<&\342\257\275\301\\\203\275t\372\247\275\371\324\017=\310\260\007>U#\031\276\360\304\356=9\3632;b\202R\275l\035\277\275qyT\275\005\352\366=\013\373\'\276\001V\337=H\213~\275\300\215\022=\240\364\006\2756\346\227\275{\315\336=\311\267\317=a\305y\274\221\177\331;!\376\027<\341,g=\226\303\261=C`b\274R\360\001\275p\207\002>Q\256#\276\201\274\023\276\016\223\350=\342\007\017\276\260\204\243\274P&&=\232\\K\275\3478\254\275\304\037H<\032\260%\276*-\326\275\273(\360=\034\342>\274\272\320\230=\343\324\246<\317\023=>W\376\275\275\375\250?\276\343T\205=\n\037\277=v\357\\=\270\243}\275*\363\030<-\211\001>\375\373\205\275\221D-=\334\025\316=\312\304w\275\3352\271\273\270\231\010>\255\'\206\275\331\341\025\276\354:\016\274\237\242\200\275.\352L\275\356\360\032\274\376\360 =^ \242\275\231\000\027\276\t\217\302\274\377\260\375\274\336\223.\275L\274\204\274#9\032<\311\364\003\276OQ\n=\246\243\377<\376\2165=\303\362\010\275\346\243X<3\255\364=4\271\301=\273\013a<K\267)<b\246\225=\004es\274\005\0348\275M1\214=\032\002\221\275\336\313?\276U~}\275(\007\031=\004\254\032>\226\344\244=\200\003<=U\317\207;\364\222\335<\337CU\274OP\200\275\013D\005=\2766\246<\275\3665>o\020\002\275\013\315\207=\245)\375<\323\367\217=\207M\306\275Uq\301<\001Yl\276\327\314x=\\}*>\341A\251\275\350\255\242\274\362\324\356;\276\"\r\2767*J>\336\tP=\343\324s=P\017\347\274p\007\201\275\275\314\314;\037\213Z=\337e\255=z&\314\275\346\214I\276\325Gt\275\345\177\215\275\354\332y\275\371J\007\274UA\273\275)\0366\275\350c\031\276\177\264\026\276\177\031\020\273\215\213r\274Z\360n\275\302~E\275&<\334\275z)\233\272sR\204=\334G\211<\007\234\341\275\205B\355<\304\322\273=\261C_\276\034\322\224\276y\000\232=\037\336\177\275c\255+>b\252\324\274\276\255\324<$f\327\274E\201f<\006\203\320\275\341\356t\274[\034\256<i\202\\\275\027i\262\275:\351\241=\375 s\275B\034\336\274\353g\216\275?\342\266<\275\207P>7Gn\273\257\262\243>j=\204\274\254\277\n\275E.\020\276\"\354\366\275d\003\007=w\353\200\275\230\225\010>_G\006\275Zq\325=D\265\023=\214A\021\276C\263<=Vv\300=\363G\247=\371\210\217\273I\324\350=:\334L>`HA\275\201=5=\366\221.\275\002\342|\275\300\226\037>\270s\275\274a\204x\275\330\235\264\275\000<[;\021\350\272=\226\324t\274\321\330d\275M\341\216\274\\\244\200=\225t\320=\257\217\014\276\254k\231\275}\276i=\211\233\342<\263\327J\274\315\350\214=AP\333<\246L\352\275\200\'\342<\334\204\341=\2170\362=\214\332\t>\033]\240=\2554_<\254\332\324<\023\255\374=\227\242\311;<\004T\275\372\006,>w\325\251=+JN=\216\323J=\312\276\363<\270\315L\275\312o\017>\276T\246\274d8\350\275\t\336\224\274\315\0107>2\253U\275\020\370\"\275\314]\t\275I\256\274=@\256\254>\363\242\355;R\026\221;\236\270)\274\213k3=\331\305E=\235\001\010\273\000\315\177\274\211}\201\275}\212\320= ^\252=>K\372\275\356\177\372\2740\261\347<S\220\342\275\320\035\265=\237\274\004=\016\347\035\276w\207i=\247\n=>\340SX=)\346\331=FM\017\276\034?U\275\300\210J;\031\023\005>\335$\213\274}%o<\251&\253<\205!\035\274\300]\344=\321\336\251\274E\343\364;y\306*<+\225\312<F\235]\275\302\233\314<;g\032>]\265\";\301{\200=i\025\201\275\203\261s=\341\347\024\276\224\006\274\275_\330\213\275\307\302\001\275\245\330\026>\003CY\275\006;\r\275\315\236\341<\245\253\006:\034V>\274\201\323\023\275\2061\264\274\204\177\304=h\273\363\275\342\020\024=M\3146=5\214#\276\007\002 >\005\017M\275S\301x\276\351\262\337<\371\001\372=\231\221\250\275/\315\354=\247\220 \276,\362@\276\313\022\221\274\264u\245=^\214\340\275\233fa=\202\"\013\275\240P1\274\270\014\245\275\270r\033<\000u\220;\177\343e\272^\212S>\273\334\237\275L\245\344=|-\217\274\211\326\364\274mk\201\275`\n\274\275#\256\035\276\355\234{\275#\376\223\273\035\212\037\275A\267\252\275c\274\307\275\230\242\247=\010\025\306\275\2666\241=NI\353<\027\205\316\275q\233\376=^D\374<\2465)\27571\206<\005\350\361=\025-\341<\330p#\275\340\274\260\275zv\261=\307< =\342\316\257\275!v@>\306`\034>\326\034P>}\017\221;.(\010\276\306_\207<\330\036-<\362>\346=5#\377=U\207?=\304^~<\360|\342=\311\021\350\274\005\006\321=o\347\003\276\341v\273\274\3575\256=6\3174=\001[\335\275\300\020`\275\353\277`\275\25038=\035\361\215\2759\315:=\301> =\316\014\321\275\035\272\366=JO\025\276?\2161\276;b\201<\237\205\333\275\373\'\316\274\026\315\214\275h\275\022=/3\227=\271\353\374=\300T\001\276\312\347\215=\336\223\234=2\341\240\2755p\000\276c\024\373<\\\0312\275\020e[=r\335j=\327\352\333<\322\207\350=\262\327t\275\036V\256<\247\236.>l\005\346\275\345\006\263\274^\262z<\326H\363\274,\374\200\274>\000\235\274\003\002@>\3762\327\2759^\212\275EW\217>\n\201$=\367Z\356;_\341\t>\356\322Q\276\035A\207\275\023\272\251\275Q\330\217\274\013~\034\275dQ\024;\302\265\277\274\315L\013\276\354\304\034=\206\356\374;\177!\366=\321\376\004<\014\3517>\307/\336\274j\214\354<\334\376.\275n.\373\2742\324\374=\264\225\033;\031\310\231\274\353,\243<\253V\274\275\276\n\001>\002\023\220=\206I\371\275O\355\r\275\332C\347\275wc3=tt\250=\025\331\323\273\275\234\274:c\t\001>\235y\020;\267\327\274\275\022\332\334<z\274(\275\237a\222=<\213\n\275C\211\024=\262O\203\274M&\312\275d\230%=<\241\247<A\307\236<\361\026\027>\276d\223\275h\022R\276\254\262@>\261Sl\274\365\010\351=\250\317>\275\363?\244=\361d\274;\034\033\217=\264\357o\275Z\253\314=\r\026\036\275\345\343\331\275\241\242e=x\377\210<-j\315=\341\231r=}\362K=\2266C=\305/N<\303\242{\275N\370T>\365\006\237=\022\320\224\275\333H\\\275\277\275#\275Rz\370<p.\220=\372\212\030=c/\220=\225\324\340<\n\370\206=\005w\324\2750\275\346\275\207\360\013>n\332\377=r\006\020\276\375\307\010\274:\363\303<nkF\275\320\277\200\275\316\007\233\275\273\"\253\275\304GA;\342\007\205=\223xN\276\214\274\216\275\320\346\321\275:\365\207<\001\007\005\275Q\327\226<+\246\217\274Z>^>\265\313Q\274\364jP<\273\027t\274\273\243\300=\255\365q\275\323\275\211=\327\234\262\275\266\364\311=+\361\202>\"\301\027<w\273\t;JC\001=\222u\372=\311\253\343=8+\251\275\225\317\377=\037l\212=\272k\002=\355\316<=\311s\322<\2450>\275\225\034\007\276\2539E>.\335J<\250]\370<\210o\364=m\016z;s\330&=\263\354\234\274\365\323\347\275(E\227\275\267\317\306\274\317\022\237<\266\342q<p\274\262\274W\205\223=\203W\203\275\303z\353=\262\325\027> _\251\272$\260\036>\256U\021>k\200\255\2736[\374=E\346\031>\266y\231\275\025Y\215=\2675=\273\360\347Q\276\311\340\235<\033\024\237=h\026w<\022\340\373\274u\260!\275+\217\017>G\013A=2L\n><)==\302\366\242<\375:\024=\361\316\032>\003d\237=\253\272G=\314\020\020\273(\021\327=\301\245\016\275\261@\">L\265\261\275G\306\247=\277~3;Z\274 =\201*\213=\373\242\254=\231\237\034\275\311x\246\275c\231\345\274\016\3271\276\363#\251=\303_\303\275n\005\227<C\'\326\275\000\267\216\273\317d\000=\210v\304\275\374\206\277=d\234\225<\335\253\350<\303c\362\275\215x\"\276\354\374q=\251\240\351\274\001+\202=\325+\217\274\316\331\306\275x\315\020\276\360F]=\366\301\245\275W\266\256\275\227+#<(]\345=\374\2332\275d\002\233=\262\234\006\276q\014I<d_\240=\213w#>P\035\006\274\267\240<;\305\3648\276\264\271\270<.\256\301\275\367JN>\254\243P>\260\374\245\275Vs(\276\272C\007\276\027\317c\274\237\331\204=\352\355$\276\314\205\235\275\036\246\214<\234\235\264\274\203\035\023\276\236BL\275,9\254\274\002\257\n=\373\310\037=\244\336\002>\236?\215=\212Z\210\275\317\321\206\275\321*\353=\035{\242=\217i\310=\304*\"=n\037\322<\026\335\'>\007\312\261\274\2210\244\275\346\370D<\023qT\275Y\007\276\275\236\0343>\327\276\203<\3274\314<]5\032\275\032\345\324=\340\3613\276\371^\335\274\227\027\324\275R\216\361=\216\367;=b\316&>\211\374\t\275P)1>^d\244\274\253J\027=6\250@\274Pf\375<\300\370\336;\250!\017\276.gB\276JP\025\276\240$9=\033\346.\274z\374\247=[\024\303<.\240\246<\234\347D=_\022p\274\316\316\334=\r-x\2754d\320=\271{\330<e\225\001\275\362\325\323\275Za\206\276f\351!\276MB\336<.\316|\275\310\374U\275)\311\034\275\021\005\023\276y\264\237\275\353*\357=\226\301\354\271\336\274\376=\307\316\005>n\026\200<\225\220\265=\314\264\253\275*g\257<\017x\220\275\250\210Z\275tD8\275\037\300\260\275\343\377O=j\347\234=\200\016\242\275qd\270=\341\212\007\275\353\213\366\275\021\247\214\275,\216\345=]\321\271=\255\331\003>O\276\252\275\257\277\235\275\360\273I<\007U\017>\t\312;=\376\302\224;\311>\016\275\212\365\005=|\014\324<\203_\276=\326N\263\275\205\212\031\276\036\001\007\275N\353\335=r\001 \274\022\253\270=\013\314$\275\255g\221\2754\366\023>\352\261\034\276\256\374\203=#0\225=\214\002\373<}\305a>v\273\221\275\341\277\232=\344xs=\233\211\225\275\'lI=3\303\270=\026F\027>\225\255\241=9\273\351\275\356*\267\275\226I!>S\313\351\274\234\202\032>$\027\261<\2765^<eD\004\275\200K\007=\201\262M\275\031\312\307=_3\001>u\263\364\271\210\231\254\275r\327b<\245\237\314\274[\313\341\275z\240C=\367c\360\275\273\010\247=G.\361=\314\332\364=@\275\201;w\375\230;x\374\215<\366\345\342=\224\214N=\205\254\253\274\323\026\030\275(*\322\275\225$R\276IC\361\274\241\341\246<\341\307\227\2756\001Q\275\217\263\247\275\027\242\224\275\354^\226<\322\260\223<\327\224\215=\372/[=\010\306\365\275\226\001a\275\331v\234\275]\340\202=\340\323\324\274\375\324\244\275\013\211\245\275\226\014\200\275\037\322v\274\255\273\224\275s\277\243\275bX\257<1\201.=\026\340J;\'\317\356\274\365\203v\275\022}\335=V\360\207=\027\333\242<\022\300\336\2741\036\250\2757\361P=3\307s\275eR\371\271>\310\370\275\341IV>\201\217\213\275\335U\303<H\305]=\010\314\031\274\216\016\355=\237O\232\275!u\025<n2\333\275\316\212E\276^z\337\275\272Y\003\276k{\331\274\215\311/>\'H(<e\017\256=\242z\340=L\275\324\274J\201\260\275P\2051\276\340X\373=2T#>x\314\271\2752\023*=a\037\016\275\022\320\344\275\212\200h=\201zj\275\376\031\033=\256\354\362=4[\204\276\312\002\013\275jf\246<*\026/>\n\321\304=~*,\276\036l\347<~\206\332\2758)\304\274\002\225]<0\234\265\274`\365E\275\305\242\031\276:\022\365\2749\027\221=\240\034\350=\254W >\241\266\022\275\004#$=5C\307=\006\020\016\276\314\231\026>\321\307Y=i\260\033\276\310\227\317\274\307\300\274=\376kc\276Zs\210=\246yj:\030\343\007=`A\246=\257\267\314\273\253dw=b\364\231\274\212tV=\303\256\t>\365\240\316\275\213\003\\\274\277\270\030<\212#\227\275\221\000\211\276\227L\322=+\004 =\266({=\340\025\207<8g\023:?\"\365\2742\256\303=\253\357\245\275\"rM;\034\230\354\274\335\241\206\275\"\203\253\275$\312\256=\332Y\244<\364\342\205>\367\0068\2748@\204\275L\231\227=\227\252y=e\004d=\263\004\360\275\276\336\261\275ro\010\276\346\001j\275\327\023\003>X\033F\274\020x\306\275)\304\t\274\307\374\227>i7\000=\377\375\003\274x\304j\275\014\034\327=\325\212\230\275\302\216\322\273l\355\277=\251\264\034\273\323\273\375<\344\315\340\275\215\336\356\275p\335\234\275\320l\261\275\343\205\303\275\260\334\\=\265}\315\273f\356\220;\321\305e=\271\301\224=\211\370\317\275\251\237&\274\020\255w\274;\346D=m\345\246=\240\321<=JFI\275I5\226\273=\031\233;3\211z\274x{\202<\202T\005\276>A\206<\211\002\005\276n\257[\2757H\371\275\r\205\204<\332\310\334\274\033\000\"\276T\034\016\275\006\366\025=7\035\005\276\333\304`\274\024\222\016\275\217\342 >\240\313\243\274\340$\334\274\314\377\306\274\007\000q\276i\331%\275\237b\013=\3449\r\276\225\374\265\275\244\226\241\275d\246m=\332/\016\276\024DQ=\373\220\246\274\030\347\206=\214\304*>]\020\231=\313@\365<m\370Z=S\215\245\275\325\347N=\021N\002\273\177\262\273\273\371B\215=\333\305\214\275EuI\275\326\310\322=y\315\225\274oO\233==\317Z\276q\267c\275y\004\344\275ur\345\275{\231\024>\255#\351\275\320\363X\275\251\216\'\275*=\226;\271d\340\275\375\224\227\275>c\243\275\'\253O=RI\257\275\\\023\305\275\266\022L>F\224i\275\010jF<\t\024\330\274J\203\022>V7\373<?\\`\275\200Q\001\275\232P\327\275<\221\311\275)\361\210\2750\000\033=\322\224\326=\'\305e<\215o\001=\004\354\365\275(l\331\274\262\202\255<\005\326\367;\212\224\000\276\354\211G=\245\2318\276(\002\212\275\017@\022=t\016\277\273\214v\266\275C\267!\2765N\305=\005Lb\275\253\205\017\274\255\260=\2754\225\323\275\350\202:;\345\220M\276`\257\007>Z\257\201\275I\320\t=\'\256Z\275\014\346\034\276\346\341\355\274\337\302\355\274\336Xs\275,g\375\275\035$1\274$\242\226\274R\002\337=h\320\264\275+\363C\276\213\360\227\275\332\232D\276kU >Z\266i=\347\315\007\276FHx<\225\214\346\275\236*\235=\322\323\034\275P\210\331\275}7>>R\273\030=\316C\370\275p2Y\274\345\305)<\377@\022\275\224\030\327=K\357\271=C\374\002>\300\350\022>\022h9<\357JC\2756\232\225=\031\237)>\235\350\032=N&\254=kV\273\275\346\177\263\275<.\177\275{\334\230\275/l\210\275#\036\267\274r\\k=\030\377/=8\200\312\273O\321&=\316i\265=3\343\205\274\231\242\001>S&\235=\014\221\360=\032\265\241=\200-)\276\344\305 =\367\260\341\275\023;F=\221\330B=\221@\262=\022\201\324=gm\216=Ex\267\274\272\314\t=zH\213=\374\261\346\274\303?\342\275*\250\350=v\345\227=u<\016=\337^&\276\256\206;=\331\"\314\274\307\005\013>\266M\300;\271\320\001=X\035A=F\002\014\276l\205$>e8x\275<\264\272;\240\221\233=\306\'O\276p\227p\275\207n\024>\037\213\272\273!\272,=`\354\336\275\366\036\322=\325\035\235\274\224\326\004>\343\031\250\275N*\201\275\017\262/>\324\352\366=\2271\203\2751\3407<\027\373@\275\260\265\313\275\034\"\347\274z\033\233=a\373[\2756[(=)\240\270=?\r\346<\207O\375=K\3320>\357\316\217=?\222J\275\276%(\276\\\037\276=\2605\257<\317}\220\273\203\324\020\276\274~\003\275+U\227:\320=\374\275\375\263\003\276\\d\'>\220\265\037=\322\212[\2756\023\261<\373\023\376\275\2037\222\275\2011\352\274\226\202\276;\\_/\275S:\210;\006\317\035\276|\204\327\275\360\245\210\275&a\223\275\250\036\213={h\351=(\350\035\275r=H\276\200*G\274$\377\321\2754\t\304=\001\217\253\274Y\271\270\275\204\253\">&\247k\275\261\016\010=|l\356\275\236,)\275\020!:\275\241x\266\2741\262\303=u\204\261=\202^\003>\232\241\337=\355\343\275\274u\355\317\274\272\244g=\363k_=\212\034x\275X#\350=\265\266\017=\322\226\252\274\231$\001>\204\326\001\276\'H?=\250b@\276\"\251\252=\255\305\260=M\247)>t\236\347\275\312\026k=\342\376\227=\325\260\240=*\000\213\274\013\023\255=[\376\031\275,\n\230\274}\030m<\314\375\224\275u\303\342\275\27071> \010\310=\260X\203\275>\206Y\276N\313\213\2751\236\r\276\275\372J=\266\004\032=\346\001\311\275\276\023\253\274DD\233\2757b\002\273q\315{\275:%\017\276la\320<\252\236\205\275x~\315\275\232T\245\275Na\251=S\241<>\272\337\034\272\262\027\357=\230c\330\275ud\265\275\222\201\202=\307\263\237<\032\234{\275v!\216\274\216\262?<\342g\225;(2\311\275SZk=&\232\302\275\264\3502>c\326\323<`\313\313\275~\234\035>:IC>\252\331\246\274\r\360\025>\320u5>\022{\331<_\366\240\274\250>\027=\006\271&<=\362^=\332\2072=\223\026\016>gP\272\275\313\010\315\275|\240\300\274\317\316\224\275\215s\006\276\275\367\207<OSb<1\271Q\275xY\240\275W\224(>\333\363u=\320\264\277\275\353\220\r\275\036U#\276s\300\354\275\375\240\306<%7i\273\300\rN=k\211\254\274\03492\275\347\215\241\2733\315\237=U\207#\276\364\242\211=\332\263\321=\335t\264\275\t\025?=\216#\312=}\2350\275\235\035\270\275\3324\260\275i*\365\275\356\355\220\275\r\352\360\2756t\277=\255\n\006=\275\346\225\274M\203\024=\303J\214\275\374k\210\276\326\223\345=)\346\263\275\2234\210\275k\024\374\274\315\362\260\275\310l\254\275\237S\262\275\200\251I\274\224\001\021>{^\022>#\207\252\275$X{=\\\312\022=\200\352M\275\007\002$\275\344\303A\274?F\327<#\025\370\275\310\204\215=\303\237\335=\026\016\303\275^M\242=\206\026%\275|\244\353\275\245\315\376\275]\344\211=\3124\205=\376l5\273\263\324\227\275\\\252\312<>\330|<q\233^<\321|\333=\025\337b;tzF=\014\230\t\276\356\267\245=O\203&\275g\323\367\275h\327\276\275\271k\231=\232c\367\275\377\371W=\025\032\n\276\2406\004\276\241?\013\275\337\026\235\275d\034e\275\361\'\213=c\004\217>\234\372\342\275fS\202=@\204\000\274\010\017\200\275,\367\373=/\372\007\275\377\371\262<\205\246\237=!\256\342\273\333xG=\312A\215\274\344\272\266<\367mb>\"\221a=\225\233\220\275(\365\206\275\025\360\203\274\234\366\037=R\004\270=D\r\374\275\317g\307=q\3734>\010\027`>\016\037\244\273W\026\217=\022\361G>\346\3252=\314\267\217<\336H\255<\357n\201=\253\312\227<\250\301\313=\035\017o\275N\264\211\275 \361\347==\020\322\275\232\312k\275tj\243=\257\202\320=d1\004\276\n\301C\274\372\256\271\273\035\001O\275\226\007\"\276K\022\211=H\303\237\275\217Z\377\275p\226\337\275\264\262\200\276#\234\026\275D\224\234\2752;\'\276\342\001\311:Uf2=\255\211]=\263\252R\274H5\254\275\371\0333=\224F\251<\377A\204=\236\336\010=f|\221=W9\355=ELJ\274\276=\r\276\335W?=;\277\3679\216\253\205=\270-\247=\333\226\264\275\303)\260\275g\343\217<\255\221\265=8\276\347\274\215\357.\275\274\225\201=\033\314(>\330\366\261=C\277\010\275\262\317\242=\024\223r\275A9;=\231[\363\274N\001\302=fnS\275\023\3226>\216\\\266\275\310Q\306<\225\276\272\275:\3372>+\020\036=\202\267\206<\347\004C\275\353\324\362\275\263_\264\275Y\036\001\276\210M\214\275\307\324G\275\003\177\322=%\n)\276M\207#<\225>\230=\225^\336\274)\244\233\275\242\274\026>\307A\"\275\327a:>,\226\304\275\347\006?\276\322\002B<Th\t\275\277\016#=\215\373\232\275\014\273\037=\004\224\256\275\207\243\265;Q\346\301=Y\353\333<\000:\\=b$\255<\240@]\273\262\261\000\276y\315}\274\"H8>\336\016\366\273\\\240\017\275jK|=\354\337\026=8v\210\275\3332\016\275\n\224\177\275\315\237b>I\356/\275z;\010=OvX=Y\326\206\274\200\264\027\275i\"!:t]\371<\374u\213\275\347\230\250\275\203\226\216\274\257\033b<\233C)\2741wR\275\231\021\224=\242l\014>7\216\210\275AN\014>B\215\n\276\005c\254\274\245\363+>\006\214]=\2036\233;#:n>*.V\275\377\335Q=\200\031\303\275d\354\340;\253e)\275q\177\030>O\226Q\276\343\317\262=*\305@=\006\277\375<\272\246\031=\272\304\021>\r\347\034\275\333aX=\035x\307\275qJ]<\270\337\016>\017Y\005=\3651\372=\023\340e\275\260B\344=Ss\302\275k\3524>P]\242<\026\355\026\274{\262\330<\304,\251=>j\007\275\0351\316\275\303\346T\275j\272\306\274\347~\315\275)\316\377\275zi\260\275^\325\006\276 \365\376<D\241_\276z\335p\275\222\340\235\275\250\377\221=\336;\317=\371\270=\275+\363 \275\361Y!=\031v{\271=\320\376<\356Y\331\274E4\231\275x\207\276\271\367\367C\275\216\227\270<M\030\355\274\215\033\003\275_\030\036\276\241\314s=\334`\371=U\244Y\275}\2754>\370^S>B\321\020\275\227+\030=\326u\254\271d\253\316<\357\002l\275M\214\r>\247S\206<\020~\001>\346\003\223\273\266\"\244\275\274^2\274\304\261\214\274\263\226\312=%\"\370\275dT~=\345\274\n\275K\342\'>\217\335`\276w\300#\275\337\317\002=/\321)=\361i\266=\323\257\210\275\214K1>\2321C>h\253\355\273\316?\206=\201\341T\275\016\323\304\2752\314&=\353\213\213\274\013\342\\<\037\023-\275\225\325\016\274\365\207m\275\314\300\301\274t^\001>\336\222\025\276\343\253\334=\363\315\217\275\251M-\276]\237\000=\263\216\004\276\350\242\332\274\321\205z>\341\236\373=\370\250\220<\310Q\251\274\366\225\250\275\2460\272\273\351\225\'\275-\337\r>M\266X\275\222W~\275\235\0230\275\3668\005\276\031\332m\274\225u\016\276\212]\030=-v$\274\000Q8>t\031x\275\230\201\021=\353e\236\275\205i\031>\336\252n\275\223\2020=\202p*>\303\322F=\340\002\327=~\352H\275?(\232=\245\332\376=\260\266\"\275\347\317f=L\265\213\274\254j\272\275%\203\027<\323F#\274T\334s\274<w\371=\250\226\367=\275I\r\275<\212f=\325c\204=s\342*\276\t\225\254\275\370\"\342\275\333g\006\276\371:o=\315D\322<2\217\373=3\035x\275\377\232\375\274\000\324\r\276\367\034-\275n\372$=\212t0>\026\344\263\275;9\201\274\266.\240\274+My=\327\026a=\020\276\233\275\014W\026\275]\315A=\237\243\304<\t\366\340\273\3038\037>O3\003\276\217\335\366<\207Lo>|\274k<e\2079\275\242\0216\275\241\301\207=\226O\205==\206\272=I\371\244<\330\260\022>XS\035=\332\321\244=\202I\006>\023\354u\275\363\242q<\313\245\001=\364d\341\273V\233\277\275\317\230a\275w\267R\274\357\263\370=AY4>\317\307\n>\271Q\317=q\206@=\251\030\032>\252EJ\276\272\376\214\274\257\260i\273\326\2761\275%7\306\274\037\361\313\275\214\022^=\257\265j\2751|\223=\216P\257\274\n1\021\2757\356+\275\241\007\335\274R%2\275\265\243X=\000kJ=\347p%\275\267\244\234\2758\275<=A\250<\276\332\344\371\275\037\353\210<\236\267\345=d\324\203\275\310\265\244=\311v\223\276\205B\375\274\367\214\265\275\315\250\220=\302~\315=\031n\211\275\375\256\212=\371\031\333=\2527\212\274_\256\372\274\006\005\336<\376%2\276\214\362c\274c\232\003\275\263\222\302=\363\240\245\275\006\310\360\275\2752\337=Z\256]\275\243HA\275\355\224I\275\203R\242\274\247e\353\273*\272\217\275\031\217(\275\t\251\222=yb\202\275xR\363\274\273\242\302<\321CV<\235\263A\275+\266\213\275\333\302\216\2759p\372\275\036\260\002\274\375\236\202<j2\364\273I1;=,\377\310\275\365\222\001>\260\365\021>\311\220|=\276\362a\274\315\275s=iR\017\276 \036\231\275\363#\254\275\242M\267\275Q\225\003\274\264+}\274hvp\275v\273$\276\337?\204=\3769\027\276\255\210U>\276G\003\276\023\312/\276H{\r\276\333<\256\274\376E\334<#\356\216\275\025\360\231\275\241\205\007>X\206\226:v o\275\276\213;=\202x\337\274\016\343$\276\010z\026>\357\014\327\2751\317<;\277BJ\275\003sh<\377o\t\2766\377\025=\005\034\027>t\032Z\275\206\246\202=\2105\247\275\266\345\354\272$o\235=\274\037\016\275\326\311<\274\027O0\275u\331K\274$4\337\2745-\226=*\275;=\'\351Z=!\305$\276\302\334\313\273\330\365\215\275\361\206\257=\324\256T\271\335 e\275\034\006\351\275\333+G\275S\350K\272qG\"\276\345,\033\275\027{\227=.9\210=\207;E\275\341\361\272\275\370\025\312\274&\021U=\371W\241\275e9n;.F`\276\214\023\207\275\337uj>\344E(=\323nU>\203\023%\276Y\373\007\275\321\020h\274\277\020;\275k\252\366\274\226\316V<&7G>\301nT\275\370j\\\273\021t\221<\234N\t;\372\200;\275s\031\252\275~=\370\274,\010\232\272f\000<>\344\372b=\366\315O=\261\266\224=]p\211=Z=\247\274\025\204\357\274\374~G=>W\237<\243\275\263\275\257\261\214<O\271W=\211p\256\2750\017\234\275\3401\335\275+\314 >\333\032v=\357#\357\275\242\022\357;\201\322\256\275.\245\270\2757t\022>\305\202\324<\215\206`=\362\3673=e\303,>\\}\224=\342\257\216=7b\004>\000CX<\030\367.\275De\310<\032\233\235\275\274\331\006\276\373\024\250\275\221\'\375\275\366J\264=r\n\213\276\231\200;==\2410\274\360\037\026>\231\331\025\275\203Z\257=\250L\020>8\356\n\275\375_\014>\010{\246<\016\217\020\275\264\244\334:xJ/\274\210\251\232\2752\236\200\276/\327\331<\r2\257\275\007O\352=\030r\005>\326\356\236\274\333C\202\275\rU\346\274=\367C\275\303}G\275&\362\030\275\337\210\271\274;<\315\275\025\237\006=$\315\346\274\306\242\r>\2075\212>\364\001\337=\233S2\276\346  \275i.\370\274\004\240\037>\200\210\311=\272\364e\276\007\024\177\275\207\316J\275\335R`\275\022N#>\006\204D>\344\313\242<\346\'\354<\340\216\034=&q:=\251\263\370<\247\235\351<\316W\274\274\247+\320\275>\255$\274_\027\305<\\\035\251=\032\350\177=$\345=\275\024#\301\275\352\363\026=0\217 \275\213\r\210<\370X\326=rU#\274\347\350\205\273\210s\034\276\275-\273<\001Y^\2758`\225\275S<\207;e\375M\275\264%\204:\300\330n=\231mq\276\375u\201\275\364\356\031\276e8t;\347\202\344<\266o_=A\\\010\276\264Q\321\2742\206\225=\372\213\032\276\030!9\276v\266a\276;\201B=\227\000\314=\317\244\224=\216\320V\275\262A9\274I8y\275\037\000y\275Y\373\341=\227\357\300\275\204\247Y\272\313\021W=_wM\275Q\000\334\275\342\371\022>%\233d=P<}=\013\026{=w$Y\275\372u\307<\2307.\276\004M\317\275\t\365G\274o\007\355\275\307\000m\2750|\000>z\r\223\275\2021\000><\203\225=\177\263\315\275\320\340\263=\266\023\220<p=\036<\340\323~=\023\317k\275y\351\313=\"f\017\275\255\200\"=\324\323\014=\242\3562>%\357\254\275\031Z\313\275\252\212\253\275\333\253\231=\254M\026\276^t\253=\342\261w<%]\024\276\226\217\251=\033U\t\276f\351\010\273\243\377\206>* \265=\254\301\322=\006\020x\2745\352\321;\\\264.\274D\205\253\275\260\014\001\276M\214\334=\317\230\227=\355\366\273=\013\234\271\275<\340\323\274\372!\266<\356\357w\275ZD\234=\366\001\207=\306\206\263\274\366=\361=\306\307\036=e\204g:\275\235\231\275\251S\303\275\007\233\213=\301\353\001>W\362\204\2750\251\223=zf\026\276\035\213\301=\342|\251\275\332\276\001>\276\273\336=\321\337o\274\246\234W=\237|\303\275h>b\275uR\212=8\027\201=\372\312\311\274c\020\206=\231\333)<\371/\254\275z\327h=\234\1778=\221\234\350=\354\240\337\275?\001\217\275,\307\306=\331x\006\276\354\'\301<I\244\242\275d\2408\275\217\202\242\274!\224l\274\341\2718<\350^\335\2756K\205\275U\255\222=\006\335\215\275EW\225\275\373\377\023\276\214\204\262=\250m\337\275\025\242\315\273\312\324\377\275\365\236\327\275\274\014\237\275\2432\243\273\016\335\002\274w\t;\275\376\216\213\275U*<=\007\275F\275\337\354H\275\333~\214=\303$\354\274\223a\204>D\216U;UyZ=h\014\214={\376\357<B\1777\274\204\305+\276\365\373\026\275\354\331 \275A\027\201\275\304\356\275<E\177\202\274k\337\010=\370Q\357<\224\260\010<+\3229\275\357\336\207=\365\310%\273\244\344\235\275\225\371\266\275\231\214\024\275\205n\332<\224\007\311=um?>@\243\320=\301\245\n>\001\324\341<\021F\350=e\331\273<t\243\352<\211\375\010<\"\325U<\020\274\304<#j\024\275DJ{;\330Q\001\276$y\033\274\000$\005\275N\325\344\275N\266\342\2745?\212\276i\224;\2743\316\223\275\342\"\354=6\033\007>\324\307\022>\224\334|\275S9\312<\337\311\310\275_\317\327=\304\"\225=\030\374\330=S\2056\276e\342\254\275\203\364`\274\020Z\036>\244)\230=\214\361i\2748\220C=\300Y\200;\204\'J=w\272\\\275\302S\024<A8d=\027\337\263\275\350\214\217=\236\244\030=\nRd<f\005\333\275s\221\024>\203\256p\276C\257\017>\213\033#\276\373\323\304=\037\250A\275\357\231r\274\250y6=\223\236\346=6\211\224=\006h4<\260\213#>\205\206\335\272\025\245\322=\'\351@>\301\314{=\331\035v=\026C\257\275\312\203\244\275\347\036\324=\203\003\n>E\246\r=]\001D>\374\177\"=\036/\313<\203\363\014\276 \002B=4\210X<\303\312d\275t\036\336<\020\216\006>\2315?=.\342\225="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3699087
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "gl\243\274\025V+\274\3322\260\275\352*\324=\377B\306\274\343e5>\344J\"\2744\3115\275\311\306\234=\020C\274\272+y\362=|8\363\274\234\210\216\275\331\021\225=/\206\014>\245,X=\206\317Q=h\237d>\3421\362<\311\276\003\276Y\034\364<\273\r\316\275M\276\265<\251p\350<\315\222\t\276\337\303g\275\016\230\205\274\\l\220\276%\031\r\276\2552\215\275\361\210\205=\325p\377=\277\244\222=fK&=\245\354\340\274\347<\307=\007\366P\275]p\273\275\016\201\252\273\224\"n>F3O\275\366T\355\274\301$\276=\360\275\254<|X/>\267\004Y\274\372V\224\275\"\030)>\264\353\203\275\220\307$\275\036\355\355\275m\342\351\275\005\274\002>\303k\006>\001k}=\350o\000=\032\275\235\275\257\264\243=o\344\244;\016\273\234<\226p\343=^\211>=%\306p;\'ZR\275\267~\005<\n\021\332=3\257>\274\221(\252:\333\033\t\275+\177\273\274\2767\272;\363\332P=\242f\274\275\260S\"\276\'f\255=\266\247M=\017\014v=\3361@\275/6\202\276\325<V=\211L\020\276\242\222\206\274\370\006H=\333\343\275=\320\224\006=\251T\355\274k\002\242=\274 \305=\'\034L\2755}w\274\212G\334\271\007]\203\275\216\206\260\274DE4=\231C@\275\032\271\020\276E\324\355<\332\214\332\274M\223\321<Iq\250\275\357\305\257<\276?y>\242\003G\276y\275\306\275\224\355\202=\333Q6=s\367\317\274}\201s=Jz\234\275\277Pu\275\177\021{\275\265\317\245=\0343\234=\277Y\374<\311\030\003>\221\201\337<\020\313&=D\315\361<4\177\036\276\237\314G\275I4\373\274n\352J=\201\254\033\276>q\247<\035F!\275S\000`=\303\005\254\273\214\260\330<y\\*\275\324\010\000\2761k\245\275\365\353\030\276\037\226r<~jh=\240\320\361\274\"f\003\275\266\252\244=!*\032\275\035a\230\274\200\267\234\275\003@\026\276\177\2116\276\271p\265=\277\214\343;|q\000\276\314\207\233\275\024h\005>\255\367\253=\2479\235=\006\204\274=\016\017\244\273:\200.<\273s\311=f\327\263\275\227\277D\273\301s\202\275\260|$\275p\034\360\273ft\031\275\337\032\371\275@^d\275\244\035\364=\300\325\376=\342\000(\276\304)\375=\026\367\225\275\214N\020=P<\200<\304\372\024=\035\241\377=S\025i=\241\207r\275\276@\371\273\031\004\301\275^\033\247=+TN>\257\307_\274\356\001\234=\204JI=)\375\014\275\304\204\314\2746\360\224=t\034\337\275=\273\301=\036\021\250\275p\322\313\275\021\307\220\272\361\200\333\273~\270\332\275\026\247\251;\352H+\276\277\346\"\276%\215\237;\340\351\013=\352\000+=\371\327\276\275\374p\364=\177\224}>\374\263\335=\315\006K\273\303g\316\275\223u\302\271\272\223\366\275\2740Q=8/\177<\033\311\347\273tK\374=!?t=\235\356\315\272\001\210J\275)\037\334=\345c\035\276\234\376;\2748\026\276=\212B%=:\341\375=\345BP>\036\355\215=(\256\250\275\370\3354\275\'/\025:\220\270\230=\035\032\240\275\236z\262=\025I\323=\367|\034=\312X\253=\0142\301=\0020\345\275?\212\236=A\321.\276\027\240k\276\276\2246\275M\2468=a\t\356\274\201\365\267\274\303\3521\276d\005\214=B4^=\316\350\263\275\233-\000\275\343\0059\275w\035\206=;s[\275d\245\231\274\235\374\342<q\374\300=\010f\246\275\016\355\360\275\254\253\260=)WF<\254\260b>\\\236\223\275\254\317\221\275\204\027\206=\237\315%>\n_\234\274\360\204\024==\312!>T\3179\2757\211:\276\330\357#<\375\263p\275g\357\205=\253!\225\275\315A\270\275\005\231\351\274\265YP>\0200\n\275\347\372\204<\r\265;\276\273\'b=u&o\275\220\226\237:W\344\354=\271\003\373<\260\341B\275\270\037\242\274\365{\222=\016N\372=$\216>=\217F\276\2749=G<\014\325\244<\'F\360\274\225\253W>\374W\267=\324\033\203>\033A\204\274e\350K\275\225\240\314=I5\014\275\370\177A=K\313\025>#\003\274\2733G\277\274\212?\r>\256\000\231\274D\360\217=l\203X\276\203\r\334\275H\265\204>\321xU\275h\024\356\274^\027\252=*U\317\275\203\006L>\036\373\236\275\370\256H\275nO[=U\025w\275!\310;\275\307\032\236=\311L\203=S\2046\274.#u=\235\023\300\273)\265\351\274\301W\232\275\364V\005=<`\211=\364\351\371=\211Mf<6\\T=q\3315\275\375\177\247= \372w=\343\0106\275\000\000\010\275\216\325\304\274\3153\366\275@O\030=\252\342\026\274\2700\\=\321p\275\274\322J =w\014\005\275\026\035\236\274Rk\013>\3214\345\275\231\260\307\275\"\353\240\275\022\335\326;\347\013\223\275~+\364\2759\335\021=\341\276\020>\232y\"=\017\277p\273\330?\000>\325\231\240\275I\270\313\275\002E\212\275\"\222\374=\354\236\207=\243(l=\271\242\220\275\271\275\304\275[\010\234;\026\327,\276\274\225\324=\220+y\275D+\202\275I*8=/tI=\273\002\323\274 s\352=\037\217\212\2740N\250\275\314\021B\276\2548\240\273}\243\252\275\355\364\377=\270\005\307\275\232\022Q=\225\360\353=8\246\253\275\024\200\240\275$[\324<\352\215*\272\033\276\250\275\305y\252\275\000\316\000>\322\2567\2768\200\317\274W%^\275\204\355%\276l\333\022\276\343\344\236\275o\006\357\275v~\273\275e\335\377;\250e\234\270aGr>s\271 \276\367\347.\276\245\361N\275\202\215(=\014\2256;@n\000>d\273m\275r:\010\274\277pO\275>\230\014\275\001W\311\275)rn\275\320\021\240\273\367\262\354<\243\3733<\373\206O<\230\016\203<\200L\026>\227\004\275=\331\246\230\275g\320\315<\335k\256=\375\026+=\0136R\274\275\364\272\275>\205\264\273\261&\001=RU3\275\315>\252=\232-L<o0\222\273M\206\370\275\t\332?\275\242\200\002\276u\310\033<\024\251\003\275pyi<\240\347\327=5\233\330\275\014}\022\275x\377\366\274M\337\254<X\010\241\275\342\177\327\272\254.<\275\334\326-=\263\3175\275\271\254\205=\035XT\276\371N\311<,HF>,\267\t\274D\270\211<\322.\363\275.B\334=\326\340$\274\020\334\272\273\267\203\253=\324 \320\273\211\344\323=zU\010>\242\314u=\3414\317\275\227\366\275;\331\333\334\272\277e>\276\301\231\035\276\233\322\201\274E\305\222= X\010=<\375\356\274?\210\227;\tm\013\275x\313\352=\251L\005\275\351$\224\274\325\"\247=\205jk\276\220\260\247<\014=\001>\350\367v=\023\377#\275``\221>\021yj=\021\023\034>\301\311\022=na\022\276y\315\310\274\367\363\323=\311\331\206=\202\207\223<P9\002\276\023~\\=\303\3327\275\261\013\355=8\202\201<\":0\276\366\3634=\307:U=\333ad;xD\345\275\'\002\003\276>\r\200=\264}\242\275\033\244\305\274\263\351\226=\375\227\264\275\300\327B=x#\331\275\022+e>\240&\245<\013\252\254\274\340\274P=\002&w\275\001\215\303=\237F\352\275\275\022g\275\230\335\034>\230\240\244\275\350\274/\275\373\317d=O\214\202\274\202\312W\275P\212*=Xx3\275\r\364\">\301\254\236=I\254f\274<\362\034=\3559\242=\243\316\200\275\326\352K=\311&\247=)\357\341\274K\374\274:\\\270\005>\230J\311=\220Bi=\213\252\270=,\341\200\2755\242\236=\274\3236\275!(b=\247H8<\255\201\302=\216m\030\276\312\340==|%\267<f\216o=Y\362U\275u\313\224\274\366\310\033=\347\\a\276\331\256\341=\211-\365<\0342<;\266K\232\274\024\317\t\276O\356\375=\266\365K;\313\307G>=\005\220=B7R\275\356N\274\273\361\335G<k \220=\357\210\010\275r\251?=>\024\327;\314^\373\274q\"<=\320_\210=\274L\300\274Q\021\222=\206\220\362=(7\307\272d\337\t\275\357#\376:\232uG>f`\220=,\245\222\275\237T1>}ZV=r\340#\274\216\022+\276B\005\'\276\200P\006\276\265g0>\341\256\027>\256:\246\275QW\036>\202\022%=V\236\027\274]\276\000\275(*z\275K\035\026=8m\244\275-\231\226<\232x\322<@-\355\274\214\001\206=\255\240\032=\236\005(>\r\022\230=\254\327M\276\035qb>*Q\002>\350\374\026\276o`\205\275\217z\272\275\224}\241=\231!\345\275\250\254\274<:\302\310\2758+p\274\216\241\014>DO\312\274\\\230\335\275\244\313\353=\337y?>\346W\302=\346>w=>\263\013\275[\240\360=\206k\010\276\341 \276=\001\023)=<\177\016\276\255\343\217\274\343\364\307\275\346\360\322=WK\272=\220cv=\217(\356=\276R\325\275\347\254b\275\000\322$\275^\013\202;\203*\033\275|\t\241\274\377t*\276\261x\331=!\253\215=\035\023\235\274aZ/<\211\'\n\276\2216%<\360q\363\275\360v\030=&\316\272:\3655\206=\201\3411\276\326\216\303\275[\017\031>\003\273#\275\213W\022=\343\032\227=^\300\330\274\0311x=R\007\250\275\337[\300=\227\024\212\275\243)\343\275\313\336(=&nq\275IyT\276Og\350<\033\r\022>\316\213\236\275\326\261\024\275\364\022\357\274\254\224^=?\313#=\251\211\274<\332\274.>\236\343\023\276\341=\005<\376\374\257\275\305j\257\273\351\327\177\274x\035\212\274\247Y\325\275Gb\037<\207\036\026\276\324\327\264=P\025B=!\357\035=Z\232@=\3145\317\275\007\207$\275\277\244r\276-\232\245=\251\312>=o\215\006>\201\021\200=P\361\000\275\016\025\325=FS7=\212\031;>\215\tP<\353t\002\276;\207\210\275\313\031\305<~\276\360\275\244\334\235\275bO1<,f\023\276\252\365\363\275Fw\273\275\323\335\227\275UJ\013\276M]7=7@\000\275?\265\224=\322\361\017\274S\344e<#GG<\340\261\377<\323\303\267\273\267\217\005>6\316\007=\034\033\001=\3641\t<\317f/>0\232\205=\271\\\324=\322\235p\275\353Z\267\275\361\037\315=\310\"%\275\014ti\275\3329\354\271\365\"\341\274*\017\312\275\027\314\014\276Y\252\303\274B\313\243=U\313\031\27557&\275\2335\360=\312\370=\275e\023\360\273@\\\025=5}\353\275\237c=\275P/.\275#\263?\275\343a\010=\323 \257=R\312|=`\322\301\274\265+J\276\377\210\"=\253\376\207\275\265\250\305\274\273B\374<\377\031\227\275\361{\347<%\203\203\275\033\236L\2758\361j\275\341\"\316\274\301r\"\276\3467\224>\217\337+\276\306O.\276\302\350\312\275\037S\022=\360\361\014\274X\010\010\276\205\231\n=7(=\275\206\255\007\275\331\004\031=y\014&>\315\363\257;\313e$\276\033\325\002\276(\257\264=\331\363#=\257\364\205=\226\353\244=\r\351\203=\320^\307\273!\201R<\373A\274\274\320(\355<H|\244\275\201\346\224\274\352\306L\276\"\301\314=\"h\312\275\246\n\264=\2026\016\276\365\327\344\273(\204#>\247*,=\363\234\376=\371\242\t;\200\244\267<96s=>\314h=\225\323\352\275<_\t\275\257\347\000>\205\210_=\"\002\277\2755\263`<i\363\202<U\255\206\276\252\223T\276\021\3040\275\t\\&=\021\312\237=\350\371@\276V\216\347=m\353 \276\254{\370\275\007\323\037=\271pG\274w\250\303\275\373\244;\275+\207\207;\262\020W=\342\264w\275g\377\311<!8\314\275%\030\002\275\261d\313<\353\3375\275\275\030\022>\035\347\335<\"\226\022\275m\016X=A\260,\274h\227\223\275\226\260.>\205\020\266=\320\315:\275\233\322\027=\301\205\241={\266|\2741\037\317=\233\244\305\275\336\203\271<\037\024V\274\233\234\326=|\245\265\2750\016\235;\331\017~=\010`5<\245\232\277\275\336r`\274=E)=\226\215p<5o\">\267~\014<\037\366L=\2412B\276\367D\270\275\265m&\275%n\371;\360\305+\275\236\234\202\275pE\370=r\357\325\275\nx\316\275\362\016\231<\331P^\275/?\200>\310\222\210<\023\200a\275\026\030\r>\261\375\312\275\252\364W\276(\267}=\322\031\273=$\364\004\276\311\227\007\2755A\252=\300Aw\275\177\252\240=\312\200\216\274\2419j>\376\375\036\276\362`\307<s\023\211=\271\235\n\2761\276q=\036u\227< \024\'>\372\376\351<{\240V\275z\212\213=\315\320\021\276o\244\265=\345\224\032=%CY<[\030\013\276X\204\236\275\273\272\325\275\333\372\211\275\275V\310:\013O\220=\t\242\363=\200\211\302=\220\363\370\275>a\353<\367\303.>\375w\210\273*\225j\276\002q[\275\177j>=\251\363\210=\223\2729<;|=\276m@\007>N\216\"=LL\252\272\023C\023\275\037#\264\275\315\'!\276\006K\013>\231h\345=\000 \350\274\364\222\216=\333o\224=\315\344\241\275\005\332A\275`9\037\2767\313\236=y\3758;\222]\363<\333\n\301\275\242\245\274\275\240\254\301\275\241\202\356\274Qq\223\274\030m\007>\236\251t:\274\303$=\253\302\256\274\254\241\034\275l*\266=\214\303\224<^\301\334;],\276;|/3=@\014\226;\003\260!\275\'\362n;\005~\336\274(\356w=\340;]=vy\303\272\315\272\351\274\252P\267\275s\336\261\274\353\247\230\275\235p5\274\036Q\203=\340\014\361\275=8z=\242\325\376<%HK>U*\221=\264\010\240=\240\n\006<\034\355\204\275\222um=\325\234\200\275L\265a=\221\035x=\226|\321=\215\237c\275\310H\363\274\261tG\273\014\274\334;\204%\034<\023c\217<\342\325\016=6\322|=\223\r\247\273\334\373\033\276C\225[\276\214\373A\274\330=g\275\002m,\275\322l\\\2757\211\202\275\367\334\020\276|\027\254\271\260P9\275o\203\261<\362S!>vd\007>r\2716\276V\000\263\275{\310\325=\311\320\t\276\254\376\235=\212\366\004> \350\275\275\241\004\374\2722\302Z\275\252s\363=)%\302<FA\020>\365\274\253<d=\307;\237\2525\275]\364s=\340z\257=\220\344i\275\2445\352\275\337\336\210=jD\317\2752\361\310=\327\371\312\274lW\234<\304\t2\275\307\323]\274\202\312f\274\217\303\352=s\216\360\274v\3342=r\\\032\276\217n\243\2759\000)=\360@\373\274\256\212\241\275\014M\344=\251\ru=J+P\275<\006\276\2730\264\034=8d\007>F\017+=s\257\217\275\263\345\\\275^17\276\220\254u\275\317\267\340=\266\036\'\276\032;\254\275\'\352J\276\261U\336<\234\302\n>\211\230\344\274c\206C\276\002\274\257<V\346\343=\203\034\257\275\305O^=\177\225_<X\352s=<\337\327=\222\212\315\274\330l->\260\n\000>|?\010=\347i\204\275H\305\322\2758\203`\276Y\300\274\275\300.\304\274u\034@\276Uj\236=\352\203\242\275\305\217\263\274]\016\242=\014c\323\275?\267\212=\036z\256=3\251w=@a\n>\237w\231=\022\225\256<)]^\272\355\241Q\273\373UP\275(\221;\276\363.\331\275\010\036X\274\256\305-\276\347\314 <T\233\311\274\303R\t\275\312\263\346\275\364}\267=\221\273\316\275\367\376f>\276|\322=\352>\266\273\315lB=-\300\361=\356cQ\276\033\307\367\274Q\003&\276\241\274n\274\020\315T=\030\232Y=<\227\367\275\271\020\327\275:\316\233\2754\237\221\274\323\t\251=u^\217=\245,\031>\311\206t\2747\355D>\002\236\2659\203*\024\274=\250\010\276\311\320\220\274\301S\224\274\370\322\215\275k\211{=\001\376\232\274\235\033\265\275GL\237\274\342\231v=I\226\364\275K\323h\275\270\217\026;t:\035\275\332h\034\275/\304\351\274\221\220\021\276\364\227\305=\340U{\275L\304r=w\311]=6\000\010\275\335\005\357\275\317[\335\274\231zG<\364\003\347=r\3018<`f`\275\332\302y=_sU\274Y<\327=\315\200_\275qK,=\256\371\245<>\306l\275\263\016G>\201\252\221=\306\357\014\276\033\261\201=Z\034\314\275\241zH<x\372)\274\205#\241<\'l\373\275A\221\356<\005\350\312\275\021=\017\276\366H\304<X\311\225\275\273\333\331=\005\210\240=\342 \365\275\373p\016>\017O\024\276Y\247\332<\350\323\344\275E[\005\276\241`\210:\305%v<+\"L\276&x-=\2228.<y!\013\276l1\006\274\337e_;\362\364\311\275<\022V\276O\325_>ng\234\276\321\220\236=\216\322\276=L\365\301\272\355\235\'<WO\237=\367\003\311=\004[;;>\327\212<\305Yl\274\317\361\004\274\312\276\016\275HO\235\273`/\202\275\212\310C<q\307\035\275g1\235;\"\301\353\275\232vc\274\030/\324\274\324\301\362;n\2450=\313\266/<\005\036\305=`+;\275s\036\245=PF\264\275v\025;>U\343\330=\306\0209=ZS\246\275Gh*>\t\375d>\346^\356=n\346\002>\231!\243\275Q\302\374\275e\375\326=(\343\305\275\273\336L>%\303|<p\272\367=\251\273\362=\210\270z=\303&\036=\202/l\275!\244\251\274mJ\004\275\224\304Y:\372\243V\275J\376\005>\373wI\275Te\233\274\240\253\222\273\230\r$>?\235\252\274\275W\025\276\365\205\214=\233B\241\275=\350\023<42\274=Sp\033\274V\"\305<\347\301\227=\233s}\275/+\323\275Bw\020=x\300\337\275\nr*=U`\312\275\363\243<=\000\221\343<)\362\216\275\200\020}\275y\306P;PF\327\274H\244\005=5U\254\275.\216g<\"\316\302\275{%c\276d\255\003>\372m\355\274\336\022->\004\273X=\310we\275\033\276\256\273\224M\002\276f\227N=.\363\312\275%\262\r>\266\017&=e\256\325=o\022\331=\261\314\202\275O\325\027\275//G=\366\342\303=\273\220H\275\306\3757<\02000=`N\035=&z(\276f\275=\273\365\030\003\275\270T\216=\216\272\021=\314\251F\275_\271\345\274\265\225#\275J\364\367\273\310\327\014\275\266Mw\273\375\323&\275\034\313~<\251\3240\276\212V\367\272\014\363M;NEF>\221O\326=\240!;>\241\202\326\273\036R \2756\351\014\276q\0009\274t\017E=\275\242\230<xj|\275~\310\277\275\3501)>3\264l\276\"\330\036<M\237\255\275\253;J\275x2\020\274k\351\013\276u\261\013\276\237\344\252\274\337\273\235<\311\336J\275\330\2416=\335\302\201=\373\241\303;s\350\033>\3403\250<H\027\230<\t\330\253\274\rYZ=\211\272\372=\334\343\224\275_p\325\274\'c\000>\331\006\272\274\'\206!<^\216\314\274-\227\251\275e\n\363\275\355\366\366;b\306@;\2250\366<\233v\010\275\300\241\203\274\000$\317\275(\"\310=\004\352A\275\376\366\n\275\224\006.\276\302r(\276f\025\313\275\203\271^=\307(\317<\222C\235=\237\323\226\275\226\025-\276:\337}=\377\026\206\275\257\222\325\274{\223A\276\333a\240=\210\375\357\274\331\024\324\274\262\222\262\275\t*\350\275X\241\213=\362d\022>Y\260J>+\316<\275u\201\372\273|yy>`\345\245=O\240\\\275\243\342\335\275[\007\233\275>\345\235\273\375\211\"\274\023\021\333=]\255\274=\265\205t\275\377\377\243\274\030rJ\275Q\006\222\275\"\014#<\377P\216\275\004x\'\276\207\003\307\275\013\263\341=\262\022\244\275\034\3463>\316|%\276.\224\016\2763\213\020\276\316?M\276a\375?=kx\351\275s6\255\274Ffc\275\021N(=\241\032\211\275d>%>\210\356\265<H\312.=t\020\021\276\211\234\234\275\334U\225\275\220\205\212\274\267\260\246\274U\337\257=m\302\252=\312\251^\275\343\020\215\274-\003\276\275CX\217\2759\377\221\274<c\034;Ni\215=\2457\n=ERW\275\351F\006=h\027b\275\233n\262<RX\371<\3140\302\275\266\333\344=\216\307\032\276\241\266\265\275\335X\026\275\303\273\311=\267\310\340\275f\357\210=d(\205<\016d\203=\271qE\275\212\033\245\274*o \276\241nU\275H\353\025\276{\306\355<r\032\343=\020C\274=n\rM\276\251\256\231={_\246\274o\005n\2741\365\221\275\004\020i=\020/\260\275\316\272\226\275\007\267\230\275\303\300\341=\247\223\377\275\337;\006\276\325Z\033>\306&\034>\320\351\224=\331\376\210\275\rM\254=}\224\242<\314\222y\274\223\027\304=\267\363\230\275\272\375\212<\365\246\252:/%\232\275\305Y\270\2752\335\'>\252\234\236\273HU\227<\273o\213\275\213\022\243\274\221z\250\275_\360/\275\330:\024\274\223\374O\275e\367I\274\272$\364;\323F\261\274S\356.>-\276\006\275\373\022\236=N@R=\301H\221=X9\335\275\277\331\246\275\325\211\226=\350\332\205=Gf\022\275\324B\t\274\317\240\371\275\265=\270\275\241\212\223=\340\016\310\274\344\337\322\2749)\331\275\376\233R\275\203\r\226=\276\244e=\r\215\n\276\307\375B\275Cu\245=\214\007\365<\025\244U\273\3048\227\275\260b\343<&0\343=\300\302\000=\211\376\323=z\263\213=\033!\340=\317\234\264=\245l\007\276\303-?\274{\217\377=\350\027\357\275x,\303\275\211\205\024\275\nJ\036\276\314\202<\2769\373\304\274\355b\334=:\377\337\275\007\336\222\275\020\367\355<:\360\251<\213\013\\=\257\220\304=9\363\000\276B\315\235\275%h\233=\023TZ\2738\362\344\273In\362\275O\0314>\231X\244=\372\251+\276\235\252\365<\232\2403\275X\261\333=\264H\272\275+\240F>\327\223\356:K`\333\275\371\332\355=\3365:\276\303\314\253\274\025\030E\276\t?:\275F\001x>\352l5=\202\364\303\275_\243\016=\030!\243\275\237U\007>\363\002\252<Q\224\332<c\220n\272\301\260F>\365\314\022<C\322\201=\341\330\035\274x0&\275=\304\345\275C\240\243=\361\272l=\372\321\266\275\013\343\375<\260\265\244\275\233\331\022>\004^a=\270\367]\275\242\021\261=\006\001k\275\310\373\376\273\251h\242\273\275\347\217=\341\316\374:X]n<\n\010\206\274\226\315\213=L\267\376\275\367v\256\274\\Zc=\001QK\2754\030(<[\337\250=<\246!\273\333\272\204\275v\237\251\275a\346\331=\240G\036\274\324E\007\276\345\301\267=R\250\273=\212\247Q=w\224\305\275\262\230\345=/?\004\275;\371\021=\243:\002>\332\302\005>\032)\374\273\326\202\276\275\206AN>Z\361!\276\312i\314\275~\3226\275\217\264\352=\001$R=!2\220=a:\333\275\362\362L\275e\321\313;\033\321g\275\347\222\320=\221G\263\275)\371\231\274j\022\016\276a4)<<\271\230=l\3516\276\342\200\027\276\204\377*\274\325\254\242=\036\276\000>u\";\274H/\276\275\235\244)\274y\212\265=\335{\241=\337\262\267=\207,\300<\014,\233\275\034?\301\275\225\250;\274\027<\253<\345\300\003\275/\261\321=\"\220\000\273\204\322\355=\027l\367<bW\240\275\314\244\243>e\036\211\274\306\311\241\275A\224\210=\205Aa=\316\235$=5\236\354\275\2034w\275P\007\212<\344Jn\274\225\314\251\275\350\034\345=\344z\3269fU\203\275\300@K\274\014\335=>\302\344\374\274\232\035\206=Y\017,=\001\362\027\276\243\244-\275\346\260\215=v&V;\024\334\205\275\225\022b\276Z\204\314\275\230~\001=J\207\327\275T\231\332\275.\350\275\275\263X\026\27634\003>aM\021>T\313=\275px\271=erf=\331\367\302<\025R\177=\324Z\346\275\200h\225=\303C\004>\253}\300\275m\026\000\276\265\341\277\274\345D$>=.7:\013\202\244\275\372\254U=%j>>\372\230{<L\373\025\275\202\336\005\274\020\366)=\004\322t=KZ>>\000\322\373<Ad\277\275\273e$\276\214\247~\276at\265\274\250@\321;}\004&>?hK:pf/>V\240\202<\254\244\017=\021\014\237\275Fh\264<\\\3001>\035V\273<\005\034\347<\335\021\275=\307\036\216\275\330&z=g\033\033\274\305h\033>O\023\244=\274\314$=\'\231A>\270eU\275\261\355\264\275\2322*\275\261/\024=m\325I>\356V\237=O\245T=<\014\030\275\037{=>D\220n<R\353\375=}\271\302\275GcU=\322\342\227=BM\324;w\306O\274Z\332\207<lV#\275\207\333\330;\316\023 =\220je=\214H:>G\226\024\276{\036\234=\237\341\027=\362\016H\275\3458\320<#;\024\276\246H2\274\300M\017\275\225j\376\275<\212\001>\336j_\275\265L\354\275\362\227\023>\206\321\010=\326\321{\275\242\352\343=\265w3\275\016\324\356\274\247Z\017\275\266\254\021=\263;\370\273LS\220:\350\201\335<\275E\237\275\010]s>\200\334\372\275d\036\037=\266V\304\275\300\346\027=}\345\314\275\353\233\023>Ik{=\240\306(=\363\026\036>Cc\370<e9\216=\261\356\344\275,\030$\275\207}\324\274\270\345\301=\257\272\310\274\253\025&=h_\001>\356W\363<\003=\310=\267\367\340\2756.\010<G\242\264\274Hh\314=\210\234\207\275\2312\315\275\321*\334\274W\372h=K!\336=\2243\031=?\372\227=\301\231C=\261\317\177\274\211\340\244=\316\3101\276\326\265V\275\250Y\235<ED\225\275MG\266=\020\200\324;\352z\245<\335]Y>yY\325\273\264\216\004\275\2723\021=\256\350\300\275\037%G\276h\262\233<\353\230!=6\273\277\275O\023\343=\031\rU\275\315{\357=\316\313\300=h\3741>zp\025\275]\202N\275\031\252\300\275L>\034\276/\221\021\275k\353\"\275&!\021\275g\207%\274\314C\n\275\227\365\334:\361\\\321\275n\335y\274\334\342#\275\320 \246\275\240@L\273\241\024\212=\361xU=d\230\337<\025\007\260=\263\344E=T\215\010=\314Ym=\333g\002>\251\331\037=g,\335=\013v\217\276p\320\316;\300\r\202= z-<Xy\300=\335\003\207>\336bx=\257\303\313\275\036]&>\261\021a>\377\306h=F\204/<\211m$\275\023\3458>\204\233\375\275\021\241\210\275\262<\231=4\377)\275\3359\322=\212M\005\273\003\204\277<\317\356\336;3\340_<\177\326q=\351\265\021>\251\355\221\275\254v\207<\314\256\346<(\021\201<\257{\034\276\206\2057=\311\\\n=\332\255\361<\347\201>=\327\267\335=\'\370;;\311\221\336\274\311\254\303=\026\037!\274\206\215\263\275\365\016\236=p\313\243\275I\014/\275En\260\275g\225\311\275\335\330|\274\243B\315\275\315\tc=\275=\263=m\014\364=\352;\276=\227\261\000>\307\227\252\274`\365E>g\\(\276\236\257\360=l\021T\275\224A~=\266\227\264=\363As;M\375\233\274\315\003\301<2\257B\276&\266R;1\217\014\276&\034\215<*\032\267=\240\301\324\275Z\277\212;\217\246\263=U\365\230\273\345\320\266=}\2139\273\207}\312\274#5 ;i\326\232<\372\240\232<f\260\363=\223\025\320=\311\036\255<B\362\276=\276\010\326\275k\335s\275\212\377M=9\272T\275a\257_=\023[\264=m>E>\177\002\315\272\325:\203;\021Q\005>9\004\303\275\266\260\025>\234W\234=\350\3354>e\032\036=a\2721=\372\\K\274P\322\317\274\222?\242\275V\r\262=\315\352\202>Q@\014>\223\310\023>\354\020\231<N+\005=\213\270==\373\324\006=\013\303\216\2757Lj\275\214)\253<\206@\326\275?\220\031=\264\234\275\274\303\243Q\275pf\300=\271rK\275_\024D=-\037\373<=\034S=\235~\014\275n\202\247\274j\'\003=\302\374 >>L\216\275$x\303=\030\206\304\273b\030t\275\237\252w\275\261\037\203\274</\365\274\361\373l\275\254\227J\274{\370{:\362q\217=\364\355\264=J\265|\275\246X5\275B\2527>\274\210t\275\211\324y\275+\246\354\275\270\232\020\276HA\317\274\247\202&\275r\320\"=\033\355\010=~\200\250\275\374\013j=\013\310\030>\247\370\313\274A\237\r\276Ik\034>3\000\013\276\031\303\312\275\256\203\347=qd\232\275\316\371e=0\366\372\275\200\343|=\347\205\213\275\232\221!\276k9\255=\275I\004\275f\352\017\276n\264\235\275\277\022 \275j?\312\275\367\310f=\211\212\331<&\376\2058c\202\374\273)\373\010=w\205\220=\3115\300=\242\271l>\341\030z=C\254\027\276A\026E<z5\007\276I\317\232=>q\020\276\301[\032>\335T~\275\001\206\254=;\213T\275[\2547\275v\304\240=\003\007\212=\330\263)\275\324\032\336\275\372\020\252<\275XG>\204\335\334=%\024\204\275\023P\253\273,\253g\275S#\006>\t\200\025>\235\312Y\275\263A7\275\211G\">\257\257+>\000\027N\274^\326\007>\222\376\206=-0\022\275\026\333\270\275\250/\036\276\233\356\335<eRQ\2742\334\303\274(\324d>N\300\372=\312#\004=\314d\261=\341T\211\275T\271\201=\364\271&=\005Z\217=\351z\346=\241\313\240\2754\331\007=\347\262K><\223\327\275\013\253\315=w\345\255< 4H\275\372~\r=\265\222\247\2756\247v\275ml9\274\271\014)\275j\211\354\274>F#\276I\025s\275\355t\001=z\246\244\274:@\241\275\026\340\205=\266\327\304=\341\321&\275*\307Z\276\233\366*=\007\352\016>C\343\002>\026\221\217\275\007Y\311\275\362A\021\276\221O\250=V\354\017\275\"h3\275\312\"\365\275\305\335\005\276\343`z=\342\346\352\275#\236\032>\271Z\001<\355\261\256<hyP=\342\013\003\275\007\014H=k\206\'\275\217\003\364=q0\235<\273\320\234\275\3171\231\275z\247\347=\352\356 \275\254\373)>\331\"\306;Lv=>\037\216\222=\345\263E\275\340\246\003=\033\210Z<\000\035N=\224]\234;\r\315\377=\004\2070\274\315T\025;8\004\301=T\215x<\023\246G<]\252\206\275\351b\211\275$\254w=\2170f<\263\320\316\274N{\t\276C\355\301\2757A\t\276=\240B\275\341\225\270<\355Kv\275\330h\227\2747+y\2754\377)\275u\\\311<\331\264\200\276\030R\220;\330\006D=\267\373\312\275\335\257\312=\354\027\361\275TC\013\276\014\345\024=\367\033\255<\376J\231\275%E\016\276G\360\306=\364\036\306\274\317\232\202\273k\340b=\363\237C\276>\031 \276\332\000\305\275G*}=\307\"\361\274\334L\025\275rV\260=\305\315\340=\323\017Q=\005\245M\274\027\234\354=7\211\207=\364< \275\242^\221<\376\370_\2755\325\324=\324\260\310\275w\234m\273j\006\332<\267\215\252;\010\233\327\273\260\341\'>\002\2527=V\234\022\2742\\\313=\205\007\341;^\233\255\275\210\343s>\272\304\365\275\234\247\264\275\017\n\300\2759\022(=\334\316g\275{\243\235=u\2578;\226=J;\031~\376\275+*\001\276\310F\252\274\307Q%:U\351\210\275{\240z==\355\254=\204c=\275\254)\221\2746\232\220=\211vZ=\231\334G\275RB\026\274\353\312\241\274\013\023\375<~\267\250\275\256\250\246\275\250\233\315<\331[Q=\376\'\272=\351)3\276,\306K\275\312\205#\275\374S\037>\023;\363=\370\243\022=Y\257\312<\034\026\271=\257\360\207\275\217\367\007>\036E\267=\375\307Q\275\271$\006>\315\"p\275\241\234\235=\244c\022\276\237\370\213=\002\316N>\317.\002>\331J\332=\356\337\030\274BP\211\276BfU\275\255{\260\275\305\323\r\275e\306~\275\226\227\264=\365B\025>o\375>>\232\024\260\274\276\241\027=I\255><\367.\266\275\206\214\362\275\324\212m\275\0355\270<\377\316\036\276\311\215`\274\307\371\014>HYh=\2159\213=A-2;\214Y>\275\213\232Q=A\374\314=\337\241\213=\023\321\202=\003[\244\274\214\002\245=\244\346\026\275E\246\275=\276\215\025>\234r\370\274\324\357\031\276\362\022\225\272\242S\">\347\027\"\276\2455\307\275\342}G=$\302\002\2760j\235=\223\335\253\275\256\225p\275\023\216$;\214BJ>G\\\"=g\347G=A=\016:\304Z\265\275\262\325\253\275S\273\030\274H2\017>\206B{\275\3566F=\236C\021\276\301\'\256=\335y.=i\026\206=\360{\330\275\200i/>\325\211\236\273\316\227\372<I9\272=\244G\256\275\251d%>r(\004\276k\031`\275\"\3517=\341#\303\275^\205\220\274-\352\201<!\336\276=;f\211\274\3258\000\275\222\332Z>\263\330<\275Y\001\304\275\017b\250=F\220D=\243O\030=\027w\221=\254\360\317\271\311\317\365\275\023\006\277<\371\270\223\274YQl\275\0362\231=\350\363\303;\306\274\301\275\346\366\275=l\206\026\276\206b\022\276j\377\232=\316\013\217\275\325L=\2762\341T\275=\322\336\275\276K\306<\006\372\316=u\244\235=\007\306u=\2512\310=\231\340*>`;>\275VZ\274<\013\234\224=\334`;\275\013\310q\274\214g\340\275cj0\275K\325\354\275B\202\306\2745\265\276\275\032(>\276Ym\275\275\334h\242=\376_\277=\271\377\226>[\001\004\275\036\336\305<]\007\240\275\305\345\263\272\"\221\335=\002\247\201\275\212O\272=\350?\223\273\254dC>\2016\177\275\211\016\024\275\217\323\235=\304\350\244\275\360#\010>\330d\301=W\300\330\274\020\320\364<\367+\032\2764\345J\275S\256\233\275\373g\016\276|\264\376=AS\217<X1*\273\204\264\247<\330\376\221\275\256-\274<\254\360\215\275\317\314\310\274`\376\330=\"\364\002>\026W\277\275\213\032\264\275\261j\347=ANb\274c\340\250==\027\272<\321\270\014>\307#\234=\265(\202\273\360\001\257\275\014o\030\274\255\223\360<\000\004g\275\'5\262\275\366\316B\274\226D\017\276\263\370\034\276\202\206Y\275\244\266\263;~\336\222=\341,\331<\357wG\276\225\034\244\274\215\2538\275\257{\332=\013Li\275\262i\031\276co\017\274\374\364\006\275\026\253\241<y\304A=\222*=\275\201P\317=Z\237w\275\200\354\r\275hG\312\275\315\270\265\272^\340\\\275BM\345=\313\3375=\367(\014;\213BL\275Tg2\275H\240\317\275\243h\263\274\000)\252=G\245\330=\206\025,\276\231 \216\275\260\374\273=\026,\226=\276\256\246=\212\250n\274*\340y=\315-\312<\303\304\013\276\331Wk\274\200\033g<\372\331\217\275}\226\242<M\214\337\275\211\221\225=~S\354\274\307\225\345:\275\007\r=s\223W>\036&S\274^@\212=\313$\244\271\265\343\n\275\245\301x=Z\333\301=tQi=L\323\321\273)\350h\275\273\363T\275w\303g=R\210\301=\350\r\342=\t\306\231\275\332\317\005\276Wr\'\275\0133e\275_G\002\276\032\037\014<\227\262\231\275N\242v=Z\024\376<Bv7\276V\000\217<\307\352\357=\226\314\325:\351\\\372\273\240n\031>\006B(\276\013\231\330\275\247\010u<z\032\244\275\246\034$=\205\3451<\357)\350=\367\370\204\275\362-\"\276\033e$\275V\0052\276Fa\323\275\003<\327=f\024\014\276\313\342i=i\006\320\274\225\373\222=:g%=m\t\250=R`\030\276\310\321G>\205\233\217\275\272C\231\275\232\362M\276\r]\024\275*\345R>h\236\220\275\266y\317=K\251\213<\353\372\006\276iA\003>\216\324q>v\022\371=\010\363\253<\006\353A\275\347\311\312=\344)\010<=\353\221\273\020\300\357\275{V~\275t\3074<(\301\335\275\002\007\233=(\230\345=1\344\202=CS=\275\336s\340\274\210\016\225;\224^\026>\005\3377>\261@7>M<\267\275\365\320\237=\013J\226\275\217\325\322<\262Jc\275z\373==`\350\025\274\354\233\275<C\335)>%\326\331\275a\345Y\276\202\361{=\354\323\'<hK\204<\355\263\373\274\346{#\275\241\326j\275\206\275\006;\002_\312<\3701\324\275\364{\331\275\244z\202\275N\254\000=\\\1776\276\231\346\003\276\220\026\315\272\277\347\241=_\350\240=<\313\257\275\343\260_=\333\275\000>_\020\005>\017\306\010=#\210\\\276\320\302-<\333K\034=}\205;>\265Ts>\257>\277\275\353%\003<6\307\363<\005%3\275\tZ\334\272\256\037o\274\023\316\306=\353\321]=\314\273/=dj\010\274<\001i\273\021\234\202\275eB\300=lz\210\275\252\342\035<f\260G\276\024M\230<5\363\225<\337X\323=\275\307\230\2755\375u\2756\364\341\2754\007\234\275\250w\n>\376V\341=-b\210;-\274\357<\376Z8\276\236\224\201=\272\234s<U\301\210\275\261s\225=\316\270\323\275\367xv\275\274\310n\275J%\237\275\2127B<j<?>\325\034\">\304\r\345=\023\206\033=d\356\324\274\266\215!\276$\275\210<\215O\220\275wk\206=\014\366\364\275\027<\306=\345\025!\275\357\030R\276\374\376C=\250R*\274[G4=C~=>\0258*;\221\312\243\273\331\177Z=\227\253\267</PA\275\202\020\213\274\255MT\274\375\375\032=)\363\314:\354\315\274<\305(\224\274\302\317E=\342KP;NT^=\361\261\211\275\205\013\352\275\022\232%=\257\233s\275\260Q,\274\346B\207=\331\236\373;Zd\006>+# >\226<\210\275)\274\330<\354G\240\275Iw\032>\270\317\335\275\231Z\005\276\255$\n\275\313\255\254\275\371\007\302\275\273\300\033\2768\200\036\275\nV\323<\224\343#=\341\261/\2761\214&=\250\330x\273\313J\032>\226c\221=\340\316a;>\006\231<8a\014\276\262\'\231\274asx\273\014\333/>\340M\336\274\371\r\322=\005\266Y\275j8\246\275T\342\366<\2167\202\275\022V\r\276m\266\273\275\273\361\264\274\rn\027>\260<\214\2753\242\263\275s\263[\275T\3566\275\314\231\222\275\274\323\362\274\022\360\241=\313&\313\275\025\247\223;\3003a\275\036\310\262\275Dw\344<|\337$>Ra\236<\314\037\305\274\357\026&\276\342-\246=\215\3061\276\233P\320=xg\254\275\023~`=\301\013\025>-P.>\222\332\256\275\204\263\240\274\217`\270;\022\341\374\2738z(=\314\310,<\260\266\017\276\306F\374=\232\010\001\2766\271\232=\243%\361\275\305u:>\346\226\n>\347\005\004\275\346Y@\275\221\246d=p\271#=$]\210>\307\022\362<\013>\235=z\377\355<\t\350\242:[\006\200=\246\256\317=\240\256\343=\304\007k:\251\340\232=\303\002\274\274\024C\231=R\022\341=\301o\240\275\345\001\354\275\313\374\302\275U\0006\272\037?\331=\311l\232\274\202\223\304=\211\247\306<TKG=\231=\024\276\2152\313:\266?\250\274\014.\233<\003\327\207<\307>\307=\350\236\032\276\005\223\312<\t#\337<\2048\302=\271\010\321=\234\030&<\244\276\270\275q\264\373\275a+\017>(s\264<\025\0370=\204\360\333<\305M\345\275a\231C\273\206}p=\244B\240=\321\246:>_\330\232\275\214\220\235<\304q\262\275D\0065\273.\024(\275\226\360\326<Y\005\024\276\302\213\352=\3279(>\332\271\207\275\310\323d\274\351Y\r>\264\356\027\275\237\303\356\274\004\215]<\031\016\013\275\372\220\032;\316\r\235\274\267\3116=\202\372\365;Y\364\t\276@Z\022>\230\330>\276(\034\225\274\214\3109<\241\222\350=t\220\033=(\335\250=D\310\217:6\241\023<\234\336\n\2767\200\200\276\227\023\204\274\212b\017>\320\212<=Q6\014=m\027\217\275y\227x=\330h9=tv\226=k\223\025=\340\003\242\275\314\310\346\275P-\320\275u@s\274;\3467\276\354\3735=\231\337\003;\220\\\222=C\304\301=\351%\303<\"\222\217\275F\241+\274\207\303\216=%\003[\275\312[\377:\274\332\035\2755\232I=\230\353=>\376\217u\274\234\345/=j\273.=m\004\302=\232\3540\275\2662\021\276\0020\202\273q\242\013\276(\314\342\275\261\210\230\275\223\220\370=\233\264\206=\321\t\334;\034\277\241<Y\351d<]\232a\275zE\253\275\200h-\2760fA\276\310\242f\276\371b\316=\037\022\270\275\363\346\020\276\364\0224>8\336{<\325sI>\276\317\322;r\201?>\212\322\272=X\260\323\272\214\306\243=\244\233\200<U\325\000>\301M\220=~\256\240<[\336\010=\313\035\027\275}\366[\274T\\&>\222(\030=\230\375A\275Q{\003=;\213\205=\030\257\006\273y\233\212=EG~\275\036\'\261=\023\220\361;\031\221\215\275\324&\347\275vw\020=\\\030\026\275E\342(\275\007\353\n>U0y=\331\007\023=\031;\363=_\024\205\275\035\205\226=\206;\251\275Dq\027\276E\277\235\274\251\246\234\275\320\r\251\275\201\031\222\275 S\214\274\256\223t=\212\371\246\275#D\t\275\362d_>\003\231h<\027\336\000=\027\250!;0\274\344\275_\267\323\272\017 A=\314\366\342\275\236\335\241\2757\322\234\274\216\210\315\274\211\346\017\274\350,\243;Jo\014:\260\023P\275\371H\205\274K\306];\267\307\030=\261\304\215=POh\275\034\276>>\223\363\351\274\006\231v;\271\360\351\274\213H\n=\034i\252\275\234\330s\275oA\257=\337\222\263\275\323V\017\274\360\205\025\275\025\264t=U)\t>\325\336\232=p\016\310\275\'!L=\005\332\013=\244\213\217<\212\023\017\275K\220W=M{\r\274\264\"^\274<C\022\274\314>\303\275\357\031\235=Z\237\t\276\302\017\213\276\014\231U=K\310<=\004\033V>\264\241\245\275\235\265\364\275\320\034%\275\266V\276=h\241\335=^\022\327<S\244e=n\017\274<CLi>\204w\210>H\316]\276\237:\032\275\325\360\343=:y\024\275E\242\345<\035\340D\274\000un\2735d\026>u\240c\275\372v\177\275l\023\350=\342\271\364=\323\234\353\274&\350\212<?\254\262\275\272\0040>\301\345\257=\227\204\355\275*\341\002\276\200\204\n\276\317\027\263<q1\330=b0\247=\204\367\202\275\333\343\014\275}+\345=9-\255\274\362\275\321\274\014S\250\275vWK\275\325[\370\275\n\203\262\275\333\362\266=\225\303r=+\023\004\275}\263\230:\326\330q<\245\271\255=\\+\225\274\264\247\230=\233\341\244=\323\n%\275)U\257<\217i\206\275\362\317]=\256(\223\275`\000\261\275\355#$>\310\363\327=\022\322@\276`/J\275\"\324\252=U\204\237\275\204\254\033\276\32104=xd?\275\257&\377<\304\231*\275a\031n=\375\006\260=G\214\363\273\230\315\016>\261\261M\275\004\023H<o:\207=\252\036\016\276\267\304\272=\002p\217<i\031\374\275\300&\270;V\357\013\274\021\201\363<\263%\207\275\316\373\311<rS\023\275mF%>\310k\260\275\353h\276\275\351w\000\275_\2416>\306\307\304\275i#\317\274\371s\232=\201`\214=X\300\r=\207\364\t>C\234\014\275\254\2162;\352\263\230=Fn:<cf\244\273\364\344\005>\327I:=K\231:=D\t\037=\353\340i\275\263\305\315\275\240<p\275\371\324\263\273\307\366\200\273\0352\310\2743\202\363=\202\004&=[\311\347\274[\373\325=Jk\254<\330\360\361\275\207/S=\021\010%>\270*\373\2747\361\206\275\320`&=\336\371(\275\271\205~<z6\246\275l5\371=\213\231O\276\266\245\301\273\271\211\231;\261\242(>\333\005u\273\243\235\204=}\214e\275p\234*\276\266\367\220=\0202r>\357\340\357=\300\373\337<\310\233#\275\227\330%\2757@+\273ca*>\202\032\266=7\351\353<8\302\2229\263N\234\276\300w\261<\217\270\227\274\234W\232<Z\'\025\276F\225\257=\200n\030\276\254\222\'\275\225\'\035\275\324V\232\2755)T=#o^=\306\373)>g\177l=#;\202<r\344\206=b*\263=\350B\326\275\346\261\253<\231\2429\276\353\334\335\275\233J\032\2769\252\252\275\315\347;=@n!\275>\240\312\274\\\r\307\275O\214\002\275/\002\264<*\025\276;s\017\000\276\331d\207=\320\323(<\260\036\307=\274\020\005\275\203\333\233=\215\353\034\276~Qr\276\256\245\224\275\375\314\301\274\233\3360\276?\347\273=\366T,=$\357!\276\314R\037=\014\264<\275\301\270\002\274\025\307\266=\272h\360\274*\354\331\274\247\245\215;\001\325\234\274\225 \372=\322>\262<\352\275W>u\262\004>&\275\317\275\023\356\227\275\036)p\275\230S,>\000\301g=\336\243\200<\311\302\027\276.\324l;L_\321=\302\310\037=NBX\275\207\333B\275\3164\274=\225\025\023\275\256\250\335\275&\217\261\275\373\250\230=\022\262\336=\027\0356\275\211J\363\274\305\360\273\275\007\214\257\273\235\303\317\275\336\247~\2755\374\020<4\'J<\365h\256=\203\222\337=\326\017y=\364,\r=\260g\206\273O\312v\275\237\2771\275\365\246\204=\t\036d\274\024\362K>\343\001\375<\tN\035\276\031E\226\275!\037\315\275\237T\r\276\3220\276\275\343\304\t>gv4=5i\002>\316\334_\275\206b\201=<<\230\273\242G\003\276\314!\302\275\216\257\265=s\001d\276\177\002e<\333\332\317\275MLD\275R\244->\214\013|=\217\216\031\272\004F\033\276k\030\010=\177\363\247\274\355\253s\2740X\236=\251\314\025=\345\\*\275\251\345\014>\374&\230\276\010O\360=$Q\r>\364\224f;\274F3\274[\323O=5\244I=S\227\321\275i\222\271=\277W\246\275\313\233\377\275\350\"\353\274\230\200\232=:3\236=)~;=\315[\355\275\225\270\002\275\345\n\221\275\031B\317=\271\215Y\275::\261\273\200}\236\275K\022#=\177\017\242=\263w\332=\320q\201=2\025\004\276d\372\317<+\330\245\275C\003\n\274~\210\355=\366J\265\275P\274\307\274H>\263=\361\316\317=\226\261\257\275_\327=\275\327\'\216\2750\356\315;l\206D\276\273K\243\274\022\333\267=\022\361\335\275~)\010\275\252%#\276#\004\242<\273B\323=\233\254\022\275\356\021Z=\033\003n\275\206\215\342=@\000x\275\013\002\276\274\233\255 >\353\372\362=\264Z\021\276\340\275)\276\351\356\250\274_*\337\275\031\270\004\276\312\231D\275\320`\217<\367\267\016\275E\036\373;\205\2029\276pi\251\274\356`\000=\316\346\266\275:\251\352\275l\215\005\276~2\221=\274\036\327\275&\344\205=\274\236\255\275\001E\340\274\227 \010=w\237\362;\220\257\246\274i\366\220\275\346\032/=\263\366\374=\276\321e\276,F\265=A\321\030\275\321\004\\=\325\341e:\212\317b\275\303\026\254\275VM\220\275\021I:=s\357\344\274@\307,>8PQ\275\352\203&>&8\347\275\201\346K>\213\202B<\'\002.=s\236\242\275gK\327=92\312<\260\036\237<\t\223H=S:B=\217\r/=\322\241\256\275L\2664<\000/\302\275\235\177\202=\367gR<H\271\220=\320\315\223=\370\346\335\275\334F\323\273z\336\253<\355~i\274\177\3371\275+\310\340<\336\372U\276\201\220)\276n\033\245\273\206\200\357\274%\310\266\275@\314:=rV_\274\245})=\246\177q=K@\333=\321\271b\275\324o\036>\213\"\207\275\346\237#>\313\237\010=IP\254\273H\311\323\275u\014\214;\nZ\221=\346\223J=\352^r\273\257`o=s9\302;e\213\034\275\n$\331<9Z\302=\203(q\275w\021\241<\314\352e=c\267\365=]G\t\276\240\305\366\274\035\252\024\275N\370\234\276\016\020\024=\233\276B=\341j\243\275\222T\220\275\203\0141\276n\323\262\275G\246s\275\361\027_=&\360\017<\210H\017=t\374\213={w\010=4K$>V\220\371\275\213^\007>\334|\257\275\207\260\005=M\300X:\370?\205=\271\360\251=\257\344`\275\230\023\372<\347M\204=X\307\204\275\266\307/=\210{\250\275A*\204\276\007\374\353\275\377z\264;]M\272\2753\244\377=\004I\266=P\342\244\273\036\017D\274D!,\275;f\240\275\333A\366=\343T\207\275\271\024\342\274/\204C\275\217\302\257\275^B\006>N\335\276\274\276\265`\275\263\345\221<*\021$\275p\007\261=\322\345\340\275\006\r-\275\326\010B=4\354\237=|(!\276\337\360A=\356#\217\274\317x\213\273\327+\026\276\361\363\313<<g\313<\311?\247<\306\331\227\275\376X\342=\023q\316\274\222\356\211\275?L.\274v}\326\274\035Q3\275\370\030\r\273\360\202\236=#\317\314=\325\310\r:\023x\034<\377.1<ig-\276KW\001<\025\232q\275\273\257?>\233\367\266\275@\007}=\033\324\312\274\225S\r=;d#\275\211\033}\275=\302\035\274\t\177\327\275M\001\361=\302H\312\275\377\306\247\275Y\275\244\274\204\357\n\276\365\216u\2743\'\021\276\340\360?\275\343\321\216\276r\246\243=\300\247_=\247P\r>\327\002\246\275\021M\r\276b\373\255\275{\332\224\274v\350\351=\276\0375=\350\3159>-\314}=fO\206<\177[\306\272\275\357\224\275\210V!>\027\036\211<\315\225\340\275)*\337=\303M\030=\243\326H>\311\321\277=\033\365\331=\212\226\356=\037\033e=\205-\215\274\322\025!\276\356\217\246=\221\351\232\273\375{\356\275z\371f=\330\2535\276\026F\375=2\242-\275\216\277/=R)W\276\346`\325\274\242O\266\275\354\342\030<B\376\034>\220i\233<\025\327\327\275\320\004\263<8\005\215:\256\026\372\275\352\271\235\275\002\023\365\274\273\2012>T\353P=\006\333\222\275\323\272(\276\321\336;=\355(\373=\233\332\240<\324]\245\275H\225$\275CM\360:\207\177`=\220\306\240<mKX<\333{\221\275Fg\232<*J#>\276\270p\273RT\215\275|\3770=!\207\370\274\374I<\274\037,\027>\027\361a>\315\235\306=\001\341\362\275\033\261\200\274\276D\177=%\307\001>2\237h\274\217\010\345=\032\375\256\273J@\206\275\373?\230\275\3212\263\273\220\234\003<H\202\347=\273A|\274\272\331\032>@\262Y=\244\nw\275\376\2237\275F\356A\276\243o\341<\377\357\245\275\244\321\036>\027\222\350\275\355<\216=`\253\262=\303\311\023\275\037\377\313=\375\004\216==\355\315=\013;!\275\232\210\270=\365\211*\275\376\262\350\274b\306\r<\3415e=\025%n=\007\260\327=\202\247\021>o\302\022>n@\360\275\0075\320=p\352\204\275\377p\205=\336]\361=]w\002=\2278\014\274\003\254\024\275\264\305\005=\342\216\253=\326\027\201=$1\252=\014\303\271<|\263\013\274vV\227\274\252}9\275\241\3750\276dU\201;U\276\016>\274\263\313\273\212\"(\276\232\242\265\275\023\250\230\275\304\203+=\021\342\005=\224j\230\275Z\253\212<|\367\356\275\341D\352=\333\340/>\nH\361\275\014:\274=AVJ\276U\207\030\276\372\262u=$\022\377;T\301\026\2754\276\317\275\\/\364=\230\005j\274T\340P\275h\246\363\274\312k\004\274~7N\276"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2511511
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 26
}
