node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8419712
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "<\272\202\275\317\273\2659\343\270\364=\311z\220\275\212\006\223\275^\341\003\276XV\366<\301/\300\275;8\244\275\025\2169\275\\\355\255\275N^\022\276f;\323\275\257\351\025\276\337&\221\275Su\035\276\255\350\215:\020\346\254;\021f\032>rN@\276\244\334\004<\245Y<>\006\001\211=C\371\004\274J\341\322=\001\242\337\273b#\201\275)\'\373\275A\254s=\243\224\311\274\250\014\016\275\314\227\006>{0B=\021\2770\275,\311=\275\2073\304\274\210\330\234=1\302\206<\315\360\236=_\207\240\275\004\205\025\274\262^\234<\027f\023>b\311\017>go\244;-N\215=\251\351\t\276\326\275 \275\317\316\211<\352\252\226=mm\241\274\017r\035>\227\265\033\276\022\202\365\275\325\325\003>\240<~<\241\362i<\024\366\371\273z\350\205<l:\355\275+\305\352\275\000I\246=\264r\332\273\225\030\276=g\256\274\275\223\2766<\345\224\032=\313\267\265=\020{\332\2754\212\004\276Z\213b=\301\376\027\274J\345\230\275\254A@\275\356\253\020;g\377h\274@|r\275\0348\222\274\341\026\377\275\377\203\013>\024\271\341\275\216\002\342\275\261\331~\274\000M8\2758\375\010\276R$}==\203i>\347\307\274=\004\255\244=>\201N=\030\375~\275\233\020\035\275b9\324=\224\357\376=7H\313=KT\347\275\315\356\250\275\316G\225=\214\334\215;hl\363=\017j\275\273\335\020\004>\226nW\274\315\253C\275\330?\032\274\202`);#m\252=\036\247/>\036U\346\275*\221\324<<\216\\=}\311\341=@\240\302\274$xv>\2228\215\275I\023\200\274~\205B\275?\026\247\275j\221v=\266\247/>\316\277\277=,\353}=\375\223\351=\351\"\332<W\200\034\276\207\'\251\274\264\205\331=}\310\217\275BA6=\000 \211=/tx\276\271\353\236<\253l\211<\365$\210\274`\0166\275\273\333\226\274\235\370T=w9\021\276x}\305\275)_\324\275\177c\"\276\211\376\002\276s\327\017\275\252\253\306=\223\274u\276x\027*\275]\313\000\276\207\255\363<\024Y\014\276\031e\275<>\222\211\275@9\250;I\367\363;b\002b=\235D7\275\211\2371\276R\343]=$\374H\276\016\333\201=>\000!\2753X\203\275ap&=\3612\n\275\334\324\247\274Ub\317\274F\225\312\2751\310\004=\025d|\273\360\373h\274\361\371\037=\276+\350\274\330\r\226=A\270\025<\321\233\376\273.\036\231\275\251\243\014\275\320\316\310<\177\344$>usD\276.S.\275\250\321x\276\220z\027\276\006\244!\276qK\\=#\021\324=\000\264\227\274q\207\233<\277\345\300\2752[\265\275\345&\202;#\265\030\276r\336\327=\360!\025;\210\374\003\276\355\020B\272p\366~\275d\3762\274F\254\031=\253\332\003=\035E\215\274KP\205<\316\\\024=D\366\340\274\311\370\300\273\331\0366\272\323E\005=\0145\374\275\373\301\342=\313m\215=\207\225\276\2749w\220<o,=\276\214\322\270=\266V\376<0\325\304=?\237\214\273w\362\007>\351\030\373\275\361L\247<\262t\254\275\243\326\262\275\033X\350=R\346\244=\323\346)>\373k\256\275z\261\330=\252m\365\275p\336\343=^\032\357=\037;\\\275\233\342\264=>[\016\276\031\r9=\355\250\367=\021O\000=\310\365\344<^=\305:0\030\271<\3362y=.-\267\274#\016\351=cBq\274;\370\005\275\270\303t<H\324\025\275\355\261\372<qO\353\275x\267\202\276\226\336.\275\343oc<^\376\004\276C\251~\274E\227K;\376\376S\274\353\271\006=b\353 =\257\352^=\305\213\241<\204m\312\275\216L\'\276\025{\225\274\347\350\221\276\365\274\347<\177\t\207\273b\\\335<\027N\324\275\262!\231<P\2135=gb\357\274\323\243L>H\177\350=\347\341\344\275\265\272\267\275\301\263\350\275P\363\200;\273\024^>\366\361\013>\326\001\274\274\376\231\342\275pf\342\275\tE\374\274,u\325=\342tC\275K3\371\274Ox=\275\326\031\267\275yz\003\274\313SO>o\'\271<\347\216\357\274 j\262=\360t\032>\004$G\276W\341\t\2761J\254=\006?\"< \213\'>U\263\201=Z\n\330=\265\254\236=\224\206\376\2757\361\003\276\251\036\264\274\0077/\275\2123\261\275\004G\332=A\276;=\254\t\274<\032\371\230\274>\326\242=\250\016\251=\214\273u<\251\233\236\275\310\236\021>\n|\311=9\022\306\275\2247\312=\243P^=\220te=+\014\327\275\220\177P\275\254\003\352\275%\031\r\276`\234\203\274\306y\007\276\037\354\026\275\351\216\267<\'\023\247\274\346\021\000\2766x\032\275\027\345\305=\017\030\004>\313\262\274<\020\367\254;j\002c<\310\357\327\274\310P\344\275\212]i\274\364\251\r\275^d\337;i\354?<2<m<\214\354\340\274\254\222\014\276\302\255\000=Bn&\275\301|{\275!\226\025\276\277T\202=~\221\362<\210\307\327\275\265\000\006=\311\202V=\016\301q\275\346v\306\2753\315\006\275_\212\327\275\177/h=\317d\217=#8\216=\006\322|>6\260\006\276#F\205<ub\376\273\017\021\t>\002\205)\276\270\177\377=\200\300\r>\262\022U=v\024\025>ie\270\275\024\033\000\276I\344X=\006\375`=!\350\365=o\000C\275\206\335\005>\346\264@=4\n\253<\360\373\216=3\177\n\275\244\n\t=\205\036\304=\3042\007>k\232\255\275\'L\223\275^\003\010=o\246\245\275t\331\322\275\022\321\273\274\264\025I>\341\353P\276\343\365\316<\325\364W=\021\267\335=\223u.>\373~z\275\026m\233\275X\231\344\273\222\255n\275\'w\357<\262\200\024=#\335\016>=\347\217=42\375\274\204\270F\276S\242e<\036\222\227\274?\251\265=\325\241\002>8\214\027=\n\227\223\275w\263\366\275\301r\276;U\265\207>\1777]=?\203 \276\362\263\004=\334D\342<~\265\t\276\033\204\270<\016*\347=\270h\223=<\204\202=H(\305\272\232T\236=|[\032\276\347\"F\275\3630\370=n\264\005<\247\355W\275-\t\253\2758g\352\275\376\320\341\273_\330\020=\367\030\214< \276\352\274k\265j\275\266b\017\275AW\212=P\347\016>\026\3573=\346\243\203<\264\370s\274\332\370\317\275RH\316\274\016\307\016\275X\337\217\274fp\244<\234W\343=K\212o\274\352w\035\274q\216\255=m\342\341\274\274p\003=\277+\035>R\345\202=\007\252\367\2746\341\225\275s\270g=O\220\227\275\312P\333\274\335\025\203=Ail=\344q\250\274\006jd\275\347\245\274:y\003\337<Q!\302\275\302\025[:GO$\275\t\312\230\274\335\006\215=\254\347\205\275\2410(\273d\216\033>\357\316\017\276\271|(\276\370E0=\031\343\372\275\3750\001>y=\250=\265\017s>\376\376J<M\023\216=\177\230\257<\277\342\352\275N>\352\275\20055=o>\347\275\310\227\356;\216\307|\274U\241\355=\362%\310<\333\233\323\274k\n\216\274;\014\027=\256x\265=\206\324\035\275\210\272D>\302V\266\275\247\317\">\334\305\026=\310a{=\273\267\025>\215\246\250=p\317k\276\265\245\224=\270\230+\275k6;\276QG\302;a\205\214=\245=t=\275\361\n\276\303\367\254=;\3313=\234\265\201=\007\035\310=>W\345<K\345\275<1\235\006\276 \232\350=\n\274\007>\212\223\210\275Jv\363=\030q\344\275\242q\034>\252\001\307=\216f\020\276\303(\002=\202V5=\335\353^=\277_t<\200s/\275\275\222\007\275k\242+\274\320\216)\276\246a$=<\036F\275\303\"\027<\030O\356\275\036\324\204\275\220}\374\273\t\254\241=\304\327M;\221t\202=\240\357)\276b\211\236=\r*(\273\004\261\201=n%\366<\377\224\375\274i\212v\274s\354\241<\246\310V<\225]\247=\005\214\021;0\300!\276\342\227\322\274T\007\256=R\244k>d\220\036\276\316(\273\275\006\226D\275h\223\247=\277\021b\275\307+\'\275\226m\033=\272\350\217\275i\n\204\275\027\331\000=\035\002T=\006\271\236=-\232(\276\377Z6\275\362\'\'\276\026\224\251\275b\373_\275V{\023=D#\007<*\216\006\276\3609\246=)\337\014\274\251M\333<7s\234=\2039\210\274w\350J\274/\366\351\274\337\010\223=\310\235\300<\250u\021=d\234\205\273}\241\312\273\030\202t\275\332\253-=\366yQ\276q\316\364=\273\177a\274Kz0\276\206 \217=Lj.\275\366D\357\275\260.\261\273\216\263^=!\311\324\275\207\261\263\275Y\361R=\323\350N=/?1>B\305\003\274\305\037\264\274(\347\376\275}\267\263<\241\307P>\354N\342\275\256[\362\275\363\257\327=\2417\205=:\236\217<\0247<\275\256\246\027>\244H\334=\216$\017\276\222\354f=\251.\233\275\033\327\225\275\341)\361\275\\-\204\274Cu\207<\327\226\377\275\000\325\003;\273\232\313\274\217\000\253\275Y\000\006<\005\255\352=\004\367\\\275p\n\303<-^\217<\303T\217\274\312\275\032\275\004\255\202\275\331\345\307\275\216R\214=\022\252>>\375\314\317=J\331\355\275\231~\205=\251\006\n\276(\226J=\251\246>\274\366\244\335=\004=]\275\341)\343\275\362x\002\276\333`3\276\311\2245\275n\260v>\231\343Z=\017w;\275\2473<>o0\316\274\345\375\214\273\263\rk=\002\022\354\274B\037\253<OR\330\274>\007\272=\223j\233=\246\327\224=\013J\360=\226\317\025>\241n^8\305\354{\275w\010K\274\240\004\255\273\367\356\247\275\003q\277;a\223\361;h\244\321\275\234i\340\275\215\206\346=\244\376\365=h{\027\274\370\037F<\327\332\\<\024\0306>\255\004\203=\027(9\276\032\336{<\316\032h=S\024\t\273\006q\005\276\374\365)\276s\361\301=\021.\235<\377\221v\275LZ\013\275\221+0<\007N\252=\016\031/:\317\335\245\274\177\353\200\275\272\001\002>\031h\271\274@\261\275<\032\034\323=\317\277\221\274\327`#\275^G\235\275\214\206e=mNm\275\313\266+\275\240j\304=[-\234\275*\235o\273a\031\203\276w<3\276\330\334\034=\225\221\272\275;X\216\273_\361\016>\212\370\262\274\3527\310\274\353\361\207=\322\326\032=k\226\333\273\242qk\276/\016\'=\352\242\201<\3631\231<\312\271\222\275G$\244=\033\217\334\274\366\265\202=8\271\261=\254\256N=\321l\265\275\361+Y\276O\030\004\275\361\010\300\2755\027\252\274~\3774=\001P\322=\227\233\002\275\312\221Y\274\3652I>\025\260\312<\220\3374=P\333\021>F9\211=d\001\035\275\276\370^>\221\306\003>\351\0030<\232\265\030=~R\212\275Od\033\276\371\014N\276\002\332\257\2758\303;\275|\\\214\275\210z\305=\363\0324\276\0004\030\275\237\260\004\275S\001\342\27494\272\275\323\236U\275V\267\220=\366&\035\272\345R\315=\234\006\233=\221\254\007\276\342*\200\275f\312c=\263\313&<Rp\206\275p\217\244=\245\200\002\276\341hl=0\372E:\357\252j<\320\246\270=\340\321\303\272{\246\301=\261\213\037>%\334P\274%\020!\274\267\215&=\221]\027>\301\255\243;\314Hq<\377\261\206;\353\360\306\274m\375\243=(\270\023>\343\301h\274u\210\214=K\211^\275N\274\006\275=L/=\342\272\217=\362\372\222=\237\307\246=V,b=q\267\301=\333<\371=p\346\350\275\257\261\r>[I\304\275|}\371\275\021tl\275IU\250\275\316\037\346\275\362\257\373\275\010\244\t\273\206\244\235\275\222^\276\275\302\272\007\276\302\305\023>\\\017\016\275\030d\301<\370p\024\275\220\002\347\275Y\027#\276\311I*\276\314a?=Xe\316=\253A!\276kz\305=%\230\001\275gu\203\275#\013#>\256}V\275\260\376\275=\210X\030\275\275c\215=\031\336E=\243\006\003;\220A\312=\024\220\326<p\314\255<<8\242;\214w\207\275;\345Z\275\262\371?=\373\366j=\250a\245\274\314\361\323<\010\201\356\275\377C\213;Y\371r=8\265\201>lC\347\274\006\333\252\275~\224\001\276G\254-\273~\001$=paK\275\233\210^=\226\217\325;\210\007\263=Ns\311\275\035\367e=\271$\236\27428\330\275|Y\354=l\236Y\276\343\276\220=\n\230\201=^V\266;1]\021\275\035\247/<0\025d\275\247\016\303=\321\246\322=\246\241==en\325\274\243\026?\275\323\025\006\275\367\034\\\2755\336\377=C\014\026:\316\334\013>\377\317\361\275\243YG\275\221?\036\276!\205\240\275vZ\000\276\324\247\355\274\272G\227\275\34764=\313/\251=$\203l=s\216\273\275\310;\255=%\200\326\274\327\242\254\275\226\002:\276\270*\345=\023\263\037>\356\232\201\275x\272\350\275d}\004<C\363<\276vP\320<\327\274\252=*\'\271\275\266?\202<\250\344\334=\315\260\031=\351\330-\275\371\204A=\371%\013\275\034m\006>\035\212\327\275\306`\270;\344c\351\275}p\022\275\024\342u><\317\236=\321kS>(\340?=\262\262\221=\025\222\n=\004\337\205<\t8\'\276\340\006\306\275E=F=\0268!\276\220\324\233\275\213K\355<d(\323=1e\323=B\031\016>\334Y\306\274\365d*\2763/\226=E\210,\275\331\036\274=\034S\277<\231\325\217=`\242\214\275\312\316\300<\352\356\023\276\2260#\276\345\230\316\275\3356\213\274\270\241\026>\235_\'\272\205\034f\274\366\034\241=\361wS=,M\035\2752\321i\273qq\352=\002~\212<6H\270=;\354v=iQ\323=\334\207\207<\236E9\274.p$\276F\372l\273\225\221J=\325\nG>5\340\025=\324\313\335\272\347\373\275\274\217\033\326=\202\3145\276;A >;\003%\273v\231\333\275kW\024\275\301\331D=\236\031\222\275\234\303\331=?$_=\200\256\024=\306\273\">K^B\275\245\265\374\275\003\236\n>\342\275\013>/\rJ=B\327\322<\303n\212=6\364J\275 \316\341\275M}u\276Vu\177\275o\342\204\275\014gl=auZ\275\310\334L<\250H\365<\304\377\242=\227\215\261\273C\263s=\352{/\274\003\013R=\361\233\246=\343\326\205<\354\274~=\3637A>*N&=c&\272<L\302\221;|\0171\276\303K\273=\2449>=S\251\213\275\260]\227\275\355\371D=\032\217\231\275\347\3309\2752\276k>1O\232=\240\330\227=\245\260?\274e\030\026>R\032\367\274\244\332c=\216\311\335=\271\002\347=/\365\023\275\026C\341<\252B\t>\"y\022\27529\'=\327E\374\273\014o\261\274\207p\252\274Z-\276=\234*\007>+5\002\275\022t\373\275\031L\036=\035w\261\273\353Q\r\275\\\223\203>`HW=\260b\245<\21078\275E\221\343\275\302Q\207\275\330\346\205\274\026\342\201\274\366\244z\275\312{\025>\372\272w\275\033B\235=\206iq<\031\332\016>q\326\245\275\010J.\276\317\270.\276L\017=>\244\240G\275T\267J\274kM\266;\242\242\373\2743r)\274\233{\234\275+\327\325\275\222\254\314\275\240\340\245=_\032\007\276\272v\367\274\277]V=\217\240\\\274\323\027\222=\257\342\266=m\017\254\275\243\344E<[l\217\275\306}\r\276S\2637=\336\326s\275x6\325\274\2652\226\275%\234\001<\r\250\253\275\266\323*<\005\342\202\275\252\345\200<V\247\247\274\2715\217\274m\201\370:\272\237\2329MP\372\275D5\335\275\346\267\257\273\310\362=>\276\203\341=T\356\037=n\271\016\276\214N\270\273\35222>\351Y7<\022\177\326<i\026\006\276\204\366\261\274\215\354E\275_\177\022>)\322\001\275\305\273\270=\027\343\363\274\'Q\375=\031`\035\275\265\336\333\275\257q\035\276\005\375%\276\351\305O\275RgX=r\206\325\275;$\343=.m\242\275\336*\223=\002\254\032\276\3032\340=l\337 \275\037!\227=p_\010>\374u\222=\377\356\034\275\337M\037\276\373[[\275\374\310\260=\252\216\264\275\254h3\276\346N\250\275\361b\346=\356,\357<\211\372\235=D=\344=\201%\357=Gb\332\274\326\275\326<I\370\365<\365\202\022=#%\005\276u\'C\276O\\\323\275\276m\004>\336\007\361\275\235\264\226\274[E\017\276\310\236\352;\236Lr=\273\007\301:q$\232\275\272\177\253\2756\326%\273\215\r\231<5\315\030\276Dw\272\275u\275\010<\276\313\261\275\334\304Y=\245\322\244=\207\266\277\275\314Q\363<\310\257\271\275\252\325\234\275x!\270=|\234\261=YVr\274\366\242\211\276\005\306~<?\026\227\275\347\355\336\274P\335\217=\240\026\216\275\320\372\247\275\274.\250=\203\222\247=*\321\003\276\257\350\027\275\201\303\002\275\261\215\212=\3127\262\274\325\337\036<\017\360/\276\tz\017>\031\245\203\274\036\231\004\276\207AD\275\3000\335\275\234~\362\274\250\324\n=XJ\367\275\200l\217=kD\266=B\250\340;\270!#\275\204\020\352\275LZ\346:\006\371\010>=\007;>)\2558\276l\372\267=\253\332\363<\306l\023>\325\325\352=ET\330\275\036c)\276\027\346\271\275W\324\010\276>\205r\274US\341;\204=+>S\243\030\275\300ID=d\220\266\275xM\260\275\232\234\362\274q\267\247=\322\267\313\275\222\326\356\275\377\212\260=O\357\251\274\001\253$\276\"\304\005=\231[6<\355~1\275\271i\307\274\323!\355=\341\213\313\272\375\315\036<\002\035\261\274\356h\266\2757\202\322\275\241\275\021\275YQ\346\274X\037\337\275\235E^\275\234/+\275m\225\t\274F\233\337\275\303\311\267\274\254\243\260=\022(y<*\225\220\275m\206\206<\230\333\311=\002\221\331\275\265\211\237\274\350\274\374\275\212\257\217=&\310S>X\033\353<W|\352\275xYo<\351\276\027>\375D9=\273\222\035\276h\027&\275\252ae=\342P\251=\267\301\241=\010K\317=\271\326\010\276\320\374\336<\202\0213\275\020\200\247=\374=\364\275\334\032\023=y\234\367\275\335\257\242<\002\204h\275\264\225\343;o\360\332<\3307\344<\255\'\246;\345\240t\275r\343(=gbG\276\321\365\316;]J\212\275\310\245\321=G\304\203\273\363l\237\275\350s\234\275\"\222\006\276s\233\276\275\310\0215\274\256\2224\275o\025\021=\003\241M\274,\211\372\275N-w\274S\326\212\275\214\001f\276m\021\003;\357\217\226=+[\207<\362\n\202=\262\\\030\276\357+\240=\310=\324<\344\035\241<?\201\026>\\`\273<\365\257\">\331R\203\275g\200/\275@9\314<K\304\204=Q\321~<\206\033\212\276\260\322\220\275\257\200j=\013\363\006\276\374\205\257=\304\036\227\275\347*\362\275\215j];\207\247\224\275\320=\037\275\r\232\216=\207^\002\276\235\377\245\274\247z#=\361\271\300=(r\217:-c\257\275\200\300c\276\250\021\325:\212\024%>{\224D\273\225LB=+Y=\275\036\367Y=\260\204\201\275\244\2412=\306\n\261\275\256\245,>0L\325\275\344~1\275\304\200\265\275>\343\236\275\322\213\'\274\272@%=\003\016\376\275\246|\r<\016s\330\275\'\365\274=\272\313^\276<Q\266;\335{~\275\370*/\276r\332\017\275\232[\225\275\364\325\243<\257\204I:\202\017C\274\206\354.\276\326L\234=\313r\311=$\037\231\275\200\3069=h\213\371\275\205Y\006>\317\003\325\275\320\234\202>\321\304\333<\t\004\302=\007\335\201\275,\251\221\274\331\215m\275\376x\367<\353\257\010>\372\277~\275\347\254\034=\275\212Y<+\242\033\275\242\217\002\276\216\247\037=\004f\351:\243\216\241<\256\267Z=\373\351@\275 \334\005\276@id>\\eF\275\244\252;=\031\233X=\311\305\'>\001.\332\275P\326\017>\260\273\374<\303\303\212\275nm\250\273\022\206\306=\n\344;:\261\303k=\253\"\302<\247\215\367\274\003\"\215=\340\316C=1^4\276\217\343\031\276\302\226U\275,\305\252<bv\313=\016R\013>EcS;=\243\351=mo\371\275\003\240\343\275\254G\330=\300\323)\273\277\212\274=z\271\032=d\005E=u<\314\274e\261=\275g\304#>gJ\323\275x\t\262\275g\325-\275\3013L\273\303.\267\275\3130n\275\355\224&<\355\\\">\367H\224=l\366\036>\216\2652=a\020V<N\026\354\274;i\"=B\337\210=\225\027\365\274\010\335\324\275\305T\341=7\242\200<\364\000B=\305\357\335\275\343uR=\360\351b=L\271\240=\244\222\256=n\266*\275\177\027\372=\036\206\326\274U\231,==\200\230=~:\204\275\356\252\376\275J\304\232=\0274\002\276jI\223<\216\247\267=\266\270\211=\337\342\250\274\2608\024\276\207\323\230\275E\234>\275u\362@;\004\302\000\276:st<o\030A<\215q\020>yY\275=\230:\216<=\310\002\276\306\237B=/w\244=\270\027\254;\330;v>\023\031\303=T\030m\275\200D\254=\232\347\354<\312\206:=\332\037\016<\354Z\264\275G\237i\275\337\204\344\275F\023{\275\202\267\211\275q\255\331=E\342\257=\243w\357=T\003\224<\235yL\273b\321\343\275\306\344\243=\261\376R\275c\r\207=\006\366;\274^\0305=q\3171\275\221!\345\274\370e\245\275\363 F\276\333TM\275\255+\327=\364K\225\275\007{\272\274\246e\271=\006\372\253<\277(\246\275\240DM>R\321]<\350o\265\275\311\372*<\250\322G>\362\252\317\275\005\317\006>v2B>\343\006\356=@\005\237=n\002\'\274\272N\321\275\033\2607\276:l\030\275\005=(\275D\300\024=\351\372\353\275\n\024\377\275\307\337\002\275\027\313\362\275*J\005>\327n\247\275\337\217\250\275)\372)\276\227\013\000\275\365\261\217\275\376\255<\274\232#\240\275!r\023>SYn=A\305\335=\022n\261\275rHZ\276\264\216\233<i\307\225<\225:\256\275\000\251\203=6\341n<cm\267<\230\3056\275\336\343.\271\237E\003>o;\014\274@l\201<\233:\'>\257\344\215<\202_\201\275\331\256g\275\247A\206\275\335T\300\274\256\006>\276\226\262{\273\276\206\332\275J\017\031=\230=\331\275\210\247\214\275\356\264\025=EcZ\275\355\312\210\275\222\366\002\276\017\255\314\275\r\227\231=,\267\332\275\027!\032=\317\301E\276\371\005\351=6\005}=\344}\371\275\363\307\250\273\376\351S\275X|\216\275~\232k\275\225\277\245<\017\360\311<\274\233k\276\024n\037=R\314\206\273\265\235\016=\365?\026<\320s~\275\253N\211=\020\007\333\275n\375\025;\350\024\222=\225\256\013=\352\215\210;\251\310\244\275\215\303J\274I\233/\276\016\003\r=`\365:\274!\311\022>\237\270\020>\366\320\032\274\204h\255=\367S\345=de\002<\004e\341\274\363a\366\275\251\2347;\374fB>Y\240\032\275\320\327\217\2744$z<\361\236\375=\274\'+\276\250\302\247\275\252\365\023\276F\356x\276\377\213.\276\232\215\215=\217\256\324=\213d\266\273E \221\275\007\2311=\321JF>\340\342\302\275z\317\374=\250\320\201<N$c=\262\311\244;C\360\317\275b\376\244<t\242\303=2c\330=k}\n\276M?\236=\376Fo\275A\216\351\275\037\331\003\274\2746e\275}\224\032>JI\274\275V\207x\275\361\264\352=.s\207\275\321\277\346<\030\250O\274\"+\276\275}\007w\2745\264F:\274q%\275~4\262\275\333\270Y\2750\242\223=\371!\025>\212\215&=0\275\226<\307\026\205\275\023\262\003\276\364\026\333\274\202\315\270\272|p\252<]{c>+\201\366=\320\337\002=T}\\=8oI=\377%\202<[\262p=\030\262A=\203\324n=\r+\240\274\373\"\007=\3615E\275\344\035\217\275\222\222\206\275\000~\007\276\363\024\017>\246\216\017>\265\335$=\331\017\265=(H\345\274\250\253\333\275+\301\231\275\004\007q\275e8\224\274\004\3526=\336\034D\275\344\224\242=zK\256=\0039\306<\232!\004\275\023\021\375\275d\321~=\020\262\335\275I\'\354=N\303\256\275\265\026\336\275\250\016\r<.\340\224=N\375\016>\205*\212\276O\350\250;\346\312\272;-i\r\276\026m\215\273\032\242\227\276X\226{\275\267\350\201\2758\r\274=3\303w\275\257\374\263<}0\225\275\2073\222;Q\340 >R\372\337\275\302\237\306=Ey/\275>\333\257=61\213\275P\316\304\274I\343\253\275\225\354F>\027\004\207<\327\310\231=^\223q=\246>\337\275J\200D=\032\343\325\274#\256\024\276\341\256/\276\351\355\017>$T\204=W\277P=\'\301\251\275\365\210\205\275`R\216<_tY>\352\205<\275\262\363\035=h\244\021>AP\024;\362\237\024>\366\302\017\276\321\250\021>(\237,\274\261Q$\275\313\304\005=\177y\235\275\356\203\352\273\n\240\032=\377\212\'\275\366\020\262\275\024\271\242\274\225\322\240\275\206\271\324\273\025\346\301\275\301t\000>FMX\274Si\004>\370\244z\273\253\267\356\273>\346\316=nQ_=\0246l\275}\231\t\276\343\235\265<\315\2204=i\307\r\276\263@\216\274\333E\352\274S,$=\201{\t\272\304\262\323\275{\255\021>\024\306_\274\250\242\213\274gZ\237\275\331Cg\275\222u\210=,q\335\275@\356\034=\267|\007>\321\316\265=\262\021\376=\333\346\304\274\3544\260=\020\374S\275\231\322\245==\3557=07\030>\n\355\244<\334\221\345\275\022\\\262=0s\'\275\364\331\202=x\320\343\275}\235\342\274\247\240\016\276\360\260\'<\263\320\273;\375\010\001\274@L}\275\364\023\"\276\232\351_=\2639\006\276#a\211\275K\225\207=\265\276O\275\315\331\220\275\233\037\206<\035;\266=v\315\215\274\227A\353\275baT\276|\357\265=P\377 <\215\004\030\276\242\370\341\273<\220\201=7\236\214\275\221J\241\274\030X)\275\275\266\010\276<;\304\275\232g\036\274\207z\025=\030m\252=\020\323,\276\t\323S=q.e=\274\214/\276z&\214\275\256\207\032\276\005\231y\274\023\264\n>\021r\340;X\320\320\274\007\273\250=\005\032?\276$\030\237=\313\350\'<\247\014\002\276$\276\203=\350~\017\272\035FC=\025W\200<\007B\306\273=\265U\275 `P\274\n\307$\275\312\340\003>|\215\353\275xea\276\225O\206\275`c\244\275\351\242\025\275\3455\n\275%\242\363=\346@\231\275\035\356\202=_s\207=\250\301\000\276\255\335_\275\256\217\335\275\030\261q\275\024N\016\276>\342\343\275\326\3020=\261Z\311=\206d\273=\2300`=UF\201=\353\010R<S\334n=L\234:=\221\252\235=%\332\252\275$\204\360=\304D\"=\232\276\267\275\253i\272\275\326\277s<6\347s\275\376\346\304=</n=\332f\232=\033I9=\206\313\243\274\334{h=t\312E=\255\007\260\275\010\360N=>\361\312\275\351\023\237<\307\332\320\274J\217==.\t\300\276\376\264\214\275K\345\341\275\234\010T=\234\205\000\275\013\205w\275\361$\220\275\203O\005=\275)&\275|\205\222<Fq*=Q+\036\275\337\311\345\275\230\220\246=\211&\313=\314\273t\275ko\204\275\227\3132\275\206\327,>\301m\377=CCC=\352],=\274\236\227=y\270\242\274L\260\t\276Ev\310\275\356\211P\2752\332\256\275\365\n\307=KE!\275\311Lr<Wh+\275\202\036\221\2742\216\017=\225Ga\275\321\330\212\275\274\222\341\275W*0\274\006\032$\276g\362\264\273X\356B\276\206\263\314\275\241\376\311=\030\364\226\275vX\020=\222\256\252=\340=\302\275\372MD=\3721)\275c\2168=\r\251@=jE <\364\3016\274P\367V>c\013(>ud\255<0\357i;\014\231N\275E\"\367\275g\222o=\216\212\025=\234\361@=\306\007\331\275\0336\246;$=V\273\207c_=j;\241\275\216\261\020>_\275\010\276\014<\226\275o#[<\350\301\244\2767\225]<\275*\002\275\270R\002>\216\322\032=\033\350\020\275\277\303e\275L\016\n;b\371\001\276\316\274\226\275\033\3558=\333h\216\275\276\226\010<\375\205;\274]_\305=FJ5=\230n<\275\351t\255\272\274\302|=\2474\225<\355\246\227\275\224\3045\2759\312\260\273hU\320\275Nt\257\275d\304\313\275\001\337\364;\0011\006=\270\223n<K\364\017=\302\247\232\275$\210\027\276\324{\214\2731\221\260=\013\3236>\346Y\214\276C~P>kf\001=\203G\000\276\242\342\242\274B\003b\275\324\250\266=\223\261\322\275A\254Q\276\211p\324=W\357\031>\2215\276=>\300\252\275`1:\275\322\266\032=\352\201O\275Ga\364=\0349\037\275\013k4=O\277\355\275\001ii\275~\t\\\275+\352\210\275F\356f\275\033M\276\275\311\2711\276l\335\037>\3625\246=Mae=V\3626=\200\033\313=\035_\357=\311m\025\275\244Xc\275\010\332\200\275\036V\215\273\274\231\303\274\327\354&=jy\016\274\314\205\251\273 \335%\276\311\t\376<em?>Ub\024\276\255\n\2149\202Y\252=L5X\275A\3538\275\246``;c\322y=\306\240e\275$\252D\275\343`\007=\355\267\207\275\274\263\232\274~\036\033\274\363\037/=6\017\250=\326f\364;\224-+\275^\r\001>\340\324\330\275\277i\002=\221\014\254;a\214\252\274\261\302E=/\337_=\320H\230\275\207\353&>\376DO<.\376\255=\026\201\204\275\262\204\230\273PRy\275]\252D=4\357\001\276\nyo=Wu\036\276C\357\322=\033\3235>\201\021\324=j\305\027\275\315\311\345<\237Ci<X]\277\274\'i\003\276\2248\002>pG<<%+:\276\\vM\275\233\272\301\275\205\016\302<@\336\237\274\0016l< S\035\275\355\220Y\276\224\326\316\275%j\272\275\346\322\273=U(\263\275\272\017\352\273\202\3403\276\014\211\222=\337j\035\276\331\247\372=J W\275\313\005\266\2751\320\254=,=\001\275F\326\034\274\273\311\343=]T?\275\373\271\237=\270\2361\274L\214\220=}\177\023=\212\177->\315,\022\275\324\021\353<\373X\200=\315\006\032\275\266|\256=g\210\346:\320\244\r>\036\345L\276\004\2617\275\0041\374=-\240\230\275\201\006\362\275\237\221\262\274zZ\217\275\224\037\001\276\350;\262\275/S\203\274\202\237\'\274{\375\272=\364Nc\274\226\221\300\275\3230\334=\207\342\304=\202\023\220\275j\213Y=\303O\201\275\tM\373\274\034\2609\276\222j\323=\231h\212=\322\212\314<@\354W<}?\361\275CHV\276s\037|\275\3609\376<\022\002\205\275\031e\027>\007\242\364=L>\266\274k\0217\276\361\322\274\275\347\206\214=\266I\373\275\200\264W\276K\201m=\025\206\204=5\201\351=\3611,=\177\037\201\275\212\321\312<\307V\375<\231\332\320<\243\366\360\274ye\251=K\266\324<>\346\'=m\274\321\274@\020y\275\311-\t>\312\221\241\275\200\304\215=d\013\270<\367\274M<\010\331z<\353\277\261=g\031\332\275\014#\204\275r\215\363<\0140\007<\233\372\235\274\300TS\274\273\220\306<7\330\037\275\003\274z\274\366\373}<\177g\277\275a\204\303\275\243\'\267=\330\2475;\205\206g\274\013\313\311\275c\324\213\275n\243\274=\014\217/\276\324\3101\275y=\341=$\215\033>5\321\213\275\321&\212=\277\331\376\274o\311\007\275\212\272\n>\225\314\245=\214\277\272=\222\271\n\275\261S\362=<\236\271\274j\000,\276W\321\207\275\366e\256\275\320\031t=\307!\300;z\376\n>:0\266\275\260a\023\276|\232\023>\2554*\2765\302R>\324\215\232<`\247\256\275\250\002\370\274%]\227\275|\027u\275\r\005\226=i/s\275\265\233\323\274Nl\024=R\317;<\256\227\362\274:\350\205\273I\321\006\275x@8\276\207\210&\276\325\377\207=\264\375\255\274yA)>i\346\007\275\016\353o\275\023=\316\275\354\000\222\275\022\352\202=~k\247=\020jp=))\375=\352t\274=KZ\'\276\021\004\263\273\r\3666=\022P\252\275\275\001\242:w=\207=\205Nz\275\\#\224=\370&\201\274\243l\021>!\255\027>G,\254=.Nj=\237\203v\274\201\207G>\254Z\002\274\'r\201\276\213B\031=\356\217,=wm\001>5A\374\2741\1773<\233\263\334\275\354\226\310=\307\214\335;f\213\213\2748\262x>\216W#\276\360\036\255\275GZ\247=\014\0004\273\223\270)\276Z\033\235\275rE\014\275\203^ >\n\372J\276\316\035K\276\t\220\223\273A4\247<\243\3772\275\330I\370=\320\230\232=\026\025\274\273\343\272\\<\257C@\275H#\251\274\241\334\020\273?\346\037>\324\363\027\275\275\355\321=\242\311d=\222n.\275E\202\203\274\264\217\000>\362!9=\376\234\357\2759\254\313\274\324G\035\274\270$\266\2753\246\225=G\205|=z\227\302\275\264L\221\275\375\204\213=4\347\366=\255_\265<\210C\223=\002\251\204\273\360\276\010>\032\344L>\264\356\"=\340\020\364\275\251Z\000\275\336Wr=\367n\016\275D&Q=\223\371\273<4\220\345=\2226\006>Sn8=\305\252Q=\302\354s=\356\326\301<\234\024\332;%\223\226<:\005\352\275\026\023\347=\206\357\017<u_9\276_\317\003=\243\263&\275\350\330?\275\013\236\022>\302\341\216\274\007(\272\275\035E\005=ag\244\275+\376\020\276^\322\025\273\325\257\250\275\035\303\034<wZ\007>dO\375::D\236=\245\341^\275\320B\313=\331\326\311=7L-\275\017\257~=\3542\317\275\205b\332=[\371\217=@\233 >T\377\177>OS\316<s\345\331\275T^V\276\226U:=P\325\244\275\001\006\'=\024x\033\275\261g\234\275\221\330\237=\333\344C\275\322<\225\275\224=W\274\352(\356;\222i\320=\343X\314\274\310h>=\257?x=\276\216\204>|\353\177\274h\177m\275\034\021\344;A\r\303\275\222\013\014>\3774y<\235\224\257\275\253\301\334\275)\354\371\273(\364R\275\362x\245=Y\325\220=\224\235\203;\347\265\324\275\177\377\260\275\202\0139=\276\205\030\276\030\256\314\275\022\227\241;W\010\346<\245\004I<\022\205\325<\377\0206=\003\223\025>8\355\024\273\"\311J\274Fk\365\274\200v\300=r\323\211;\323\273k=gCA\275\266<\247\274\3752\241=\010\'\367<\216\323\263=\370\266\203=\035r\217\275\277\233\336\274\300\201\220\275I\323\013\276*\272\034\276,\373\344\274\266[\372\274A\257\243\274\260\310<=\3046\274\273\352jv=90\213=|8\013=pp\374<T<\026\276e\035\243\275\226\344\210<2r\376\273l f=\241\r\223=\221$\350<\001=\332\275\206+\275=`[\345=\307\354%\275\027\344\022>\0366\220=\373}\231=\363\007f=\365og\275\211\371Q>\215\251\244=\350l\305\275_\272b\274\346\001\373=|\203Q>;\327\354=\224\010w=\000\375\234\275B\220\316=\372\304\302\275b\226V\275\030\316\014<\n\215\267=\211\234k=\342\200\217\275\346\367\230;r@q\275\243\373a>\374K\235=\336\3524>\346\035\257=\034\201\002>\327^\267=b_\263\275\262eR=D\377m\275\205x\333<\237\017\302=\265\216\261=\242\006v\275\020\010\022=\366\223!\276\254>\234=\200k)\276W\336\017=J$\266=K\214 \275R\234C\275\355\301\230\273LL\306\274\213N\004\276\006\306+\276\\\376\344<4\367\004\276\357\214\372<\2568.=E4\252=\245\201\036>\310j\036>\211M\240\274~\030.=O\206\367=\314\361\346<\te\001\275\213\014U>\267A\352<\035:\000\276\346\302\244<\372\274\345<f\321\033>\212\023\377\274\275\021(>\234\257B\275Z\3652>\331\024\025>\316\364\002\276\021\233==\227\220D=g\315\374\275\272\254\"\275\224?\206=M\022\341\275M\'\205\274\016\355\236\274^\250\326=P\034T\276\364p\221=\037\2363<D\200\334;\376\203e=d\017\007=s\223G=\270g\013<\315\207\037\275\017G\334=y\313R>\311}0=\n\357\374\275\230zm\274\363?\205\274p\341\034<\214\275a\275\372\025\312\275\267\314\246=\256.\300\274\356\364\213\275 \376\207\2753\376\260\275\361{*>\246_*=\'=\310<\t\242\006=\275\003\327\275?\351\023=\275\222u\275\356\303\215=\304\331\203\274\371\025z>x}\263<RI\243\274sIc\276\361\030\305<\344\362\315\274\365(\247=\311A\200=L\360j\274\016\261\371=\351>[=lS\257\275\202bk\275\0053\330=\217\343\016=\227\230\027=VX)>.\331\225\275\310\324\375=Ha\005\275|t\314<\211\305\035=\277\030%\273\324\373\031=\344f\341\273\372g\231<\366\245U\2756I\252\275\303\244\204=\313\365\215\274oS\326\275\376[\361\275\322\314\266\274\2571\277\275\327d\236=\2152\275=5\237\241<+n%\275\236\255C>\235\352\\\276\35349\276\233\014\204=\222?\000=\222\222\003>t{p=\361\363\335\275\3256\r>\016\002\277\27411&\276\350\254\275\275\316N\263\275\332\377\034>2\352\300\2726?\325=\360n\304\275\263s\304<\n5\200\275-\306&\276\033\373\235<\r\'i\275\260GT\275\212\207\345\275k\005\222=0\206\"=J\rV\275\005\270\r\274\363(\213<j?\005\275\332\235\341\274j\375\271=\035\325\203>G\301\324<`\256\226=T?\304=V\361\306=PM}=\240L\356<\207\337\034>\325\037\217\275\003y\203=\206^\357\274\314\006+\275\336\177\317=\265\032\272=0V\036\275\327\246\213\275\250k\025=\027\243\"=\270;R\275\024\266\330\274\026$O=\321,\010\2754I\320=oK\010>\246q\215=A\340\274;\000p=\276F\216\021\276v\253\316\274\265\020\330<(`\207<ob\332=\244/\262\275G\t\211\274\322\322Q={\353V=\033\030\t=\232v\333<={\034\2752\027\273\274\254 \231=\nM\\<\206@\245=Di\251\275J\356v\274Q \311\275\207c\245\275\023\223\206<J\265D>b\215A\275\253\304S\276\267\356w=\321#\001\276\241B\026\276{sS\274\243\001;>\255\001.\276y\330\024\275B\326%<\245\316\347<\316w5=\205pa\276M\376H\2761\256\365<\376U\265\275.\\%>\235\007V=T=\006=\250\263\220\274\333?\025\276\220z\212=\342\335\245=\376\374\273\274T\237\301\274\031x8=\221:+>[\371\261=P\377a<C\270\010>cb\241\275/\303l=\254\342\230\274S\363\026\276:\355\246\274q\305?=\227\324\003=\367\r\356\275\257\r\311<\2479\262\275l\322{=\002\210\253=\306\330[;\3151\301\275\026\236\270\274R \351=\030\260\341\275tF<\2757\234\014=?Q\032\275Z\230\'>$&\r>\022\234-\275%\215[=L\227\210=?=V\275\327\252\272\275\270\260\207\275sU\351\275\034\303\262\275\377p\007\274^J-\276=.\274\275^\312\332\274G\261\203\275W\243\336=\t\203\206\270dq\023=9\277`\275\334}\240\274\2508\204\276\265\2464=\373\325\003\275\313\035.\276\0339;\276}\252y\275?\205+\275\303\352Q=\254l\345;\016mY=\263\357\232=\211\273\371\274\0372\262\275dH4\276z\025\204>\317\3157=\222\016\223\274\364&8\275\007\352\363;\024\333\307\274\200\224u=wE\320;2\224\204=X\247\260=\316\334\033\275\035\033\233\275\300\225\207\275\3005`=PS\353\275<@\020\276\025\250\216\275\332c\247=\3206\371\275\023f\272=\333\376\017=\301\177q\275\364\263\002>S\333$\276\201\352\035=\342\224\250\275\270%\253\274\316\257\224\275,\224I=,L\275\272S\266\037>TWK\275Fg\243\2740U\200=e+\316<O&X<\203rO>u&\031>@\033J\275\253\021\201\275\017*\354\275))\231=\215?=\275\263\224\263\275\205\014;\274\250\005\'<\254\346\352=\245\203\035\2757\244\205\275\362\326S\275y*\210\275\001\3734\275%1\005>]\275\035\275\344\356\275=\274l\032\275M\350\316:\363\371\313=\306g\251\275\034M\t=\".\311\275q\022]\276\353\2055\275\315\320+=\030\211\037\275\302{\376\275\376\274#\276\370\365\252<\314Pg<D.\016\275o\234\307\274@Q\r>\355\277\307\275I\024:>\005\234G>\002\207\200\275\020\314+>\226\370g\276\235Y\365<\274L\250=\257\203\273=vX\225\275\302j\231=\013\220\263\274\244\022\330\275\277\311Q=\261Y!>3\3044<\334\327d\275 ~\341\275s\315*>\212\260\227=\236=-=\233\r)<c\003\351\274$\211\356\275\313\177\013>\332\t<\275\003\344\n=\001G\335\275\001\234\233\274\342\000\243<\266\304\250\274\373\240\363\275\236\232\267=\202\255t\275\307(\337\274\315\302\n>/o@\275e\234\231=\017\002:\273\t\367\004<,\244\200\275H#;\274\022\277\347\275\236,6\274\217\021\204\274\243P\273<\374\222\364<\221\334\021\274_\236\035\274%\214\301<\256\206\317<\355\365.\274/\245\321\274\034\313\237\275d$\377\275]\341\212\2734\213\237=\021\361q=*\340\006\276r\324:\275\002\352\262\275L1\205=\206\265\022>V\274/=\344w\003\275\207\256\036\276F\221\257\273\203\240m\27569\223\274\2155m\2742c\337=\232\037\261>\020\303-=\244m\267\274\217\005\013\275!N\307<\005j\225\275\000\323\372\273\252en\275w\211\225=\005\322\013\276\201\357\233\275\377\2214<,\372\204=+\001y=Q&\031=\037\236\237\274;%D\276\027\036\347=eP\010=v\371\264\275/e\213\275\037N >82\264\275\232\004\310={s\030>k\205L\275o\"e\273\325\000\276\274\211*\014\275\272\017,\274\264[\">\332\356\022\273:T\377\274\313\263\221=\257\027\264\275\362\336v\276\271\341\324\275\376\304\220<\3747\342<\206\333\222\275\306\264\032=\213\310\202\2744R\003\276\370\350d=\032R\331=5r\371=\3326\037\276\321\240\222=\007\210f\274\223\266\277=s{\006\2769\005n=W\367\320=\260\220\000=\n\276\243=\332\344S>\366\024\000>s\346\202=\3337\273\275\244a\366=\377\310#\276\2751\214\274\266^f\275\253\206\265<\251h\344<\353\252u\275~#~<\352\233\312\274\236{\'>\tu\005<\314\373j=\257\251*\275\252\336\312=j\035\245\274\221\207\003\2762\320\241:\2455\213\274\3326\'>O\327\007>\321.\030\275,\253k\276\336\332\301<|k\263\275\244\370\230\275\242\375\314\275\360\273\247\275\232\207\220<z\377\004\274Cb\232\273\270\371\013=}\263\007\275\230\237\361=Ps\371;\265\233\037=\215Qt=\314\0259\275\223JW\275\r\214\000>\266)\357<X\'&\2740\374\"\275\357\252\237\275\003M\206\275?)u\275/8\017\276y\207)>\022\244\234=\375~\n>\032\315\r\275\215\335\354\275k\206_\2757}\335\275\331+\263;g\377\332<\254\305\213\275\024\314:>\355F\005\275\262.\205\2756\221\255>c\027!\276c\177\377\274\262\003>\275\220\240\327=\362\2047\275I\302N\276D~\276<\022\036K\274\364U\236=\3024\345<\356\314w\274As\257=\361K\373\275I\272\370<\276\250\000>\326\354,=\242\002|\275\005\\\227=C\357T\275+OG\276\\\361\312=\226^!>{\314\276\275\017\327?\273S\221\'<\274\237#>\272\266b\275\370\024\227\275\361Z\305\275o\tk\2769\342\254<k\374\377:\\\034\232<{xi<\252n\305=\2753R<-\027\021>\215\275u\275\'\036\252=\252\033.=\210\252\026\275\227\020\355=\204V{<\212\3720\276`\277\201=\345\320\220=_\232\330\271L)\257\273\221f\024<!\010q:\035\260\207\275\220vm\274T\023q<\333\324\365=H\'\235<L\205\361\274\355\021\351\275v\210\254\275D\277\022\276wh\334\275\304\217\260\275\252\232\350\275\333\032\275\275b\276(\276sF1=q\020\373\274\362\235\275\275\350w\347\275\234\323\017\275\250\026:=\036\227\213<\027\237\">\326^\030>}\344\370<\251\273\014\275\\\252#=\263>\264\274H9#>\333\357S\275\233\263@\274\277S\336<\353\034\317\273\271\337\266\275<U\006<B\300d\274K \010\276w\354\225\2754y\221=\216\336A=\257C\224=s\021\314;\273\265\213\273{\314\241=\241^L\274\313\363\316\272o\371\024\274\216O4>\r.\020\275\001\222\235\275)6\310=8\326\244\275\236\024\310=\272\3458>\252-)\275.\250\'>>=\246=*\224\020>\302\257\234\275:7\t\276\375=2\276}\250\317\274?\240P\275/v\036<\340\370/\275d\307\036\275!R6\275M+\032\275t\213\301=o\267\346=\261\377!\273\320Z\366\274BD\t=\273\026\242=\004\266\367=\300zu=U.\177\275\343\233\022\276\304k\252<\337\303\273\275+\243\014\274\\?\225<\306\000\361\275~\013G\274\355\244c=o\323\004>\233\201\331\275Y\260\200>ELm>N\277\313<``@\275\007\251\006>K\321\332\274\260\013i=\320B\226=)80\275\370\326\004\274$7\200=\320\230x<\3113\321=\304\215%\276\036\016)=\306\2738\275\036A,=PF\003\274\214\005\271\275\300\342\207\2751\210\360=z\006\227=\354\213s\275/\3239\276\266f\016\276\327x\334=8\031\273<\203\210\265\274\277M\007\276\370\032W\2766u\025=k\362\325\274\322\340\223=\354\351D\275\345\005\212=/?\030\276\360\020\372=]\025\215<~\t4\274-p\376\273\270e`=\252\326d=\220\327\374<\314?,\275@\315\371<\200\251\354\274t\025\204=\354c\377\275G\023\205=\224\300J\275W\"\241=0\014\001\275Lu\365<\217P\240\275G\344\033\276\000\241\037>\332r\025\276\222\233]\275f\311\034\275\177\257\212=\003\315W\276\375\337\361:QE\237=\317\267I<\335\273\354=\033\366\246<+IG\274j\364\035\275\377\244\330=(\205\017:\303\355q\275`\275\272=\360\004\\\273\213E-\274\"\352\002>\377\001\254\274\276\255[\2755\352V=\323/\260=a$\'\275\027\200\230\275\245\207\206=\324R\242\275&\177\035>o?\262\275\274\301\272<\201I8\276\227\006\231=\322\035\372\275\3356P\274\300\341\020\276\\~\254\275\225\325\264\274-&\206\275d\367\367=\203 \010>\377s&\275\252J~>\234\026\337<\266\307\351\275\031\270\216\275A\340\365\274\377\3734=_\265i\275\214\216\336=4\352\247<\007g-\275g^\204=\271\301\336\275\205^M\275\027<\202=\312\254\200\276n\273\375=\223\224\315;\343S\377=G\032\321\275\177\301\364\275\235\3054\274\220\324\224=\t\022\241=\222I\230<n7\000>s#\024=\332?\256=i\360\333=\353!\254\275\222\323\256\275\247kq\274\300\321\177<\376BH=\337\002\217\273i\376\010\275\200\264\006>\331\353\205=\024[\005\276\022\276\277\275bN\214\275\272\216\347=\007\302{\275K/\016\274\341\352\024>\302\316\032=\346Z\025\276\371Yo\275{\237\r=o\246\030\275\223K(\275\340\222\300\275\250@\3609\2379N=\365\213\342=\360\337\261\274}Z\003\276F\312\371;y\322X=\227!\277\275M\"\223\275\211\n0>\035GZ<*q\361\274r\034\214\275l:\024\276\000 \232<{\335\231\274\007\254\036\275\343\014i\274\024C\'\274\243\322\243\274l\314\341=\310\303t=]\332\016\276JS>\275\217\313F\275Io\r\274D\2232\275bR\244=\341\377\030\276\036\344\212=\0307\032=5\341x\275yZ5\275N.\206<\251>(\276\311\025\201>\341\303\232\275D1\252\275\241\002\322<\213\262u=Z?b=H2\340=\265\371\277\274\363w\036:!\332c\275\023\250\004\2754\336B\276q\342\024\2766\300\256\275o\226\204\274\226\022O=\311@\336=\022e\224=P)\031\276\320\264\t\276@\237P\276\331PB<\331\355\030=~>\013\275\264\327\221=I\353\030=\321\212\240\275\364C\301\273C\231\246\275\2008\331<,\300-\275T\2476\275ybA=\237\240\037\275^3\021=\205\225\203<\275\231\336=\345q\361\274\214\312\t\276\324\224<>+\202\277=\220\212A>\334\022J>\374\220R=1\376\271;\321\204\214\275+A\345\273\243\353\223\275\000M\272\274\tv\006=|\254\253\274t\276A=\r\277\252=9\332\004>\370\0171\275\377\206J>h\'\270\275-e\n>\177\305H\274;\245q\275\253\203.>h\364e\275\025N\034=\327DR\275\260F\357\275x\205\214\275\377\211\232=\211\271\326\275(W,\275Ca\246=\256(\317\275\177\254\345<b@\254<\027\250\006=\"0d\275\227p\303\274\312\345\037>\022\224\345<@\031\022\275\000*r>Z<)\276\325 \235\274lL\317\274\263\235\342\273\370m\320\274p>\236=E\246.>\315\253\270\274\300\226\253\274\343zW\275 u\270<\335\207\200\274N\240\371<\216a\265\274\247)\025>\034\024\314\274\350\223\270\272\210\350\025\274y\364x:\016\212\367\2734\256p\275e\002\213\275\021\214\215=\350\304\325=WW\232=\030{0\275\301\214\204\275xM\210\275\225\370\">\310\242\023=\177\3638\276h\036)>4\300\356\275p\304)>\277\010;\276\324\316\220=\241@[\275\026\251F\275\342u\303<\031\3735={\260\026>7n\346\273ED\013>p\343;\274np\023=Z\022\245=0K\013\275\017H\354=\243\\^\274\344\265\234=\226\200\000>o\t\240=\313a\\\275\234+\225\275\000\3532>\254{\255=\r\262\005=\270K\361;\002J!>6p\233\274\374\017j\275\361d\333<L\312\215=NC\210\274v?\020\275\003\023\006==\356\273=\350\252)>\202\000\205<\276F.>\373\374\245=\326a\204\275\244\345\244<H\302x=f+\300<\024\363\346\275rJC<#\376\242\275\177\035\266=>AK\275\303PL<[\227\317\275Y\031\t\273\023X\226\275\n\246U=w\201\023>\003\020\241\275\23228>\243q\344\273\221K\333\275\201\307\361=\005\243\204\275!M\r\275\252\357\241\272\220\240-=\377\002\013>T\251\345\275\225\263\000>B\253\255<M\236\235\275\035r\202>~\310\010\276\350B\330=T\317w<\364\323\307\275\373\233\243=\330\276^\276\020Q\367<C\224\023=\253&i<Ko\342\275\030\213\256=\331{\025\276\343@\377\275\207B\213=\236rY\275\313\367\275;\031\337\017\276zi\005\275\017r-=\243]\203\275.\034V\276T\244\023=4\210A\274\354\316\'\273\007\351\355\273zrR>\214\007\216\275\n\272\001>\220\207\312\275W1\217\275u\257[\274\306\320\017=\036\313\235\275\251\031\235=\265\214\\;\357\001\225\274\312$K\275\237\356\303\275\266\307\310\274\260Eb=\007/)=t#\300\275\004\300\245=\271>\207\274\205:\237=v\375\364\275\224\312\211>8$\236=;\224\360\274u\275\207=\027D\374\274YT\340=\321\324\357<\321J\366<~\256\324\274<\235\206\275\005\263\241\275\303i\032\275\375\013\252\275m\343\230=S\'%\275%\350\352\274\204\241\027>1\207m=\315:\247\275\003\214\247\275\316\\\032\274\244\204U\275\212\350\353\275J\033\331\274\303uQ\276M\243U=.>T<,\330\211\275\227~\000\276R\342t="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1848238
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "dx\370;<2+=\376=\240=\224\256\232<\236C\225<\343>\013>@\2154\275\203N\203=\216\372\\>R\267G\275\214G\224\275\233\031^<[!\207=-;\313:\235\353\311\275\033\245\221\275\340\024\034>8=\004\276x\025\252\275\375\235\006>s\311\371=\345\021\213=\270\247\231\275\237\244\330=\351\2435=\337\220\035\275\344qF>1`\307=\214\334\207=\235\230\307\274c\\.\276\312\236\205\275\213\232\260=\344}\273\275\335\004\370\275O\244\246=\226*\345=\313\360\364=2Bh=\254\177V=f\213\037<C@\206=@\343\354=\272\375&>\323\264\t\276\260G\214\274v#,=\315\321\367=^x\246\274F\222\325=\331\022s=$F\216=D\033\212=\326f\231\274\030\273\360=Aqt>q\355\035\276\024\027-\275\025\267\006\274v\2434<\253\246\312\274\360\232\355\275\374G\323=/\007\024\275\"|\235<\177\022\221\275l\215B<G\214\260\2755R\322\275\014\204*\276\214\363\276\273\326e\"\276Y\220\337=\323\270L=\361\005\004\276>4\263=0\036\235=\216\177\235=\270\316\267\273U\250\207\275\345n\010=\316\225\217\274\223\241\226\274|+\232=T{\310<\326\326\266\270R/P\273Z\335\374=\356\262\220\275\304`P\275\244\373-\275|#\307\275\206\030\205\275\204\336\213=\342G\275=\013\272L\274CR\347\274x\355\376\275^\373\022>z\277\262=\275\270\331\275\210n\351=\352\310\035=\343\355L\273\351l\307\274K\255k\275\311L\366\273v\330\264=\021\007\274=\2500a\276\214\353\343\27586>\275$3\026>\360O\306\275\315\032j\275{O\270\275\330\327\200=\374\326\245\275\213^#<F\200\324=Y\237\353=\037\343W\273*\033\273\273\241\"\205<\324\005$:\266\300n\275\332\224\177<\266\360+\275\013\216\250<c8\216\275\362h\233\274\200\373f<(UK\276W\226\344\275zw\004\276\344\275n=\022\257*\274\231\276\216\275E\244\001\276\327\373\374=hv\221\275\337\271\355\275\203\262D=+\375F=L\035q\274\274\354\n\275F\267\005\276\256\255\036\275\r\025\350\275+#W=\014\016b>\242\201y\273\316\352\230\275{\253\343\275\277K\353\275:\253\032\276U,\303=3]\356<\223G\302=N\311\364;\004\027r=\336l*\273\273R\217\275\tIf\274w\222:\275/o\033\275\372\242Q=u\253t<\306)\224\274z\023;<\243S\270<\231\\\274=\331\376\205\275\010\272K\275V{\363\274\3549D>\"\336+\274zk\242=\325\254\223\275\340\354\256\275\322\027\267=?\331\216\275\222Y*>\361\300X\275)\251\327\275)\331\032>\256\262\002\275j\001!\276\306}A\276\311B*=x\247@\275\365\240\367\273\244?\034\275I\";\276\016\225s<\337u\002>w|\004>\364\005\\\275\036\206\366\273\022\020m\275\370X\351=\273\254\306\275\'\367\321<\312\004\232\275\024p\227=!\234\335\275}\'\030>g7)\276A\021@=\000\021\312\275\345\010\356\274\277GR\276\361\006\212=\237\334 \274\272\004\027\275\236E\262<\340\325<<;F9>2\204q\275+\332\200\275\334\036*=\032j\246\275\264\351\271=\331\363\206\275&\371\032>\026\231\006>\351\373;=\266\250y=)0\336\275d\334\224=\252\372\222=\006\336\350=\263M\377<\360~\177<\"\020\r\2765\355\021\276B\271\224\274\224\351,\276\'\220\332=U\356<=\\\353j\276\312\334\317\275_\376\371;4\352\204\2763\261\301;b\253v\275P$\r\275\207\262d\275\330u\217\274\034 \"=y(\036\276\253Iw\274N\275@>\355\252\224\275R\374\270=\311%W=\361\2028\275F\331\331\275\322,~\275\325\304[=\021\236\215\275\2003B=t\016\300<\227<\342\273{\312V=v=\000\276$\216\260=L0\372;\317\352C\2769\260\230\275\255\224a=\343\262=<\330\033#=\021{\204\273\265b\205\274\004\351\022\275Z\002\014\275\217\375\201=t\373\257\275A\246\206\275\310\371\277\275\317\364U=\003\314&\276LN\257\275\312\t\001=\346!>=\302b\220\272\272\373\342<\342:\004\2751\307~\274b\"h=Dy\317=\202\006\200\274\033\004\370<(pC=\021\225\256=\247\305\256\275t\372\313\275\377\214\226\275\361\311\010\276x-\225\275\351\333\343\273\264\374+\275\024\201\214=\352\306\311\273\372\354\265\275*\321\337\273RKk=\332\371\373<+\216m=\177\317z=\325\335e\276*\226h\276\355\362d;\203\337b=\037\307\224\274\030\2239\276\370R\216\274\030a\302\2759\214\202=4\013f<]\2062\274\030d\030\276\223\360\t=\360[%\276!\370\035>\244\";>\026\177\343<N\322\300=\2241\303\274\025\305T\276P\264\361<\224\307\366\273:\221d=\306\254m;,c2\274\331\361\240=\235\234\366=\347\340`\275\3463=\275R\336\227=\232\013\277=w\364\016=\215\2356\276T\331\\=\342\237\251\275\371\313\021\276\300<\354\275\300\036\377\275\007\324\324\275dj\300\275\177\225\274\275\361~o\274\334\217\235\2747\341\024\276\034F\346\275\360\025\242\275S\330\272\272\027\265\021=/\017\343\274\010%-\275\314\255a\275\321/\233\275=\257\277\275\352\342\252\275\226*\230=\022\217\363=\343\367Z\273\004\016V\276\027\351\235=V\030]>;\274\306=\236bD>\025\347\211\274\276\337\021<\315\003\363=\243\020\324\274\004\377I>\276\235\204=\357;\273\275,\027f=\255j>=\312p\t\276\252\330\244;ap\347=\024\353\357\272\250+\017=\323\003_;1a2=\237i6\276M\325P>\200Q]=e\233\351=`nr\276e\323r=\343\000X<\213K,\275\211\321\271=\376\273\013\276^\300n=\306\3644>%\357\256<T\243Y=\363-\201\275\225\350\246=G&\361=\2218\260=\032\303n=\032\240\325\275\203\3452\275\246I\204\275\257\334\007=KK\243=\305\034\005\275m\251\315<\232\334\263=\345\202\204=\216\335:\275>\244+=\352\037\306\274\030;\207\275\214\335\200;\352\330I=Y\372!\276\177\252#\2751\340\027\274n\036\231\273{\330`<c\016:=\215\353p\275\264\246\"\276\242;\203\274\373\253\207\275^\335;\276!\232\372\275\360k}\274I\017\014=\346`O=#\224\316\275;\260\333\274\177;\">\242j\276<)\351\003>\nU\216\275\022\275\213=\270\307\246\273\330V<\275~\314\215=\004S\204\274\2453\001\275n\223\";\245e`\275\247\337\311\275NH\266=\370\020\302\275\003\023\021\275\214\017u:9\020\004>\267\337\235=\020M\331\275\007_\204\2744\3611=\356T\336;\275\013\351=\0236\032\276\371 \314<\360\246\274=cj\253\275\005\366N<*\330x<\313\370\362\274\243@\201\275h9\320=b\301\006;f\302\002>\257\3020\276\377\377\010>!\3548=\033G\003><.j=\014\252\210<\002\366\372=\\/\225\275j?\016\276\270\224\264;1\337H=\266\005>\273\200\233T\275\350\313\213=\277\rk\275\272\205\272\274\327}\037=\234\251\226=\233\0072=H]\222\275]\354D\2758\300\365=\256}\331\275^\036\266;\321\244\203\274\265$3><L\n=\025\n\270=7\346\206\276?\312\274\275n\361\022>\305R\240\274\346d\332\275z\347\035\276\251\235\370\273\2650\302\274d\2173<\250L\233\274\003\263X\275\035\233F\273\222^\336=\247\254\023>|\321\363<\260\007\001\2769\0219>D\301\313\275Z(\324\274\010\225X<\023\210>\276\337\377\313=\013\274\327<\'\032\020\276\216\303\200\275|pY=<\037O=f\271\035>\rP\r=\332\211\205<\270\251>\275\177\242\267\275\2438\277\275\240\240\265<~\376q\275\361\310\215\275\327\204\340\275\014\023\r>\\\313\255<N\370\305\274\206\216]=\200\325%\276l\210k\275`\243\243=\255\013\211\274\305\021\243\2751\255\001={\224\216=\370\367\010;\354\214\202=\250\366)\276\351\177[\275g\242\255;\206S\202\275\214U\370\275\325\366\t\276\34669\276\273\023\243\274=\262\370=\026\002\301=\024\375\255\274\332\030\033\275^\233\347\273\037\323\020=\317\241F\275]\357\273<]\327m=\370\214\362=\007\242\034=\243\254\271=\365k\356=\352Z\236=H\364w=jIO=U|[;\357B\003>\013\305\271\273\253\315\226\2758jB=\034Y\016=y\030T\275O\273\003\275\270bH\275\231%\226=2\264\n>#b\025\276=^\274=\222\363\316\275\355\264_\275D\027\316\275\336N\375\275,\2778>\240\306\222\274\301KK>p\271\034\276\024\016\003\276Y\277\261\274\'Vb<\213A\342<\313\351\022>\013\311\220\275.gP\276O\034\344\274\354\373\242\275_\001\220\275\234\277\013>\260\204\234\275\213\274\036>\355\355\017>\023\361\334\274\221\356\034>\001\302(=r\355\306=\341\226\031=\242\221j=\340q\244\274u0\324=I\036j<|\252\324=C>\261\273\370\316\005=\324Qk=\310\305\211\275A%];\024f,=tbz=\324*\231=\237\2165\276\255\320\374\275\246\307\313<_\023\262=\021P\017\276\n+\014=\003\006=\276?\261\377=\210\337x\274\303\224\206=I\355\240\275Wu\311=J\214t\274-=M;\"\355n=g\370\350\274\210R\354:w\313_>\251\211\341=\327\'\\\275\305YC=\275\204\316\275\261);\275&\273/\276\356\301\034\275\354\343\276\275\002.\025>\363\367\017>\201\363=\275\350\250\206\275\272P\204\274N\235\030\276\357}\003=\300\r&=\252\340(\275\233\261N\275\321\376\354\274\362q\303\274\014\322%=\246Z\217\274\264[+<\364\304\236<l\030\207\275\275l\017\275\303o\026\275\215\"f<\333 A=\337\332]=r\244\254=\337[e\275\004A\273=\274\365\273\274\37487=\211J4\276!\305\271=D\3752<\3060\327\273\014%\001\275\261RK>\301^V>\334\031\255\274;\217]\275\352i1=\350\250\002<\367?\026\275m3>=\210\310\254<\263\2556>\323\352P\275\203\334\014\276l\370W\276\010[\027\276\361\036\212<pB6\276\003\216s\275\024\262/\275c\246\r>\220\215\236\275~GD:Ap\201\274\317[\360\275\215\211\325\275<\310h\275\2251\032;\2517C\275z\316\321=\377>\002\276\003R\373=\ny\270\274\220\255\334<\356p\\>\237\020;\276\"{\256\275\200\001\013=!\177A<\232EV\275\203\315\"\276\006%g=G\020\\;\225\2221=:\202$\2758My\274\201\224\007>\271\037\305\274\232@\361\275\346\006q\273\256\375\025<\240\257\030<;\315R>\243\311\256\275 X\020\275d \236\275yv\022\275\365\253\303=\357\217\032\275\216\021\350=\276\032\264\274\361\206;\275\207\322\201\275g(\306=\373`\363\275\314\214\220\275H(\013\276O^Q\275\264\330d\275\331l\032\276\276\n\271=\346\020\251\275\005\310\'\275\0016+>\351\303\'>\304Af\275\"M\215\275\375+\232\275\337\370\315\275\241Jv\275\373\313\311\274y\005\025=\0034\347<\350\315\311=dZ\202<$\270o=U\304\353=\326\001T\275\253[\020>\316\366\244=\033M\\>/\317e\275\006\342\031\2759\212_\2743\027\232<:\177\000;^\035C\275\346\340\372\2749#\023>\026\317\227<p\323K\276A\221\340=\0328\275=\321\001>\276_\315\224=\340\263\205\275\221{\354=,#\367<\240)0\275\000\254\226\274\r\213\356\274\014\265\323<\257\201\017\275M]w=\221X\234;=\357\201\275\332\260\335=M(j\2760\226Q=\036\"8>\320C\263<_\022\025\276f \203\275\323\013\000>$\375\204\275\340:\265=T\327\221=$\337\221\275\375\250\253\275T\366\377;-3\267=\2635\211:\014\370V\275\223\336b\275=\312C=2;=>h\376p;\330\362\236\275\027\217==&S\364=\235\351\217\275\230\227\372<{\036\312= \256\243<\240\007\224\275df\013\276\013\003\333\275\267\307\276\275n\222\204\2742\372\303\275\272\002S\275\003n\255\2744\r<\275\223*\262<-Q(=\234\271\260\275\241\253\277\274c\036}=\344Gj=z\225\226>&\230\371\270\276\357n\275x\310\210=\213\320G>t!I=\260\265\030\276\261\217\316\275\037\017\275=\3017\247\275)\257c\274t\2473\275q\007\023\276\354\365\032\276{\335\221<d\213\007\275?5\301=t\315\211\275qm4<\377\363\367=\352\301\257=\332\032<=\257|\200=\374P\201\275_\023\202\270N\363\230=;@\234\275\200\250\356=\220l\303=\351\217*<\372v\324<\363j\321=\355\335\272\275\235>\025\276JVL=\034`\205\275\324B\340\275\366\216\206\275\303\223\n>\363$\024\274\237\243\261;B8\231=\263\360\006>\036\367.>1\232\354=\357\002t=\257\245\354;\242\301/\274\265\013\345\275\027\200\207\275\033\376\362<J\001\212\275\\Y\277=\254C\376=\345\023Q<KC\254=\335n\337=\321D\315=\236$M\275Z\016O\275\272\313\275<\2702\031>\341\323K=\236\031\224=<\250\n\276\251\234\301\275YA~=\374\230\215\275\325k\016=\033\243\214=G<\334;\222v\027=\227\220\321\273z\023y\275r\277\252\272\252N\214\275\004x\307\275*\311\321\273\341:`\275d}\003\276y\233\253=E\352\364<\0073\260=\210\352\321<\364\305\336=\010Y\233;@\247\261\273\320\307\207\274\354\364b=d\320\345\275\235\026*\276\270\303\377<\370`$=.\226\230\276\276C\306\275\200\013\030>\222\026\223\274D\206\335=9i\274\275\312x\037=X5\236\273\204\256\024\275V6|;\327\017\200=u\207\233=\337\345r\275\340\367\374=\231d7\273.hB\274\363\245F>\307\236\360\274O\022\035>\313\276\363=,\335\311\274\335U\262\275\242\365\265<\243lG\275\234\030\315=b\255K<\363\177\254\27458\256=\361\263\245=\326/Z\275q\211/>\267\251R=\007\214;=Y|\275=\220W\375\273\214\271\204\274\007\2656\276\372$L><\305c\275\362z\017\273\344L\347\272z\213\307\274l\034\376\275\257\037\343\275,\334,\275 \211\215\276\223L?\275\205N\205=\363>_\275\221\245W\275BU\305=Q\340\323=\tn\214\275\241\007\332<Db\356<\345\212\226\276=\177\006>nN\001=I@\364\273\264 \006\275M\221V=\211\006\220=\260\245&<\354s8=\"}\036\275\251c\257=)\230/>\025\030\366\273yA\377\274\360\236\003\276\010\221\n\276Ul\003\276;\360\r>9\363V\275B\265\377=\377\344\275\273\367\344\244<\204\245\212\274\026\354\007\276\275\372h=\236\000\200\274\315\337\016\276\002\227\355\273\r\027W=Jsu\275\315[x=\362\354\223\275K\035\224<|\366\245\274\214KB\275\001y\253\274\210c\322\274\374p\014\274\321\235\021\276\351\334\014>\222\244\226=1\210\213\274\260lr=\221\232\241<_\034\010>\307\t\017>\261\247e\275\210w\316\274\2615\221\275\277\347m\273\205hM;\274\365o\275\003k\300;mx\226:\204\024b=]>\333=\224b\003>\240\320\017\276\334\222\017>e]\226<F\0025=\372\255o=\335\tO\275\0277\314\274\223`\026<\354\342\372\274sj\347=\0332\201=\026a:;]t)=\231\243#=\210\004\222\274\240\206\364=\303\303\322\274\265\020w\276\024\315\234;\274}\225<w\215q=5\2265>\333\303\261=\246}\256\275\245\211B=\223\247\330\275\264\004U\276\276\002`=\300I\024\276\325\036\323; \232\340\275wiL=\375\032\303\274\347m\223=\017\2518\2753\272J<\357\300\000\276\300\257\r=\"\315\267;\016\343\256\275\244c\365<\251\307K\275n\257\264=\036\201i\275\032\247\237\273J\372==\350\007\276\275L[\277\275\003\235m\276\210\n\034=\372\267\032\276S:\334\275W\014&=\252o\016=g\356\344\275\004\224\000\276\335\005\220\274x\032\335\275\3164M=M\336\247=\256\377\346\273\205\223B\276\246\262\324=p\314\362=\004Y\237;\247\025<\276(\312\305=\347\2662=\315\346\r\275>V\032=\212\272\271\274\324G\356=\263\247>>\364\n\341\275\203Z7\275\221J\341<|\277\274;\261&\030\275\345\023\201\275\037\351\220=<\312\261<\311\304D\275U\356I\276\365\235\313\270\002S\204\275\203\365\315\275\016\335]=\327\223B\275\370\276E>\322\377\224<\240\356\203\275\234\254\205=F\242\227<\271i1=\360\356\312\274_\243,>+yA\272\267C\021=\020\035\203=Cq\301=r\033\265\275\276eG=v\026A>%\200a\276Y\177W\2752\362\303\274\021\223[\275\365y\007>\347\3221=m\206\227\274\370YB\275\322\213-\275\330%\351=\311\227\276=\375\361\346=`\357\217=0\014Q<\375<\t>Uv\255\274\014\212\364=y\267o<\243\316\n>\335F\300\275\373\033\264=\025Iz=c\001\225\273\371\013\320\275\211\316\375\274\2024\256=\365k\231\275\214\334#>nw\206=\001\311\313=B\256\270=\212\226\003>\352\322\366<=\245\216=\004\024\032\275\370\331\207\275\n\255\306\275\0309:\276\303\013\215\275\312o\331\275\347\271\273\2752k\316\274G\354\300\275\355\254.\275\247D\222=\371\325\027>zC\025\275ky\352\275\333\233\034\276\317\305\314\275_\373\313<0\'<\276M\3220\274\024\t\205=\341[ >4\027\257\274E\203\354\274\251T\241<\024f\t\276\352\2265<$H\017\276\271\257\252=\001\r\017\275+\032B=B\315)=\214>n\275>\265\255=$\242E\274\256\247\226\275\217\233*<\347%\311<|\213\365=\022\305\222\275zg_<\3003\364<{e\337<\210\356\262=Q\022\031\274\013\3166\271\272\220\200\274\327a\251\275w`O=5Pn=\177\177\237\274\234q\225=\226B)>\260\362\345\274\341\270\000=\007\323M\276Yg\010\2760S+\275\214\016\337\275s\202==1\322%\276O\322\031=Uk\024>\217$\273=\262f\355\274\335Z\000\276\214\214><\217\2539>\231\200\243\275XF`\272\320\023\204\275<\260}\275\312\276\017<#uU\274\364\027\'\275\233\310+\275\302rC=\023)M=\tl\200=\364\037?>\311\021#>\211\022\266=\272\336Q\276\362\203\237=\323rf\274\350&\003\276!\305\274=C\344\025\275\341\352\t=\265\036\361\275\256\303\020>~}\222=cw\317\275Fm%\27647`=\375c\237=\002|\t\275\233@\247\275g\\\200=\020\300\010>\356o\t\275\337\033!\276L\230\265;\237\031\310\274CT\325\274YV\355=\327\2372\275\245\205\341=Pm\314=\324P\037>\374\331\322\274GwE\275\221v\006\276\210\220\036\276\2267\377\275H\177\014=?\316G\276\376-\201\275\277\177>=\3567\021\275b\021\t=\004\024\252\274\322\275\027=k\336\357<)\310z\274C?s=Q\312\335=Wf\'\275\344uE>2\347\372\274\217Kg\275L\037\346=u\030\315\275\3211\257;\354\303\251\273\370\203\302=\342\017A\275\213\320\311\275\220\037\317\272V\237\001<\210[9<P-\255=5\216\002>\334\005\247\274\t,\347<Cy\306=\210H\260;\267\374Z\273\035/\335\275\t\"\351\2745\"\351\275\312\324;\275\356_\001>\252r\363<\t\210;>\230C\035>\371\242\t\275\207\2772\275\336n5=`\204\334=x\222J\2756\231\334\274\311<\231<\262|\323=\227}\017>\217\363\010=\307\354\323;\020\347\t\275\023\367\231\273\357@\216\275\225\250\253\275\272\222v\274\036~-:J\033\337\274\3500\031=\244\307=\276\203%\230=a\022?=\233\352\334\275\205\367\315=\002\000\337;.\0271>\tQ\007;\274\3114=S\361\025\276\025[\252\275\231\004\300\275\216\013\256=\256Z\032\276~\004Q\275c\313\033>\212\231\265\275\005\307\213\275\365\350;=\316\3728\275\242r6<\266\364\026>\376\210\000\276\231$\242\275\326\371\033;\220`\212;\267\315e=\370Cr\275\215\256E\273\376\371m\274;\341\335=\367F\324\275\000\243\310\275\370\243\315\274\247Y$>\3017\025\276\335U\027>\016\362\033>\376\006K>%\304\370:.\026\027\276\212\202[\276\236\370\025\275g\205\224=q\353\377<:1\001>\341w\323<\357\232L<tu\t\275\266\201(\276\014\261$>\032\327\252=6\225E=\257\212\375=\271\364\220\275\305?0=\236\320(\276\342b6<*\004\304<\234\206\222\275]1\356\274\377u\364\274\017&\365=\242\330\255\275\362\\\223=\250 \004\276\3217\315=\263L?\2764\020\240\274\031\312\002\276\353\340\354=\253\013y\275Og\n\275\256\207D<)3\265\274\342V\213\275\n.\234;\340\367\342\275\027\341g=_;\317\273U\373\003>\312\"\306\274\3348\002\276\324h\275=k#\034>O\0320=\353\243\337<\226\365\027\275\263\231q\275\264\231_=j\243\260=\304?\023\275X\326\302\275\257(}\273\336\346\032\274\310s\003\276\204\016\317\275\033\262\336<*\222\266=\037\357\033\275[o\307;\347\312\016\276Z\252\351\274\306;\226<\034t\206\275\000\020==\300\024f<\347\307\030\276\226C+\274@\024\270\274\342@\236\275ikx>\356aV\275Fh\\=\260\254\231=\240U\036=\245<0>\367\203\241<\337\332\034\276\347c\226;H\330\264\275;\206\004=\353\272\030>L\371\313\275\tp\210\275g\020Q\275\266\256\r=\337GX\275\253\336\\\275\235\260t=\307\300-\275\342#\364\275\224ho<\234\214\356\274\023\224!\276)\020K>\362?\252<\267\223\220\275a\252\013>\320\232\357;\323\213\250=\330w\304\2751*:=\316\252\023=6\023}\275\263\340\256\275E\010W\273\237x\030>\370\242l<+\013\211\275G\006\265\275:\257\353=\030\272I\275\322w\263\275v\325\352=^ \">\210\315\210\275\367_\007=[\307\306\275d\260\312\273\314\265\223=f3\233\275\211\361\326=\3463\304<\361\337\345=P4J\275\363\020C\276b\330`\275\226\207\247\275\324\017\227\275\300\275\312=\3639L=\242h\177\276f7\376\273\371\236\n\276\374N\277\274z:\017=wY\003=W\022>\276Ol\344\2740\037\022<\306\n =\r\202\327\275\3013\310;u\327\242=r\nv\274F\237\226\275w\003\267=\303\326\264=}0\026>b\264\365\275\211i\256=j^-\275\326\253\213\274\005\327\234\273\036:.=\274rO\276\321\217~\275\346\3052\276\236\302x<\301D\237\275\033\037&\276\373,\232=X\211>=\r\203\337\274\305\246\234=\356\314t=,\177(\276\312.\274\273 \310\235\275TT\316=\232l\373=AN\252;h\341\303=\243r\231=\374\322M>|\364\006\2753g\371:Q\306U>\177\233/\275\357h$<h`\033\276\346\031\005\276\330\354\033=P\202\020=I\347\253\275-\3435<\350`4\276=\357\211=\336#c\275\350\2716\276\272\222\252\275\312\020W\275\315\036\313\275u\221o=\361\010\202<\rQ\276\275\177\254\201\275\256Y\375\274/vm<\234\257\240\275\334l\315=\266}\265<F[\375\2755TS>\024wE\275(D\027={Wr\275\304\315\200\275\347\327\362=\256\215\340\275\251\242D\273\336\223\313<$L\336\274P\302\202<Nt@\274(\001(>Rc%>\260\240\352<\330>\257=\3360\264\274\006Z\003<j\305\377=\363e\250=$\001\025>\206\210\240=H#E\275TC]\275\234_\251;g9e=8\257\211\275\253=|\275\323\232u>\365>\216\273\336\'E;\340\377\337\274\001c\002\275c\243\302=\230\005X>\303iX=\324GU<\350\001\210\275\343\204\223\275\277\253\270=ts\217=\216\356\246=\214\203t=\333{\035= \324\234=\353\034\347=\356\0075\276J\253X\274N\307\245=s\252\\=+\225\223\274\021]==\035\325\252<+1I>\317C\263\275\246\341\036=[1\005\276\267\204\210=<k\025>\337\240\014\275\026\232\276=f^:\275\323\246+\276\025\312\301\272\305+\031\275\245[N;!\246)\275.\224\201\275w\242\306=o3-=\332\216\211<\237\177\234=[\224\337\275p;\021\275_\025\313\275\021l\t\276\261\034\332=\312\342C\276\t#\224\275\305xt=\0070\313=r\230\334\275=\311A\276\024\307\025\275\004\223\210=\237[\302\275\336%2<M\030\226=,j\250\275H\031\t\275>\246\210=\271d\233\275\256\034<\275\':\252\275\017D\325=\"g\303\275[\363\025=\017\375\210=\203\331\275\273m-\372\275d\261P\274\314\310P<7\204{<\355~?\274\272S.=6w\255=\311\245\244<)LJ\273\346\030\307=Z\333\313=\2033W=\212)\223=\345\274&=\036gi=<\265\334=,&B>\264\211`<iP0\276zX\250<NN\014\275H\262\r\273\017#\r\276\345\256\026\274Qzs<pvH\275\303\367X=\021\253k=?_\337<\343+\r>\241\020P\2756r\\\276K\241F<\027\205\036\275D5\205\275\270\025\372\275\344_r\274\3072\032\274\002dm== t\275/\227\\=R\022\033\2748N\301\275\327\365\031\276\027X\230\2752;!\276\326o\217\2756\'\206=\375\305:\276\231\226\036>~\307\004=+N\333=Ao\315\275\027\363\365\275\014\327D=\276\000B\276\274i#=V\331\026\275\002v\036=\342\303\321\275\370\031H>n=\305<\231l<<\010\030\265<U\331\217\275\230\344\317\275\0279\030<\364]\226\274XuR\275\007\010)=i\354\200\274\275\035\221\2753Y\373;`\337\367\274\211L\267=\024j\265\274\033\211\204\275\177\326\001=\346\003\334=m\372V=\3171\237\275+-\301<7(\346=3\033\224=F\352\234>\361\246\370\275\243\235\004\274\305\273\310=y\003\305\275\333\t\010=G!\036=\200\211\003>\224\355\022\276\377\014\032>6!&=%\341b=;\034;\276\315\"\214\275\242\022Z=y4\005<\311\335\203=\276r\226=\245\343\214>AL}=\254U-\275W\362\361\274\302\002s<\356\357W\275\354p{\275\270\361;><\272\206=\343y\030\276\264\344?<O\304J\275\177\313\256\275\2164\007\276\356\010\224\273\237\r0\275b\nV=\303\r\243=\235\376\256=\321 \240=\313\266\376\274\236b\235<\366g\014\274!\324\023>\215\364%>|P\021\276\301\224\003\276jD~\275\337\212R\276\"\200C>\004+\213\274\320\323+\275\343g\273=\327\001=>\007\007\241;\250b\025=G\262z\276c\347\357<q\317\316=F\244\226\275\034_\341\274\220zK\275\301\021\342\275\322\232\247\274\331D\177\275\025\001\335<\315\254\031\275\334\025\"=i\253t\275\316\260t=B\360!>\376\2110>\270c->\3745\264;\004\3640\275\276o\364\274c\230\326<\274\300\024\275\337W/=\357A\261\275+\204\036\274Z\027%\275J\030\025>J\342\037=lp1\276j\270\252\274\272#\360=A\177\227\273\210\216\216=\266\\G=\371[N\276\245oB<\200\010\030\276LL)\275\204\342\372=Fk\337;\304S#=\324g\276=\276g\301=\256\177\355=\317\264c=0\247\":\276\310\271=\302\014\216=\231\217!<Wi\264=\346R\211<\356v\241\275%\333\367=7\2674;6c\215=E\t\277\275\316\303H=\264\235\253<\033\220\227\275\311\35259\365~\007>*\036F=\323\343\007=\311\245\037<G\337\260\274%\207\210=\235\235@<Je\"\275\032\305\257=\243\250\227\275_\233p=.\027><\352W\366\275\023E\203\274cm\001\273\263?\346\273\264N\274\275|\252\272=\337\017\371=>\233\273<\331\243\265\275\356\366\317:\'\375\266\275\317\260\202;F\356\312\274@\345\036>@\026\302\275f\326\004<e`\017\275+l\214\274\266\217X\275P\247\225;(\001p\275/a\267=\205c(\276\007\016A\275\267A\227\275u\">;\022\233\247\275+\366.\275g\034\262=/O\034\275m{\272=\220;\212\275\323\026\r>H\303\032\275|\ny<\nH\367\275/\356\000\272\n\234\226=\324\003\305\273\304a\231\275\312;\245=\234\267\014>\333A(\276\223\016j\274\214p\364<\010\346\306=\267`>\275\301\242\315=r\253\347<\346\305U<LC\210\275P\366\257\275K\247\220=l\316\330=\226\301\024\276\321\324\320\275h\302\307=\302\216)\274\220v\302\275Z0\036\276=rx<\366\373\226\272\222?\024=9\r\027=gj[=\244x\217<\225#\313\275\270\263\030\275\215d\372=\035\027\314=\030\347\274\271\276-\361<\312~\251=\337~%>|\037-\275\0254\311<\205_4=T\273I=G\243\022\276\032\026\375=\030\221$\276#\362%\276z\226\211\275\244\006\325\274\373\037\277\275\212\324\303\275\347\350a\276\215\363\237;a\377==\002\rA\276\026\353\300\275V\346\017\276\251&\271=\367j!\276\361\251_=v\030(\275\244\316\241<5\2436\274?\363\322\274\270\3037\276)\371\017>\356\365v\275N64>\305^\363\275o\222\227=\335\222\300\275{VR;\177,*=\237\323\301=vZv>\353\372!>\367\"\210\275.\037\"\275w8\210=\344\033\210=\356\226\244=\230\265\035\276\201m3=+<\211=\227{\247\275\235\242\270\274\371\370\214<\311&\037\275x/d\275`\3431\275#I\271=\355{\255\275R\2536=\243\235\332\275\016\260\233=4\212\251;\r\300\031\276\276\303\302=?\036\364\274\2138\245=\377\366K>\375\037\304\275\033i2\276\340tV\275\026V-<~R/\275j\264\311\275\353\310\024<\027\314Y>\252\335\204\275\202>\316=\351\232\230=\r\035\206=\304\310\017\276\236\243\356\275p\032\232=\322s-\275&\335\224<\311\241F=\034\304\334\275\364}\343=\352\256P<>S\017\274ckV\273+\213\337=\343\031\216<\336\310\236=\216{l\275\347S\210=MN+\275uPX\276\2155\337\275\360\275\255\274Ha\202=\"/\300\275)\017J>\353\312\302\275q\\5<\362\274\257<\033\2449;\313\274\364=\016\366\252=\374M\243<\360\320\204<\rY$\276 N\255\274W\214\022>\316\306\224=\213o\010\276\354<\010\275\373y\251\274t~\"\276\337l,=\367<\322\275\0263\304\275\262>_>\277-(>\362\240\306\275\374\343\013\276F\223\211=\271\205\332\275~[\016=\3620\245\274\250V\255\274\332xn<\3753\323\274[\030\010>\253(U\275\236\032\265=\016\230\t>\265\356\221\275\330\032R\272,\360\321:\305\252\027>\303=\027=\022\262W\275v\017\021\276\002\313\270=`\020\254\275\246\213\030=\350\350\323;\325{\311\275u\3401=\273\377B=~\242)=A<(>\207\361\205=\374\256\244\275D\215\271=+L\346\274\303\001!\274\302\376\362\275\217\316\243=vT\246=FKH>\315p\270=I\215\256<\357\324\333<p\317\377;\263q\261=1t\266=\204\307\362<aQ\014\275;\333\271\275?\335\325<g\315\255<\326\374r\275ia\275=\333X5=\231\2609\275\320\272J\275\014\030e\275L\250\226<Y\031\275\273\007\346\374\275m\304l\2750\211\340<w\202\344=hv\326\275Z\362\t>\007A<=\233k\033\274UG\246\273\023\266\310\275zM\240\274yf\273<w5b=\244vb\276\221\321\267\2744\246&=/e\326\274\271\213\265=g\274\223\275\320\377\325\275\233\212\364=\300\3424\275&\306\201=\223g\354\275\0032\205=E\3428;\236}\344\275\024E\347\274\305\350!=H\354\251\275\262\203{<\310\324\263\275/\327==u\324\327\275R\203\306=\000\036\227=\202\n\022>\206\370\374\275\264\376\010\275\315\344\223=\244\036\020=\213c\033\274\271\316\240\274\243\324\307;\027\346\223\275\266\275\006>\351\243\204=\277\236\">\215:T=\276\267T<W\333\036\274Z\376;=M\n!>\377/\036=2\221\317\275>\002\250>\014$\006\275#o\037>\036q\273=\031\"\344\275V\333\367=\241\271N=q\236,>PmE=&\005 ;\262\3774\275\364\010\306<\031\354\036>\023\340\253\274\361\201/\276iXC\276v48\274m|\004\275$\203[\2759\353;\275\346\237\207\275s\343\253=z)\260\275ZA\345\274i/\232=T\300\235\273\230\244\371<\254\332v=u\276\322\275e\031e<r\261\203\276W\333\252<\005\235\276\275\344* \275Xi7=\244B\262;\306\017J\275\031\330\027\276\013\332y=f?\236\275\341\326\230=1\251\2609&\364,\276;0#=;4=;\333-\n=e6\211\275\347\217\325=\256\275\n>y\004G\275\214\274\033\275\270\250f\275\250\000b=o\033\217;|\245\250= C\344=\240_\214<\007\261c=\n\rP\276\007\221\347\274(\201\220<\236\357\333\275b\034\342\275I\370\340<\027\211\233\275\364R\251<\256f+\276\322\031\016>+\323\021\275$\216\322\274\202\022^\275b\350\000\275A\362\251\275\263\022\247\275c\214\016>\303\373c\276j\313o\276\347\024\347\274\304u\236=\234\177\205\274,\245\270=7\277\323\275G\357\340=\225\t\307;\263\336\244\275\373DW\275I,\241=\030\272\365\275\007r\302=\353\374\004\276\263\322\256\274\257H\213<#\362t\273\212\256\264\275p\017.=\271J\342<\267_B\274N\277\037=\245\212\205\274\024\210}=\373\322 =\2663m<\010u\373<\342~\005=#\271\342=\361B\303=Y\0309>]}O\274\351b\255\275rr8\2762!\017\274\234q\263=;\315\217=R\323\361;\377\212\200\275h\n@<\ri\372;\323\313^\272\275\000\246=\014\224\302<\226\311\240\275\240\241r<s _>\361)\007\276\221qW>\034\202j=\034y\000=f\033\352\274\376\347\364\275b\235\334\275\213@\222<\013\267\233=\354\017\t=\372c\253=\320\002\266\275\352Q\n\274\231\261,\275Z\231\302\275X$3=\025@E=x&\032\276\344\233;>\371\257C\274\345r\230\2759\032\n>_i\001>.\343\202=\303\337\244\274%W\010>\217\300\017\274\326\007X<%\232\016>\216\332\032=\367\027\371\274\360\304\022>\207\262&\276(\033\352<\213^\270=-M\021\275\366\273P\275I\251\206\276\222\016\026\275\263i\262=[9(\275$\240c\275(\377\227=\3661\330\275c\005\375\275PS~\275\261^\224\275]\216\342<G\353\322\275\301\346g=x\270\017=\324/h=5a\352=t\305\202<}=\306=\374\177^\2751\271\315\274\035\340\014<o\252\222=\245\331\016=\245=;<\201h0\275\365%\271=A\243\372\275\036\021\267<m3?=\340\031\030\276\\*\037\275\253\276u\274\317m\315<%\231\261<\r\235\217=\023\244\242\275\223jS;\364\213\343<_Al=\367\014\221\274\217\305r\275\256\324\201\274\312\001\362\275\r\233\034>k7\000<\025\032\327\273\332\274->6\225\206=\346\366\257=\000\320\243;\267\341\244\275\366\365\005>\030\374\016=;u\n\2762\262\235\273})\271=\272\237\310\274\016\250\261\275 -\033\274\254Wr=\217\203\311=\236\223\024\275tCB\275\rY\204\274r\305\200\275C\245\255=\\\240\013\275\226\342\026\275>`2\274\376\260\007<U\377f\276-\247\344\274bGW\275\2166\016=\006\216v\275\033m8=l\250P>\367\361\232=\206\237J\274\365\276\225\275\361\207z<\253\356~=L_\026\272dX\014=\353A\210\275S\200\302=\t\303~\275#{\243\275\364#S\275b\255$>\344\255\024\276d\373\272\275\245T\261\275a\3564=4\257\010\276X\347\303\275K#A\275\220\024b>\373\377`\276\272\030\222=Qy\314<\257\356\332\275\373M\263\275&\006\221=\023K\311<|\274g\274\362\005\241<\324@\273=\243\0274\276\276F\203<LJ\216\274v\370(>>\301|=<?N\276\255)\231=NH\314<\203_;\275\311:}=\2425C\275F\020\335\273\371\002\221<S\227z=Jl\210<\267\332)>\326\326\\\276\316\030A=\306\027@=\023\270\243<4z\023=\321U\211\275\025\264\007\276\322\017L>\255&\313=\262^\007>-\002\014=) 6\276\212\324\335\274\215\266m>\215Sr=\325\036\221\273{x\332\273H[\206\274\305:\216\273\351\372d\275\013/U=\211r\r>Q\341\361\274\3113\254\2748\005\004\276\243G}=U}\352\275\367-\327\275.O\222\275I\3314\274`\325A=U\223\356=\274\244H\275\355W\204\2739\014\336\273\343\372\265=\371\023\232=\272,\346<#$\210;\237y\373\275S\302\347\275\220\306\340\275\242\236a\274{\257\213\275y\302\247=\313\311\017\275\030\206\034\276\022b\\\274\321\'\304\275\246eH>\0214\261\274\354\351\306<i\343\243\275hz\013>$\346\301\274]q\027>\373\310\206>\345\\c=\322\027\017\275GH\036\276\3528\276<7\346\234=\225X\250<u\340\210<5@I=\243\277\221=\207M\n=w\221\340\274]\\\205\274\"u\327=\"\221\352\275\262\210v<d\016\025=\034 \244\274\345\321\230=\260(\356=\231\213\271\275-n\235=\355\274y=\013a\232\274\335\250a\276\310\356P\275\312wZ\276b}\356=w\027O\275\353\226a\275\027/\340\275\355\370\003\276s\347N\273\3724\202=TO\254<\346\343?\275\037K!>O\343\023<C\272\203;\220\246U\275j\262\206=\034E\361\274O\2000>OfQ=y\367x<jz\306=\34715\276\254`:>\220\271\265=B\223\361<K\215>\275\014\305\205=\206\373\241\275\231\200\037=\276\tN\276\033O\213\275\356\3133\275F\252n\274=\t\n>\370\265\001:W6\334;\261\354\177<\216\224\014>\313p\270=D\355\037>\003\351\377=\340\275\270\275\353\000\\\275L\323\356=\021\314\\=\367\324\000\276\t\3525=\245Z\330\275.\250\237=M\035\345<\361F,=\327\3444\274)\027A=\2203\255<\325T\027>P\335\224=\200\332\264<K\372>\275\273\231\314=x\345\361\275:\r\005=T\361\310=\205\027\270=\343+[\275\256\200n=N\022F\275\000J\373\275x\264\232=\277o\350=\307>z=\257-\007<\003\307\276=O\340N\275\352\231\020=\302\376L>\243a\326<\022\343T\274\320\360\201=q\317\216\276\367[\257\275\277\370\327=\2066S=I\325\264\275\242=\031\275\0378\371\275\342 \326=\034=6=[\242\207=`\267\264=\337\337\272\274\216\016\367=\351\005\333\273\216\376\356=b\007\200>2\321i=\335\224\221<&\347\214\275\353w_=\314\214\221=csM\2757\376g=\236\220\021\275\206Vc\276N\307\213\275f\355\036>\037E\304=\'\033\355\275\344\232(>\233\366\350\274\2618\235\274\334\217\372\273\321\005\001>@\0255\274fn\247\275\362u\226\274\014\211q=2\332o\275Q\371\336<\241:~=\321\262\307=\327\204\301\275#+E\275\317\310\312\274\223d\324\274\004\357\267<\036aV=\035\2368;\202\274\336=\013\347%=\275\373\202\275-w\273;\326\243\333=\355\t\303=\322T\210<\242\\\254;\320\302\227\275\312L\032\275~\301\024\276\215Q+=\255\226\213\275Hs\363\275o\";\275\204\026\300=A\371\232\275\333\346P=\007\230\006<Y\350\302=\2768#=\332[u=\022^A>\034\205O>G\300\356=\364\233\221\275\370\003!\276\030\206\335=\233\303\266\274\350\004\270<T\371\272;\271\231\360\274\361I\227:k\004\332=\266\033\211\275R:`\274\337\231\034\276\036\334,\275\027\323u\275\255p&>\333\316\337\275Y\251\267\274\253\340\275=IV\372=1\310!\276\307\332\230\275\301X\372\274\247\224:\275\373\230T\275\202\rT=\2347D\275\214m\325\275VG\330;kK\304;\350\225\371=\234\t\273\272\330s\214=\234W!\276\345\336^=\225\225F\275\013^\000\275HR\221\275\344\\2\276\335\324\377=,,;=\363\346\r>\323\302v\275\354\314\000>\202\262+>8\205\211=6\013\351<\324\263\006\276\245\254\001>M\363\\\274\'\353)=\305\204\032>\023\242\375<\t\2151\275\017}\266\275\336\277\245:\216h\332\274\242#>\275\324\263\271<{\302\224=J%\303\274\361\0075=\265\362\036=\254P\330=\217Q\026=\261\353\261\275\020p<\276&\352\204=\304{D\273\326\016\020>\236\325\322<\305\357\336=\232\345\373\275\027V\\\275\nq\200\275v\262o=4\300)\276\271|\213\275\275R\211=&\006\245=\235f\"=C\0006\274\244\214\024<[\031\333\275G\210N\275\223\315\211;z`\322<\025\020\227\2754}\020>r\262\347<-mW\275\202\2179\276\340x\251\275f\330>=\213\233\r=\224|\010\276\3431\026>\004d\004>\345OM;_p~\274l\022S\276\036\"z\275\332\021\036\275\220\220\036>\242\3072\275=\337\217\275@[\203\274ZF^\275\357\241/\273\247\022\376\272o\374r\275\031\370e>\212\353`\275U\264\234\274J\317J\275\352&\371\275\324u\316=\213Fc\2757\217\004\276\244]\336<\344\0043=\326Z\t>\372=\336\274\241\251\204\275\022\253\222\274I\372\022\276Z<\200<\376\216\014\276\247P\334=n_\037=\377\005\000>\271\022\320<\251%e=\2355\033\276\260\276\035=\253ro<\242w\256\275\354\237\246=S\335\365\275\033\345\367=\313h\204=\205\227P\276;\334\002\275\003\320\356\275\315V\332=\334\252@=\340\027\265\275`kL\273\320L,=\330\3114\274aC\'\273\260\371\245\275\025\255\017=\360k\027\276\334\'\341\274\3749\035\275a\363\203\275\346\206\003>)W\333\275\345\341\252\2741\206\330:U?\230=\220C#>/\336\226\275\317\302\217=\265\342=<\342\232\016>\235\360h>\370\206\317=\332\013\203\275t\034\350\275\034|\346\274@\233\261\273\2245X=w/T=\322t\270\273\243\"\335<U\333-=c\251\202\274!\346\217=\022\305\273=w\202w\274\250h\020\274?\261m=\335\325$>\350\372n:<bJ=\367\212U=\270\205\347=\364\223\253\275\312DK\275\267\214\035\276\207*Y\274C!)\276\016\230g=\327 \247\275\253\347r=\264\336S=%\245\237;\370\'\351<\203\221\242=\252\316\300\274|\022\231=\207\243\005>\242\210\035>\312\204\215=\323}\036\275\232\324\365=\303m\007>\362e\025\275\246\203R\276\r\017\237\274\247\306\204>9\356\271=\177\031\273<\325v\252\275!\001\257\275\364\302\377\274rB\246=(\024e=\032\267\030\276\"\245\247=\003\335\231=\272\336\350\2753#\034\274|\340\315=\371\023\251=\0104p\275\017)\254=W\361\266\275\270\310\\\275\007B\332=\273\252\253\274\320\200h\275\267\323\005\2767yl<\031\3579\276C\007\353\274\022u\251\275\205\325\330<>\034~>\377J[=c\253d=\230E\003>\306\310 \276f\241\036\274|?*\274%\376\275=\374\377\212\275\332\261\231=\325\025\254=\255\227Z=\367\363D\276\033\0305\275;4\252=\264\2646=\313\373c=\204m\r\276\255\251\302\275\036\331i=\236n\301\2747\346\230\274\327\0075=\234\000\347=D\366\240=TZ\010=)\202\034\2748h\231=bG,\276c\002\212\275\177\214\340\274\345\221\254=V\275U\276\034\016O\276\363\376\337;\273\321\226\275I\233\004=k\312C\273\312\3765\276%\347o\275\345\002\221\275?5)\275D\230n\275/\004\026\275\202\370\331\274\201,\263\275m\247$>\230e\031=\2477Q\275\024\241\223\275\035\342k\275t,\343\275\267X^\275\256\261\330=I\004\224<\323\224\233\274I;\314\275\030\327 \276\313\221\300<\217d\337=\036\336b\275\001\240F\274\343(\"\2741\210\327<b/=;\373fm<!\310\235=~\242k\276\273J+\276Z\365)\276\252\247\003=#\240\276\275\373xe\275H\321.\275\234\026\351\275\342Z\026=#M\035\276\220\261U\275]\272*\275\326\026\254\275nTF>\223\331\013>\260\003\244<#1\254=\013\265$>\357\242\366\275_\304\343\2753\234\200\275\250\002\233\275\215\353\247\274\253=\223\275\267\243&=,$\337\2750\024\317=3n@\275\032\025]<\205}w=e\223\350\274G\373\030\275h \\= V\336\274\007$\310\275Z\230{=\002\301\207=\234m5\275\306j\235=/\300\025=\266\033B>\335\237\024\276\227\332l=\200\3667\275\356\035\246\274\"r\373\275\217\215G\275\356\0003>\254\251\223\275y\367\360<\215\315\026>\366\315\023\275\034\347f=\325\2431\273\237\313Q\274\000\220\251=0\304\254=\310\244\251:\001\345\304=\310\245\214=\2030[\276Ilh=\326\013\n>cx\'\275\257\337\364=\326i\276\274\035\311\276\274\020\020\202=\320\277\371\2752\327*\274UQ)=\341y\261=oR\324\275#`\220=\324\216\216\273\251\350\241=E\332\225\275\205\325\211=4\036Z=\220\375\263=\255\003\315<\335!\372=\000K\266\275D\031\362=\271\326\360\275\020\376\351\274\036\r2=\220\271\374\275it\002=\0017\325\275-\267\233=\355\2339\276\030L\014>\"RJ=\030\246\336\275}\3419=\003\265\327\274\374-\3619\201,\340\275\331\177\214=\315\013#\275\253\371+\276YI2=/\367\264;)\363h=\266i\'=\362\350\363\275sB\260\275\272\202\217\275I\024|\275\334\326\t\276\260\373\t=\006(#\276d`\266\275,\\\235\274\026\n\213\273\342t\234=\314\001\340\275+\242\016<\306\nt<\305\211\334\2732\376\001;eK\021;\347~>=pV\271\275hz\237\275\316/\363\275\215\320)\275\243\205~=\222\305\262\275\325\223A=\\\321\032\276\265\246\023>\365\236h\274\350\307?\274\242\t\001\276\343\205a=+\206\311\275<[?\276B\252s<\265r\013\276\263N\253=\267\366T>\262;|=\2315J>\276Y\270\274ii\262=\006g\253\275\014E\324\275`\365g\276\274J\205\272\264t\304\2758~N<\363i\241<\t\345\266\274,Y\227<\252\322\245=S\316(> \341\206\275\310\030\004\276\035\223\363<\353\310%>\\P\335\275\275\332\347:(;r\273\226\307\037\276r\335\016>l\\\250\275\026\345I\276\320\004\210\275\001\336\202=\026\353\303=z\347I<Az\354=\005\277\362\275U\256:\274\211V\253\273u\262\327\275\247\322\377\275i\371J=\314\350\207\274\264\365\324<\\{h\274\216\265\021\276\355\354\242\275\346@\026\275\257\372\020\275\025\350\227\275\331\304\007=\267\376\252;<\351\270\275S\346\241\275\272P\267\274\254\263,\275\311\2717=]\274\252<(\214\364=\363f\026\274\235[\020=\210\357I=q\326:=\250\2501=H(2\276\327>\337=\213\310\320\274KP\257\274`M\r\275M\271\203\275\324J\366=\263\345\210\275\033\344\223<J\024\201;\035\222\'\276,*A>\244mN\273\241\220L=\004\235\246\272\031\350\003=\363)\343\274\356\320\372=\356\276\371\275\325\322\031\276\364\t\262<d\034\327\275\307.h\275\201\204;<\330 \361\274\303\233\032=\377\035\351=\274T\231<\275\310\035=\036\253\202=\025X\301\275Q\336\027\276A\302\313;\n\320\322<~\030\203;6\202\t<\232\212\352<\206\234\265<\341\356\343\275\324\005\373<\302\025\222\275E\024\210=\022C\322\275\314G4>@>T\275\'\010\337\275\245\355\305\275\344J\231\275\210\346,\276\350\'\251<\275RW<\020\227\006=o\035B\275\t\006F=\023\330\274=\013\214\304=FS\037>!\273\035\275YBz\275\220e\256\273\246\370\311=\347\225q;\335\372\374\275\366\334\031=\350X\351\275\014\300\352\275\262\204\202=\002\263\020\275-\324\224\275\373\225\222\275=j\202=\3513Y\275e\374\277=y/\261=\240\326R>\334\204\037\276\311\034b=t\217\020\275\360\313-\276\337\262\273; ~8=\314Z\315\275X\247\261;\200\200\224=M[\t\274&q\264\275\205C\367=T\3403\275\323\342\314<\360\016\200<^\014,>\361\'\325\275\261\276\007=\272nH=|`g\275p\216`<\271h\200<rH\260\274\226\024\364\274\346U\215<*\257~\275\325l\352=\351E\\\276\024\234>>\005\226\026>b~P>\301\266Q>y\363\224\275\250\n\014>g\2153\2769\372\311\2751\233[\274\236\315\r\274\327T?\275M\013w;\352q\344<\0045\311\275\231\326\020\276\025\320Z=+\244\240;\350\207 \276\354\264\223=\257\253\006>\277\260\350\274\206x\032=\002J\252=\036-\020=i\321B\274\212\317N>i }\275\034\311y=6\222\250<6\004\342\275\246\3341>AR\261\274\000\276\220\275\241w\222=wwa\275\371\263H\275\305F2\276\347$\242\275\030\271\275<\234\027R\275M\324\211\274\270g\231\275\305\223\016>\252\365\271\275\352e\342\275N\372\366\275\0344\'\275\224R\323:n\227\270;g\030\353\275\366 \200=\236s\313\275k\017A=q\014O<\362\021\371\275\242\251)=I.a\275C\207\177=v.\247\275\351\3222<\340&\245\2755N\330\274\023\233\213=\256s\273=\316\217\251\275{\267\276\275\375\275\236=g\270\317=\3402\244<\254\361\000\274\231N\267<\301\350\306\275\031.\000>\351$\022>Dj\001\276\002\376\006\276y\263\026\276\t=\246=b%&<\'.\037\274\207\305[\274B`\203\275)\226\231=\njd=\177\335\234\2754\324\353=\016D\n\275\376\357 \275\351\231\313\274sS\204=\361A(\276\275\322\333\275|i\006=w\027\335\272{\330\222\275\325\337\004=r\337\241=^\374\005\276A\243V\275b\r$\276\021\215P>e\377\217\276\"\244\216\275/\257W<\205\366\t=\013\300A\275\004\202\027\276r\337\264\275\177\373\224\275\272\251\252=\203\344\017=\305\272\202=&\343X\2754\246\224= \004\251=*/\200=\233.\362\274\365P\024;T\360N\276\326\376\201<\001\357@\275\020T\242\274\n\002-\275\2304\001>\017+\313\273\332T\260=\277\330\244=\251\017\341<\277\244\263=<\206F\276\246\034Z\275Og_=\006\340\303=\035\346\025>@\n\233\2759C\214=\232\017\316\274\205\241\354;@\037\222=\255h\204\274.m)\276\007\340\222\275J1\001\275w\202K\275\266\354_=\305\\G<\242\201\\=q\340\013=p\253!<\260\233d=\202|\005>b\321)>\316\033\007\275\230,>=6w\005>\0346a\275JJ\030>\353\303\212={\273\255\275c\271o<|\206\260=\376\257n=!W\376\275\215\023Y=\336\334r\275\316\250\226\275\213\036\035\275\271Q(<\377\212\222\275\023Lw\276\335+\201\2750\253\013>\236\225}\275\213\025\025\276\261\354^\275\236\\\370\275\352}q\275G\362\236\274\372\201s\273\210\303\224\275S\034Y>\226\221\321\274\243\371\300\275A\260\325\275\265V\016>7]\315\275\n\214\275=\300j\263\275HFm\276!\211\236\274<\356<=zi\001\275H-\201=vhu\275\371\356+>J\332\n\273\330\246\260\274tL\007<\341+i=\227O,\275\3007\221=\346\240\017\275\257\244\350<\346@\257\274\264\273\352\275Q<\214\275i$\332=\036\257@;\016hp\275\232V\"9\225\267^\275\240$\001\276\320\355\214<\336\325Y=\340\374Z\275N\226\206=\003h\\\275l\256}=u$&=\216\256\265\274\265\020\323\275\276\244\241<\014\272\260<\216\220\362\275\314\273/=\211DN\275-\253\204<\2239#=i\317\032\276\374z\222\275y\017\013>\376\214\024\276\005\032\r\276\242\310\335\275Y\r\206<0\236,>V\010\346<M\207\362=\255p\210=\t\254N\275\315*\264<\000[\304\274l\357q\275O\322\333<\306\024l=\340\304i=\316=\022>\233\\\220=-\255&=\272[\336\275\361\322\340\275&0\226=*\326\\\276Vh\214>"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 413752
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 26
}
