node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3224479
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "|\332\376=\261m\332\275\032H-\2762\260E\275\343R\000>h\302\242=0\310\013>\241\020\252\274\334\305\r\275\3564\034=S\375\274\275\017\371\325\273+\355\030>b\221t\276:x\236=\340d\036=\352\252\345<\356f]\276\250\212\342\275u+\257\275\2761\360=\214\336I=\311Ik\275\222\206:=@\205\266\275\306\362\255=\3048\302;\014d\374<\202/\004>Yvg\275Ul\355=\330\247\315=\274B\317=\240\360\027=A\241p\274\213\254\354\273\270x\233\274\231\333\003\276g\255\307=_8`\275~\353\311\275\235\033\024\275k\330\266=j1\351\274\267\342;=\234\307.>\260\036M=;\333\365<\241\235T>&N\303=\365\244\271\275=^4<\273\305\350\274u=Q\275N$`\275/l\234<\234\017\371\272\240\\\327\275\2010\022\276\003F\240\275^\212\240\275\000&\001>&\362\037=\234\tm\275\326p\004>\n\315\035=\247\314\324\275\327^\255=\310\233\027>5\000m=\215\362M\275\202\203\322<K]\272\275\377\274\325\275\335\'\236\274k\000|\275\261\373\352\273\361\374\251\275\216\355\340=])#\2747\235\335\275Z\347\273\275\260\325e=\211K\024;\261\303\206\275\323\241\021>\354iQ\274\321\311\216=d\376\005\276rk\336\274\255\355\006\276\355\371\346\274\272@Q\275U\214\005>\263B\232<\264\350\243;\227\036\033>l\004\222\274@k\n>\355G\t>\\\355\031\274\016x\220=\352\2724=.\307\351=n\334|\275\241;w\274|\320/\275An\266\274\242Z\363=\"\2667\275=L]\276\037\021\263\275\366Z\264=>@0> \224\264\275\303\253#\275\';\t=\305\226\200<m\323\273\274\374v\242=\304@\314\274\246\347/\2755\362\\\276o#\003\276\007A\007=\377\355\214\275\001r\022=\307?\366<1\201\310\274Qs\227<~|\020\274\334\344\204\275\2554\253\275\003\024d\274\023\030<=\014G,\275\265\034\026=\343I\306\274\221\224\253=bI!=\340\021M=2\211\356=\345H\345\274\317\205\357\275^_\207\275^*\023=\251U\270= \361\263\275\035t\006\273\n\205\266=\313\242\032\276\211\260\352\274\030_W\274D\001\265<\303\346\014\276\020$\311\275)\232,>\201\263\017\276\340$\013\276\001\206l\275\224\343\033\275\210\251\003>\372:T\276\306RV>\267\225\000\272.\351\226<\235|\222=t\255\322\274\314^r\275\271\035\'=w\220\006=?\035\317<\205\323\031\275\363(\202\275%\372#\274\007\355\267\275S\t\r>\323\352\005<\234k\262\274\254Z\345<\331U\272\273]=\222:d)\021>@\331#>\327OE=\365p\274:\"{\305=\304\3317=\227\247\035=\357\027\244=o\333\026=\206\211(<\023\252\337=\221\245_<cd\206\275\321\244\317=\371\243f=\025\342\227<\341\322\322\275\232\003\211\275\333\241`\275x\371O>\306\014C=_\371\374=\330YF;\005\005\370=\236\266\'>\300\356\312;\262\330\330=Ex\337\275\240\233{\274\213)^\276s\266+\276?\310\226=\007#\207=\227\231;\274\024\267\320\275\351\356\310\275\245\322Q<%\027\242=\360\000\007\273<\215\246=\006RY\275\234\357\'\275x\0375\275\030\341A\276\341q\242\275 \340?<\030\262\2428\\e\365\274\276h~<\204\243\206=\311\024b>\242\266\250\275\014\317L>m\265\345=\026\301\356\273\3732\'\275^X\004\276\334\220$>F_\351\275\377D\220\275\312\257\273\274\245\353V=\035\270`=\033o`;\\P,\274\221\366\276=\320e\277\275\024\235\234\274tm\254=\211\350\023\275\300RA\275^\233\247=\022\321\321\274_F\344=jV\327\274\355t\273<;\206\207=6\225\352\275\344\204I<u\260\264=\344V\036<e\334\215\273t\251\230=\177\322\020>I,L\275w\031\351;\020\226\243=)\3106\276\016\344;\275\316\307\306=\310G\257\272\224F\344=\236\342\014\275U\216s<[B\254\275u,\225\275,\240\016\276\265x\321\275,\031\225\275#PM\275\'\032\203;c\213\"=<^T:i\202\036=+P(\276d\264X>\265\005\360\274\276\221\231\275\272\313\302<\357\010#\276\252\354@\274\307\322\033=\221\027F\275e\236&>\350\240\305\274Y\306\247\275\350\306\263\275\2043\224\275\265%\375=\t;\271<\002\320\221>A\241d\275\r\020\007\272\372n\034\276h\333\345\275>x\260=\353^\256=\234\312&=\246\037\035;p\315X\275\246\007P\274\310\314\223\274g`\351<S\267\200=\346iz>\362\014\305=\313{\232;\355\007\334\273}\032T<\244\325\206<\372\332*\274\257\226\342<\203\002\321=h\331\343\275\314|\313\2747\223\263=\355\341\022>\320`\276<\241\225\254\274\336(\230=+e\301=\246&4\276:-\376\271r\355&\276\254`2>\346\220,\274\203\373\250:U\023\036=\031\306\231<\257J\322\275\324\316Z\275U \374\275\250\315\320=\320\000n\275r\247\204=\232\246M\275>^\300\275\302\016Y>\\\325\202\275G\"V>\367\2425=\352\206\031>\322\365\217=k\203\201\274\335\355\232=\315~d<\253D\003>\364>\324=\302\025\032\274\037\332\225\275\321\003\307\273\324\035\336<\377\312=\275\375\246>\275\020\251f\275\343\025N>\r\004\177<P\235\t\276@\026\214<z.\330\275\235\340\356<\033\305\n\276\025a\263\275F\355\223\275\354)\231=\003\307B\275\032\267\227=:\035\363=H\320\020\276b,z=\2522\025>;q5>\311JR=.\374s\274\304\236v=\334\212\004=\027\203\002<\202\210\241=\251\266\273\274u\332\257=\"\374\315\275\375\352P>\262\000\263=\257\324q;\360e\352\275\332\217\032\275\000\352+\276\216\340M=Jh\014=u\332->\027h~\275X\361\320\274*@\217<\342\030\267\274\365\363\001>\001T\261\275\235i\215\275\304c\201\275\303n\234\274\212\250\332\275\321\004\250\275\007Oe\275\223\254\226\275\304\212\236=\333\340\324\275\364,d=t\256\314\275!HH\276H\367\034=Fj\023>U\326?\275\357J\007=\257w\275\275\342\307\033=f\254\025>\001(\003\274\206\316\252\273U\365w>\370l\214\275\037C\312\274\031\270\315\275\243\301e\275{\325\307\275\252\224\251\275\275\004\017=ZL\030\275x\0227>j2\\=\321Xg\276\267\277\213=\202v\300=\007\020Y;\240\215\352\275a\3567\276\013\340\024=\373\314\010\273d\220\026=\254\033\r\275F<\022=\311d\014\275V\344k=\355ba=\336{\352\275\220|\216=]\212\213\273\315B\007\276r\356\215\274\304\350C\276\354]\324\275k\'\024\276c1\010<H1\337\273X\212\204\275{\316\241=.5!=\373\374\231\273\374!\315=\264\273\223\275\214\327\227=\037\333\r\275\366<\256=t\366$\275\\[\004\276\323\357\307\274\021C\206=\353\000\372\274\0356\226=;f\231=\312:\234=\003\007\206\275fi\357=L5\323=\207\253]\276`+\207=\274F0\275\216\265\007>\r\314Y\276\023Q\262\275\372R\034==\376\211=\376\225\034=9\324\335\274\346\334o=\327\"%=q\036\266\275\344\372\330\275*%i<BA\267;\307\013\004>\301\344\334\275\023\004L\275Y\207\223=e\235\354\275\022\302\357\275\r+\341\274\323\271\007>\032X\263=\022 \216=F\233\225=[\232\025\276.\302\351\275o`C>\252\032\002\276\270\027\204\275\304\031\376<\222\350*\276\350G\335<\244?z\2755d\355=\264\3528\275x\217)<8AX=h[\276\275F\213\204:\304$\362\275U\334\332<\\\022B<\205\006\336\275\313&\356\275\317\202.>\027s\317\275o9\257\275\351\331\322<yc\230\274\031&\225\273\323\236\025<\356\365\326\275\200\347\251<\221Mj\275\326Z#\275\245\206\201\275\253c\353\275:\243\000\276(\227#\274\370?\013=\235\335\334=\021ir\274\227\026?\275\257\033P\275_[\"<\322}\200\275\2407\013\274$\352\006\276\213<_=\252\202\270\274dt\234\275fX\240\274\022\t\346<\032\263\217<\307T\317\275\347$\324\274\333\225+=q\n\037\276i\347\360<q\314\234\275\205\347\255\275\266\225<>\250P\223\274\233~\305=N/v<\320\253\221\275(\007 \274\002\315*=S\343\232\274\210\267\303\275\342\274V\275\035ua<\217\262\024>\035\230\367<\001\016\005<h]->\233\203\027\276\307\343\240<4Y\025>[\3430\275\0268-\275\266\346\327\272\257L\025>\035\270\177\275C\246\233=#s\351<H\272\334\275X%\271=\254\262\021>.\371\203>\033\204\023<MQ\314\275\262\025\336\275Gr\240\275/\355\224=\3624!\276G\313\220=Dr\311\274{wS>\024\324Q\27266\263\275\264\033\242\275\366sT\276i\254\221\275\335\224\266\275\010l\205\275_\235\243<W\021+\276\007f\220<P\224\025\275L\347x=?[\327\275\004(\035<\002P\r>\240\222\002>\t\352\007\275Q\375\345={\030\t\275ND\200\2755\307\030>\236\303\027>\312\236\237\274\320\260\336\274o\330\020\276\301\001\032\274:\341\275\274U\024\255<\301\331\000\275+e\022>R\220\255<\224\277\224=\201\372O;\314\215\354;\025S(\275\003K2=m\234d=\315\212\350;\277C\277\274\004\373\267\274\246\206\021>\"\372\013\275\260\241\317\275\371\215\335;\273(\210\275o}(\2768\251U=\025\222\251=6\336\315={\262\244\275\2507\334=\271X\241=v\304\313=\277\257\225\274\205\226\305\272\r\352\346<\022\036n\275t\321c\275\375\030\035\275r\277\256\2758=\221\275\023\017\263\275gD\207=\262\251\244=\037\275G=\271\275\240=\301\\\274\275\225\372\023\276\273b4\276\273\355\362<\224\243\005\276%!>\276\353\252\266=\022F\230\275\2369~>2=\032>\336\334\222\274\240\370\026=\244C\245\274QK)=5\3045>\346]\357\275\262\376j<\034\333\272=R+\267\275\220e\236\274\032\317\276=P[$\274\3038\363=\200\022\260\275-L\n>\355C(>L\027\315=\264d\350=Hf\242\275G\370\300\274>\035\343\274\270\006\"\275\242Q\215=#\2730<\037\214\234<\374\214\207\275+\327j=\236\273\342<\3344j<f\347\037=\236\025\222<\2152b\274\2469H\274\213s<\275|\356\216=\201\027m\276\347/*=Qu\353\275\225\'\262;\273\177\325\275\301<\005\276i\212\335=\200{{<\223\035y<d\301\347\275\301\315\260=\217S\235\275K\340\242<Qz\310;W\210\363=i\032M=v\357\223=0D\214\274h\2768\276\036\217\030\275\265C\305\275T\3140\274\211\346\202;\226\332\022=f\306\276\275\263m\032>\214\243\326\273\343\245\302\275\375\031\276<#\255\253\275(t\214<\365\000(>a\305\324<s\352m\274\352\254\305\274\264Z\022\275\245\244\002\275\'k\266\2750l3\274\333C\230\275\361\004\331=\204c\033>\326k\347=5?\212=\204Y\035>\370;C\276\322\243\272\275^\365\225\274z\017\007>\333E\007>\002*j\274&L%>P\242\270\275\244\327-=\220\377,\276W\002&>\371\272Y\273\351\2247\274\213$\002\276\t\006\021<\343\366!\276\207\275/=\272}\245=\323\340\373\275\335\220\n\276\344\013\212=\016\275f<\323\373U\275\271\231\350\272\335\216\253=\316\315{\275\000\344\366=\330\316*\275\302\324\266=\003\264\274\275\222 \356=4\254s\275\352N\r\276Ph\273\274h^\252=\330\321H<o\254\211=#\260\030=V\025\354\274\356\232\215\275X\221\335\274\360(\226\275|\255\007>\226p\356\2750\232\376\2746\364\211=\332\'K=\240\360\t\276\274(\341=\314\220\243\275G\212\016=#\345\325\275\271\207~\275\002\2544\274\272\323+>\344w\312\274U\263\333\274\032\r\257=`\3327\276\266\365c<\311\272?=\344\006\017=]KE<\313\2422\274\030\256\343\274G\376\303=\314;\323\274\272b1>\376\022d\275\207uU\276\230!\325\275\307u\r\276\261\371\362=M\232\220\274Q\377\030\276dR\360\275\357\300\252;#:Z\274\367\220\000\276\006\306\302<\007SR;\233Z\360\274Yz\242\275\371\351D<\235\351~\275\346\260\020\276q\216_=\373\306\243\275\356\230\'>\342k0=\366\034\301=\000\224\240\274T0\306=+\2561=?\332Z\272\021\363]=\355g\356=>\372\177>K\253`>Y\005\320=\024u\020<\245\310\025>\240\021\272\2755\357\025=B\014\343\274\023\227\006\275F\271\225=\240\036\030\275\272/\004=\3733\266\275\241T<\276)\377\223=\315!\005>\"\201\337=\335Z\213=\367\221A\2742A\256\275w\375\305\275M%i=\324^C\275t\366`=\001\352S;\230\010\225=\276m\217=\270\351<<\300\010\266\274\2737\321=3n\240=\356,L\275\254\253\341\275\001)s\274|J\235=\257e\277=\272WO\275\312$)\276z?0\276\211\372\177<\"4\342\275T\264\031\276\2654u\275\312\334\262\2754l\353\274\347\265u=>\244\211<\035\2366=\331\242\240\275t\024\307\274\337#\206\275X\233V\275\207:\016\274\252\373\254<-\326#\276\3079\020;~\257\332=\002\223M\276!\252\010>a\315\273<m\272\305=\322\017=\275\tK\251=6\352\332=s\235\021\275\245\025\035>\334\007;\275\302\211\214\2755\222\';\254\031\331<\361S\316=\311N\354\275=?\331=T|\302\275\257\006\005\276\247\212\036\276\234E\221\272W\247B\275Xf\227=\003(\262=\360\210B<\362a\317=\327\247\017<\200L\234<\030z\000=\240\351\337\275\367(\016\276\205\342\261=\255\340\324\275F\244\267\275\242v\025\273\2254\202\275q\337e=XK\033>\017j\033\276\316i\201=\232\225\326:\275\000\375\275\257:\017>\326\035\335\274\347i\252=oB\320=\361^#\275\325\331\014\275\341\225\213\275\317p\243=]\332\300\274\373ql\2759\317\312\275\337\177#>\313\026\014\276\366\272\325<\246\331\251\275\022\344\257=oRj\274\356\033%\276`\312\037\273\"\'r=\356\000<<\036\271w=\0256j\272g\264\014\275]\254\032>\362c\366\274\234S\311\274\210\231\026=\270\372\234=\370u\373\274\022\314\367;\346\r\343;xw\320\273\377`(=\275\232\212=\210\355=\274\273s\222\274}W\027\275\232\250\360:u\374\016\276\334i\177=\366\361\035\274ac*=\273\315\362<\232\255\237\275\224\206Y:\005\023g>h\302\316\272\237\001d\275t\362\\\274\3078J\274~\316\035;\2700\002\276H\017\263\275\333qj=\364q\\\276-\365\260<\035\214\007\276\363\005\030\274\227\007\330\275n\370-\276\247W==\266}\307<\264\020Q=\377\317A\276\335\232\261=`\322\375=O-/=\020(\024>\303C\022>\027\263b\276;@\202\275e\325\216\276\206\326\217=\270\241M<\303L(\274\244\335O\274)\210\034\275Y\210w=\370U\001\2760v\360\275\361\1775\274\204\265D\276\257NG\275\264Rs\275D]\206=\253s\207\275\010B\375\275\227\314\257=4V\003>\3517\342=\214\310_\275\374\216y\275#\250\345\274@{Z<\000^\224=~;\032<\263\0368>\252\240\027>\257\317\212<\273\\\221\275\032\222W=\220p\242=\355\t\271\273\037\244\317\275D\014n=F\352\326\275~\317\270=2^\036>S\214\345=\364{-=58<\274\320\346N>\016|\264\275\240$\204<\332+`;Zmh\275\023\372\304\274\251\031\231<$\362\357\272\344\000\213=\325)\355=\305\003\211=*\332\242<\374\240\361=\3433\363<i\212\210<\370\021\310\275\215S\213=\014\212\207\275H,\267\275\371\021$>\024\374\336< \353\261=\240_\023<K\263<;\246\352S\274\212\036\001\276M`\\\274G%\310\275\357\301\277\275\357[\224=Y$\000\276U% \275a\327\355\275`\033\327=\027\021\034=\250\276\006\276\027\271=\273\nC_<O~;>r\037O\275\213\346<;M\232\023\275\376\246Z\275\245\177x\275u\334Z\275\322\301\244\275|\001\002\275\2402\253=\317]j;\274%\">\201c\006=j\000\242\275H\203\306=qhL\276\277\233\006<\3049\275\275\333\247C>\355\r?=\024\267w=\214\177\347\274\214\037\352=\227\350\252\2759\216\301=\217t\336=e\247\246<\307\302M\273\203\007(=L>\202\2753kz=L\310\216\2750B\317\275\316!d>^\350w=\0303r<~\367\215\275[\310\350\273w\207\266\275\177\344\330=\344\263\007\276\000W\327<\200\214\340\273p\374&<\316\270\354=\255{\307=\362=\017=\251<P;\024=\026>\344 \247=r8\021\275\240\252\204\274\274A\352;\340C\253=\246\007?=C\341\010\276\321\232\235\275^\231\266\274\330\347/=W=\025\276p\310\217=\236\331\302\275?\356\000>r\242\n\276\256\340\027\274\274\014;=F\266\001=E/]\275o\307\374=\212\372G\274/&\251\275\225`\242\273\237j\256\275\322\002\200\275\006\021\220\275\274\326\250\275\224\266\026\276\202*\250\275\364\235\202\275<@*=\201E\361\274`TX\276\365\207\235\275\233\352\177\276\355*\350<y:\317=\210\025\302<[\"C\276q\314p>+\022\263\272\275.\327\274\345\206\350<\014E\212=\"\211$>HB_=\220d\337<6\236\262=\036\335\014=\0322$\275\240l\\=\274\363\010=A\226\027<L\226\333<\013\035\260<x\324k=^\241\007<\021=\031=\334\246@\276?.\355=\253H\001=\335g\263=\352\311y\275\212\313\266\275z\340H=\254\001\253=M$ >\n\267~\275\306\300\355\275\224E\023>$\363\231=\213\022\276<I\335\265\274[T\005>\257t\221=5Q\243\274fL1>\240\277\000\276\302\365\213\275H\245\260\275\275\321\303<\364\242,\275>\275\325=\\-\\\275\261\252\\=Y6\271=\205\335\017>\357\026&=y\210\240\275\264\010I<\032\271\'<0!\227\275\245\003;\2753\" \275[\023j\274\032E\016\276\213.\253=\274\313\357\272\252\205\023\276\227\361\251=L\323\000=\270\001\372\274%X\224=)\300\r\276\347\336B\275\200\273*\276\214\314\217=\260\216Q\276\211]}<\304\237\313\274\306f\201=\225\0341>\031\266\344=\371\216\372<\357\310\355\275\324\260\020\276\337\260\240<\252\302\014\276V\241K\275w\242f<(\234\260\274\r\342\037\275]/-\276\\\343%\276\\\222/<\321]\266<\277\232E=\251\361\271\275\365x0>\357\265V<\206I\n\275\240\n_<\202\226\324\273\030Y\202\274\251\303$>\321K\313=8\362\321\274Z\263*\275\tS\032=[\263g\275&BO\2765\r\313=j4L=y\021:\275\235C\236\275\370\222\353\275Lu&=\020u2=\310a>\275\341\301\321=\021\363C=\r\002)\275\326\253D\274\207\\\262\275{\3376>\343\n|\275\223\251\227>Y\203\327\274\253\341\345\275\0012\212<I\207%=P\301\331=6\243G\275\265O\335\272`1\\<-5\270\274_\253\263=\270Gn\276\240U\263\274\275\225\351\275<\303\032\276\341_\3139i\200\200=3B\347\275<v\254\275\n,\001=\304\007\n=87\246\275\231\003\336<\030\267\206\273\272\215\312<\251a\373=\355\005\002\275\002[\023\275\203v\027>\211m\243=gx\300<\347\336\300=\265+\250\274m\223\255\275\r\207\251=\274\237\324<\021\231U>\001bO\275\200\255\035=_g\221\275\370\367\351=cA\235=\353\203\245<\232D\271\275\211\247\317<]\230\304\274AQ\261\275\004\024\313\274\310\312z=\202d\031\276q\335\324\275\n1[=u\252M=(\273L=\221\231\201>h\322\224\274\036\373\200\275\216\'\213\275Qo\201\275\240\342\t;\212\3139>B&\252=3\343_\276i\343\210=a\030\216=\013\031!=\331\231\207=\207\340b>8\001\000>\r\021\310=\032K\025;\276\027\032\276:k\262=a\325\366\274\317y\301;a\231}\275\203H\031>\t\337\306\275b\221\346\274\265\336!\276\254\360\245\275b\314{=\224~\207=\370\246\350\274\375\235@\274w\301M>X\242\262\275\230~\330\2758{\237\275\034\263U\275\333v\024\276\355_\225=4\311w\2759\313\025\275\242\213\025\275\3465\234\275\275\031\247\275k\275\245<\n\224\271\275\252\034\376\274\235\206\276\275+\246I\275\033\340\247\274\2503\242;#\247\363=\264\231\267\275\254\216\274<u\014\t\274\224\003\215<\225&\363\2721#\330=\360\030\340\275\017\007\367\275\313\311U;\233N\274=\376\257\243\275\010\245\344\275\301\035\321\275\301\004\034>\272\001\213\275\353\242\241\275\323\177V\273o?\213=\037\367\211\2754_\326=\200\201\322\275HC\002=\004\0365\275\211x{>\030\317\t\275X\236\031=\221\341\267\275X\2357\276\261\0068\275\276\016\351=\271\344\300<\201\031\313\274\216\267\275=Bs\370=<f\314<\353h\321\275t\311\007\275\266\211A>\"\027Z\274\304\245I\276\251G\307=\333\330\221\275L\214_\273\346\304\n<\314r@=\236\232\213\276K\3278=2@\302\273\371\236\235:0\032G\275M\325\007>-\222\003\276=\233\037=_5\013\275\3460T\274\360\002\r=\205\376\331<\020\275B=&V\007>\'Z\251\276\304\251\200\2756\236\366=\022O\r>yJ\254=A\330 =\0147\204\275d\035.>\240\344U\275\347\212\265\274E\363\250=C\014\232\275o\310\326\274U\206\240<\363\340\213\275*\206\333\275\366\364\344=\327\257\220=#O\027\275\232s\204\273-\225\271\275u\357\375=h\326\300=\250R\033\275j\t!\276!\014\351=O\273i>\255\364x\274\214\025\326=,\231\021=\343\232|\275\341\366D=\265\315\315\275\016\324\n>\032\1773=Om\210<\177$\333\272T\301\252\275\24798\275\200Jh=q^I;\234\351_\274\025\271\274;\026\275R<M\356\017\275\251I\236\274\207y\266<\317\030\302=\200\267\316\274J\350@<\253<\362\275\243A\330=bu\337\273d\307K=5\'w\273\005\360^\275\347\266~\274L\235\034\276\326\316 >\303\025u=\376\361\301\274_e\036\275\260\276\205\274\307PW\274\030\216\221=;[\206\275p\231\207=\255\306T\275\235~i;\202\032H<\313j]\274\023t\264<\035r\336\273C*\244\275\240\031E<\363\310O=\242\251\"\274\302@\224\273\037\270w=\t\343\377<r*l\276v\335\037\275c\"\261=A\260\231\274\346\347\254<\000|&\276\202\010\364<\2478\206\273\"\344\273\275\003\335\327=\222\375\357\273\320P\334\275\261\323\203\275\264A\237=\346\330\321\273\214\246O\276\0058\310\274\343Nm\275\270#\227<0h\020\275:\235\251\275M\2377\276\207\221a>\034\3206>\000\005\266<L\223C\275\233;\333<\322\213e\276\031\007\244=\230\276\227=BcC>|\265\312;\0243\031\275\217\216\253\275T\010\224=\017\213\035\275Qy\314<;\305y\275\254\316\246\275\230\225\237=w?\004>\262/6\275\003\002_\275%\244\226<\315\310\205;\347\340\356;g\352\025=#\032\324<\231\244\236=r\304\312;\026\354\255\275\2015~\274K}\026\276#\356\237=\344]\003\275]v\026\2750S,=s\202g=&\033\223<\346lZ<\352n\241\272\326\251\215\275\362\316\306\273\244W\243\275\373\225\236\274\225\247\323\274\215\001V>3[\210\273\276r\207\275\310\346\235\273U\007\351=!<\026=w\330N=\314\363\214=\n\0240>Gi\351\274\267,\";\317\027\302<x\326\250\275\354\335l\274\350\223\336\275\214\020:\275\026\313#\276I\026L\275\004\200#<\312\330*\276\347\245\311=\360\335\204<|1\245\275\336h]\275 g\003\276|\203\205\275\357\372\260=\006\212\301\275\246\360\207\275ok\223\275\n\273\305\275B\\8>\016\341\221\2751\331\303;\227\235\033>\363\010\034>\370\333\'\276\336\2433:\003\262;=\236\241\322\275j\364\274=\024\3363\275\024\241\255\275\350\r\030\275X\330\036>\306\363\310\275V\212\277\275\271\227\253\274\323\327\224=\300\005\266\275#[\356\275\316@L=T\271\024\2764y\274\275\203\013\266\275\3106`<\022\226\'=;\345H\2769\221w;\020K\316<K\302\216\275r\\\374\274t\266\366\275\207\262\025=\262>,>\326\205l\273\177\034\237\275\017\247d\274\330lb\275\227\035\233;\337\303\234=\277w\310\275\277\230X\275\216z\335=\3175\354\274\345/\315\274Dv\330=\351\202\253=\220*\373==\346\344\275\030\274\227<^@s=8x!>[\344\201\275I\177\352<\033\002<=\000|?\274,\333j\275\203\225\034=\036\265\327=\214\026\024\275\021\021\367=i}\n\276\212\021\376\2757\014\223\274D\336\017=I-\354\274\235\324\243\273aQ\374\275\324\034\207;e\2122=\273\304\367=\337-\010\274\t~\342<g\256\217\275\264T\222\272\367\245\247\274\016\226j=Dq!>\251\357\026<\027\250\235=\322\250\020=!B\005>\004\310\006\275v\376\222\275N/n=\004\332\"\276\274\263\245=$\036\372;\315\271:\275\300Aw\273\363\374\313\274|}\254;u>\022>Ir\253\274U\353Q<\00662>\242\345J\276\315\014<\276\360\315H=\017\375\235\275\225>\245\2750\253\307=\330\025T\273\013\216\034=\023\324\253=b[\003\276\230\360\270\275\354\343\240=$\371j;\265\316\004>S\224\357\274\264!\001\276H\323\250\275\266\226\364\275\013Hz>g9\354\275\251p\263\274X\314i\2755\246\242\275\354d>=\226\263\363\2750\200\215\275\257\364\344;* ;\276Od\032=\262\003\250\275\205\352\233=;\221J\276\310\036\025\275\340\231\027\276\337;\274=\204\026S=\200\272\333;\234\210\001=\\\325\353=n\357\215=4\tv\275`\033\035>=\\\246=\310\272v\275\311C\037\276\003\325\266\274\253=\235\273\260\240\250\275\365\344\202\276\226bM=Wl\030=\245\371\030>\020\212\001=\223\245\204\275\305\333\215=\205\344\312;\234\345\033=2\002\367\275\306l\316\275\036R\207\275*/K\275\024#\033\276\322P\200\2751\255\234=\337V\020>\351\261\342\275r\n\334=\276\007\371<\303\224#\276f\010\224=\340\356\365\273\rf\347<\001\351\336<.\275f=\274KP\275\343\003\201=5\010\366<t\253\365= \343\244<\355\214\256=8@\340\275L\306\004\275\026\363=\276\244T\027=\356`\352\275=\006\241=_\241\016\275p=\360\274\025^\021>\307?\377<2\351\020\275\036\224,=\274\n8\274\356d\025=:\3325>\311>\277<\302\353\306\275\327W\236=\314O\031\276q\020\211=\203Q\370={Y\001:\346!;=\265t4=\240JU\275\211\363T>B\325\006\276n\317\301\275\002!\263=\221\021\200\275~P%\275\304b\213=\357%\263<Hx\007>\222o\210\275[\264Z\274{\210\243=\020\327-=<\353\r>\332\027\357\275@~\340\272>x\004\275C\352\222=dD_<*\375\202=\233\"\236\275\237\\\221\275V\237\255=\307\302\036=\366:+;j\247\361=O\201p\275\211rX\276\245}a\275\375l\334=0\252-\275\221\361?=\200\330\223=\257\243*=\t7\334=\254\350\230\271E\376q\274\345\306[>+\220I<\333\007n\276lX\000=\032\001\010>\221\236\014=\030h\270\274\004)\214=\310\375X\276\0172\231=3O\233=\215\254*\274L\366P<\r\014\257<$\261[\275\245\n\373\275\353\323\200\275\221\243J\275\327\362\367\274\037\013\251<\241\354\254\275\351i_=<>Q\274\020\007\233=\377/\022\276\216\\\363=IQ\343\275\216Jd<\201dc>C\006T\274\207\211\357\273\0107!\272\275\n\202<\250<\207>Bx\262=<\300\374;}x\231\274\311\272N\276\372?\000=i\346/>\3314\261<\242\211\275=\320\376B=]\032\206;Xz\303<\304\223\021>HZ\234=\025\214E<\305\023D>C3k=\363\350\220\274\352\334\000>c\261\321<\334\231\253=\250\244C>\237&5\273\315\342\210=gv\313\274dn\000\276\204\010\241=>\240\212<\177\207Z\275-A\016\275\211\313+\276\005\233\326;ml\247\275\363on\275-\014\036>\200U-;1V\253;I\224^<\2744H\275\340\265=\274\366j\220\2745zo<q\\\331=\375\027.=5\023\231=]f\233\272\3438\371<\346\367#\274\267D\354\275$^\2349\324e\027\276\366\344\263\275\217\327\204=\237\020\243=\367\335\241=\202\014\031\275\300@\000>\005$\252=\003\364\201\275=\210\013\275!\331\361=\333\'\216=I\346(\276\"r\243=\327y\334\275\334\314\021\276\024{\025=\303Q/\275\302\236\224\275\327\330P\274\3266c\276\376\337\340\274s\271\272\274\306\237S\275\\\241X\275\251\276\351=\273\301K=\224\211\251\273\032{y;~\301\200\275MsQ\275\231\365\203=*\243G=\351\210\214\275\311\203\341<\t\220^=4\347\240=\017+\'\276\225\212\023\276\000\330\226\275\334R\210\271\n53\276\001Rz\274-\334\005\276lU\226\275jq\014\276\236a\007>\312!q\275Xv\233\275\345\275\356\275\r\354\271\275I\364\300\273e4\310\273\324|\335=\321\371q\275\310\020\010\276\333;1\2746\202\027>\207\343.\276\261\"\007\276\'H4\276U\252\335\274q7\244\274\361\265<\274\"cb\275\305\227\212=\322\255\010\275\334\206\316=\022\250\204\275\340\223\342\275\332>\002\276Ke\375\275\270\354\004>>v\257\275\273\232\346\275\372\267\237=\315\003\255\275\210\031X\274\021A\240\275\001\331\272\274\315\3573>>\034\332\275\314u\030>\370\013\002<}\362#\275`S\005\276_z\260\272\247n\036\276iK|=U\027\315\274\325\363\211\275\334Y\211=\325\t\275\275\006\375\237=\337\241\363<\357\350t\275\306K\350\273\001:s\2759\270\023<}3\220;)\343\030\2720\261\223\275O\200\001\276h\346%>2,\350\275[\255\312=\210\024\247\273x\253\036=\217\002\022>Z\274T<!\217\302=\351\320u=\236!\234\275\241\220\026>Y\221\021=\036p6\276\376vz\274\022yX\275\223>-<\326\317\363=\241Y]>Z\276\200\275\231\007\217=G\273\201\275U\211\301;Y5\227=G\'\250=\244S\235\275\262\031\304\275\220o\232\275j\306b=M\267\245\274\035\244\257<\364m|\273\315S\243\2750\237A\274\236\004\271<\232\345p\275\024\255q<\215IS\274\023Q\363\275\206\321k>\202\371V\275\013\335\016\275g\303\242=\200\317\'\275\251Z\032\274\177\017\326<\371\214\016>\254\343\377=\265#M\275\223\372\340\275\027v\211=\034\007\216=&\361\212<\211{\206<>T\254<\323d\311\273=Y4\2758\277\013>\n\t?\275\311\372c\2752T\327<\334\233\236\275v\205\233\274\240\326\313\275j7E>\364\200\330<2\311\026>\177\334\323\274\240\032\251=\236|\034=\346G\351=[\206&>:w\037\276p\252\222\275\375\315;=\266-\344\275q\177i>)1\222=aJ#\276\3765\255\274\267~\213=Ti\032\276\001=\026<\371M\240=1\303\213<\025\031\241\275\031,\204;n\265+\276\220\204\231=\364\307d=F\377*\275\300\342\303<\226\343\t\2758\016\241\274\306\317\212\274\276\301h\274\243{L\276R{6=\202\244 >\267\250\027\276\210\232\363\273KL\024\275f\220\244=\244qI=\237$\333=\352\034a\274O\214I={6\271\275\343\030\002\275\331\2120\275C\257h\275W\201\316\273@Pi<\221\245\027\272\315F\262=y\222\331=\202:v<Ou\227\275\364\335\227\274\362\206h=\316\242\244=\272R\327=26\006\274\304\364\211\275\276\034\244<\n\035\257=\025\243]\275\242\t\236\275|\222\253\275\353\334\363\275s\014\306\275h^/=\024%S\275\324\263\272=\364U\006\276\251\240\243\275\370\362\274=\247T\225\275\005+\326\272\244`\003>\r\363\261\275\327\330\217=\031\346=\275\211U\374\2753\373\376<\357\362\026>\035\226\360\275\331\3640\275\330\271\003\274\016y\034\275`C\030>f\215\256\274Ca\322\272\376\026,\274>\017]\276@\016\036>\317J\274\275\307\366\204\274\300\213\'=q\377\226<b\"/\276\312\225\373\275NF\223\275\344\3543\276l\356\036\276\372?\233\274Y\2679\275U3w\275\377\305\252=D&\300\274\244U.=\242\217\034>\214\246\241\275\326\264K<\323\212=>\351\306\327<\023\311\243=l\025\303\275jE\377=\3538\020\276\2240\\\274=@\304\275\317\306\237=S\310\007>}\022\354=\353\316,>\030d\214<@\027\030\2762%\201<\364a\026\276\372\003H\276\265L\365\274\350\323\225\2754O\024>\221\232\311=\320T\220\275z\231\316\275bE`\275\342\362\037\276\201V\205\275P\341\375\271\224OW\275\361\247o=_\373\221=&#\036\275\265\026\372\275v\276\244\275\244\370\271\273&\242\207=\211D\031>\252HN\276n$\205\275DP9<\236\274\321\275\031\2404=\324\205\310\274\033\235\226\274\264\017\274=k\023\377=\036\230@<\261\024\326\275\365\335\265\275\364\303d\275)\372\341\274\207b\">4q\007;\240\226\376<\276\034\225=d{\357<\271a==\316\262W\275\242\271\217\275\2552\000\276\272\227\235=\373\224I\275\342W5\275Z\215\333=\237\307\333=\005C\016>\211+\204\275\220L\032=\023\nS\273B\316\001>\340QI>\234\247#=\315h_\274\373\275\007>\0251s\276.T\232\275\027\315\001=\342i\202\275\255+\220\275\0355\361\275\370v1\275E\350(><\366\234==\341 \275\356It;\023W\331\275\\fK<\2152\242=,\001\305:6.T=\336*f=\213\220\n>\334\326+\276\370\305\333=\243\244\227=U\001\212=\373{\013<2\223f\275\216\"0=]h\226\275\377HP=\207\222H\275\324\014B<t\032\341=\312n\322=\222\324\313=\r\256J\275\234\251\353\275k6\342\275\312\2143\276\275\277\234<\250\376\024\276T\202\\<\t\352\210=\225\206\032>\337\340\357\273M\272\000\276\005\3462=y\336\261=\370\353\213=:U\236=O\254R\276\354Tb=\277m\001\276:D\202\275\025+\263\275;\002\334\275e\033\037\275\2473\255\275xr\221=\307-9\273S\n\016\276\247a\242\274\374\0364>\216\026\217\274c\240g=cm\365<)_\\\275\345\3433\275\267i\376=\001\203!\275\230U\245\275\026\225\021=f?K=\214\021\000\275\002#\365\275\006\310\336=\023\376-\275\311v\036\276\337\033\254=\242\337\203=\320\272u<&q\231;\274\005\333=\363\212\324;G\250j\275R=\273\274\201\2459=ha\243=\205\342q\274\305.\000<8\030\234<\351\345o=+\026\353\274}L\243>\307\366t=\037Y\231=\030/\325=A\352\335\275\314\365z=]\034\245\275>\245\302=\202\003L\276\242\305\017>(l\216=V\350\005\276\321\206L\274\205\254\234\272)\234\350\275\347\3326\273\321zY=\000(\344\275c\310k\275\313\326\273=?@\303\274\221FV=\373\035\275\275\226L\021>\001\236?\276`\374A\275\322\305O=\352A\215=(\264o>\013:\374=\237\373]<\250\200\233\275\344*T\274\325\356=\275\234\263\035\276?\301\205=[x\353\275\020k=\276p\024y\275 \016\263\274\244<e<\227D\241<\364\206\013>z\304\031;\327\371n\274L\315p\275\031\272\303<\241\034\232=0\016\242=\362\324\257=\233\002\374=\345N:>\262gD=t}0\275e]\001\276\021\330\027\274\304\370\217\274\351X\316=\343%`=`H+\276ET\261\275\211\276\213\275\265\177\t\276_h\304\272C\271\344=\256i\300:\261\330@\274(\262\027=\311z\236\275\206\361G==\205\374=\337v(\275\250\t!\275J\2774>vQ\203=\373j\'\276\326\234\305=\004*\003\275\310\202\033\276kI\323=\002\235l;\322}\214<\370\300\252<\363V\241\275\\\237\357=\017~%<\351\275p<\302o\236=\"\306\325\274\336\255\273\275\256\201\212=\014[\001\276\366l\253=89g=\267\3768\2755\013\237\275\373!\t=HK\000\276\201\221\201=\003_R\275\324\002\235\274\240\373\217=6\033\000\276\200\214\205\275<K\t:\027\251\213=\263\200\217\275\216<_=z1\223\275\207f\211\275tlP=\206F\272=\270e\266=~\365\037\275\343e\252=\371\3508\276\241H\034\274\374\364!>]\004\262<\240\364\267=\270\3036>A\205\315=(\300\036\276\013YT=\306\256\305<\247S[=\017\026\224=>\336\211\275\'r\353<y4\2719\034\351\214<\344\366\242=C_\273=\034\243N<^\311U\273\022H\320\275\000ZZ>\273\'\271=\201\300\322=\2052\016=\310\244\235\274\352e\275<\nx\227=\346qN\274\221b\016>\204\332\357\274\252\361\266\274E\250\317=0\014\253\275\027x\242\275\t\243`>\321\033\343=\027M\273=\177\177\336<\242N\272\275\3266\222<\303+\266<9\257\322;O:x>\257\2579>\016\231\010>X\006H<\336\006\250=@\250\023=\315\377\260\274\266\220\001=;\364L\274 :k=\351?\t\275\332Q5\274\356\203u\273%X5\274\260^\246\275MV\003=m\200\363\275\246\025\307\274\374\to\274)[\211\276%\375A<\302\314\274\27510\233<+\330 \275OR7<\227\265\035>|\rA\275x\235l\275K\373\260=\317\362\025\275\377\2166=r\023\326=\234+\251=L/\343=\337\207\363;h^\242\275(5\030\276\004\244\037\276\230\303\245=\001>\233\274\216n\251\275\363\224\010\275\021\204\251\273\263\314\333\275B>)>\t\355\016\275#`\224={\337\000=G\035\254=\035\271];\252\177\224<\026\327\230\274\023\3101\275,\324\006>9~\335;\223]\215=\374\366P;\227\365!=\263\023\307=\213\274\221\275\336n\022=\200\354\001>b\300B>F#\217\274\245,8\276I\225\214=0\303\277\275\214\370\363\275\r\026\001\276\243oB\275\0248\240=\3533Y\275\335\353\303<\275\0039\275>/-\276\274f#\275\033\364\t>KM/>4\305\025=\213I\317<Y\200k=\266\207\023\276:\315\336\275\027b\221\275a\376\311\275\021=\024\2758j|\275\322\021H\275t4\200\2756m\242<\277@/=\276\000\346\275zo\025>V\341\204=J\301\255<i\331V>:&\235\275\334\353\304\275r\252A\27463\315\275\031\274\301\275\222\240\r>\004\366d<\013\245.\275\375\002\206\275\351\"F\275{\251C=\021\327\336= ;c=\252\032\317\275C\213\237\275/\373\000>\361\263Q\275\223\256\037\276\312\366Z=\033R\016>+\220$\276\237j\267<t\177\270\275\210\024\260\274\356R,=\231W\212\275\235\212\252\271\3163\001=\344;i=\357\340\266\2740iG=\007\344\247\275R\232\021\275\265\3637=M\257\263\2752\360\241\275\031v\272<e\207\305\274O<\300=A\023\336=\330\352\301<5k\235=M\032\034\276S68\276\213\252\n>\007L\273=\036\202o\275\223\200\270\275\346\315\035\276\305A\034=i\023\035=<k\223=e\323Q:\002\276\303<Ay7\274\202\323\213=\320r\023>\350\334\265<q\2269=\205u\274\275\337\340\244\274\201U\000>\014\005\017\274d\016\356=\024\302\206\275\216\007~\275;-3\275P\003J\275\357\247\221\275\373\']>|m\324=p\037Z\276@f\201=\372\246\007>O:\336=\336\341\202=\204\027\027\275\201ev\274\326\036$\276\240B\320=\350\264\275<%\035B\275@\010\007>\346\362e\274\034jF>\372\322\210<\255\273\377:\260\314\034\276W\212\266\2751\302\210\275\323\265\257=\267\r\265\275\025\334&=\370\226\276\272\315\235F<\263\374\356\275mn\272\275_\r\312\275J\236$>\346\266\302<UC\264\274h\365\001\275[\333\303<\216\335\370=R\237a\275jp|<\014rn\276\226\326\266=\304H\'=jp\007=\351\221\232=\034\213\031\275\302\030\305\275\377z,\275\205C\326\274|\307\277\275\223\250\033\276\317nA\276\351=\312=<a\263\275\004\340=\276\332o\353=\216\347\361\274\204\365\355=o\272\007=w\262k=1G\221;\372oR>\t,\260\275\026\245\'=\364\225\317\274\271|\211\275W@\220\273\317\211J\276\"\233\n>5\210\301\274\246\274\310<D\373\310\274\317\341<<\276%\002>\365<\201\2750\265\220=\256\016\376\275\241)h\275\326W\014=ga\265<\256\234\352\274\334\224\222=:|\347\275U\321\274\275\204\217U=\260\206\"\275Jh\032\276c\247\004>\315\266T\273\217]\217;k\365\310\275\000\021\224\275\367\013T\275\342a\246=3\034S\274\023\267\311<up\230\2756t\261\274\376\031N=\300n\304\274!\311#>\324>\231\275\330e\r\275<A\224:\327\026\201\274KS]\275w\265\340\275\244\275\177<H\337)=\210tE\275\004\0345>\300\244,>\026\323\307<8s\307<\365\352)\276okx=\320<\314\275\266\225l\275\360#Z=2\370\204=\246@\037\2764\336\336;\201\322R\275\250<(\276>o\004<i\350\205<l\317\340\275\371c\360\273\232\246*\276\211\217q<o\335\r=R\265\342=\243\034F\275\300i\347=0\364\375=e\004\343=\3027u\274mx\373\275\247\312\366<\311\221X\276\212\372\341\275\225\0318;WB?\275\005g7<\344w\037=\202\001\016=\312 )\276\342\317\032>`\355\202;Y;I\274Y\353]\274\212\345\263\275m\234\203<\233\345\207\274\303$\210=dTK\275Xr\210\275\026\234M\275M\3658\276P\371\007=by\002\2712\255\374=>\224W=.\351\273;\007\275\010=\204\3032\274\'?`\275\237\333r\275\301\206\376:%\234\314<\303\257\374\275\357J\247=\346\305\357;\232\323\032>G\224\267=\321a\233\275]\373]=\346?\201\274\376\212\022\275\331\276\345=e\255b\275]_\265=\314\256\340=\025\314L\275\266\245O=\273nM\276\343\003\271\274\312\317\321=\0065\306=\031\014\211\275,_\031\276)O\260\274\333\t\002>\023\221c=\021a9>\244\350T=\253\365\031=x1\033>\305\3273<c\370K\274-\332\033\276]\240\301=\235\026\203\275\377\342(\276\346\253\354=\236\331\247<T\317\034<\256\256I=\363S\206<\037\217\321\274$>\032\274\373\254\177>g\021\004<o\247\274\275\250\365k\276\243r\212<Z5.<\302\306D\276\246\346E\276\034\201\212=\273\004\034\273\212\362\320\275\311\016c\275\240H1=\242T\245\275\003\273\000\2767\302N\275\371\314\037=\343\253^<\376\364\362\274TmQ\275\003\232\231\274\002\242c;vo\023=\361!R=\347\004]=3\323.<1\034\312=b\243\232\274m\026V\274\252\351\020=%\267\274\275\303\343d<o\222\311=sT,>\346o\014<\265\256\020>\016\250h\275\032%\263=n\254\260=\n\322\317=\317\255\351<\364\277\341=V\250\007=-y\341\274\313B\341\275FS\303\275\275d\306\275\022\341\366=\222\300\263\275\307~.\276\373\341\211=\316\205\207=A\r\340=O\332Z>8\356Z==\271\361=t\230\234\275\300i\371\274\027w\305=\274\276V=\223-T>\005\236\307<\250\226*\2758\035\242<&7c\275\030\223\307\275S\346\302=\326\375\335=\346\330\247\274\267\301V\276SvV\2741\n\r\276\322s==\364\201\271=7\032#\275\022\035\220\275!>\240\275V\234\224\275 [T=\334\255\027\276+|q\275 \016\305\275\373\250\253=\034\254\336\275\240\355\261\275\355\245h>\3126\256\273\017\032\264\274\006\r\213\275\300\027*\275\021\333\315=\354\013\240=\241\224h\275\241]\203\274\246n\374\2743Z\005\275^\203\307\275\203C7=\206v\335=D\037\301<\372\327\222\275\310$5\275\026\356\357\271R\335Y>\366QO=*f\245=\027\247\256\275\212\337\007\276\377\273\325\275\021\334>=\316\373\211=m\026\343=qN\357=\013\306T=4\2779=^2\005\276\2159\343<.\254\026;;\277\265=\004\205\247\275\364\360\207=\347\350\030>\350[\362\274\330\332q>\034l\253\275\347\244\261\275\273s\022\2761\205z\275T\232\014>9\226\263;\262\350\346\274\033 \207<\221\235]\274\032\013,=:\353S\272\270\376\244<\264^\t\275\220\213;\275\214\376&<\232f\244\274\333\374,\276Yx\377\274t\020\376;;\215\031\275\275\335\263\274\242\323\277<\332\206\211\2760L\307\275\200M\220=\204\016\267\275\327\234<=a\037<>\334H\r=\026\351h=p\334H;\007\t\242\272J\352}\275v\206\356=\203\026\013=\365\270\220=\351\301\273\275\311G \274\365<\253=\230\252\263\274K>E\2769\\\026>E\256J=\251M\201\275\033\024\025\275Ba\243\275\322\360\276=K#\262=e7$;\376\220$\276\016\240\202\275\016VD\275\366e\256;\025\212\260\275\205\326)>I\021H=$=\303=\025\234\220\273\033}=\275g9\263=\360U\315=t_9<\256\023%\274\032\264\240\275\344O\327\275\351\205\252\275\355$\016\275\001~@=\030\361B\275\331*\004\276\250\273C>\261\336\350;\202&\210\275a\032f\274b\223\345;\017\216<>Y\013Z\274\'\322\202=\357\301\030;\320\314\010\276\211N\226\272\226\021\350\275\216\013\260=\306\315\232\275\226\362\313\275\267\022&\276`\271\224\275\216\310\004=Nc\314=\376\243\250=\211O<=\2610S\275\260\010\253=7\336\270<qEE\2736[\216\275\206\024\267<\276\352\211;3_\320=!\356\212\272}\231\203\272h\215\346\275\354\367\340\275\322\016(>T\234i=Bv\026>Kt\032>\nv\001\276\'\202\032\275\337\007\007<\356\266\330=C\002A<\275}\314\274\321\312\020=[\212\301\2753>\256\273\260<\275=\211\375\251<\324\273\007\276`\"\005>\263\337J\276\340*X=9b\342\275Q:f\275:X3\276\272\310\001\276\324\305\330<VX\216\275\335\255\033\274\031\350\022=\224\300w\275\tr\247\275\257\326\t\276[8\364=\001m\000\276\311\212\255\271j\247\r>|.\034\275|\225\233\274\267\364\010>\201\200&>c\3366\276#m\214\275\217}\212\275\222o\021=\262\300==\016\266a>\336\3046\275\355\323\n;\274/\202;A^\350\274w\234\347=nZ\303\275\034*E\275K\327\000\275<\204>=\007\227\305=`\024H=\260~c>\3267p=\2214\010\275\335\254\305\275\013\351A\275B\344i<\003\273\256<F\343\021>\262\356\240=\030\372\t>\006\025\277\273Fl\343\2759-\222\272\036\n\022=\376kM\274\366\231\224\275\205d\203=P\202J>\203\267?\275\241\270\t>\005\2042\275\211\344\237=\037lY>x1\032>\2771\365=(t\036\276$pz\2756\302o\274\241\231\300\275\357\342\020\275\240\220M;!\345\005\274\2160\246\275\007\242\321\274m\272\303;NE\253=S\036|\276\204\353\000\275\036\362\221<@\361\322<\225C\3619\263=\027;\350\253B=\375K\320=\235\267/>\rR\250\275P\217\255\275e\021\214<K5\005\275\220QT\273\361h\035>U\320\255<\304\312\223=\211\223== \262N=\261 T=R,\313:iZ\003\275\366M\241= \315c=\177\326\t<\000@\337<f\014\003<\234\363\\=\326\020\223>\244Xv\275\214\023\305<\215\034\035=\237\373[<\306\200\262\273\327\326,=xO>=\017\341\376\274\352k\225=\371\375\304=vt(>\271nn=\337\211B=3\356\030\275\017C\204; R!\275\242\2770<\225S\270=[\027\004\276\350\246z=q?\274\275]t\376\274\357l*\276^\202\264\275\213sw>\332\341\014\2765\226d=\314\016\321=\200]#\274\231d/:\267\217\300\275\001i\275\275\242/F>\345\365\304\274\014\301\360\275\223\210\233=\252\231\276\274\335\2254\275)k\225\275\n\r\223=|~\356\275\206\330E=z\365t\275\217\257\306\274\254\344%=<\200?\276)\337\352\275\021\267\355=\360\307\261\274H\360\203:\315\254\023>i\003\010=B\247\030>\243\241\275\274\337;\217=`\253\202<\021\220\211\275\356\030\224\275cr\336=\213\344g=U?\241=\260\035\277\274\010\343\303=\330W\351\275x\034\t\276\034\271P=\340\325J=\351\300\260<\232\034\332=\210\243\350\275\235k\215\272Yz\002\276\255\2348<\252\\\255\274\274\266\256<\331\365\267=g}\202\275\330U\233=\343\360\003\276\223\266\000\275\021\022\362\274N\t\330=\301\031\277<\206HR;\223\027\214=\2100\200\275y\365\201\276-m\232\275 \351\313\274\360+5=\301Q\027=2\002\362\274H)%\2751:#=\240\202\226=\034b\214\275\014\373@>\351\2606:\342\262\212=Y\270%>\267\214\036>\350\256\342=j\307\361<\014\223\'\2744\034\325=\031\352\315\274\010lJ\276\025Gs\275\360\240\036>\240k\313=\213\233i>\032\316\233\275\244\232\337<2\261\240\275)K\030\275\367\341\210=\330\252\336\275\004\010`=\244(z<V\\\272=\225q:\274C,\r\2753*\026<\021\003\360\272\251n\233=&\377\333\274\316\371f\275\203\037\">\0369\375=\177\300\222\275q\327\270<p\214\355\275nup\275\235\016\362\275\211\203\264\275\177\345\"<\221P\030\275\021\212g\276%T\363\274<\245\r\276\236\037\006\275\3418\033>\3414\256\275\311?(>\276\321\355\275\277\3656=\243\270<=g\031C\275\nZ?\275\212y\257=$!\302<\224\272\325<\204\000?\275\341\211\r\276\242{\022\275\030\244\010\274\363\277\226\274\315o|\273\235r\311\275\376%\241\275\205\207q=1\r\214=]\rO:YB\275=\306\3743\276*\212d\275\206j\236\275iB\301\275Gy\t\276\364\351\365=k\251N\273\336o\377\273\251B\275=\010\352\362\273f\033\037\276\250\344\357=\006\245\210\274\265\251_\276\316[\253=Z5\\<s\024\2129^\235\251\274\236\233\216=3f\211=\351f\\\275@\327\327=KE\223\274\220T\014\276\333\277\371\274ps\006\276\337\317e<|\027\304=|\n\000\275#\234\235=&\276\325=\303N\231\275yh\002=\n\306\031\276~\201\374\275\354\307\254=\374\210w\275\252G\013\276\177M\311=\244\246*\275m\246j=$ \022>E\215\301\275%$L\275[\2674=G\023\253=\373\344s\275\016@Q\276;S\275\275\263\024\254<B\241w\275K\233\177\275\311\370c\276jt\212=\013\237\023=h\233-\275\"\274\224=\317\030\234;f&\263\275O4#\275v\210e\274\000k\355<\036J\247\2732\350\337\275\335\271\n>\251n\007\276)\254\304=\347\n\276=\244\331\233=\002\315i=|\024\001>h\334\354=\314\342\363=\026\300\275\275\326\\\022>s%\357;\034;\225\274:Y\351=\342l\227\2741\236u\276N3\371\275L\352\227\271\215Q\246=r04=\327qU=$\306V\275JN5\2758*\320\275+\357\245\275\252\335\252\275e\2149<\204\376\r=\0266\372\273y\361\242<\006\234\315<\353\305x\275\220\305n>q\375s\275c\255\360\275\032n\353<H\236\246\275\203J\t>\310\237\354=<\267\311==\036\344<h\006\375=\253\305\036\2760\360\014=8\001\240\275\232\0328\275|\003\177\274\224\353\340\274\034\\\276=.\036\270=\337s|=\257a\323==Q\303= \303\212\275\336/\020>t)y=@e\r>z\r\367;\023\021r\275\224\010\266=\002\326j\2744R/\272\235Z\252\275\354\225}>-\215\325<\004\250\250=Azc=6\305<=\010\232\222=\035\226\265\275\325\367\235\275eV\004\275\303Xl=\334I\235=!+\265\274+\303\317</\370K=\350>\013\276\273&\221=\233\235)=\257\373\203="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6355561
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "h\n\323= hY=C\032\235\275\241\361\370\275\267\252G>\026\252p=\362O\364<1\014\274\275\256\227;\274\301\001\021\275\377\021\355=\264q\333<\224\006\220=\273WC\276\316\030\271=\343[y\275P,\035=c\327\277\275\241\204\006>Z\270L=\257\034Z>}9\020=\t\364G\275$\321P\275\314\337\364\275\202\356\005>\013\314#<\306\225\347<\037\365\265\275\336\016\262\274\327\362\271=\350kv=5S\224=xD\204\276\200\354\302=\357\037\240=\r(W\274[n:\275\301\362\234=\t\345\242=\223\247\177<\037\222\255\275\211\017\356\275\253^$\275\363H\032>\255\202?\275\307\0248>l\245\224\275u\020~=i\273]\275\212\334\225>\010\0044\275\367\234L=\365v\347=\206O0>\346\237%\275\353\374\021\276\227\r\251=0\000\017\275N0\030\276N\336\347<\335rv=\300\245\374=\234^\225\275c\370f=\264\213\231=0\371\337:4\221\205=+fQ\274rJ\231\275\233\355\206=\245\250\273\275\264\177\237\275\371\342\210=\032B\273=\320\371\257<7I\215\275\355\317!\276E0\026><\225^\275\373l\231\275b\312g=\223b\235\274\314\020S\275\3300\023=\355\272\037=S\277\367\2745\254\326\274\230\323\375=\275(~=qC\326;\356\276\265=\332\3549\275\202\326q\270\234\326\\<\024\007\336\273AL\305=\246\311\"\275\240\005!\276\276,\t>\367\255\320=\342\340\272=\342-\301\275=\2266\275\260\336L=\337\256f\275\250\222\330;en\353\274\301\031\214<\316\326\"<\271Z8\275\200[\247=`\014G=\3479\n\275\330\001\356<\265\362B>=\274\327\275\207p\211=}D\t\275OsK\275D\276\222\274i\242v=\236 #=Q\354\332<v\305h=\364($<\257q\347<Y\241\342\274\305\022<\276CUb=\224\351k<\325\301&\276\001\252\356=\256e\215\275j\3220\275\347K\010\275C\216\366=h<\003\274\344\017\225=\362\343\220\275\rm\260\275\030\272\304;vJ\\>\342\260\317<9D\022>\317\372-=^\031\302\274\335Z\002\276\312R->\342D^\275\235\344\006>\322B\251\275\247L\006\2768\300\203=N\222\314<\265\254\373=\314\332\'\276\377\227\007>\306\340)\276\236`\273=\270t9>\301\r\224\275,i\331\275\362s\223<\370^\233\275\324\226\200\2758}\021=\374\345_\275}\350\324\274\002\326\372\272\365\323\362\274\374\376\231\275:\267\277\274\225S\213=\016\360\315<6mV<\3310\260\275\345\310P=\363\nq\275\317\335h<\266\213+=\362[\023\273\t:\031\275\265\031\242\275\374\315\372;\031\3558=\013\332\313\274\237\235\r<_\210\t\275\346\203\200\274T\226\262=\222\366\256\274\324\010\007>\\\361F<\357\323\336<\277\231,=\326\261~\275R\355\275=\267s\307=\376\241e\275O\307\256;\027w-<\244<\250\275\377\204\207\276\270\222\250\275\036\233A\275\366\355\343=7\250M\275L\\l\2753|E>\360YA=/\023\305\274b\2529\276\243+\307\274a\020\247\275P\020\217<\260\245O\275h\242\255=\276\253\346\274Z\036\216\275\351;\352\275\271ZU\275\000}\235<\353\205\227<\273\376X<\246^T\273\207\342\260\273\034i\231=\374~\204\276E\316\216\276\335\0248\276\310\t\001\276\3675\016\275,\324\226\275((\202\275\261\323\035=zW\200=4\217\376=\364\212s=Q|\222=V_\017\276\020\235\006>\312\326\311\275VH\005>\026\2135=\021\371\220=K\215\220=\006n\025\275\003f\214\275\311\022!>F\242X\2758u\212\275\301O<=\327\252\254<[=\230=\251\264T>\013\305\037\275\231,\314;>@!>\267\371\224\275t\030\032<\337i\231\275\230!\345=\370\027\265\273\212N\253\275\322P\377<H\207\027\275\353\276u<\266\021\311=\322\"\204=\007\037\337\275\034(8=:\216\333=\257\001\035>\201D\301\274^W*>N\215P=\377\013\027\276%\207\212= K\\\275K\234\035\275\335\276*=N\331%>\034\315|<\220P\262\275\301\214\027\275\367\2208=\021u\252<\331$\255\275\364\316b\275l\373\243\274\241\215\221<\367d\231;\036\002H=\005:\344=\245\227\373=\224\027\343:\tb\352=\330\254\032>Ts/=n\204\270=\275vh\276N\276\226=\331.\354\275\005F0>\032_\020=\377d\377\275\370\210^=\250\0253>4/\227\275\301\236\376=O\2351=\320)\214=\304\341\227\275\300\177\034=\220Z\345=\365\331\207<\\\374\014\275\253\257\205=\014\024\347\274P\353\226\275\260\245\235<Y\3345>\224*\300=\026\306W=5cQ\275\205\364\017=\213+\016;O\235\235\275$\021\307\274\025E\247<\335\376\233\275\337\t\025<l\205\274\275q\243\244\275m\263?=\276\345\250\2754\250\214<j\277%>\307\017^=\213\023\230\274\363\373`=\342[\275<\341n\266=2\224\r\274\023xN\275S\0071\276\267\033\013>\021\326A\275FBG>\200o\275\275\277\247[>|\224\036\273\356\010@\275\252\030b\274\034\222\t>yJZ\275/r\024=G\256\321=\306\364\313\275\230|\356\275)\204Z\275\341\240\362=I%B\276<J\013\275\017\222w\275aD\245\275\222\014\024<*\307\372=\220!\305;\037k\230<\222\340M\273&*\003;\001\231\344<v\253?\276L2c\275\312\207\022>Y\203Q\273q^B;j`\233\274\371\000{=\024\337T\275\0303\361\275t\222\206=\341\355\360\275|\330\232\275\340v\372\275\200u\232\275\342d >\004\317\333=\374\036!;}U\352=Ej\276=\022<\211=\267uz=t\020\222<\245y\215\275(s5\274?k\010\275#\360^>|\036\323\274\277\314\302=\336\202\355=\325\373^\275\274\000;\275\245\210\370\274\246\365L\275#\032\233\275\323\326\324=\356\263\346\275kSR>\230\214\024>\001\241l\275$\266g;?!A\275\203\250*\275\340\001\'\275\312 \357=\223\361\016\2759\304/>\353\253K=E\034\017={2Q=\3733)\275>\034\235=x3I\275\3171\310\275\220\315\341=\"=\216\275\260\350\033\276\225\324\272=\200\313\021=\226\362\260\2752}\033\276\232\305a<I\302\276\275m\200,>?\226[=\032\006\354<\300\000\362<>\264\004=2Y\377={t@\274L\351\206=\374x\336=\\\263 <\357\377\327\274\334G\006\276\310\360\274\275u\250\247\275\361\351\305=\0049==\257\315\324\275\327\351%>\031\307\265=\023\235\346\275\n\335\311<]\243\321=-\324E<\345\237\026\276\022P\340<\000\201\304=[\334C\276lG\253<u0\230=w\030|>\340\304\212\274\273\337\262=\237\261\002\276\300\201\000\274\"\323G\274 \357\t\275\347\374\302\274F\3055=#\365\360\275\246\321\321\274$\037\016=7\023\273\275\366\363c\275\210~\346\2740\350\320<9Wg9\355\303,\275A\301x\274\227\234d\275\316\223\354=\354\357\270;\326\257\201\275t\367\332\274j\303\353=WfM>\227B\201=\314|\230\275TF\250\275V~C=\344\211/=G\004\'<)\265\377\275\207t\245=\234}\016\276\235\353\352\275\320O\270=\371\3031\275\370\3021\274\267W\364\275\242\362H\275\341\247\330\275\311\"^=\260\212\232=X\345\020=\214s$\276\224\362\222\274\267\3205\276\\\277\337\274\274\315\215<\272B\035\276\222\301\203\275\203\264\276\273\030\316V\275~g\233\275P\t\034>(\3056\276\334\327C<\322\017\251=\262=\327\275q_7<?\237,=0\373\344\274\341\253\017>lO\027>\254.4=\364\3162=\307\013\223\275yP\221\274W\277\006\276\322U\362\275\000\025Q>\273\202\'\276\351F\267\275\350\354\217\275\207\304\255=\351\222\304\275\263\3431=\376l\027\276\265\220\010>b\372\230=\352\036\306=a\374\215=\265h\350\275\330<\252\275hwV<\230\342;\275BC\326\2748Z2;\"#\027>\345\241\275=q3_\275\235\307\027>co\252<\003t\016\275\256E\377\275\227L5\275\307\216\275\274\206\316\034=\315\335\224=\372\371\366=\340\025\010>\374\234\212\275\305\221\344\275\000\201\266\273\243\247\337=\373\235Z\275!\316[>\235\212\000>\333\325\034>\337\266$\275\310\362\313\2729\022\217=C\005?\275\330@\347<\374?\'\273Fq[=\0274\r>C\342\033\276j\240\206=\363\215\034\275U\336\313=\202T\310=\333\214#=V\226\240=\222Z4=\005\367\037=*\204,\276\332\266\005<n\353\177\275\334\260\250\274\275\320<\275\007\276\200=\003\'\014=G,\\=a@2\276\320\030\221\275T\332\343\275\004\340\270=\202\323[\275\303\010\353\275\271\223\372\273\333y\201=f\310\304\274)\025\333;B\261<=Z\326\255\274\354\215\311\275\2479}\275\274h\333\275I\327\346<\210:\361<\372hG>\345\242\212=8C\234=%\026\274\275\020[\352\274\r$\307< hP\274t\250\353<p\240\036\276`\204\365\274\245z1\275\301\315\342\273\2543\024\275Y\206\204\276_\334S=\350C\242=\363Dv\274O\371\240\275\314\034\367<\210\2653\275*\021^<\177@\301<\324?\235=\312\264\024>\202{\327\275k\027\275\275q\363\003>c\351\017>,\377,=\277]&=\253a\254\274\263\307\372=\345\337\225=\030]\355:-\273\327=2\341\010=\006F\221=\260\242\272=\304\234\003=X\337\331\275\223:h\276\344\270[=o\377\326\275\352\304\013\276R-\004=_\034\260\275\217\210\313\274=\332\323=6bG<H\321\334<\262\276\021\275\346\033_=\277\033\265\275n^=\276\237\025\207\275\017\310=\276\316/3>\356+\216\275\275\233\237\274,\343\270</Gc\275\234@\251\275\256\344\033\276r\203\226\274\334\223\224\275\001\033\261\274\217Y\357\275\037:\177\275\024\304k=\374\254\340\275\330\356\357\272\306\ni<\222\032\265\274\333V\363;\023\374D\275e\250\251<I\335P\275%\333\213\274I\366\305\275\342\327\231\275w\306\320\275\036FI=Du\263\274\211v\223=-\267\021=\276=\253\275$U\230\274\372:\352\275\250\213\355=\331\017\032\276\365\232\020>m`\027\276!\213\267=\341;\021\275\365x\010\275\212\375J>\211\177p\275\200\2005\276`$\005\275\030\310>\275\343\270\">\370\274\032\276\r\rV\275\237\017\257\275\326\356N>\370hA\275\333\357\253=\215\3401\275\334\203?>\000\226\224\275\303\254\002>\222)\230\273B\252Y=m\r:\275\200,)<o\260\005\275\247Q\312\273f\273\316\275\273\334B<m\3732\274}:\217>O\367O\275\013\237M=6\255\277= \215\300\275J\206\203<\377\226\344\2744\3511\27445\234\275\335H\177=\272\251|\275:\224\357\275\343\200\250\275\013\370\342\274\026\334\376\2754\321g\275\331\3163=\216\272\367<:C\024>,\324q\275+\355V>w/\002\276\265\342\243\275\020\353*\275c\352\300=C\335\022>\024\317\225=\021\017\002>\r\375\327=m[i=:\237\351\275O\244\256\2744H\006=\327\337\252=\303\3768\275\230Om\275\315V3=\261\347\201\276s\024\230=\177t\225\275\006\203\002\276HO =\213\235$=_\313\311\275\217\250\307=\322\242)=^\270\256\275A\\<>\224\200:=\312^\177\274h\226\212\274^$\020\275\276\342\027\274\006!\250<E\231\034\275\t\004\027\274\022\317&\275U \237=\300K\227<\326\354\016\275O\005\031\276\230h\255=\310\014\004=\r\361\274\275\025\221$>\222\362\207\275(<P=\345~\314=\036\037\002\275p\345\201\274\'\241\255\274\021\331R\276\t\313\244\2744\016[\275\360\n\323=\3539P\275\305F$=E\340\206<\246\255;=\020\345T\275yT9\275\030\007\344\273\343C\224=\234\333\004=\345\202\376;]w\320\2750r\350\275\307\365\244\275\262\215\020\276\322Q\363<\245\3449\276& #=n\312\361\275K\224\364==\310%\275\234\215\275\275\352%<=P\304j\275c\332\211\273b\230?\276]\332\204\275.c!>\210|M;@\3013=\300\245\273\275\362Q\002>\360\332B=\202\342\250\274\033\362-\276\032\357\361\275\331\333\305\275\237\317[\275\032\001\217\275\361aM\274|\241\363=\027.Y=\315\222\212\275_\302\203=\334\241\343\273\022\317Z\274\315\314\231\275\332\310#>t\215\016\276\377\370N=\307\003\360\275\240G\026=\331\"?\275\232\010\275=\201A3=\261a\033\275\037\305\013>\246\262\"\275^\007L\274\0308\235=\276\257\311<RD\241<9\\\202\275\260\352K\274a\274\262=+\"\207<\276&\227\275;\312\357<\035\026\255\273L\013H>\272\261\201<(\325(=\022g}=\315\234\247\275\001\241r=\375\346\306<\005\021\001\276&\347\000\276z\304s<\201\252\254=\247XO\276\003u\202=h\331\237=\370\247x\275?\204\210\274\030\371\314=v\354\033\276V\321m\275\211\345\360=\263O\333\2759\264\305<;\"\275=\334^\006\275>\370\216=h\030\\>}\356\'\276_\257#\276\236\313\255\275\367\202\'\275\021\216?\274-\256\254=c\'\316=P\0357\275\217x\350\275\262\324\326=n\"+\275aR\021\273\035\201;\276\246b\034\275I\303@<S\014w>,X\373\274\201\035\255=r\177R=Q92>\027\010g=\374\312\214=\253A\272=q\206K\276\364@&=\336\331h=\234\007\311\274\306\003\211\275\234\357\370\275\24701\276\316l&\276E\201%=F\0258<Uqg=\241\217\304==\230\305\274\231p[=\220\257\317<2\253\'\276\301\352\260=\346B\365\274?\210\260\275C>\227\275\352\306.\275%+A=\377\203x=f\201g\274\247\214L\275\036\226\252\274t\005I\275qa\236=N\346\314\275W\313\273\275+qn={\3324\275)\035$\275H\372\364=\022\'\013\275\351\032$\275j\210.=Q\316\020\275\177B^\275L\2663;\002\355\372<d*\r=\036\353\320=\374\337\300\275g\222\017=\367m\307\275\255\027c\275\025\360\217\275\210\330&\275\r\345\300\275\354\217\322<\205\215\336\275_\371\211=\304\036!=\033\224\270=e\277\337==\211!=\3660\263<\030\323\016\270\200\361\300\275f\341L>\350a\007\276\253\225\360=\374t\256<\246\307\205=\201\276\224=\241\341t\275\214\210o\274\272\205\211=\361.\256\275\301\026\010=H\300\372\274\362\201\200\276\2749\200\275\252m]\276\220\305\377=\264\270\207\275\241\3612>\3300\362<\336/\251\273\371L\025\273\251\3179=\177\221d=\340l\341=\036_\332\273\013%:<\023\203\014>\321#\362=F\274D=\023\006\017>\002\3270=\010\350j=6\016\021=B\032=\275\370v?\276\004|\241<\021=P\276R\312J\276\315\234\317\275\001\363\360=\327/\034\276\354\346$\2769\326:=\276\342\315=\204#\257=\271\214\276\275\024\"\211\273\307\014\373=\322Dc>D/[<\366\330\317\273 \225d\275\356\357\002>|\232\360\273\245\307\312<\r(!\275u\365\201=\374\257\332<\023\227X\275\327\341\'<:5\205<\31278\275\202O\030>h\246\000\276\364?\217\275\303\216\302\275\312\315\027<p\000b\275\313\251\307\275b?\016\2768/\231=58\265<\376n\211\275\264\235\320\274\3738\027<\200S_\275y\372k\275}\215\035=e+\241\275gQ\002=`\240\006<\276\205\367;\376\362\326=)\213\352\275\302\307#>\021\267\222=R\212\301=\002\036\023\274eF\017>\313\016\264=\362\303\357=,\245D=\005\363\214\275\025\331\322\275\nRj;I\276\324\275\342\n\332=\023\343\364=~\206\343\274j\235\030\275\236\021\327\275\337\272\244\275h\0143\275\334\202\027\276\3303I\275u\275n=\030\273\010\2754\240\265\275e\201\333\274\277cS\275\357-k\275\200\302\260\275\016\224e\274s\270+>\337{\030\276\353\330\317\275\336\254x\275m|\306\275\306g\237\274&e\355\275\244\017\005\276\320\304\214=C\235\310\274\032\210\312=\363k4>b\002\367=\336\341\326<\357Y\244=B\232\030=\006\3562\275\242^\037>\361Z0:\3658\027\275l[\312=\304T\317=\302\2646\275<\2421;\257\345|\2751\253\363;\372\361\231=\217\'\024\273\006/\275\275\231\300d=\212\356S\275\227\365\354\275X\332B>\340*\360=\352\023\312\275\231\373&=z|=\276\026\337=\275|\0339=\207\237\'\274\226h#\275\030\331\333<\263 [=\255\361\311=\252w\220\274#x\210\275m\034\r>\277\252 \276\202\314N\275\325\026\225\274\346R\307\275\327:\254=\305\022\257\274W#\362;h\017\005\274\0375\222\274\360\244\n\276Z\314\221<l\317\322\274S\266\236=\001\377\002<`\035==\216\250\221=\333\267>=8\213\027\276\237\327\023;\n@\030>\250z\361\275K\\\235<DN~\275\234\357\337\275\202.\200>Tz\227\275*\254\321<\331\210A\275$\303\321=\331\275W\276\006$\210=Y\320\270\275\201\220\223\275I\215\330<i\035~=\221\311\024>\243\343!\276\237\215\257=\032\354\274=O.\272\275\347:\214\275\364\335f>\375\312\216\266\353\332\222\275)\222l;Lh\207\275\243\355\374=p\'\022=\013p\356\275\272\342\034=ST\232=\264\002\221\275\201\tx=\026~\303\275\023]7=7\004\363\273Yf\034\275H/O\276\3651@\274\274t;\2761`\266=#\'<>\374{\021\275x\332\237\275\031\270\t>\315\264I\275\242\210\020>\356\353\336=\331\253\233=\363\262+=\366\337\332;\253qm\274I\330\n>\254\346\366<\224,\276=\340!\"=YA#>)8\317\275\246\225\267\275\213\001\307\275\250*\327=\354\344\224=!f\021\276\267\273g\275%\313\300<\226\006}\275\307\377\353=\217\364\305;\024\266\264<\354\262\023\275\221\3036=\013\027\206<\205\003\376\275\004&\302<:\004\004\2757;,9mS#>\263U\213<G\022y<\000\"\227\275\376\255\n>\224\334\221\275Z\365\336\275\240\301E\275?\313O=\022\354J=W\203n=3\333b;f\277\267\274\370Y\200=\310p\342\274\n\276\216\274\273\371\025=\372\230_>\263\3538=\247`\266\275,\022\000=\3255\370=\225\372\211=\331k\\\275\327S\177\276\370\305\035\2751c\336<Y\365\024=\n\212\220\275\275\357\323=\217\270\263\275\t5<>cN\213\275]\337\243\275\352\274\n\275\320\3777>\310\240P\275\036\363\375<\314_q=\336\355\210\275\350\370J\275\363\223O\275\230N4=\"\000\230=\037\302m<\344z\320\2755\341\365\275z\232`=q\272\377\274|M\342\275\366F\223;JXE>\202\253\025>i\310\217\275R]#>\307*\341\274\374\320\004\275r\247J\276\026\221\304:\034\215s<\021\231B>$K\021>q\336\222=\325A\277=\271d@<\251\272\237=\320\215\254=\344g\342\274\202\005\222\274\277\316\210=\266|\265\273\355\324\236<\241\270\301\275I\344e\275{\356\216=x\325$\275\322\251@\274\223M\370=\233\255*>\202\301\372\275\256)\"\275\310\t\273\275\232{\321\273y\242\032\276\002\000\002<b\254\327\2759\240\231\271\325\032\200\275\003cn\275\224{\277<\013\272\275=\211b4>25\026<j\271\364\2715r\316\274d \027>\0177->bZ\230=v\225\231=\231D\272<\343Q\301\274\036\243k\275\"\272f=P\322\204\275f\202\031\275P\336\330\274E\335\366=\223\214\215\275\\\220\026\275Q\\\206\275\226\210R\275\3065\375=\035\177\206\275S\356I\274`i\235<\210\206\374\272J\rO>\305\027\233=\262\347\327\275b\326\337\27575\226\275\2242n=\270\335\351\274\2155%>\212\260\342<\335B\227=J\344\234\273.W1=\202Aa\275e\334,>Yj\223\275\365\227?=\240`6=\006\254\357=Al~;\373O\321:T\275\202\275S\322\225\275x\035\302=\022+\200>g\351\206\275\004\007\304=\303\024d\275\324d+=\316d\253\275\314h\215\275\323\246\260\275#\222\372;\321\364\263\274|\"\223=O!\236\275z\233\026=\032lG\276\301\221&\276\3724f=\227C(\275\016\273\021=\247]\351=\016;U\276\247!\007\275\3401p<\326l\034=\355\036\305<\007\320\317=\341\216\025\275\222\026\034\2756\354\365=\232\337\205\275voa9\371\361\000>\235\006\350\273\227\317\325\275k\317&\2759}O=G\r\377<\302\366\307\275\022?>>M\002\020\275m\324\207\275J@\260<S\265\310\275\317\020A>\342\305\002\275\317\316\345=\031\010\355\275d\024\331\275\240\352\253\275}6\036\276rt|\273k\306K=q*\034\276D=\022>\032j\376=F\256\'=\344\025\205\275\321\272\306\275f\035\326\274T\2047>]\252\301={\037\002>\204\037\331\275\0330\203\275\276c\202=j\314,>\305p\006<q\201\341\275\200\345\262\275\262\335\364\275\277nP\275s\272\257=\001By\275\035k\r\276\241\270\274\274kYD=\233\314\032\276\220\023\253\275&\354\036>X{\303<\235.\261\275\366\206&\275\016Q\207\273}\226\030\2754\354\263\275\226j_\274\222\326\250\275r\020z>\310\021^<\225H\326\275\351\212s\276\025\323H>\341\326==\374N\025\276A<\260=p\210q\275\364\351\243<:\014\242\275\025\351\r\275\227\177:>C\305M<\003\233g\274\264\305\375=F\000n\275\003Q!\276\375 \242\274\255\361\235\274t.\276\275HL0>\\\3446=\243a\307=\212\262\373=yO\342\274\376x\004>b.s\275\364_\206=6C`<\356a\020>\'\020\343:\006U\372<o\003\277\275\355\236\314=.8\257=\245\2115=\034\374Y=2\221 =\"<u<\346\311\366\275\216\3312\275\3316\273\2740Xy=\304\t\235\275\322\'L=\235\020\223=\020\001\207\274\010\350\346;\213\362\027\274}Yk\275\304\022\210\275\212\324\237<$\331\341=6\331\245\275.su\2765\033\234\274\017z\262=G\303\007\275\177X\002\275?_X\275\\\321\274\273\235\004\026>\305j\230\272\t\342\304=\332\235\324\275=^\212\275\364\010F\274\004\315\214\272A\033\260<?\266V\274\304\223s\275\363*\205\275XuE=\t\014\034\275w9\001>\027\371\302:\312L\241\2754n\241<1\245\257<\3022\225\275\033g\341\275\205\301\351=\274r\240=.\207O=\026\321\024>\207K\244=\274\265\225=\327<\023>\334\377\017\274\nu\216\273s\2165\273\023\026h=\205\371\272<A\241\224=C\026\347\275SF\251\275\326\301\360=\351\214\345<\330^\354\274\2173\242\275\277\374W=\021\320\003>=A)\276\267+\032\275\'V{=\321W~=\262\r\024\274\277\017\267\274e\326c<\372%6\276(\323\n>TC\362=~_4=;\244\243=\347\223\262<\327\217\210<\300\242\315=t\267H\276\215\n0\275Z\217\317\271\014Uj=\315N8>B\315\025>\376\264%\276\215\220o\275\371\322\037\276^h\344\275\2718v\275\235\272Q>\017\326>\276\314\333`=\270\3011<(?\030>\257\322\327\275\006\353D\275?\272\026=4\331$<iH\377\275\247\023(=\310\232\334<\377\227\232=izU=`\360\324=\204\261\017=db\317<\265\260\252=\334\232\273\275\244.\021\276kY\021\275C\235\355<\220\'?>\3222\275={\367\227=\370\342\243\273\302\273\002\2746B\214=J\213D=Z\230\300<|i\337=Zu\344=ov\306\275\237\312\233=I\223\014\275\206\277m\275&\315\232\274\005/&\275\325\310\203;4\373\262=M=\235\275\006U\325\274Q<\005>|\355\255=\\3<<\224(3\275\301V(\273\370\370\022>\264\352\272\275\240\"\333\275rB\035\276\347\263\211\275\030\3641\275^\272!>\3650\020;\266?\246\275\340\335\007>\354\335\333=\0301\337=8`\343\275\034\367\250\275[a\034\274 I\345=$4\343\275>)*\275\355\213\020=w\3564\276\236#\007=\262{\226\274\"@\030\2753\202\331=\275Y\304\274\330l\243<2\220\033=\375\333\352=\203\3536\275\233\237:\275\360\346\215\275\201U%>\226\026\234\275\273\212\370=\363s\266\275.\004\267=_\216\233\275\222o\201=\241\0303\275\224\306\357=\224f\325<\345\262E\275\3732m>Px\321\275\310\343\244\275\024\007\357<\236\371\331\275*\322X\275*\034\244=\354G\013\275\3134\372<\217\320\177\275\315\240\216=G6\\=\177\256\313=\223U\t\276\246\020\001>\252\213\022>w\301O\275\230\222`>\340pn\275\373\264\'\276\024\355\002\276iI6\273#C\326\274q\221\352=z\364m\2754\017\004=-\021\003>Jbe\275tWJ\275(\334;>\306\246&\275\332\310\232\275\326\211\n\276\026\017\210\275\036\2440\275\202P\017\276\254\363\275\275\002[\235\275\376sy=\331\210\330=#\005\\=\316\017_\275`\"\240\275q\346\234=\212\343\227=\3065\306=Rim\275\006\253\037\275;!\325\274\236\215;\275\017\027\374\274A&\265=\273g\255\275\213\032a<\247*\347\274\276\245\037\275\\\366\277\273}\364\001>\223\002\005\275Bg\210\275\0211j=\341\027\267\275\005O\305=*\357.\276O\215\304=\230\204\254<\004\201\250\275,\220\256\275\306\230\200=\227\264\343\274\'9H\276\177n+\276.|\032=\022\323\001>\nNs\274kQb\274\014u\265=sh\351;F\253\006=\373\016\016\275\200g\320\273\334\004\340=T\377\330<}\254.\276\330Z\025=\002$\272\275A\244^\275\017\240\246\275;x\326=\314\377\337=\302\371\210=\t\267\000\276G%\231=\302\033\013>\021E\013>^\\\200\275\374\374\265=\271\033T<\251\222\232\274:\017\372;To\351=\n\204\222=\201\256\355:V-\032\276\245\312\302==fb\276G\207\205=z\331\325\275phS\275Vy~\273}\220\245\273\222a\222=&\247\260=\303\353\025=\271\217\322<\315X\322=/\336%\275\253\200j<e\320\212\275\000\357\303\275\316l\306=nW\306<\003\255\343\275\31618=\331b\031>)%\203=\\\371\262=\316\223I>\000\026\205<fo\354=G$\377=\275\352\005=\202\207)\275\256\272\000<n6\014=\037\261\210=+06\275\\S\036>\313\312?\275\307u\205\275%\026_\274a\300\360\273\314-\371<uR\235<\314\006\t=\367\332\252<\210@M=\374\247\243\275\256)&<\312\375s=\235y\235\274@<g=*t-=v\"\200=\353U^<e\336\374=O\203\033>]\345y\275{\330\244=s\206\207<\234#\366\274\237N+<\000\007\027\276\373]\245<\246y\000\275\360N\030>\276\320\235\274d\355\370\275\346\232\222\275\344\255\250\274x\342\315\275\n\344\023\276\315?\n=L\272\361\267i\230\266\275\037\227\320=w\227\301\275\331\340G\276[q\362\274\325C\261\275\177\332I\276V\211\335\275N\315r</\221\225\275\220\240\306\274\236\310\304\275\206\225\007=_\236\371=-\032\001<\212\264\327=\254T\276\275\020\350\323\274\262LM\276\264\357\231=\346\236\000>\333\301\250\275\243T\346=R\373\226\274qlJ\276C\330\375\275}\017\312\275\017\252?\275<g\221=,_\003>4\223/=\242\323\376<\327b\307=\3003\017\275bHw=\376\365\365\275\026\314M\276I\305\206\273A(\032\276,\312<\276\273,i<\353Y\264=\276vS\275\370P\315=]\365\225\275\335\254;\275\326\177\036>v\207v:j\275!\276\267\306!>7\323\361<V\033\221\275\255\210\341\275W6\210\274\266z\022>jU\221\2753\255|=\021\261\333\274<|\216\274>\n\350<%\243\032\276v\373\000\274\221\020\257\275\232\334\205\275\324\014\304\275OO\241\275IZ\305=Q\241?\275\005|\255=\256f\361=\232\035\2039\210|\236\274\220\241#\275.\243\363=kx\\\275\355\373\023\276\366n\230<[\236q\276\367\371\222\275\223\263p=\210{\321\275(\3636=\265\222\224\274\353\325\240=\217I\253\275\333\326\305\275:\220\000>|\276\204\275\267\327_=\352\035\n>\023Z4>\031kf=\325\310\340=u0\246\275\272d\034>u\245n=\034\005`\275^\367\241;\335\322Z\275\334~\306<LIx=cc?>\266r\342=9=J=V\341\025\276\027*\016>|\260\237<\217\351r=\215\027M=\220o\000\276\367g9\274.M4>\t+=\275d\365\227\274\257\025P\275\302Q\r\276Qo\236=D\303\035>\3651\031=0u\366\274\317Ba\275\267\254\'<\364KB\276\271\354\320<\021\014\315<?2Y>f\302\n>V\312\317\274\224<\024<\222\364\365\274\\\207\352\275\253^\261\273Z\225\336\273g\314\026<\315\220\204=\331XV\275\002z\245\274\370M\374=8D-\276f\230\231\275\320k9=\323y\233\275\245\320;\274yt\000>\207\324\343=o\032\215=h\324\317\275/\013T=q\205\274\275.\323\206\275\032\272R\276U\324F\276\226\367]\274\352+\":\231\t\006\274\244\347\325\274\362J\025\275\035\363\210=\313.\031>M\303:<\"\217\224\273\355=\037\2756bO<gu\003\276\2708\346=\215{\206\275Z\363\250\275\024\000\024\276wI\373;\177\212\330\274\344.\232=!0\317=\211\203\263;\223\007\316\274\303\006\210=\306;J=\352\361f=\354+\215\275\0060<=\016l\200\275\252_O\275G\037*\275\205.\207\275S\2416<\346F\203=\0268\324\274_\232\r>\331{\203\274\225g\005\274\247\350&\275~\365\333=\n*\260<\232e\265<3\337\330=T\001\321;\236\216;\275\317\222,</1V=\0079\216\275;b\226\274\202\240\345=\2555\353=\253<a\275\370\336\013\276\244\370\342\274A\353\273\275\374\247\266=\300.\321=\300\0051\276\327\362\272=\027B\270\275\202\"\307<A\207\221=#\216\007>X\271^=\346\275)=\'JE=\334u\t=\217\217\303\273\272&\377=\034\200*\275l\014\277=d\325\013=\312l\331=\312\200*\276\363\265\300\275\303r =\374#D\275rS^=\346fs\274\304m\030>CO\000\275J\202\255;Z\300\000>\303\3562=BL\334\274\273\222[=\022G\207\274h\203\204=\003\004\374=\261\341\246=\255\330\220<\025\327\336<\325)\367<\330\235\227\275\227\3072\275<\021\353\275\001l\001>\261\243\312\275\360q\013>\026\300\204>\373\"\n\276\3535\261<\217A\372\274qL\272<@\331-\276\364\331%>\331\361\031\275UL`=pdw\274Y\266\205\275\2068Y\275\373f\255<P\231\021>\357\2663\274\016l;>8\320\260\272\207\210\000\274\013\3719\276`>@\272\303%\335\274\334\271]:e\332#=\207\003y<,\322S<;\306\332\2753\316\221\276\241n\345=\375\027\263\275\034\350\242=\2157\003>gW\013\276\275\036\364=Fa\315=\214\337\013=\241\243\210=\203\257\205=\350\377$>\254\224\260\272\000\026\006\276\376Q\226=u\213\354\275\260\323\215\275\242#\257=\3314\022>(\022l=\315\234\277=\363b\367=\311\020R\275wR\323=\325s\034\275\244\177\356\275\360\302\301<\346\005!<\022\006\346\275\030\257(=\337\214\"=\007\347\331\275\274%\255\275p\241\336\275\210\023\227\274\350N1=\260\277\000>\3748S\275\3301\003=p,y\275\355@}\276U\200?>\013b\203=2\302h<7\351\314\275\352\r\017>\3550u=\026\010o=\241+\363\275\024\005B\275j\273\374<\\\334\013\276\374\304\255\274:\027;\275\200\331\302\275R\371\\=Y\211\030>\035\277\360=\241\321\223\273^\377\271\275=\005\246<\232\310\242\274\206U\211>\2705\226\275?~\024=\203\340\343=\254@\332=S\343\372\274\017D\305\275eZ\374\273;\025\202<\241\241\323<\376\212W;\334\0261\275\014\0369\275\254k`\275\364\023\276;\213\021-\275\216\326\001>\204\273\025=\361\274\226\275\256},\273\262[a>\267\342\036\275\253o\303\275\"\274\264=\246\216\223\2757\221\365<\021O\3739C\221\273< \372F=\317\334p=/\242\202\275g3\324\275\201\240\216\275\301,\232\274yD\034=+$\234\273T6\235\275!\034~\275v\n\335\275PC\303\275\243\216\003>\204@6>+\277\236=jY\270=\274,\217=3}\r\276\360\030\317<\360EU=qp\300\274\311\357\207;;\266\245=\025\007\355=j\314\354\275\001X\030\276\327\350\257\275>\304:=g&\005=\tK\275=\323\224\346\274\245\265\230<\231\345\312\275\336\257\037>\211\257\377=\216\376u\275a\223\031\276\217\301\261=\276x4=M\024\0209~\356\354\274\221\310\002>\333\034\352<\375a\022>7\225\220\274E\324.>g\324\021\276`m\345\274\\\366\220\2756\314U>\027\303\225<E+#\275S\305\177=\231\304\354;u\016\215;=\014\213=\211\311\375\275\356\255X\275\327o\177>\351Am\275\2056\252\274\315E\252=\0038H>\370\002\001\274\034R\022\273E\277 =\007\213\212\275j\n\003=\263E\207=R\032\223\275d,\253\275\300\357\200\273\021\221\311=\201^\r\276c6\344=c\251\005>\242S\272\274\327\260\305\275\355{\367\274\356G+\276\300\203\022\275\022E\371\274\212\324\037=A>w=q\210\r\276\245\020n\275PFV\274\210\360\005\275D\213\016\276\270\316\205\2753\311m\2751\251W>\305\337e=!\376\323\274\216Z\210=4s-\275\244\361\025>\024\034$\274\353`\002\276\327\230\007\275\374\320\200\276ekB>:M\321=\3164\017\275\272\345\313=2\325\220=i\3571=h\203Y\275\344\021\177=\027o0\275n\233\r\276\240\224J\275\306\365W\274\210\317\"\274\022\252\225\275\221\315\372=@\276\330=\223\310\311\275\322i\\\275\223\2211=\221\222L>\021y,\275\335\353\337=\361\001\220=\236!a<\2435\000\275T\324\006\275\026\265\242=\267@\306=xP\247<\376\226\331<5\336D\275\374W\001<\340\351\201\275\272V\226\275\334/\013\275\265\r\241=C\363\340\275{\256C\276nU\300=v\334m<\205m\211\275n\230\216\274{\363\365\274_7\324=Ra\264\275\021\"\201=\373c\376=P^\036\276\270\365\213=\241\376\224<C{\271\275\332\324\316=\274\014\215\274\277\312\230=)\360\002\275\257\231\035>L\"\200<\352\330t\274\354\314m\276\033\310P=X\310\372\274IN4=\2257\247=?gS\275\242\250\263;\233\000\240=u\357\300\274\313dK\275{Y\364<\242\365\352\2750\305\007\276e\360m<^\357*>y\250I>g6\223=\337~&>\256aS\274\316L.>\352\304/<\007\235\262\275\315^\002>\000\370h\275\313\371\016<%\276\247\274i\\T\275\007\017%>\013L\016\275g\260/>v\232\222\275\333\r\327\274\262#\216\275X\n#\276\232\304\202\275\345!\024\274n\347\351<w\372\213\274\355%\212\275P\220\225\274b\365N\276Fb~=\013\236\264=\225\336\341\275\317\353\337\275\372\353\013>\246\035\306<o\344U<\370B\205=L\2537=\342?\265\275\335\230.>\252\326H\274\376c?\275%\313\251=\376\026V< y\352\275\306\344\r\275\'\257\026>7u\t>\026\t?\273\010oq=>\010C>\2264\374<\332\274B<\240\020\264\275\351\360\240=ED\260\274~\020\325\275o\370i\275}m\023<{\013\025=[\3727=\332\360\022\276\253\311\241\274\016\221\025\272C\2213\275\325\375\324\271\263\036\027\274J\233\221\2751\353-=h\"\216=\304\312\033>\364\240\252<u\n[;\272\034\036\2762=\027\275\"\024\016\274\247Cj=92\350\275\372G >\347N(\276\324\326\316\275J\200\311=\'\265\201=\324\001W=*\202\213\2753(\344<\376\320\267=\302U4:\327X\270\2723V[<\201\\\r=\213\224\205\275N\246\354<\216\275\021\275*_7<\345&\345\274\000\"l<\013}d=y\222\007\275\037\236:<7{\250<k\330v\275\272]\n\2758\360\236<\217\233\310<\021\026\261=\347m\271=\301\361\177>|\263\013\276|f\016>\265\3723\274.\233\311=\225\266\372\275\306\321>>\033j\021>:D)\276\257\341%>\201n\226\274\203\034\267\274\035Z,\274\326\224c=!\363\266=\334xO\275\266Tm=x\352\306<\006\273\257\273\376b\014>\014b\212\275\231\020\006=\326\247i\274v\325\266\274\234c\310\275\0218v\275P\0039>\306\313\007\276J\246<\275\2049\215<>\212[>4\214\363=R\266\215=\325g\324=o\344\341=Tl\300=\265J\314\275sBc>\214\216|=\227\220\035\274l8\241\274]\214\260\275\021\351\307=\231\362\255\273\017\370\031>\343\331\326\273\354z\235\274#\2116>la\035<.\337\210\275;\325\276;K\247\022\2752;\341=\224~\271\275u{\213\275\264\027O=\224\365R<?\347\303=H,\021\276\014s*=K\327 \275\032\037\247=\356\026\031>:\303\301=\211\3311\275SK\211\2756A=\274\332\225\236<\336\344\255=\252\331}=<\344\007>\206\371;\276\300\327\030\276:~\304=\217.%\276\277`\231\275\346\026\233=!\310\226\275\217\035\001\275h\372\274\275g^6\276\202\302\315\274\352q\305=2~K\275\353\267(\276\247\233;\276\010\232\216\275\210\336\265=S\243\016<F\226&=\370hm=\014@\240\273O\2738>?\302\261\275$j\321\274\246[\322\275lr\020\275Ej8=^\304\244\275\264+\003\275U/{=H\220\235=\364\024\323=\217h5=\030\274\203=\3533\210;*\250\336\273\020N\373=\264\320*=\344w\305\274@\nm\275\332\200u\275\374\230\357\275\316\250)\274xUm=\033\352\035=EW\311=*}\341=\357-\315\272T\022\327=m\013i\275\216\016\005\276\342\004\344\275L\263\200=$\367[=\215_n=V_\014\275h\037\343;7\037N>\356W\273=#\203\000\276\342q\275\275z\220\006=U\272\232\274\204\256I>p\226\371\274\353\331\253\274\222y\253\275\020_\014\275\003U\355=\354oa\275K\305\220=2\023E<\020z\321\275/Yb=\005(R=RK\266\275\023z\366<`y\002>\372JF>\300\236\207\275\277\273\271\275\0147\373\273\036\010\253\275\244B6=~\201\007\274<\241\306\275\032\355\240\275\264J/\275\\\303\032=\314\3144\276$\261\226\275S\252(\276S\233t=\271\3451\276\342\'\267=8pR\275*\250\227\275s\026\200\275\"\312\362<\230}\374\275\'\300\243\274\'\010\373<\030\262\354\275\373\377.=\233\265[=\205\\\274=(q\210\275\355AX\275\335\213\324=\326\362<=@J\203=\301\002\n=\204\345\211\273L\"5=|z\204\275\334\037\213=5x\274=d3\177=\027s\317=\313\036\371\275{\376\022>\017\0369\275\016;\3049\230\247\207\275\027ub\275\371\341\374\274\375\222\362=\353j\235\275\371b8\276\022hf\2750\375\t\276c\255N=\027W\026<\341\'\250\275%13=\334\321\272;\000\314\267\274OK\371=\313\360,=\223j\313\275\261&9\275f\177\020>\377>=\2761i\022\275\217$V\275\317O\262\273\352&5<\2738\217\274\014o\036\276\254jO>\035\034~=d\024\321\275\262-\357\275\003Z\007>\034\363\034\275\351|\314;\365\312-<\367\030\324<\262>\037=\304\305\014\276\2521\374=\313\310\275\274V\307\017\275\017_y=\005\341\320\275\340\377+\276p\010J>\214\241\005\275\226\234\271=U\033\031\275\014,\246<\200I\331\274?\030\010\276\315k\326=!\0002\2764\tM=\327\306\3719a\034\276\275P\312\020\276/\237\000\2758\266\010>t\251e=n\261\006>\263s\004>\037e\333<#\010?>$\201:>\273\206\357<\344?\370\275\375\0140\275n\306\'>\257PV=~\003\255=\260\354\306<\274[w=\260\006\352;z\010A=Z>\304\275\242\261\236=\276E\032\275\203i\026<\315\304\301<P\260H\2756\311f\275f\023\033=H\365\304\275\025\023\177\275\373h\323\273\361\300\236\275E\266n<\316\354F\275x\026\364\275\236\277\021\276\271!\201=\201\002\222\274\352\302z\275\246/_;\014\n\001\275\005=i\2751.\252\275\002\344s;\316U4\273\n\211&\275\366\277]=\037\200\337\274\375M^\275\024\036\355<\017&h\274l2\274=\315\243\270=\370\033\307\275\347ng=\376\3209\276\247\273\306=c%\n\276\305\203\345\275GU~\275\217\307\025=\002\207\032\275V:D\276\225\3057\275\267\306\314\275\004\366\323\274_\376\260=(\333c\276`\276\363<\233\003\230\275\022|\316\275\36235\276\214r\252=L\3129\276T\365\033>\\F\3359>\214\005=\354=\244\274\032\225\216\274\n2\035\276\006\272\357\275\323\346\225\275\037J\'>\315*\212\275!\265\246<F\266\355=1=\216\274Z\025\030>\217G\224\275W\275/\276A\345\237\274=0x;\024\024\355<\260\374K:\201\270(=O\346\002>0\3216\2754\327\232=\302>I\271>L\366\275\302\331e\274\360F>\275\342\202n=\237\216\264=\331\222*=\017x\307;g\332\354=\370\025K\275\r\241\033>\345b\216\275\376CB>\2731\314<\252\232\274\274>\272\321=\375\220\214\275[g\215>b\233\021>\354Q\374<\246Z\013\275A\350\226\274].\261\275\333\335\\<\264h\007\275\2414\341\274\323:\316=\027\000\333<\263^\023=\203\232\207\275Z\313t>\004\035\260\275\342\230b=\r\204r;\234_\270\275\031\330~\274\351a\003\276+2\246=\253&\241=R$I\276Y\243\246\275c\367\307\275^U\244\274\360u\367\273J\305\247\274\336\264w=~\023\212=;S4\275/\355\250<L\324\207=hy\376\275{\326\212=\004\212\273;\254u}\275\333{k=\361\355Z<<q\261\274kR9\275\313\352:\275\027\206\245>p3-\276\322%\247=di\\=4\270\371=\244\246|<\264\243t=\325\341\221=m\250/\276\321\316\033\276w\004\315\275\205$\266\275\362\200#=S>h=\200\243\222\275\347\030\231=B\255\362\274i\276\225<>\337\241\275X\006\"\276\343ai\275\222\004\n\276\362\260\211\275\306\227\'\275D\036\202\275\322\361\003\276\273\007W\275X\310!=\227\003\277\275i\036\214\275\357\221\023\275\372\355\342\275\036\276\201\275\325L\232\275\036D\342=\3137\007\2768\271\361=\315\317\334=\216\027?\275\371\002\231=\3768M\275\033\362\r>r\2673\275\330\356\340\273\177]\323=\361j\200\274\302\272*=\232\374\231=\247\365!=\032\233\201\275N\366\035=\250\3311\275#8\316=;f\241<X\367\035;\033T\301\275\031z\326=\"\242\315<X\324+\276B\331\373\274?\212m\275(\347\014=\027\270\262\275{\310\346\272\002&\026>w\022\017=X\261\342=\261\312\013\276Z\322o\275\375?\006\276?\006\210=t\340\265\275\004\376\304;\213\027\035\275\206\202\213\275\034\3228=\013\226z\273\200\301(=\021#\r\274b\014\231=\247\300\240\275EH\021=`T%\274\014U\007\276\204g\233\275,?\356=G\342\003\275\312\3254\276\314v_\276\'\036\273=Z\243r\275\031\341\315\275\247\200\020\275h\032@=7eP>P{\005\270|\236)>$\326\235\274,\260k=\205q\005\275\303\201_<\350\252\237=\273Wn<PgJ>\304\321\030;>\337?\274&\3036\275$\033\325=\252E\321<<<\365=S\330F=s4F<qT(\274)z\343\274[5\\\275\013\247\262\275\0054\001>\252Q\033;\276\310\326=\335\001\017<1\371\251\274a#{\2751SB=\253\032\226=+\360U=m\317\n\276\211\001!\275\241W\272\275\205Fk<\330\221\227\275\265\220\241\275\227\233\316\274\177v\033<U\016\033=\207j\370=\276\277\325<\254)9\275\367\024\231\275\'\261@=\310d\023\276\270]f=`\034\275\275b\027\236=\325\345\003\275\370\\g=8\220\223\275 \332\300\275e\345\017\275/\235\357={\336\307\274\225[\355\275\354\177\254\275\034Y\305=\324|\220\274\033\270\223=\335\325\013\276\025\230,<\333\251\223\276\002\222\t\276\204\276\005=\000\221i>\374\226J\276 \347;=?\377\244\275JI\200\276\347 \002>\203\316\301\273TCD=\240\373\006=\232\226`=/S\031>W\357\013=\'\311\033\276\005%\314<\277t\251=\352F\316:\364\220\356=\236`\213=\307\230\365\274\255\324\316<\243$\353:\034 \361;\027\3610<\303r\253\274\263\234E=@\243\254\274\354\332\215\275\370\215\333=\017E\360\275|&\324\274\225\353\227\2759\210\215\274_\024\225\274d\252T=\257\346\010\276d\331\263=]\326o\275I\367H\275\001m)>>\262\225\275\271\301\227\275\263\323\320<K\267\034>\250<\373=\304\345\326:\357\232\262=7\201F>\364K\002\275\205v\r\276G\200\331\274\222\220\023:\325\355b\276K/\236\275\321vX>{\231\"\275A6\246=\\b%>\310,\254;$\rz\276\224 \214=\232\313\032\276\221\207\241=h\254w=\2761j\273$\267N=\242?\266\274\r\221\372\275<%\267<\0073\257\274\003A\340\275\325[\260\274A\250\352\275\2029\204;\017\301\304\275\360\"3=\362\'\334=\363\255_=\207\255\337=>\212\200<\007\346\272<L\264\242\275_\376\302<\2315\251\274\023\014\310;y\246;<\207\245\232\275r\316\252\273\036\305C\276H\231I\275\307|\254\275\224\247\244=\006n\324=\260\255\212\275\200\301\250\275\345\262R\274\3123\023>\356\304\200=\'n\311\275\010\214_=aq\352;w\360\010\275y|P=\317=\206\275\000s\260<\332\331\315<\356\351T\275(\\z\275\256\320\232<\251B\376\275\037T&\276\253L\262\275\000(\356<\3039`==\336r=\363\024<\276\013!\263\272i.\327\274\031\000\315=\003\253\253\275t\335\001\274\252\313Z\275\373\017+=G\332\253\275\003Q\"\275\266\232\340=\013\252n=\213\037\263\272\277\013_\276\235f\177=\251o\345\275\024D;<D\027\233\2758\224\027>O\317\377<\\\024\036>\360\005\257\274au\n\271>\031\247=\351\346\302=\021\337\3269\204s\017>,\241\302=\265@9=\214\237\204\275:\254\377=w]\260\275S\347\257<\000\236\346\275\307\216=\275\373\032\331\275\355\326\207=\261\203\336\274\351\'\202\276\271\224\375\275v.6>\211\354U=\240y\201\274\210#&\276\332&\245<\2445\001\275\010\260\004\276\002\244\032<\303\324U\273\251\314o=\310O1\275\263\357%=\0276X=\235t\256=.d\277\275M\235\341\274\332\234x=p\0355\275\205\245\214\276v\266\"\273T`4\274O\313r\275\211\331\211=\301m\256\275cG\363\274s\374#=\367\206\016<M\240\322\274\211&+<\306\023\250=\314\177\025>\270\360\226\274,\016\345=x\003\264\273\025\266\266\275\225\037\205\275N%\211:\030~\014>\235\262&<2\234\'\275\303\016\215\275\014\2705>\004v|\276\231\321B\276&\236\235\275\273P\204=\324\032{=\3135\026=\363\235/\275t\250\307<\335\340\273\275\240N\260\274\314cC=%_\022>\331\002\251=z\371\373\274vS1;ZI\013\275\327\365\257\273\2528\232\275\330\356\177=\224`P\275\244\205$>\305\002\213\275x\333\251\275\226+A=\364` \274\341\r\250\274q%S\275$\233\032=\002\022\n\276:L\345\274\363)\300\275\034\226\217=\317\317\307<)\232`\275\326a\311\275\177(\005>\0346\367=\\\025h>\266\020\332:\221i\224\274\253\351\364=\004\340\022\276\203\214\215=\222\300\206=\342\274\250\274M\335\n>\216\020\016>>\327\256\275-\252`\275\321\327\230;\320w\r>\036l\035=z\310\365\275\312\005\374\275\240t\317\274gf\030\275\332\274\002\272\246\324\234=\205\362L\275P\2265=X\354\373=*\264\023=]\251\037>\013\331\270=j\002\027>1\004\372\275\314\004a=o\300c\275\003\263\300\275\234\320\250=\267\370r\275\303\347\302=\225\002\250=\200\275\202\275\021\232y;\254`\202=\325\036o\273DA\213\274\242\000\376<\201\350\022\276N\027@=\343A\233<=s\323<W\315H>\274\334\252=W\312\243\275\330t4>\021\245F;W\332\311\275\237\341D>\237v==\311R-\275qc\336\274\236\200\000>\221\t\223;\035\207\200<\373Am\275\216g\322<x\236\027>\355\005Z=\215b\361=L\005\3619M\017\233\274Y1\257=\177\026\n\276\250Ql\275\365\325\232=\200\243\367\274\232\001\207\275{\214\361\275\365\261\n>\230r\313=o\212#\276\214\225\210=\tM\300\275q\362\254<\363R\313=\214<\206\274\n\221*>\303g\n>\345\333\025=\n\3772\276\341l\211=\3665\021>\267\334\243=\320]Q\275#u\236<\275\034[;\277\344\200\275\206Qf=\3503\023\275\312\223\035\276\006\276\267=t\304\033>s\235\024>\266\230\355\275\270\363\271\275q\201B\275b9&={w\000\274\270\213\211\275o\313\312;\253\323%=\'c\303;\374%\371\274\313\226\026\276\026_\241\2754\323\207=\332\265$>\257\242R>\325\302\244<\213\306\370\274\212\214\304=\301\264\313<\300V3\276z\206\006\276\257O\212;G\300\244\275\257n\271<\232`\244\274\353\226/>;\366\205= \354\254=\333IY=\355\205(=@\025H\275\256\270\305\275\363\207*=\270Y\014=a\250\021=+\335S=\257\222\377\275!\211\334\275\374O.\275&\231\205\275\301[\030=\320\276\324\275,\254\273\273KL \275\317mW=\235\376.\275{\242]\275\035B\240\275L\360\217\276\275\006\340<7a\021\272\200A\370=X\3404=\332\300\002\276W@.=E\023v\276\370Xh\275\377^\345<\301\312\356<Iz\316=\332k\233\275\327\277\273\274\034\177\244\275\331\230\024\274|Re\274\034Rh\273\351\361^\275\330 \206=5C\260<\264O?=\265\017\315=\021\035\334\275\357\224\026\276\333\224\373\274\022^\317\275t\004o=\301\000\315\275t`\330=/\373\001>\244&T=$|\014=\376\220&\276\311^B\2755\205e=\313\315\201=\254\300\n>-1%\276\3612\346=`Rm\275\366[?=\351fM=e\202T\275\031~\325=\036=\367\274\313>\"=D!c\275\034\214#\274i\315\377;\245\013\213\275fZ\233\274\343\033\267=\262\337\207\275\272\037R\276\032\240\337\274t\275\241=\3779\253;\300\245n\274U\246e\275\216h\367\274\233\202\350<\243\355{\275\351\252\307=\202\247l<p]\036=\025\3576\274Tx\217=\026\014\323=\"\036N\276jv\237\275\264\230W\275\224\027;>P\275s=\365\332x=b\2669\275]\210L\273\216d\237\272\231\310\312; \361\263\275\2364\010>um\316\275\271`\201=\260\354\207=\014R\216\274i\370D\275M\315S\275}f\276\275^\202\035\275\303T\202=\205t\207\275\001\346\341=\001\265\274<\2132&\276*F\233\275\016\341K\275(k\004>\265\215\345=m\360q=\021\373.=\337\206\327\274\363w1>\307\246\204<\242H\004=\016\234\320<$!2\275\242\265K=G\034z\275bh\216\276\014L\034\275T\320\254=3=\253\275n\233\013\274\306\374{\275.\250\007\276\365Mn\275\211v \276x\352\t\276h\323\313\275`\256+\276\352y#\276pg\271=W\374M\275\320\035\242<8`3=C\313\370\275\333bc=\332i\251=\312-\351\275\214A8\276\026s\014=2\207\340<c\240\270=9\251\260=\352Z\236\275\273{\277=CF\210\275\263^\334=gO\004\275\204%0\275F\000\271\275aw\372=\342@\275\275\033/v\274\305{e>w\213\315\273\rx\255:\321\256:>+\323X<\301q\034="
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1038800
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
