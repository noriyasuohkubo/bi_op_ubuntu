node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6427534
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\004sZ=\310\243\312=z\215\002=\267\017\301\275\005\306\214\275Ft\232<v\\=<\0314\267=\223\205\263\274`\211m;C\331\017=\014\265B\275\305J\004\275\334\300\211\275\242\\?\274Kx\027\274\371\352&>\227\234\275\275\324\266\316<\203\023=\275H\032\376=&\266G\275A\300x\275R\366\242\275y\241\231\275_\007&<\212\313U\274\241\020\207=\"\316\027=\310\"\010>\376\t#\273\336\224\354\275\245\323\205\275=\340\365=\2353\276\275_\271\262\274\337\237\202>Wv\330\2753\224\207=wt\260=\3538\221=\373\357\014>\326\364\202=\225\3578=\0258\013>\022\374P\276^]\347;\003\355$\276\363\363\354\275\351\276_>\3774\024=\207\301\177\275dEE=\036h\314<\013U\032\276f\230\340\271\'cL\275\311_\r\275\274\003 =\036\351\033\270\026\016\224\2753\264\351;\375\375\210\275\255\016\326\273\037\200O\274y\3771\276X\3060=-\261\307\275CB\323<na@>\226\252\t\276D\353\250\275\r0\344\274\370\257\221\274\213\210:\275|\005\261\274\270\007]\2769\251(:\216\301\276\274y\232m<\223\317\240\275K\320y>6P\256\274C=\002<\255d\321=\260z\263=\356\237I=Yw\227\274\304\232U<\222\221Q\275\225\375\037\274Vj\337=\241\000.<`\211\016=V\352)=\311\363\244\275\362\032\311\275\030\033\265\274\271y\374=d(\371\274\225\203\254\275\t\367\306=\232\212\361<\315q\235=\365\r\240=\2160\316\275\3333\273=5\202\230=675>\344F\236\275j\372D\275M\227\317\275e\237y\276\222\250\343\275Y\211\265\275/\257\205\275\240V?\274\256\360\'\2764e\354<\364\016\334\274\230\375\320\275\326-9\275\"\212\240=Ns\017\276]\013\254=-\222\002\275\313\270\251\275\375\'|<\227\303\275\275\240\217N=\335}\021>\257P\004>?\243\272<\t\363\347=1\341V\274\n\014\t>\324\226\037>,\026\271=\207\230\005\274\240\217\024\276\253\314\022\275l\274\034\276\036\206\321=\024\330\230=\361/\020\275\0335\242\275H\024,>\357}\025>7\313#>\347N\"\275\0204\320<Y\333\331=\260\322=>\314a\277\274kIq=c\345\216;\354>\307=\270\337\255\274\351\351B>\355\274)\275\375E\314=;?\343=q\030%>\255\254\331=\324\366\000>\332\251\225\275\020)\205=\002Y\363\2741[\315\275\370|\202\275\341C\016\276QX\022\275\246\364\226=X\342\335=\031o\033<\207l!=\306\2032\274\360\304\247=\210_\275<\215\266I\275\273\312\021>\233\232\005=E\257\343\274\355U\340\275D\\\205<`\345\271=\205\226\010\276\354\234)>\213P\237=\365\000\242;\327\020\260\274\177\3317\275\360\276\366=\027\314\325=YQ\316\274qr@\276\207Ey<\274O\'=\2767\351<M\273]\274t\001h\274+\250\205={\027\374=\367\231e\272H\020\034\275\3232\232=\342\003#\276\036A\003\275\274En=\020fC<\247;\306\275\323\317\233=\257;\013\275\301(\326\275d\262\037=\022\270E>\365\276}\275\226VN=\3720\235\275\315\003w\275\365,\326=kQ\306<\307\275\222=r\3548=\007\030$>\000\215-\273}O\332\273\215\016\372\275\020ly\275?B\231\274\204\032\001=uGU<eu\026>\r\326\364;-\271\025>\314\324r\275\033)\366\275\007]\305:_H6<\216\334\002\276\277J\325=\031\213\002\275=p\000\274#\310\010\273\300\236\310=;tv\276a\231\322\275+\\\021>o\345\346<\260p\200<F\200\317=\rdI>>\236\'>\334\375j\276\352t1\272{\006\312<7\353\226\275\010\2517\275/\226\306<\225\271\001>\201f`=%s\035>s*:<T)\342=I\212\201\275\013\036$=\010.\345\275\372~\036>gk\374\275#\270\210=t\226\217\275\017x\023\276\201h\010\276x\270J=d\221j\275\377D8=\253\251\027\275\274\017\202=\022\020#<\323U\033=!^\224;\201\355Y<\231\341\273<&gW\275\003\035\032\275\370^o\275<\2054>k\372)\275\314\335&\276\010\245\177=f\006\361<D!\031\276\033@\245\274)\323m=\271\357\024>\326l\026=w\261\014=.\372\217\275\223\312\221\274\177\346&\276\344\270\205=\232u\245\275u\007\257\273\037\257\001\276[\027\270;\245\262\374=\206\307\036\276\220\005\221\275\306\300\206;\274\261i\275Y-\013\274W>W\275\004Q\335;t\235\003\273\227\250\003>\374/F\275\022LM>5\001\321=\314\375h\275i\343J=\217n@=/(\231=\245-/\2759\373\002=\231\245H>\360>\005\276\033\277\321<\354B\361\273{c\357\275q\315\30793 \210\275\017+\221\274\002\330\374;\371\205#=\251\245\361\275\330\323\333\275\354\332\366\275\227\253\276<\240\275w==S\207\275.\220P> ^\306=\026,\033\275]S\357\273\035\250\'=\307\026\231\274#}\377\275\215$\223\274\212\376p\275\2514b\272\007\317\240\2744\262\311<\351\207l\275\344\2578\275BP\t>i\231\301\275\031\016\321=D~\363=\361P_\275p\363\271\274\016)\177\2758!\211=97I=\263\315\201\276B\267\007>\234\251\022<\3545\361\275p[\307=t\003\365\274\2443\240\275\301\005;=cv<\273;$M\275\2317\267\274\254\310\017\276\361\344\364=\340I+\276\3731\231\275\254\244=\275\r\207K=\317`\214<\326\361#\275\276@\026=5w\366=\206{\312\274\372>\234<\031a\330<\317z\332=\312Q:=\223?\325\274K\006\002\276].\037\276\270\334\247=\345\310)\274\322\365\337\274\273Y\014\276\033\013\230<\352\257\026>x\226\027\2756|(<rP/>\3009\312\274<\367\n\275\372\255\207\275(X\325=\334\356J=\357:\340;\321\212,>\246\2307>\032\214\244=y\230\270\274\333\036X\275\263!\246\275\226\353\322\275_\025\303\274j3\207<\347\302\261\272\375\021\305=\377\214O=\345c\022\276\333\t\027\274\224*\271\275G\225\256=\006\233\240>m\277\022\275\3625\327\275\357\025\352\275\353)*=\037b\235\274X\323\204\275\321%\037\273<\275\363<\"\002\031\276\336\312\215\275\232\244\226;>\370b=\310\013#\275{\235\276\275Y\337\336\275\360\026l=1\366f\274\261\344V\275a\026\357=\312\023\014\276\353\353\217=\021n\344=\221c\027<%\321I\273\022.U=\365#\375\275\0250\303=\334\265$\276\372\377\244<\364u\206;}\356\323=\207k\367<\254\n\030>w@Q\275j\205\341=e\243[\275e\257\213\275z|\177=4\220\301\274\337P\016=\237Y\240\275\325\372X=\207G\247=,\363\024\276\352n\177\275\005\341#\275_S\211\275{+;>\3168\201\275M8\354\275\3652\370=\222\351\t\276\021\332?\275\276\306y\275\345\345\274<\267\032\304\273E%\360\275\203\263\215\276\247\307\274\274\036\313\323=+\277\343=\276V\234=\355\241H=\225\305\330=\215\207\025<>\271\317\274)\001\006\275\231\233R\275%u\031>\t\246\310=}\356\237\275\240\002C\275ve\275=\337k&\275\371\322R\274\254A\223=\001\221\205>\244\245\231\275(\2739\275\311\177\365\273\277\253\021>\313+\027=K\265\256=\250\3465>\313\017\275=\335\332\202\275B\371\305\275\001\021\363\275\202<\361\275z\220\203\273\327\252h\273\334j\270\275\336\033\325<\265\205\020\275t^i=*z\300\274#T$\276\307 \224=N\312\257=w\225\362\275`\322\373<\364#\371=\233\302\337\275wR\337<\372\270\256=\376a\362=\365\334\035>\177\022\212=?\376\004\276\245\3562<\230\353z=\213\312s\272{\332\310<\2677\230<ID\027>\303~]\274\335\001\333\275\271+|=\227\345\254=v\177@\276[\264\247=\004\226r<\212\267\351\275\200\305\245=\347\377\036\276\205\326 :F\001\261=\265\344\265\273\335\264E\275\2650)=\234\322\315\275\371\253\250\275O]\317\275\213\252\300=\347h\247\275\001`\223=\226\370\024>~N\021=\036\253\201=\273\332\203=\246\377\261<\246\026\021\273\270/\261<\031^\227=\343E\240\274\003\350\376<|\304\277=\327\205\322<\301]\342\275\367\023V=\034\245\327\271\315x\240\275\202L\353\275\344\241\216=\270\336\253\275\256\036\320=\241A[\275O4 \276Q\007\214\275\275e\360=\343\\\030\274D\201\010:\211\273\347;D\230\254=\273\177\022\275\215\377\005>.|o\274F\031\275=\357\241\377<C\006\003\275\343\263\025>\241\356F=\321\334\310\275$Y%\276\245C\354\275\234\324\224=$\320\256=\343\360;\271\264+%>\0347\363\274\033\320\347\273m2\004\276o\244U\273h\215x\275+\344,=\302r\001>\217\254\344\275}\017\313\274\360\204\213\275e\212\210=\277\263\226=\372\270\000>8\344\010\275\226A\311;\014i\276<\2734~=\02691=\310\0004>Q\316\r=~d\251=\217wu=\003\3264\275\300 \271\2758\317\250=\347\255\246\273\210\210\332\275\251tE<\244\224[\273\347\260\255\275\023q\337\273\347\240E>\367\306\210\275\251~\245=\301\210c=S\357l=1q\354\275\364m!\276\276#j=\010$\237\275N\376\203\274`l\305\274\240[\n\275w\354\345=h3Y\276o3\252=\241\003a=\264\246\322=s\206\305=\333E^=\024\277\270=\304\374\372\275\345\032\314\275%\232\003\276OG\266=#A\317=\3068\227\272w\177$=\0062\033\275\260H\000\275-#\211=\022\"\255\275\216\364#>\177L\037=\323\t\001\276~r@=m.\020>N\3214\276\026k/\275f\374\021\276\246\246*\276\212\204\002;H\362R\275\220\375\025\276*\206==\002\235\023>\\V\000>\224l\355\275M(\034=\2230\352=H\231\010>\262\306\252\274\305\216\023\276\255\346\251\275P\326\016\276\237\005\225\273\254\363\206\275c\304Z=_B\321\275\251;\200\274\355\334\217<\244\300g=\"&)=&\251E=\271\201\027\276\212\276\307=\272jP= \007\355\274\273\307|\275\241\"\345:\025\227S==s\330<6\236\236\273\206\016=\275|\024\220\275 \221\231\273I\352\300=\346s\335<\227\233\231=i`\034>\300V\204>L\030 >\017\t\243<\264\202\355<\331\204\210\274:\021\252=\0211\232=\375\t\267\2747\006r=\321/I\276]/Y\275$\215\254=_?\202=-\327\001\276L\362 \276\345o\260\274\355ND=\326v\214\276Y4\231\275\321\247\200<\3463!>3\310\370;7\031\274\275i\374\272;\006\305I=,\3457\276mT\262\275?\301\255=\250^\262\275\350\345t=6\247\030\275\230\322\026\276\225 4=\t\316\206\274\010\202n<,\364\323=\302&5=\n\342(\275\370\300\331\275\013\237\362<\201v\034<~w\204=\023<u\274V\036\356=\245\263\374\275\365e\372=\n;3;L*-\274p\325\034\276\330}E\275\256[\343=\235\216\210=\276\rs\274s8\014>I\256\255=\276\210[\276\314@\214=\341{\020>r\021\200<Y\302&\275\343q\305=\216*w=\317\232\350;\374\033\001=xXP\273\310\345\035=\024@\231\275a\257\243=\243\n\026\276k\221\256\274@\246\265\275\377D]=\237Z\024>);\271=\327\207\202\275\266\306\222\275\262\356\027\274\220\236$=_\2049\275r\033f=\271\3014\275\020h\243\274\260\301\371\270\205o\n>\034\366\261<\324\"\356\275\027\356\000>\347\320\343\275\000 \320<C\343W\275\024\326\241\275\0077\341\275\'l\300=\351\304\236=\224\347\356\273\3545t=57\272\272v\336\266=\016>\\\275\247\240L>\"]\025=\372\230{=^h\355\274\277\275\250\275m\036^\276f\276h<\247\204\264\275\232\270\322<\241e\031\276\277\201w\275Y\374\020\273\226\220\214\276\324\260B=z\254\302\275\275Q\255\274\335\010\301=\226m(\273\321u\226\274o\000I=\345\000\310\273T\253\241\274\243_\342<H\256\200=\"P\276\2733>\313=3\371\360<V\366\371\275{2V=\210\332\305\275Cq,=K?2\275\256\017\232\275\343\304A\274\341\222\307\274\355i@\276K\302X=`\006<<j3(<0\037\023\276\360\277\231\275KZ\023\2765s+\274\006n\027>eZ\r=\245\247\341=\022dL\276.\347U\275/\316r=\007\333\377=a\225\007>\250\301\270=`\247Z=\257\224R\276\250\235R\275\345\266\001\276\t:\247;\201)\277\274\364\026\263\275\301\331\372\275e\301\250=>\005\217\275r\036\r\273\321x\201\274\352\347%<\"\321\221\275\231`\240\2752x9=\351\177\'=L\211\350\274o#\224=\277\243C\275\224\211\277\275f\272\213=\331\264\345=\357-\302<*\3301\274\020\352\370=\345tN=\234\275$>\037\352G\276\303\344n\275\246\025\303=\347\344W\2751\202\306=[\227/=\364PQ\275\033\362\307\274\031\230\205;\366O\r>\365\372\214\275\315\303\310\275Kp}\274C\327\207\275\241\226\207\275\225\t\251\275P\325g\274\251\331\367=\020a\252<\031@\177\274\356\310\023>$.\313\275V\000\321=\317\205`=)\261\035=\020\264\020< \t\005\275\265\t3\276\277-\021>y\307\r\271\340U/\275\021\263m\2754L;>\373\022\017=\335\304[\275\235K\005\275\253\320\020>\245q\301\275\257\242\001\276\276\257\266=\3170\270=\345\313\312;\005\006\215=\326\261\255=-\242#=(\235\024>%#w\275e\365F=\343\326N\275\363\024\000=XBD>\332z\374\273cH\257\275\3248\013\276\261\033\036\276\351\250\230=\240\014\277=\372\213\000>\005\305\246=\225\262\240=X\350\257<\211\254&<\341\250d=_\213\273\275\027\250m\274\276\236#\276}U,>\307\ro\275\327Q\032\275\003\363\352=\210\177#<\212\250q\275\'\277C=\315\216N=\0147\237=\310\241q\273\032\005\303=\262\204\335<\332*O<\311\232/>\240\303;\274\351,\203\274n\347\366\275\'~E<\237\343^\275Q\273\007\275\265n\017\274\375\320\'\276@\355\212\2740\023\303=\177p\033\276\344K\272=R\3104<\220$\212\274\005\356\257\272\024\034\306=%\216\367\2743\010\231;\360\324\233<\nr;>\262#\016\276\271\220H\275\235>\005\276\263fz>\213\251\311\274\204M\272\273\032b8=9>\366=$\t\326\275Q\227\357\275\032\034\035\275\315\346\332=\352\033\r>\"`->\242G<\274\354U\221=\376^:\275\272\221\264\275-@\034=\337Az>\365\302A\276\322\255\276\2758\256<\276\2763\244\275hO\027\275\262\377\366\2749(,>M\217\246\275\342H\370\275\030\220\261=p\273\317=Ht\223<\n\205r\275\343\374\247\274D\237\277=\2765\t=\267_\t=dWo\275//\016\275\312F4=;\200F\2738\036\"=\"\230$\275\"\244\202=Vu=>\326^\311=`\314\320=T\347\200=\267\347\217<\317N\216=\260_}=2]\251=i\342\034>\240PP<ml~\273o\332\360<\355d\232=\236W\333=\340B\371<#\307\265\275\372Zo\275\200h\002\275\252\001\021=\317\374Q>\324\325 \276\261\202%\275\337\314\231=\t\346\361\275\304D\013\275\035I\352<\213Z\231=\016\377\223=\032\"%\273\373\237\317=\276cD\274\272\213\305=\203e\366=\237#\326\274\007z\252<\332\240\374\275E\243w\275\333\2122\275\354}*>\247#\214<\356\344\206=y\214L\275\323\244\366=\202\353o\275J\205\310=\312\264\033\275;\004c=2\342`=\374\014\315\274E:\276=\233h\251\275\230\257~\274\271\0024\273\3351!=\300\250\245\275\253\211r=^\361T=\306\346\211=\nW\223=\365\317\275\275vmb=\307\321\001>PS\201\275pEV\275\272\007\024\276]\354\221\275\302\035\313\275\342,f\275\362\314\230\275\307=\212\2757\200\200\274W+3\276\202c}\274\205O\215=\264\244\220<:\335\212\275\350\277\017\276\2749\027\2769?\356=\336Ii\275\024a\313\274\250W\336=!\223\370\274\355i\360\273((\355=\337\'\317<nI\001;(\265O=\273\016M=\000\242\354=\216E\021=\336\034\267\275\247\006\032=\237u\">\230\036\252\275\'\332\337\273\242\"\230\275)2\n>P\227E\275N\365\032>\371`\331\273=\342+\276\372q\036=\271h$\275\031>\375<\345\262\246=# \006>\315S\025<\310\013\266\275\272\2605=\370\226\030\276\'\271.=\225A\324\275\030Q~=FY\016\275i\305C>df\210\276\261\203\220=\352\177\365=8\246\352;s\340A\275\214N7>\256!\335<\000\314\032\276\253\325\033<\033\301[>\206(\027=\265M4\275\316\327\367\275\232\222\005\276~\002E>\334U\225\275!,\260=\310\303\251\275\010\252\220\275,\237A\274\2131\324\274`\227:\276&\177U=\247\372\307<Y)\227=\306>\332=q\372\010;-.\257<\326[1\275zON\275\321n\327=\342\353\234\275\262\tY\275\016L#>Ij\223\275%-&;Ds\201\273\332\005\244\275\320)V\275\203n\233\275v\342\342\275\227^.\275\252\241\037>\304B0\274\364wP\275\200\246\233=\360\266\007\276\332W\207\274@\254\341\275\354\311r<O\346\230\275\243\233#=\223\207\244\275b\033\006\274z\037\255=\203\200(>\303\324\307<\276i\244\275\226\351\030>.m\332=\237\210w=\350\005\207\275S\007\306=\330\025u;\320\235 >5\267\220\274=\277\377=5\224\357\275\000\272\365\272H\245\016>\344\314\211=\251\213\342\275\374\355\342=!\306\032=T\335\323\274\316OF\276\017\364\317=n\276\342;\314\007\272\275\311\344\006\275L\271=\275\363k\331;\341\003\r>\277\231\335\275lqV<s|\234;\rv\212>g\326\300\2750\263\233\275\224\014\352\275\323\255\252<T\031\240=,\224?\2752>\207\276\240a&\276\267\307U=\0269:=U6\272=q\027<=\345\246\334;\331\221\220\275!\'X\275x\345\371\275\343\026T\275\311\272(\274\233\251|=\ny\002\274\374\2043\276\322\262\006\276\227\006\353\275\352\216\363\271\365\007\013\273e4F=\224M\017<DzT<&\360\355\271\202\300\344=\026d\016\276\027\2354\275\037M\332<\340e\270<\341\r\261\274\362\324\233=u\211t>[\323\372\274\347\254p=\327\325(\275\004\021\205\274\336\366\256\274\240\360\246\275\306\322\252\274\025W\363\273\331\333\277\274(\272l=@\234:>\247,\'\275\276\274\013>\226\300\217\270\000Z\334<\253\354\256<WB&;\227M\367\275\367}\377;\370\327O\275\307\213\311<\267!\n>t*\252=\233\232\024\273\342\223\272=\004\213\277=\000\335\001\274\204\030\n=\371\363Q<\264\235\344=\nw-\2769\324\037\275f%\020\2754\207\245=\177\021_=fV\013>\356\320-=M^\204=D\217\216<d?\032>}\3030\275`;\224<!^\236=\016s5\276\251\001\251;\343\250\221\275\330\335\202=\r\302\215=\314\247C=\206\030\364\275W\363\374=\005\333>\276\024`\311\275\006\325\005\275-\370\201\273\253\325\306=R\334\270\275~W?<\320\222\312\275\025\'\010>\016\037\014=\323/\201<\235\260\034=\271\\\206\275O \026\275$\007\004<\010~\205\275|\202!=\026\377\370<\271&\251;v\337q=\250\023\001\276k\336d<\302e\254\275#\355\303\272Z\t\237<\273;Y\276\306Q\020\276l\247\030\276A\203\t\276H)\315=g\271\236=Q$\202\275\317\345\n\275\260y\222=(&\212<\274\267\311\2743a\256=\236\"\235\275\002\n\032\275\3657\232<Q\2753>\000}\026\275\347{l>\014\322s\276\374\361\255\273?\2630=j\001L<(\347\370\275\303\204\353=\202\254l;\323^\253=\321\363Q<\351>\221=\316\223{=\020\210\232\275y\225\267\274\030\271\376\275+J\'>\265S8\2763\177J\274\221\335\257\274\373KA\273l.\007>=\331 \275\346\313\330\275\341\201 =\r\214;>\365\345b\274\332\272\017=\3055\256=\235\271\275=\024#z=\341\353\211>\206)\244=\330\356w\275NxJ=BjT\275\364\004\365=T\\\266<\356\356\034>M\315\005\276\377G4\274\033;N=3 \335\275\342\304\334;\277x\377\274\321\t\254=b\247\233\275\302\240\342\274U6\376=S\007\330\275(/\264<\346w\214\275\375\013\364\275\207~\010\276\355\260\027\276\274[\034\274f\301\340\274/\300\335<\274\343\243\274y\352N\275.\320\325\274Q\377\237=\231F\343<6\305%\275bK#>\256=\227\275\353G:\275\371x\223\273\317\357\350=\340\r\247<\255fv\274+1[<\213`j\275DN\t\276\353\002\021>\335\342\005=*6\001\276x\210\032=\317\205\216\275\225\321^\274\365N\313<\252\265\320\274\2420/=\340\204@\276\370S\301\274=\226\035>\267d9\275\362\346\014=\005\355\245\275\231\014\013\276\177\303\316=\241\007\021=Z\324\303\274\2367]=*r9=`Fw\275xC6=\332\030\307=\330\354\324<\340\370#<\225\235\344\275\275\317}=#=\303<E\017\213\275\253\333q\275v\304/=<t\300=p \256=\3512\\<\020+\231\275\231\356\302;\312N\030\276\n\320\224\275KS\247\275\232LL\275>\200\221\275\220\363\251=\"\304\343<\245\362}\275t\302\205\275\245\234\023=\024v\014\276*\001a\275T/\006<\003\002d\275`NX=\212\235(\275\346\301\205=c\227\221<-\236P=n\275\001=J\233_\274\223\363j>J]\266\275\2045\330\273\205\351\023>\365\362t=?\014\370=\356\244s\275\001\357\004=\277e\327\275M\255\270=m(;\2767;\365\275@\271\300<,\217\352=\336\313\006\276\251<\213\274\207\302\232=\366=W>pM\023\276i_+\276P(/\274\357\360Z\2752\375\214=\230:\322\275\241&\275=p/n=m\365\'<\275\036\366;\212\234\214<\347\243\311=\300z\023\275v\001\013>\311\271!\275\272^\241=\300\017\271<\0131\222=\370\266\030=\303\201\323=\220\007;>\240\242\262\275\016\347x<\352\274\004=\372\201\316=Kl\237\275R\035=\274\334\241\314\275\322\257\325\274\0268\\<\267\224\345=\373\376\004>83\221\276\344>\254;\217{\247<$\272H\276\327s\252\274\331\317\034>p\350\036>\376W\273=@k5=\2004h\275\357\232k=Q2\221\275}H\204<X\246\021\274uU\254\274\032\335\266\275\226\273^\275n\247\372\275\240\302\017>\246-z=\247/\317\275\317\324\272\274\366\032\257\273\004~\022\274\305A\213<O\t\332\275%\330\n=\233J\002\276S\357,\276?ad;\320\334\201\275\316\031\201\275\225\200\t=\347\030K=\316\216\262\275c\340\240\275\322\210\300=\375\255\237=V\0211=\327\307\307=\231#F\275\322+\205\275\341_\356\275\\\274O>\034\373\211\275YJ\337\275\360\224 =\t\357w\275\331\267\342\273\255\215\245\274\266\3327\275\376/b<\270\202\366\275H\235\366=\006PP>\343rv\275\030\037\355=\314%\270=\0340\010>T\271\251\275\207\314\000\276I\2210=\303\327c\275NSG=J<\031<<\271/\275\361Yd\274\365\265\360=\213\035\026\276Q\303\227\275\231\233\353<F-\241<@/l<)\361v=\243\327>=\375%a=\031\361=\276\373s\023\275@\013G\275\220\0143=\252\3504>jzG=\230(\032=\306\t\377<\236l\370<OK\006>\313\316\311\275.&\017\276\312p\211<\034\204\257=\332}V\275\264\323\035\276\031\224x\276\257\\\372=4\2700=\3240\375\275\017\305H=G\2105\275\306\271\321\273\024\240\234<v\306\324<\024\037\323<\210\007\262\275\232\211\330:8.\357\275#\214^>\2326]\275\361\354\337=O\363E\273O\nf\272g\350\302\275\000\314_\274\260tG\275\025\0131\275\251\250n>I\214\261=\340=]\275;\372\357\275z_G\275\200\346\317=\302\006\373\274\025\260\302\275\311u?\276`z\206=\n\265\231\274\330gP>\250Y\203\274\370\025\222\275\373\017\010\273\365\035\334\274\346\365\036<e+J<\370\210\255<Oh\263=YMz\275\240\274\276\275\"-\357=\210\221\322\275Q\0271\275\024\235\031=\3445\017=\2160\233=.\367\357=\275.\224\273\3268\340\274.\030\242=\031\320W\275\366\254\315\275\227\221o=\004%\216=\345\322\235\275C\371k=\235)\252<\250\016\330\275A&\315\275\273\234\323\275\255\023\345\275\237\362\255\275\272\333\220\275\024s\001\276$\217\022\276\032\325\374\275#\234\242\274$!\321\275\363\234\222\273\221\017*>XG\353=\025\031\032;\2051\206>\254\264n<h\014L\275q\370N\275`|`=I\177\"\2726|\274=\350m\035>u_\005\276\0024\003\276\323\2260>\307\270\231\274Q<\243=\272\024\375\273\304\013\350\274K\255\257\275\177\345Y=^^\345\275\364\334@\275\246\031\374\273\20048\275tB\272=6\324\327==\'#=\2127s\275\252n\246=]Y\260\275\024=\017>\204\246\265\275\214\030A>\0331\031\276v\310B=be\240<\\N\301\275]\214\000>\230SK>\367\010\231\2741\2551=\326\340\345<\373X\372\274\006\317\"\275R\021\017=\257P\362\275\335i\306=\307\271\355\275W7\235=nZ7\275\246\250N<k\337\332=(\324\233\274\321\206\303\273\356>y\275!\362C\276\305]\276\274\2400\'=$\033\272=<\270\332\274\332h,\273\325\2529<\257Z\305\274\263\353h\275pz\355\275e\030z\275\036\007\357\275Md\212\275B\247\362=\n\320@\275\304\311\263<\210\363\202=\243k\326\275-\317\234\275\237\353@\276\213\267\317=\205\236\014>Z\306\377\275\343\346\037<\227O\006\276@\202\032\276\375\366\323\275O\341\206\275\245Q\276=\217|\210\272\031\274\206\2738A\036<\\nV\275F\r\016=l\241\017<!\331L>N\252\021\273\222\010P\276N\017\271=2E\327<D\225\372=G\026\256\275N\302\366\275qD\370\275k7\016>\247\">=\325\237\021\274\274W\223=N\033\t>\021?(>\377n\246\275\"\r\325\275\302\002L>\320\221\336<\013\013\357<!\215\024=M\377\314\275\316\227\023>b\227\"=\3665_=9\237\227\275M\254Y>\216\272B\275\001\224\203\275^\313Y\275\261i\322\275\240j\013\276C;\265=\325\303\326\275\342\233d\276\312||<\230\3200\275\214\310\027>\204\356\233=\362\020\360=X\262\032=v\257\305\275\261`R\276\204\247\031;\225_+=\202L\306=\316\270\372\274\230\367\206; \312p\271\277\373\242\274\246\343!\275\337\375\235<\240\360\030\275\250\200\024=\234\260\324\275Q\237\303\274T\032r<W\342\000<\246\333\000\275\n\210y\273\r;!\275K\220\223\275r\301\324\274\023B\013=\266v\025>v\326)=\340\247p\275s\344\030\275\312>F;\245\326\357<\2201\372<s$M=\027\356;;m\332\200=\377\2017>o\235\323\274\005\2205\275\334\221\334<\346\304\200=\254P0\276\253\270\377<d\026\337=\350\000%>C!J\276\334\201\345<\016\212l\274G5$<$C[>\255a\270\274Y\312\345<\235~a;j\004\317\274\307%1=`\256\236\2753VL\275\037\326R;\356\375\276=<9\221\274\350(\326=\303\233^\275\326l\000\274f~T\275\327\311\312\275\020?\213\275\026\250\330=3n\216<%\306\247\275\224\200\306\275Y\236Y\276Hi\277=\243\226\007<\340\332\257=\004n\255\275\320&\317=21\240\275w\374 \276\361\203\240\274\024\3675>\366,\226\275%\213\303=\301\314\332<\270\327\354=\3026\020\276A?K=\310cr=~\014\306<5\314Y=g\271\033\276\311G$\275\360\224\303\275\255\235\253=sk\013>\266\225\026=3\255O\273U(<\276\314\357\030=\306\375\020>\331p\036\275\005\307t=\366]X=)\357M\275\001\342x=\255[\311=\3310\373\275\267\355\230=\003\235i=\2405e\275\233\231/=R\364%=<\352>\275\215}=\275\025\220{=\346\r\311\275\020\032q<\001\204\266\275[\202\203\275\241\362\277={\366\265\275\301\344\221=\363G\232\274\"\252\240\274\377G\r=\306\271\270\275\255\306|\275~w\217\275e4\213=\245X\2459\355\263X=\230h\200=\206\351-:\242\337;>`\177\202=\345\334\363\275\334*\255\2758\363\000>\221\254\026:\303\223\210=\001\352\021<\215\\\241=\251m]\276Wi,\2746\366\344<Ms\'\275\212\366\343\275\323c\006\276\\je;Y\314\025;\223+\217=\271\212\337=\tV\017>f\306\313=\014\376\371;\r\246\333<\264\376V\275&c\272:c\253\034\275\ng\256\275,0s;\"\243|=\222\272\206=T1\225\274\236\010R=m\235\364=\313\310\214<\010\332\306=f\340\032>\363\234\246\275\234u\334=?\213\302=\375\320=>\231\361n\276\243C\276=\206\321F>\325\357\216\275\016\031h<4x\304=\2117\'\275M\236\357\274\364{\276=P\t~\274x\264\235=X\377\2749\177\033\200\276\177x\'>-c\025<\371\204n=\207i\034<\376\375>\275\313\264G\275wo\020=w\354\n=\230\235\315\275v\247\311=dT\357\275\374\n\">\214\213\005\276\372\275\307\2759\023\321<\270+m\275\275\336\357<H\275\036>\326,\233\274\020 \305=\366\301\342\275 \231n\275\037\013\250=\220\004?=\026\013\243\274\002\245\277<\250\222\205\2757\007@>\310\254\307\275B\335\033>\262+\235=\020\034#=\226\375\010\270\227\314i<\320V\241\273HT\244=q\333\236\275\360|\n=\362iL>\000\263*\275\257n{\275\010\375\030=\014\356\024\274\301\224\t\276\027\021w=\001\252\371\274\265\320U\275W\001a<\250vE<\024\027\'\275\372\274\220<\000\306\277\275Dp\t=\t\3549=\240uI=W\252\325\275\007\260\315\275\006\231\316\274gx;=\367Y\311\275\242\264e=\322^\"\2748\305h=\233W\337\2757w9\276\314+s=\243\270\320\274\324\370\274\275\331\355<\275i\224\010\276Q\245`\276r`\214\275\002^\326=\275V%\275*\000\221\275\236\363\207\274\312\242\\<~@\244=K\367\324=\202.\031\27421\230=J\363\235={\205\t=\270\340R=\256\031\342\274\324\216\235<\310\236\307\275L\010k>\224, >n\222\341;\014\207\226=s\324P>\341\037H\275\225\2507>_\334\376;H\037j;~\207^\275\026\230\336=$\323<=\231lm=\346,\246=\374*\t=\262\022\\<\020A\276\274f1\017>\024^$=l\n\246\275\345\t\n>\005\215\n\276\246kB=\313^F=\216\317?>]l\362\275\317 \371\274\221d5\275y\363\233\276\031\352\264=D\303\022=\010\270~=l\320\321=\265\355\022=\200/\214<\377\310\200=\211\365\035\275^\343\211\275V \022>\274\330\270<+\014\234=\'\032\326;96\251\274X\341\"\274d\0079>\031\344\200=$\374\025>\324\355\303=:\010|\275Q_\350=\364\'\212=\331-F\275\257\236\242\274<\351\265\275Y\\\017=\300\310\324\274\213\366\002>\260v\207<\037\3157>\360i\223=\033h\204=Tg\341<\307|\000\276\216\370\336=\237\263G=\263\2660<t\022\250=\027\250\267\274\225\226\202\275r\257\006=@\253_>:\257\250\273\242\024n\275\337\304\246\275\315\304\r\276$\267\347\274\371\244a\275\202\003\010>\177A\352\275\202\311\210\275\350\355\364=\267\340,=\342X\216=\345\203\363\275\305j\371:\235V@\275\306+\r<?\212\017=+J\010\2750\354\364=\255\245\n\275\250\374\036>\352\023F=\352\213\243=\256@\017<\267\365\275=\201q\212\275LH?\275\001\205\364\275\013\216\333=\317\330 >9\324\241=w\220c<\326\344\257\275\204D\226\274\261\311#\276\301\213\215>*Q2\275O\037\017=a\264\013=\213\257\335\275j`\360\275~\020\032\276vD\276\275\351\351M<l\325\271=F \363<\\\344\223\275Ok\226<Y,\361\272\3425\001<a\232\220=\322qO:\021U\377<\205$\247<\301A\257\275`\224\216=\275\365\177=\002\336\263\275\377\002\331\273\322]\003:<\007\303=$ \016\276E\202\360\2757\177\007;\265\254t\274\246\000D>>,~=>\000\242\275\276\214\360=\257y\013\274\004%\332\275z\003\233\275\335h\213\275\374F\033\276\346f\257=\301\334\316\272\233\261\347<\376P\r=\177\353\266=\264\253\272\275\266 \323\274\020\373\267\272!\237J<\323\370\013>\207Ne\274l\215\343<\310\276~=\317!\022>\314*\271\2758\305\227>\205\025\n\276\000\033\000\273\3348\210=Rn#\275\014G\020>(\216/\276\271\274A\275 \032\353<`\301\213\275\312z\350=\354s\224=\272\362-=\220\030z=\037=w\276.8\277\274\270+2=\200:\021\276\316q\003\276\260\250\032\276\337\274\266=\203\333(=\226\233\017>O\032E\275\235uP\274r4t\2747P\345\275\204\277\236\275\226\313F>KnM=\021k\351=7\2767\276\272\nF<1\334\375\275*0T=Z\376\032=iD\330=\201p-<\204/\247\274.\033H>\263\350\177=\373\3578>[\244\261=\010\227\020=\360$\032=\203\3056\275R\"\207\274\t<\246=\003X\270\274D\027\376<v\353%\275d:\274=/[>\2740e\025\273\350\2656\275V\tR\275\264\351\232\273\006\006\023\275\357\362\234\275\035\225Q<\377\264\247<Z\236\255=(\273W>u8\226<\004\353H\275\266\340T\275\306Nu\275\306\336\231\2757-\327\275\221\007\215\274\3620\265=\205\r\034>\2372`=:\355\266\275-\310 =\030\242\242\272\037\363\025>8\306\247;d\013\">\314\215\245<\372\2070\273\022\017K\275O\300\016\275\003R\333\275v\314\032\275K=\277\273\324\t\242\275Q\376\231=\257\305 >\274\233\003>\275w\030\275\314s\014>\230o\240=\206&\n\274-\353C\276B\300\021>\304E\373=,\033*>\371\207^\2754\302\200\274\0034\007\273\314x\224<\320\2003\276\252VQ\275m5\203\274\264\322\035\274\035$\200\275\025Q\262=\345\235\310\274z\303\003>\266+s\274/\262\215=\361:\217\274\224\260\005\276$\241-\275\240\034+\276\366E\r;\235\'\233\275\351Q!=\377\331!\275\036\035\213<\340\240\302\275\253m\344=%9&=4Yz<P\tJ>_\r\321\275\216\250 \275T\031\274\275\265S\241<\340\\\261\275D:\225\275v\016\235\275\"\177\273=\n\243\245\274\240R\215=\257\205\373=R\032\310\275\311Z3>\251\330|\275\332\370\252\273w\\\271=\\\033u=uLt\275\201e\345<\333%f<\375xL=\345\0336\275\367\3376\276wi>=\307h\006\276\274-\331=\013;\017\276\341%j<Z\323\316\274\244\362\233\2752\264\325\275\354\213E\274\204\272\350\275|\314\267=\353\242R=Y\246\247<6\374\270=\310\'*\276\314z\220\275\370G\355=4u\341<\301\377y\274\225\016\266=$\311*\2766\323\034=(5`\275\307\016\003>>wA\275\025`\004\276\365=\035>>\206\236=\312\360r=\017yP\275]\235C\276\007\202\315\275\246I\024>T\030\267<E\003M;\266\263L\276\316\353\251<\320\327d=\254W\017\276\371\340h=)\226\310\275\213(#=5\353\256=(\325A=v\316\364=\323)\"\272\232\327\341<\362\366\302\274\335.\220=\332#\2728\257V\010\276\313H\201\275\t\005\245\275\332\207\234\274\221eB\2766L\375\273\246\302\033\276\333B\203=j\226\204\273$\214\325=C0v<\363\276\202\275\273\371U\275\317}\200\275\300\365\251\275E:\235=K\314\227=\253\005\361=\276\241K<\251;\306\273\232\323a\275\271k\024\276d:\330\275O\222\256=\034_\363\274\375\375\013\276\325@\210\275\345C\305=\314\375\005\276W#j\275Y4\r\275NO\215\275\334\304\266=5\376\357\274jT\013\276\232f\267\274\265dM=\307(\242\274\370iz\275\204\217\270\275\331\246H>VGt=\301\312\307=M_`\275O\332\001\276~O\001=\241K\374\275\257\241\220\273\014=\343<+\n\035\275t\253\233\274\226\300\275\274\213\300\t\276T\264\027=\210DY>bR\250=6\340\270\275\3731%\276\310\237\006\276M\206\231\275|\255\254\275\340\361\327=i\001\262\275?\215\036\276]\311\003=\366*\320\274\357\323\027\276\220\304\375=\027\303/\275\355\251\275\275s\234\243=\225lF=\332\353\204=\262y\021\275\244\217\234=\262U|=\001^\273\275Q\3044\275\267{)>>j\243\275\216\324\327=\367\312\006\273<\007\236=\243\014\'=R\303\232=l\204\222=\021x\210\275\027\026\250<2S\343=\'\354\263=n|\241=\010\315\"=\032\337Y\275\013\304\355\275\321\265\020\276b\345\342\275\t\030\355\275=\177\276=\225b\205\275\366\272\256=6\240\031=\3574o\275wc9\275\326r[\274\206\272\256\275\0309\202\275l\256\270\275,\351$\275\345\212.>\274NC<\374#\356=\223\027{\275\207\235\322\274\363\351\250=\342\003\211=\275\r\230\274\334\272u\275\270\334\214\274N\332\344\273\310\314+;\203\213u=\261\345*\275n\277\251<\276\240\000\276\016W\216\275!\016\031\275>\304\035>Ud&>\330\255\221=\270jd\274\\\330\027=\325_w<\345\235\023>5\314\030\276/\027\000\275\262U\214\274\226k\334<&\311\003>G\303\265;\255\004\036>\321\277\214\274\014\254\320;\220\023\373=\326>\373\275 \261\001\276\2326\010=Y\022I>\036Q \274~\216\n\276\265S-=\007q\270\275\372\217k=\206\232\034=r\254\246=\330I\034\276\220\211\016>z!\007>\022\352P\276\205P\311\275i\236\276=\\\354\003\274\320\247\003\2742\372\225=P6\202\273\177\223\370\275\214v\370=\347\272\311=/\200\265<p\375;>^C\241=3$\300<\024\"|\274\000\247\241<\212\376\244=\235]\214\275\347\232@<\242\344\226\275\366\337\035=\021\263\343\275PI\030;\326!7>\276\002\261=\367\372\201<-n\236\275=\325\"\276X\221\231<\306\354w=T_\025>\366\335\367\275\341\003\201<+#\202\275\320\014\004<\365\250]=\304\313\003>B\357\331<\255\021\024\275K\332/\276\034y\356<4\376b=\007\215f=\024C\262=\370\352\220=\207\272r=\315j\027\275\344\322d\275\344\304z=R\302\370=\207 z\275\3473\013\275\035\207\001>\006HG\274\221K\n>H\224\226\275#\224\033\276\346\350\000\275\336!N\275\034\356\030>\036)\346\275SD\006=\264\331\020>h$\006<qh\016\275\345\261\201=^Oh\275\033\336\316\275\267\304\303\275\301\0315=K\306=\275\332\3664\276Z\203\306\275\321b\273=\326\340_\276G\357\372<h\022\t>\355;\316=\331\363h=\031X\340=n\266\246=6fl<\361\312\023>\253\321\251=\027\274\355\2745\010\237\274\336i$>\252\244l<\237\026\324\274`&K>\251\"\216\275l\240O=\237\177N=v\341M\275\204\200\316=h\265\270\275Kg\353\274~\014\235\275\365\330\n\276\310\356\022>\177\2578\276g\242\205\275L\261\235\275\003\3756\275J\362\343<U\207\033=Oy\007>\355\216\203=\227\347\225\275\314|\261\275!\346\243<\261+u\275\250q[=\364X\326\275\265\273=>\2776h=2\273\237=\341\031\347\274\235\007\210=\317\002\351\275\211\003\227=lU\225\273\314*G=b\3272\276\373\325\263=\273\330\243<\246\3348=Q~\366=\333ih\275\022\007\232=\237\321\000>?B\350\274\222i\025=C\300?>\032\240\300\275\010\263K>\363\323\232\274\266k\000=\020e\240\275\255\273x\276\2205\007\273&\025s=\034\320Y\275 q\253\275\346\311\177=J\007\001=)}\017=\315!\341;\004,\311\275\222\316\354=\254\\\250=\317\256\325=w\214\020=\277\277\336<\352K\035>\320\255\264=\034l\217:j\203\005\275\353\240\234=\243\210v>\001QW\273\032\200\366=sw\361;\035\323\301=!i\344\275BV\324\2756\353\206=*\260@=\330\237\336;\373\314\364\274\224`\004>\0037Y\273\217\027f=\301\202 =K\224\352=\032\2332\275\250\272\234\275\273$G=\346\354\023>\356[\246<\215\225#>\2258T\275\361U\357:\320\214\221\274>\030\220<n\354\214\270o\220%\276\213\267\035\276+\363\376;\004\334a\274\251\303\276:\261\333\177\275\345\256\301=\245.\210<\314G`=\'#t=\016\024\304<\325\346[<a\366\307\275\277\247\303<\020Ge=k\214\374=\326\303\205\273\213T\226\275\264iJ\276\244\025\204=\204c\347\272t\303c<\261\356z=\310g\007\276\337-\227\274\242\351\235\275\334h\025=BN\203\274\324\217V>\346\316\235=\247O\332\273\344Y\371\275\312\345\026\276\320\006$\276\346\007\357;ZF\024\276\345)\261=kE\206<\257\362&\275K\033\261=Wf\302=\342\351 >\272\335\025=\017o\232\275\222J\216=\000\276W=\310\362s\275\224\261d<C\363\257\275R\267\315\275+\366\212=\021\266\177\276Z2.=z\034\336\275\021V\303\275\362Lb\275#\026\203\275\004T\270=\'|\353<\265S~\275\013\214\232\273\311/\230<\3446\346\275\314Up=\"q\345<\326_<\274\247\324\221\275c\036\254=\327t\266\274\020\013\223\273\300+U=\030\030-\276B\241\365:\370\252\334\274o\252\n=\345.I\276\317_\217\272\3177\022>\260\035\347\275\330\311\302=>E\007\275\343\023J=3\260\334=\030\305\n=\260f\013>x,\n=R\265\031\275\013y\346=\301r\017\276U\'{=\352\2350=5]\220\275q&\330<\242X\375<\340\003s=\235\242x\276\203\220\340\274\r6X=\215sw\276\307J\010;\2421g\276\274\347\023=f\334\215\273\002#\212\2759\201\260\273\236\t_<\315v$\276Jo\344=\"\375\025>\216=\367;\222\030i=\300\n+=BS\013\276-\357\252\275\277\032\007>A\245\035=y,\257;\317n\026\275ks\277=\364\004\021=H\231\t>I\230\365\275\014|\212\275\365\324\034=.\305!\275\350)y\275\211p\313\273\307\013\006\275\3003\242<\003O\311=\203E@\275\226b\354<\r\251\302\275\245#\333=:`\216=\270z\326\275\241\027%<\247QQ\274\236\0108\275K\252\314<\266\323\037>\307[\335\275\030z$<#\037?\274y\324\004>\014\317\004\276\353\230\320\275\354\037\027\275\277\026\010>y\311\351;\320Z\353\274\203\275\226=\254H\n=\024 \037\276\017\357Z<}!\262=(\021C\274\025\021\217\274\271\006 <\n\341R\275\371\266E\276\352\325\340\275\343Ns\273\026\221\200=\345\327@>L\260\265=\236\324j=\346K\212=\0302\360=W4\234=\342\250l=\334I\211\275DP\006>T\335\201=\330q,=R\347\307\274\005\223\267\275\207K\226\275\005\210#\276\010j\313\275>\244~=\256\304\261=[!3>3\325H=\262\345\364\275e\3536=e\375;\273\273]\200\2747\301\263=lE-=Z\277\246=7\\\350\274\220\224\245\275y\301*\274g\335=<\372]\202= \204\356=j\213i=R\244L>yA\274=L\232\201\275\357\220\251\275Q@e=\274\216\337=m|l=\372\341.\274=\265E\2760l4=5\032\373\275-x\301=\361\n\002>\375\305\305=\221\227,\275%\372\213<\225N\372=\367\003\230\275!|y\273\307b\354\275f\372\262\275D(\2669\276/<>\231\360O=<\372_<\352\223\231\274\357>\274\275 =\024>\355Hv=\002\227\210\275\277#\367\274\374r\314\274!\006\376<j9\230\274&\032\005\276\325\267\333=\224&p\274C\307\'\275A\022\006\276L\332\202=\247O\372\274\037\266\205=W\366\243<\236\3555\275\332\203C\275\314\332\265=^3\226=\013\r\017>Va\275<R\2709=z>\357\275\3541h>];\271\275\201j\227\275\361+\271=]\377\035\276U\265\311<tO\017>\330\334Z\276\033\272\000=s\220h\275=\006\361=\350\327\004\275N\354\267=)\301\215\275\257\034\266<\265\314\214==\227\036\276\212\007\270\274\207\252A\275\204\032\253\275\262QR=\254\203\003\275\006\231\301\275\215\224\244\275\357\320\014\275\237\355\202\275\342\373\230\275\0022\205\275_\320\023=~Q\310=\201\002\007>\271\020\256\275$\246\236=ef\2559B\n\246=\341\3640\276\362\211C\275\202\376\341\275\017\025\007>\327\311\244;\221e\374\275u\t0\276\026u\314=\3035\311<L\321\221\275\210\305\203<*\376B\276=l\334\275\235_\024\275i\362\276\275\242\027\257\275hJ(>\014\376\263\275\242\207\337<\"\310&>C\000}=\213\231?\275\357\206\017=qd\214\275\r\014\234=\220\333\315=D\243\257<\037\206Q\270\262+0=\305\360\036=\230\3310=\372(==\300\264\226<\341\333\253\275\020\277+=/\356\202=\222\306\217=\346\336\333\275\302\241+=3 \275=\235\366\335<D\215\207=\324s\001>\307\245\211\275\345\322\\\275*\310U>g{\342<\330\377\023\275\231\202\234\275\306\255v>\304G\241\275,\360\255=\2235%\276\r^\353<\031-\023\273&\272\r>\306\030^\275\243\305\027\276\014 X>q\247\301\275\016\227\232\273\247\000\356<\\\3762>7\021\270=\365\200M\275\277!\004\276\374\352\274<\320\rN=\001\200\277\275\235\210\222:\004\000~<R\014x=\375;g<K\035\345\274_Q\224<(\375\270\272QY\223=\"^\322\272~8$>\224n\243;\022\360\356<\016\014\367=\240ok\275\272If=W\026.>e\342\357\275\263Yd=6\242\234=\232\272g=\244\177\244=\364Qc\274\214>\236\275\265\342\317\275\"\235g\275:8f>.\312\215\275\3222\331=\003\313\275=\305\303?\275\277_\033\275\007\247\t>\257\246\276=\271b\027\276\010k4=25\324\2739\325q=\037\317\354=\213\205#\276\377j\243=\266\257\312=\034\276z\274b\304M\274zx\240<\225\342?\276\210\312`\275\354*\266=\002s4\275\271-#\274\357r\246=\353\3476>\307\'\307=\250\310\000\275\020)\343\273\026t\245\275\255\003\314<\327x\311\275\251\220\313\275\03563\2752\2032=\362hT\275\274\326G>]\037\313\275\350\272\232\274\377\001\211\275\307\341\354\274=b\037>\347Bk\275\210\017\325=/\034)\275\376\264c=\"@\322\275\215\230&\276\247\230t=\331\374\024=y\257I>\030\205\371<\207e >\374]\301=`EQ=,43=\310\2732\276d\252\270\275\216\227\256:\017\346\022\274\212\322(\275/\213\246\275\033d\254\274,\200\224=\307\307\324\275\231\223d=\361\245{>\366P;=\013\007\374=\327[\324\274\232\370\243=;\253;>:\212\275\275\324^\327\275\257\302\261\274\277\302\224=\242\321\376<\274\325q=h\312\267<]\343\324\274\3603\003=B%\313\275\0342T\275u\030-<\357\016\204=Wb\265=\026\347\\\274\206\205w\274C\263%\276w\251\"<W\246\017\276\214\244\361\273\243^\263:\\<.\275\262u\327\275\r\373c=\027H\221<c\304\006\276\324/\334;\004K6\275\202\305\262=\305r\226=Gy\037\275[\363;\275)\275T\276\272\260\266=\377cH\275\312l1=\332S\013\276Rw\022\276\030\235\301\275 :$\276d\232\221\275\223C\370\275G\210\037>\223\332\205;\036\022\360\274b\321\235<\211n\240=\210\001\357<xT\271\275OL\034\275\013h\030\275\340\352L=R\025P=84)\276\225y\215\273~\230E\274\276\260\316=9E\001\275\2569\233\275CG\223\275\016\263:\276\245+`\275\2560\321=J\337><\302\031\203=cI\010\276\341\n\243<=+\202\275Z\3633\275\244\207\022>=y\n\276\341\347\243\275&AQ=\"\325\037\2761y\216;9W\334\274\004\327\273=|\355\243\274\031\2536>\336\331\203<\331\262\251\275\245:^=s\250\025\276\347\267c=\r\346\344<\004\247\204=\016y \275\'G;\273\235+\303\2755Q\237\275=\002K<\223\320\201=\002\374O\276\2266\364\270\377\360\217\275\320\346\032\276\325\t\223\275\221\230:>\007EU\274#\354\325\275\215R\210;\027\222y=\344\340\321\272s\305j\275\321\023!>\007\2306=Z\222\202\275\372\033\225\275\215\205\373=\2747.=\274\205q\275\005~\\>\265V >+\n{=\344\215\024\276\023\345\217=\220\250\035\275\241&\210=\230\267\247\275\267I\022\275 \332w\275<3\014>\243*\004\275\315e\344=\242^\310;\347\257\356\274\364\230\230=Y/\004>%\260\243\272\225\236\250\274\242\367\003>\313#\304<\253\351\352=\214\035\374<\003\371\021\276\321\371\373\273\347b\031=\347\320\217<k:\317\275\034\215\235=;\227[\276B\'\016\275\016\323\226\275\263\244\205\275\037\216\357=\334\350\251=\323\360\352;\007\214C\27484\273=\272`\300\275;\371\306\274_\362E\2766N\260\274\342=\035\275\255w\261=\235:\265\275=\255z\275\204\324~\273\353\327\217=,\257)=\226\216\372;A\305\"\276GK\263=\312\257\345=\225\340\346\274\253\205n<\033u\212=}\r\205=H\326W=\230U\324\274\272\326\017\276\234\tM;\322\336\006\276h\246\242=U\252\333\274\351\017\020=A7\200=\2620\266=\021\375\347=$\262k<\014F\203;\014K\000\275cp\256=;\350?\275\346G\263\275\276g7\276\264\361\253\275\202\275\362=\226f\252<\t\374l\274\254\010\304\275\263\330\300<W\346\356\274\240\223>\276\352\204\246=\236\306\254=k\323\"\275\205K\036\276\325\270\330=\214\317\032\274\326|\017<\243\364,>Pmx;\324\333n=\26575>Ae5=J-\266\275\034[\000\275D\316\350=\0107N>f\377=\275\323\'\241\275\2730\032>\023}\017>\231\224\240\274J\217\007\274W(\221\275\356\342\351=\3554\377=\320B%;\235i\251\275\203\"\001\276\360}^\274\374\351\371\274a%\365\274F\\\224=\222\206\027\276\344\347\331<\037`\340\275\370\246 \276\n\273\034\275\317/\203\274\217\351\320=E\353\363;\322vK\275\300\344\017>\264\237\302\275W\225\354=\225\t?\275.\260\301\274PO\356\275\2021\251\273? 6>H\245r=\300u\304;\236)l=\253\221\324=\373\221\231=\013!i\274\303\032\255=\020-,\275b\213C\274\223B\244=\025\001?>\214P\334\274\332u\267\274l\361\335<Y\2604\275\330R\270<1\240\312\274\207\306\214=J\230\366<\250\261\212\275?\354\217=<\206\035\276T\264i\275\035\275\010>~DJ\276@\221\037<\360s\364=\027\370\221<[j\022>\217T\'\275\201^=\272\"T\307=m<\200<{*\036=\016:\227=v`\004=\271\"Y=\206\036H<\310<-=8\242\365\275\021>\220\275O\271\332<\205c\260=\232\210\341=\333\205\324\275\237b\372\275\314\024\271=J\253\301\274\333y\273=\360\323\031=\232\220\240=g\231\032>b\274\316\274mB\231=QD\337=l\014\001\276^\240\t>\016\027@>\372:c\275\352\021u=\325\335\374\275\033b\212=\312O\031=Ck\315=\352H\343=N\255\345=%\207\021>\316\375\021=%\256\235=\231\207G=\016\177\273<\253\311\200=J\343!\276F\356.>f\371m=\034q\377=\240\234\247\275\355\357\\\275\027\262\003>(o\007=!U\315\275\342\014\242=\271`\r>\324<r>e\261\236\274\237\340\200<\332A\227\275f1\367\275\371\201\207\274\004V\233="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9926152
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\363\020<\275j\310\237\275\303\036\300=,\354\244=\310\014`<OC\210\275\362\235I>R[O\273D\302\036=\215\372L<\007f\375<\347Wb\275;D\004\275\337\276\373\274\341\321B\275\002C\215=%\035\311\275 z\271:\355\014\037\276O\034\\\275\254^\250\274\225\362\355<[1?>\022}\262=\014\370s\274\203c1\276\256jm=\305<\250=\301F4\275\230\021\'\276\325\230\354<\352,\205:\232\217\366\274\257\021\000>\"\016H\2755/\230\275\277-\363\275p\316\344=\277\351\\=\277\333\370<\013W\227\275\2052\030\276\027\3433>\303\005A\274\002\375E\274\003\367\303=\177\027\010=\033f\236\275\3235j\276]tr\275\346b\036\276\2564\330=\376\030\'=\345\3029=C\240\366\273k\346\364\274\302\327\324\275\237\t\"\274 F\033={C\313<\366\303\271\275\027\020_=)\310,\273\352\273\000\275\006\031a\274\350\017\013=\220\'\262\275\233F\373=\351W\365\275[\223#>\200\361\242=dO\220=eD\273\2750=\221\276i\024\030\275\331\303\021>\321\013\021\275c\004\245=6T\270\274n\227\274=\2600\023\276=\216\200<#\323\273\275X\376I>5,H\275\262\353\207\275V\3710\275\270\017z\275\005\336\250=\024\362\232\275\030\234\346\275\245\2749\275/\177o\275K|\250=\311\376\002\275W\211P\275\210$I=\243_\025>\352`\206\275\251\000\330:\375\251\223=\263\232^\275>\206\221=\375\321\214=\375Q~=\277\322\374=(\356\271\275\315\034;\275\220\325W\275G\342\255\275@\341b\275p\225\221=\241\200\332\275\360N\007\275\035\252[>\316U\373\275j\333\241=9F\275\275\2661\001\275A1\327=m\211\000>\334!\332\274\017\234 \276\306^w<\360\334\033\276\231N\025>%\256\353<\277_\212\274-\326\243\275m\346\036\276tO\">\247\232\344\275a\261\202\274\346\332Z<%\255S<z\220!=j\314\222<s\006\221<\230\377N\274l\354>>\302\322\351\274\030,\004>%\302&>\000\275\222<~\362V=\324\242\004>\316\335\\=\321\035\224<\212\241\037=\226\336\347=\275\336\177\274\364\2014=\346\220g>\260\207A\275\255a@>\356|\'\274p\222#>\320c\'\275U\222\004>\315\371\355=I\243\225=\\\324\376<\023W\364\275\n\371(>n\n\201\275\237Xa\2757\311\022\275!\335p\275f\317\342=\003\371\244<\303\301\221\275\345\t\255\274;\331\244=\260\256N\275\333G;=\357\226\374<\375/\335\275\317>;\275\330 &\275,6\313\274\304i\210<\206\225\205=\253\241\333=\014\250\004\276$\234\007=Ir\354=\031\353\322<\030\371?<[\302o\275c@\256=\225\212\222=P\317W>\024\255!\275\r\204\200=\240,_;\362\001\001>.\313\303<\371\007\034\275d\006&<r\004\377=\033\375\347=$\006n\275\310\235\242\275~\305\027\275\271#[\275z~&>/C\312\275Af#\276\344\236\223=\217\236\213\275\223a\006\276\037\005\r\276\336JW\276\002\220L\274o\253\345<\351\324\240=\207n\242:*\366\354=\242\020L\275\267\027\306\2743L\206=\021\030/=\275\333%\274uw\014\276\357\324\227<\32093>\317\254\310\274\031\2011=\037F\362\275r\367\002\274\2358s\275\360\360\000=7\362X\275K\317\234=#\013\002\275v9r=\260/$\276\tI\241=\273\231Y<\020\240\343:xm\255\275\032\257\312=\336\305\035\276p~\004\276}I\323\275\2454,=!\321\225\272\357\332\027\276C\323\271=KQ*=\220\215\003\275,c\033>-Jz\275\002\202\003\276\301\366\r\274\321_K=i\226\365={0?\275\242\262\000<\014\323\232\2757\356\333=XF+<\265x\243:\202\271\016=4bz=B\254y\275\2356\333\275\313p\001=\336\347\024\274g\034\351\275V(\261=\376\373\373<\3668\203<?d\325\275\367G)\275\355Zw=T\206\313\2745\375\346\275\027a+<\020\266m>@\300\276=\326\234\t\276m\305m\275z\000\331\275AF\030=,S\300=\227{\360\274\317\212\302\274\035\333\006\275\350\230\335<,<J\275\006|\207\275\204\346b\275\205\352\026\275Rs\001\2764\352\256=#T\257\273\360\2419=\260F\213\275\036\270\307=r\351\232>t\010\014>l\026\223=?\025{>.K\206=\344`\370\275\306@\225\270\337\233\245=\227\246\313=\270d\177=\020\177u=\252\010*\275Q\205\267<[\325\252\275\254G\202\276\023U\202\275\023\343\210=\037@X<&\311.>nu\256=\306f\363=\361\032\310\275\200\351\225=e\374R=\351\350\274\275F\373\253<`\201\205\275b\027\274=\022\t\245=\377\315E\275f\246\016\2761$\205=S\003\006\276?ks\275\303\214\360=\332\322J;:S\315\273\211\306\300=\033D\245\274\025\273\001\276\327\024\037\276\327\236E\273\177\\\026\276E\320\260=\205\361\277\2758s\362\273\234A\252<c\256\321<Y\323\200\275\263\352i=\245\367\265=\025\270\242=\350\352\034=%\322f\2751w\302=\360j==9M\360\274\331\353\204\274\344\246\250;\004\276\377<G\006\014\275\0024\013\276!\031\231\275P\370\252=\255\364\343=#\376\203=\272\217\t>\225v\244\274\247fX\275\2330\304\272\316/\254=\360W\311=\311\0303=\007\306\362=w\277\210<a0\034\276\n\264\221;\237E2\275\211\200=\276^\210\302\275x\211g\275\235\034\274=\207S\243=\223\304\220=\371\323\222=\252\205\200\275\364\0173\275\241}^\275W\252C\276\302\270n=o#\240<\234\340\241\274\313\036\033\276\377\221/\275\037a\212\273\0375\360=^\270\326\274k\366\206\275\020#\344=\032\025\335=R\276\303\275\206\240\367=\227\221\234\274zr\224\274o\333F\275\276\312\037>\333&L=\331\347}=,\261\316=k\241\316\275\377t\250\275+b+;g3\233=\220\027\324=\355kK=\251T\347=\223\217\323\275\3242\254\275\215\346\023\274L\251\232\274A\300\352\273}\327\313<\204\270\302=\301\361K\275\247`/>\275\375\263\275F#\034\276(\373\264\274I\272\277=\034\367\275\275j\201\010\276\r\220\356\275\272\3168>\345|\003=\2252^\275h\333\332=Wz\264\275\364\361\274\275\r\324\213\274\354Z\n\274\210\316\276<\350\2473\276\217\262\377=\374\271@\274V\"\322\273>\236\275<g7,\276\364Q\034<g\rV=M\036\333\274\"/\225=|\356v\274\220\266\021=\\Z/=\312\032\267<\226\357\265=;\320O=\243\315\333=\254\317\333<\3043\223=Wl\316\275\36502<k;\263<\350\241G<1C\213>\243\277\260\274\347w\224;\225\254\273\274v\343\t=\362\310\t\275\236b\201=^\266a\276_\326b=Z\300\200>\260ym<\216\332\026=J\036\013>\022\227]\274\342T[=\215c\001\276\177\345\265<\232\2630\274:\314\033\273C\326\357;\003n\331=Z\000\004>@\273/\274\320\341-\275r\233\t=\334\262\007\276\322\320\366\274J\240\232\275B\374\313\275Eb6\275\340\375J=rb\004=Ko\242=\350X\215\274j\340G\275CEp\275\317#\240<w\235\026\274\312\333\017\276\254$j\276\231\251\266\275\233\206\264\275*\361\263<\353\322\031\276\300^/=\340\230\315\274VW\024\275\201^S\275\t;\016\276\3260\266=ej\245\275\342E\204\274\010;\310\273\361\264G>\037P\000=3\373\354\274Zu\225\275\343v\026\276| \312<]S#<\033U\250\275-\262\327<\030}`\274\300\367\274=f\000\344\274\374\"\375<\006 \201=I\353\007\276r\212\243\275\350\250\242=\201\305\020>X\366\272\275d\277f\276\032D\340=\343\372\002>\372\0141\276\317\333\355=\026\337C>\320$\243=&_\335\275\277\004\237=A\013\307=\261{\257=V\342\223=\037\222\006=\265\276\002\276x\212\2707\0357\221=Y\034\246\275\367\000\322=\216\303\216=J#\241=\n\003W\274\264c\r=.\221\013;I\002m>\021\227\265=\244\252N\276\325\204>=?\313\354\274^\354.\276\363\235V=\017\342R=c\004\354<\013\210i\276\364*4\274]\225\305\274\025\304$\2743\202\200\274H\014\275=upb\275\324\230\000\275\314\367\210\275\241\031\352\275\267\335k<\354\023\276:\304\255\t\2765W\226\275un\265<\225\345\335=\221\253\374\267\177\017\020>L\373\023=\242@\264\274\"\314\232=\\\323\336<$x\203\275\346[&=k\375l\274/\030\310\275\300\225\307=u\245=>\257\365B=dc)=\3177\031\274\022\314\275\275\376\241\267=\377\262\334\274z,\014=\272\264\r\275\3611\311=\0278\267\275Yym<<8\346\275\027\257P<s\'\022=\324\373$\2758L\261=\t\227\004=i\300\232=b\036\031\276l\304\371=M\200\263>_\350\243;\324\243\\\275b\022\363<&l\001=\340g\n>\271\376\025\275lz\201\276\003\371\372\274l|\237<2\227->;]1<\037\353\024\275b\250\257\274B\327|\275\326\242}\274\307rc=\275\352w<\311o\355\272+\327\022>%\201\245=\214c\320\274\217\324\262=WG\206=\354<\250=\321!=\274\200\346\021=FM\323=\007x\206\274T3\274=\230j\373\274\213-H\276\377b\372\275|,\271;\025\360\022=\357M\036>\356\203:\275>\3332\275\023@=\276\"\321\024\274\350k\334\274\\:>\276\005]\243\272o\202\200=\314\004\375\275E\216K\274{\031K\274\375\250\324<\276j\236=\234\371\252\274\370\344\370=\302\237\031\276m\032\207\275\223\362\030\275D\265M\275z\321\224\275{\366D>\n\036\254=\334\340\206=(L\007=H\314\240;\326T\020\275\230\344\243\274p\366g<\250<\250\275\335\304\261;\303\036\366\275\204\227\271<Qw\253\275\357^]=\036\327\370\274JR\006>\334\350\362\275H\317U=\313\032\233\273\345&\221=KT\230=\034\010\270\271`wl=\344\324\332;/\305\210\275Q\357\223=\264Vd\2758T\001\275\016\252\306=\324y\216=\311\250\256\272\003\201\345=\343\323,\276\354\305\331=\215=\322\275\027Z)>\003wv=\302c\354<\301y\333\2750?\014>\264\332\317\274\232RK>U=e\2726\203w<n\234\374=7F\350\275;[\303\274(\3208\275\rOK\275\370\327\303=\247{\027\276\177\331\262\273\304:\361\275\225\237\260\275\254\007\177=;\321\275;\022\341\261\275\340\020#\275\\D\016\276\223\213\205=\002\0275<X{\027=8g\212<\260n\270<\301\305T=\330\224\264\275\324G\252\275\376\3349\275[k\347\274M{A\275R\251W<\324\224n=\224B\211<O\032D=\313;\221\274\323j\035=\327)\255\274\220\221k>\033<\213\275\226\214\372\275\334\351\017;\231q\354\274\325b%\274\367 \247\274n<\243==\036\215=iN_\276s\227\304\274\2301\300\273\016\245\201=\377Q\370=w[v\275\036Yc<\013r\342=\303T\000\274\335\247\004\2767\253[=ug\037\274y\343\214\275\334\217\315\275\201\372@\275O\313\370<\330\224\346=~\350\221=Y\372\372\274\335uG\275X3\241\275k\235\326\275\342\354\227= \302\210\275\300\3710=\035m\001\276\365\032.\275\376\215\275\273\206\276+=\2669Z>\357\213\263<\356\352\325=p\370\331=\317~\260\274\226\232~=]0\212=>o2\275n%\221\275\221\nL>\345n\223<\n\n\005\276\010\243\203\275\366\275\232\274\314\n\336\275\2761\336=\235,\034>\346\323N\275<\311\270\275\024\335\357=7\312|\275\177\367#\276*80>\272\262Y\275\222\317\020\276^6*>\347GX\276\343\300\340\275S[Y>>H\223=6)\245=\315\003\031\275[\321H>08{=\237I)\274\357X\354\275r\004Q=\255O\202\275:\006\262=\033\222\013\276a\004\347=\216Ln<\214\334|\274\233\'\220<^\036^=\222\206S\275\331\307\030\275\335\256\227=\340Jc\275\177H\346;\207X\262\275em=>\310\325o:b\226P\276\2147\n>\307\354\233\275\017\373\013=\"G\354:\343^\371<\315L\030\275\327e\n>\304h\237=\207\323\271;+<\014=v\264\003\276\266\366Y\275\226yf\275\027t\003\276\324\377\342:\254X!\275Dc=>!\2535\275H\363\271<%\\e\275\301\211W<M\220\010>\261J\321=Z1\303\275\n\026\343=\233&\276<\325\317\236\275\001q@= \010q\275(\337\353<\300n~\275\262\240\327\273\372u\022>8\034|\273^=J>Dc\221\275\255\262\345=\331\262@\275\374\001\325\275\356\207\256\275\320\214\330\274\215am\276\023\004\005>\204\204\210\275Q\230\221\274U\274\310=\236\001\206<_\263l\275\362\3474=\301\032\237\275\210\251G\2753\325\352\275\000G\243<y\370)\276&\257\276=\004\310\331<D\332\240=IC\036\2764s\225\275C\021\025>\262\370\361\274\222H\221\275\225\340\251\275QJ\252=:E@=\230\355;>\261\331\303=\217Mn\275\372}\243\275C\032\355\275\376\256\225\275\362\255\312\274\305\344%\275t\025M\275BQ\230\273\326\005\217=\022)\t\275\351\306\014\276>\227\013<_K\016\276\036\244\253<Yk\035\275t\004\372=\305r5\274\215\0326>\215\007\233\274\353f>\275\302K/=.\201w\275\337<\200\275\r\237\020>\230t\352\2740\321\000\276\377uE>EgK\275\314E\256\274>\326\274\275\017\314\007>\376\350\350=C\016\210\275^b\277=\323\311@\275\271h\271\274#\203\026<\023\263\252=\335\2515\275ne9\274\343k:>=-\214\275<Z\242=\243\314N=u\017\200=\260\274\376=\317\354C\275\014]\030\276O\377\247=\247\026\272=\346\321\372<\022w\207\275\367\272\250\274\346\035\002\275\200\262\304=\353\233\352=\2341\313\273\325W\014>\373\241\014\276\\M\260\274F\340\261<\335y\243:\316\006Y\274/\3017>\342\320$\275\262\342\207\276;\023\027\276\031*F\275{\037\210=\005{\306\274\2162\343=\016\245R\275:\026\t=b\203{=\240\370\202=\360\307\327<\310}l\275@aL=L\333H\275\256\210!\274\003\373\025>\314\323\241\275\244\334\270<\200\n\224\275_7\272\275\317\177\333<4\334\352=<\303\300\2759\021\372\274S\367\227<\022N9=\222\000\254\275\006Pk=/~\243\275\004F\217\275H\371\244\275\262\210\236;\314F!=|\334\311;\264!D\275\371\037\017>\236.\020>4\027\372=\330\033N=*b\253\275\377DD=\336= >*W\325<\264Z\003=0\311\014\276\243\245\252\272\\\225\207\275d\024\021\275\214\261\201;J>\337=\320\371\005\275\032\256\022\275\327/Y>uf&\276\007`\234\274\026\030;>\252\302I\276\257\331\377\275@\010\211<\304\243\357<>\006t\275\3300\004\276A&S=\375\251\227\275\230\302?\274\270\r\020\273\212)\033\274\304\320\203\275Gd\257\275_\357S\275\332\0168>\001\316%\274.s_\275\345.\312<d\n3\276|Q\n=\370\306\200<Z\375=\275\372\341\035\274\244\031->\327f\272\272C\204\264=\276m%\275\034\351\245\274\2113\237=\325\002h\275\014\014\221\275\026\263\362=\261d\257;\302\320\367\275MH\341\275q\262\034\276>^\271\272\207\264{<K-\030\274(\251\360\275Cl\020>o\276\022\276,`\010\276\014\025\225\275\243G0=\212n\'=\331jT\276\2159Z\274\220)U\275\364\005\332\274u\316\027\276l\340\235=\007PD\275\325\217\262=Bs\023>~\327\205\275\377\234>>\251\367\020\275\312\224\212=\034\023\250=\n\307/\275\233\326T\274}c\341<A41\274\016\246\323\272\232\247\246\2733\363\247=\253\217\327:\220\035\007\275\363\222(\275A\346\013=\010\346\232=>\370!>\263\266_>\036n\377\274\343x\351\273\037_\252=(V\254=%\"\250\273\374\032;\275qD\365\2744\326*\275\373\013X<h(!\276\022\314\316\275\266d\022\275\232\010\261\275\370P\005=\333\264S=\0258C<\352F\264\273\301\357\322\275/\022\347=\032\032\013\276\214\275\301;\"\267R=\027w\332=u\233\021\274i/\271=_\247\230\275\242U\321\275x\212\017<:\243\017>/\177V<\367I\222<-\323\301\275\323\255\013=\254i3\275\\Z\002>\246\236\001>1v\352=E\"R=:\232\333<\357\315W\275\264\3156=x\300\355=\373\231p\274f}|\275\365\2634=\360;N=\210K\003\274\304\'%=\36517<\014\242\200;Sf\020\275&\035\265\275I\010\213\275\315\222\344<F\357\033;\261\251\002=I\313\005\275\217\367\r\275w\307\'\276\216~*\276\320\3147\276\243\001\242\274\300\374\036\273\225;\235=\311\025A;p\251\237;hw\031>r\200\'\275\372\035\334=\252G\013>()\335\2752\260\256=\313#1=\247_\272\274\"\274b\276|\337\247\275\344\315\027>~\017\244\275k2\350\275Y\224\202\274\360\356u\274\223$\353\273[\003!\276\277-\321\275q\356<>\334\275\327\274\023*\036\2762].\276\205\350i\275\204\207C\276\0225w\275\337\222\242\275-\350\010=\233Q\023\276\275\265\020=\277\216\214=3\212\217>\371\235\\\275\303\242\233<e\212\311<\212\031\222=\370/\n\276\034\277\024>hA\224\274&m\232\274\226\336\356=\311\3471\276\331w\223\275!\240\266=C6U\275\312\263\262=\307\233\212<\244\003\331\275\356\276\305\275B\013\340\275FML\276\211\315Z\275\332Fi=\252s\221\274\034\177\275<\thj=\371\356\237=\263\232l>4\023=;\307\003\016=_\244\005\276po}\2755*\023=!e\241=\316\364\252<;=\205=\007\233\232\272(\177\360=\245\201\356=\372\302\267;.\275\223;\216(\217=UE\001>\016\371I=p\271\221=\177B\235\274\261\363W;\021O\n\275\240\236\356<\351\272\342\274A\206\277\275\227yK=Y8\320=\2146\345\274\320\261\276\274\2205\311\275B\371\177\275)C\353\274\000WC\275\222 \203\275\310M\355=\273\253\005\276k)\225=\212\205\374<&\237\001\276 \031\035\275^\235\232=\373\237@\276\"\016\350\274\312<\206\275d\267\203\2752r\254\275\317J\202\275n&\355;\356\022\227\272\305\264\371\274<\2313\274\177\327\020=\206~a\275r\310\372<\027\301G\276\006}8=\3643\243=\307\025\205>\326\224\240=:a\227=\006\271\211=:\020\210;\250$+>\247\024\313\274\177\202\376\273\372\003%>\'\230\031\274\342\240\001=\211\235q<D\244\245\275\310\241\257\275\227\264\250=\023\363S\276\030[@:\262\263\321\274\320\337\017\276\033@\213\274A\000\262\275\016\374\334:\322\272\224\275[\376\251\2754|\261=`\300\216>6Q\262\275\324\363\214\275\376\306\202\2756\304\334\275\354[[\275\025!\312\274m^o=\246\316%>\226\331\351\274\020\216\r>+\254\000>\363\0331\275\350\217\300=E\0007>~\325\010>\222\2458\276\354-\333=\306\253\n>5\300\355<\376f >\243\216\322\275\242\262\265\275\014\037V=@\333\234\275\232>\254\274\022Y\320\275(\237\257=\367a\276=\036\366g\274\274~\276\275\024\235\367=}\333\372=\200\022%=\335\222\203=\337\204\271=\337Xy\276\017\032\375=MS >g\217\357=\202\210\216\275YS1\276\355\327\247=\035\271\323\275\263\243\322\275\350\275\222\274\230j8\275,\237~\275t\227\023>\302\314I\274\355|\317\275\352\332\225\275z\275\353\274\312m\021\276\3271\257=\351\366\363\275%Y2=r\323r\275\334\250\305\274\276M\341=t\333\023\276\023\341\254=3\350\366\274\375\021B\276\365\331\323=\367\337\017>T\024\303\275\262\3555\274F\256\306\275\355<s=\366,\323\275\275d\342\275Ll\002\275n\207>=\322a@>\214W\214\275\244yG\275\344Q\245\273\014j\025>\372$\271=#l\032\276\373y\214\275\000\231\010\275A@\266<\006l\035>\2273\240\273\202W\213=\320\036\367\274\254\334\272=VY\213\275\3510@\275\001\003\333;\333\"\n\275\276k\375<9\022\004\275\240p\270=DT\030\275\201k\314=\374K\237<s\312\261=\276~\270=\345\207@\276I\2534\272&\231}\2736\260\004\275\021K\371=\210\222P\274\030,Q=\026\271\263\274@\224\346<m\325\334=\206x5</M\374<\035\341\203\275\"3\337<\034\343\211=\341F\325=\364\005\224<?\264\221<\2632x:K\305\242\275s\323\030<|i\222=#\2522;\333\306z\275\204\030\322\274\251\323#\275J\3208\275\255\252>=\245\264\370<>\210k={\001\261=\246J*>\025v\245\273\305\330\222\275([\014>\022\244\253\275\361BQ\275\350\004m=5\237I\275v\010\020=\365\n\251<mW\021>Y\317\352\274\276\267\254\274b,\354<\204\227\264=\021\'\371=*Do\2756@\037<\223\014t\274\353ZO=\201\200/=\007\010\362\275T\342\021\274E\251\251=\250y\202\275\314\r\205=\237\200\277<\337\300\025\275\340h\274\275;\373q\274\262\0333>\037\306\275\275\375jU=#\323\"\276&8T\275.\276\013\276\372Y\346\275\330G\367=0\235\"\276\036\025\213:\312}x=\353\021\325=\225N\014=s\304\013>7Z\016\276_\t0=\316B\016\276\244ee\275\3332\276\275\336d\204=\356\345\323\275\301@S\275\311\320\027\276\324\005\252\275Q6\t>\002\']\274\206\215\264=\271X\372\275-\031T=R\236\030\276\346~y<\\\222\201=\250\353s\276\024.L=\222Y\302\274b\337\373\275F\342\206\2758\307\n=\323\000\230\275\304\334\006\275\205\324R\275\360,\013\276\316\326+=+)\333<W:\251\273\033\306\312\275\216\347\017\275\245\342\030\276\353\337#\276\3760\364\275\237\227\276=x\324\375<nc\344=\0068\253\275\246t\325\275\273\273\036=\363\202\353;P\356\033>\236\025$>\352X\264\275\224-\250\275\303\021\235=8\332\370\275\222\0223\276h$\237\274\177c\216\275\327n\312\275\234}\032>R\030\t\276\327\247\363\273^\333\243;cgC\275\217\213\243\275\0041\327\273z\027\303\274\013@\n=\225\245\220=\225\341\301\275]S\362=!\231\210=\010#\014=\336\327\2428eM\034=\331RU>\212M\352\275SD\002\275b\204\245\275\3074\344\275!\351\023<\342\311}\275\3646\003\275\034 \272\273GN\022\276\374\255\366\274A\353\365=\321\214\335=\204>(\275\220i>=\370nc\275\021\365\"\276B\227\\\275\215\272\326\275\257\352\n=\274\326\205=`\026\247>\222I\205;\202\350\222\274\341(\036=\212\230\033\275P\177P=N\263\242\275\237*\017>R\260\360=\343M\030\276\3254\216\272\302/\344<\250\001\330<\351\272\025\276\367\376\205=W\326\027<\242A\214=\240gP>iN\305\275C1\236<C\373\362\275\266\336\020=\235\006\257\273\276o\177\270f,\321\274\326\327\212\275\254\t\330\273\332G\350\274V\356\304\275\373\314\377\274\365\006G=hY\231<K\361\200<\204\254%=\302hL\275\020\227\004=r\221\345=\343C{\275\030u?\276\260\217:\274\355\220\216=\320\257c\275\220\343\262\274\032F\331=f\027\335=\007_j\276\234p\352\274\036AU\275\255\330b>\324\036\304=\020\004\027>\2125\030=\014\226\312\274\344\314\354\274V)`=b2\224=\3177g\275\024~S=\017\343\023=\343\2672=\343H\311=\253;\322;\222\241\005<\261\0241\275\202(\317\275/s\215=@5\317\275\210f\234\275\337fE=?\321V=o\342\223\275\\\351\220\275#\002\231\275\361\272\245=\372\307\221=\346\357\217<J\313\252\274\367\306\300\275\301\201\0229,W\325\275\n\325\225\275\240\347\257=q0Z>\271F\013\275mmP\275El\376\275\215y\2249\260K\356\275\021@\242=\261\216*\275\005\003q=Y\247]\274\341I\231\275\324(\200\275\225\244\205=\377\223\321\275\233i\031>c.\300<L\242\014\276\340\346(<x\242 \276Q\014\004\276\270.\317\275\236M\'\275R?T>_\227\004\275\254jy=\314\234\344;N\377<\274W\217\214\275\201;\256=\025\350\250\275y\342\315\273J\343\300=\206\377\006;\214\224\320=\367-O\275\033\222;=\277,\036\276\203F\312\275\236V\010>=\224?\275\026w\346=\326]\203=\304\236\024\275Js\031=\377\311d\275\326N9\271\307\211\036\273\035<\001=|\214\033=hA\345\275W\366\376=\221\224\020>O\233\225<5\003\362\275\016\027\262=\366-+=\264\274n=B0r\275\236<\030;\240\210\252\275\007\313\331\274\220c\334<\207\246\230\275\035%\021=\324\211\253\275dw3>s\361\321=M\343\034\276\006\016\014>>\033\377=\\\245\245=\303\376\t\274\010\177\035>\305\201.>2\237\247\276\310\346c\275\230\022\352=\014I.> \305\020>\377%\037\275\301\267Y=\316\0201>U\200+>\340eg=\342\030r\275\221\021\304=\3164\257=\2561\255\275wJ\000>\206\313\317\275\213\027\013>\006\276\326\2748\226/<\240\256#=\213Q\323<\370x\267\275\252\215?\275M4?\275\321\321<<\tU\037\274.\262\344\275\307,C=R\323A<Wo\216=\303;\274=\276n\267\274\2614E;/\366\267\272Z\334\262\275\351\227\223\275\202\014\203<\2306\317\274\006\210\227<+{/\275\254\3571\275v{y<\023\264\311=w\330!\276l\2430\274\016x\t=\023r$:\23138>\032\253=\273\350\306O<:\261\226=\364(]\273!`\336=S\356C\275{\326#\275B\035\273\275\234\303\275\274\304\250\334=\226=\350<\216\010\277\275\275ND>\240\214\221=\342\2311\273\333|5\2753\310\354=\363\035\235\274\352]\235=\316\377\347\274\272\2463\276\3266\322\275\nR\227\275v4\007\276\304\017\026\276j\372!>S\273S\274\377{N>\260\207\330=\256\315\260\275I\260\036\276\340\265\001>\356IG\2769p\330\272\213|\222\274\340\275L\276e\010\330\275\320$<>Y\317;<u\340a==-\325=\210\036\200\275H\252\205\275\003\361\020\275\227u\365=;\352\017=Z\203\016>N\026s=\022\363\311\275^\217\377\2759\201\n<\014\324\"=\264\014\250=\330N\256\275{\206P\275x\357\\\274\3139\r>\314\0372\275_B\021>a\224\226\275%\265f\275g\331<\275Fl\361=f\360B:\035\254\351=Q\016\n\2755\327\003>@J,=\256= =\303\360*\274\236\246\210\275kH\221\275\214x\261\275?\377\322<\272\205\252=\005\333\334\272,\3223=\353\256\030<\370f\266=9#?<[\344\n=)I,<\243?\227<\261s\036>.W3<\334\247S=sW.>\225\031\304=\250O8=\003+]=\342\202\203;\313\316\256\275\2059:=L\017\201=\322U*\276=\206\217=^(\302<\224e\234=\273\035\211=\320g_\276\310\n\334\275>\005O=,C\212\276R\371\001>\336\306\220\275=\375\335\275\004W\022>c\3539=z\245\333=\025\375\273<\300#\036\275\317\026\370<\256\340\313\274\3149\'<C\231\315<\346y4\275\340\312M\274J\363M\274\354\222\372=\224%\006>\373Z\302\275\017\272K\275\211\026\271\275u\235\230<I~\366\275w\255\246\275)\311\"9\201\010\321=\331\013\356\2743S\214\275@\320}<\024\267\000\276\t\\j\274h\351\241=\240 \255=T\272l\275h\230\210=\005eL\273g\207\275</&6\275\246\nz\275\003]\032=\205\r\210=$*\001>,\331\205<<o?\275T\351@\276\247\371-=\315\255\002\273\222\211\022\275\305\272\274\275\250\330\337\274\030\035\262=\322\222\356\275\325\303t\274\221\'w\275P3L>\367\226\375<\016%\001=m\001\257=\305\263\005=\205\227\351\275W\356\305=j.\007\276\010\210\205<\251\302\362\274/\265\245=f\276\234=&U\200\275?\3012\275uFA\276n\\\032>*P\251=\310\351\210\276\225\201\310\275#k\000=%g\221=R\340u\275&{>\274\363F0\273\'\277r\275\030\2732\275E\272\031\276[\206]\274\213\335\221\276\227\227|\275\263r\357<\315]\327=\264\036\221\275c@\206\274V\372u\275\277}\027=~a\357<L\322\331\274/$\r>\211\351\371=\244\301\262\275\240Q\264<\210\2742\276\221\003Q=\017n\006=~\016i=]~\221=\027\262\033\276\010\276\306<nt\336<\371\\_=\006\016\003>@=\253\275<E\257\274\202\362u=4\016\315\275\007(\010\276I\211\203<\316\272\243\274\213\371\351\274t\341\021=)\367\007>u\353!=x{\265=.\321\035>w\037\365\272`r*>\265,\326=*C\036=\302\316_\275\314\212\202=\205\342H<U6s<\201P\000>\223=\316\275\001P\225\275\320\206;\2746\211\341=1\037G=\n\360C\276\003\3056>q\244!<!\211\360\273\323\323\343<G\303A=vjh=\330\261\261\275{C<=\234;a=2q[=\270\370j=\357\356 \276\255\304\335=\360\3360=%\361\241=\216-\335\274Z2\234=\341I>=\246_\017\2766\360\010\275-6\245=c\310\333;\237/P<\210\337\230\275\031\256\315=\370r~\273\345&j\275~\204\376=\304\244\211\275S\356\240\275\027\201\244;`\245-\276\033<\211\275jB\031<\'\210~\275\374*\337=\213\305\024\276\217\037\320=\200-\372\275\312b\367<\350\033\330=\333\002\314=K\370\370=i;Q\274\3160\002>e\261\023=\212\307\217=\204\3018\275\246\335\270\273.\3336\275\266\336\331\274\254\037\340:~\267\306\275\322\222\001\275\n\223Q\275\304Nj<\005NQ\275\343\017n\275\215/\025\2768\346\001=\020\321\003\274\000\221\367=\331\277:>x\245\211\274\215\026\272=\240\023A\275\001h\237=Z|8\274\'{\356\275K\326\315\275\t\274\307\275f\020\337\274\243Bg\276\360\037\251\274\217|9>\n\312\377=M\006W\275\016\2133\275F\205\256<\n+\'\276 \032\334\272\372\3415;>%[\275S\270+\2766?\310\275*\321\351\275\346\213\307<\214>\256\274\355}\235=\316P\252=9\336\002\276\000\003:\2755\312L=\"\342N\275.Q\356\275\031>T\276\r;\200=\'z\303=\351\021\344<\022)\350\275\032Z\200\275\023\375*\275\265\006\260\275\235\250d\274\261\3371<+\t\027\274\2203\214\275\340\342\031=\257t\236\274w7\311=\341\211\254\275\236\274\340\274\216h\225=\031\214R\276\320g\210<\200\306\366\275\341\2427>7\223\204=K\002\274\275\360S\007\276\252AH=\273/\232\274\275\335G>\260\255+=\024-\001\276\024\263\021\276Se\264\275\357]\304<\251\244\363<#]\027=\nw\252\275AG\330<\303\336\334=\203\006\326=k4\237\275)D\332\274\330?\340\274\340\0200\2751g\201\274M\001\302=5\005\377\273/\211\270\274\300A\365:\243\277\374=\372\222s\275=\274O\276\315v\334=\020\212\334\275\367w\232\275\354\037\234=]\351A=\332q\263\274\324S^\274\243\324\005\276r\255\005>\277(.<\217\216\332\273\356\014\217\275\223\323\314\272\2757\343\273,}L=As\267\274E\205R\275n\226|:\341\225\255=C\246\264=h\316\016\276\252\351,\275h\374*\275}q\315=EQd=y\007>\276^\366\361=k\240\254\275\271U\240\275\014@{\275\366\0164\275\345\242\277\2755Q\340\274\373\214T>.\206\255<f\300\366\275u\336\372=)j\253=\006\014\236\274\0036\035\275\3206b8+y!\276\323i\344\274\001\346\232=\2411\330\275\256\306\353<\211o->\336-\341\275\345M\322\274\313T$\275\325\235-=\367\233\005>\310\202!\275\270\227\264<-*\013\274;\210\n>\316\346\234=\332\373\035>\264{M<\231L\223=\224\177-\276%!\303<\336\311\236\275\335\260\240=:\021\235=)Y\255<\241\345\032\274\224\320\001\274{\\\242\275:B\335;\001\244\273=\227\n\243\274\263h\247=\263\235J\275vr\222\275\374B\337=w\316\027\276IN9\276\241\n>>2~c;\204\350\231\275f\036\371=J\327\320<\002\265\220<-\311\321\274\023(\246\275\207\275\023\275\311\323\033\276/\3160>\352\003\026\275-:A>q*\376=L\331v=8\224\264\273s\313$\275\t\215\312\274od\036\276\223-\275\275\377\217\260\274\204\224\325\275\333\350E<\311f\031\276\360<\217=\265;\342<\004\207\031>`\360[=2\257?>\330*\224=\237\311\237\275YDP\275`\204\275=\000\371\356=\373\377(\276\277\266\231=\217\021\322\275v\215\004=\005<\323=\313\366\372\274#\303\"=\221\224\004>\001[\177\275)\216\201\275\365\033\326=\037\351\273\274u\372\234<g$\334<D\374\320\275\236\227\203\275\000\241q\2757<\306\275\332\254b\275\304(h>\346\376$>\245\244\261\275\034\025\\=\203-U\276K\036\347=\3213$\275@\037\340\274B\235\007\276\025\3605\272S\010m\274\225X\370<\375\255\271<>\236\006\276|l\023\275F\364B\276>s$=\225\321\342=\204~\370=$\007\034<\005@Z\274\373\017\364=\345\233\313<\200y\342\275\n\000\000\276\370+\026>\366\371\315=T)\345\275>`\360\275\357\260\003=\233.g\275\031%\222=\020\375+=K\017\266\275|\373\366=\201\270\330=B#\214\275^\"\227=\227W\013\274(]\353\275\376^}=\220\204\324\2741-*\274\310\n\273=H\035\032\275t\276O=e\303\010\274\200\271\200\275\031\307\250=\374\226\022=\326\255;=\256s\010>\005\257\226\275\004gY\275\247J\224=\204\300\206\274MP\004\2755g\030>\313\323\005\275)\227\230\274\330q\235=y\270)>\357\222\361\273r\344J=C\250\346\275\271\344E\275M\\\301\275\2442\207\275\266u\'\275\004b\375\275\221V\241=\2766\213=\317\310\331\273g\026\331\275\n\307\340=\343:R\276+\352\265\273\326/}=\001\352\246\275j\326)\276\023\206\220\275gc\006>\367\266\377\275\237\345r>\256\313J<fH\303\274\005\207\373<\243\212\367:\002\240\033\275\376\326\366\275\213\233\272\273\205\345\326\275S\\\006\275#}z<\014\212\376\275\016\302\016>(\343\221=\252TI\275\347\241\356\274\356;\367\275\267\274\333\275T\230\301=Z\234K\275\003k&\274\367R\306=\310\301\331\274\022\252(\274X\0232>\265\367\225=l\233\261\274\212\033\226\275\020\275}>\247\033\214\274g\256\202\275\225\312\372=YQ\335=\223\221\037=\021\213_\2752+\210=\336PX\276jKA=\036\261\311=\243\253B\274\315vd=\2525w\274`7\344<\220\350\274=\360\321\017\276\331\371\233=F\004\203\275\nn\216:\033\027\205\275p\341\340\275,\364P\275~\022\306\273\302\322\020\276UMM<\255\317t<\371\007#\276M\331V\275\232b=\276\262B\326\275*\263\306\273~\321\250<6\006\030>\363\276G\276H\210o<k\271\307\275\307\273\365:\321<\257\275\036\004\357=\025VU\274\260d\267=\211\332\n;Jr\331\275\231J4\275\311\311\013\276\237\241H=#a:\274J\222\243;i-\221=\3437\006\275(G\272\273\376\003\n\275\275\272]<\251\301\207\274\225\324\022=n\260\016<X\246\002\276\237\376j=A,*>\342\271\371=\344\371\231=\373.\031>=\342\255\275X\362\002\275\266\345\307;.$\020>J\370\212:\366\224\001>7\306\222\274\323\033\350=\352q\255\274JZ\261;$\241\014>\214r\023\275\303\204\260\274-G/>m/=\276{\217\004\275(QA\273?\2310\276\370\323\245\275l[\300\275\272\022\022\276_\303%=\r\344\213\275$\302\225=\003|&=\354H&>C\035\321=$S==\262M\227<2\"\332\274*2\272<R\2569\275\264\035F=Vt]\2755\033x>\342\367\223;(I\315\275\365 \254\275\225-\002\275d\256\024\275\242<\324\274\225N\335\275/\313\223<\204\246\367=\363\033\305\274\342\373\025\276j\3729\276Jr <\304a;=\340a@\275R\233&\274\224\272\211\274\306I\356\275B8\213=\020\211\201\274\234\270c<l!\362\274W\3741\274\3333\256=Y7\264\275\255n\204=U\350i>\347EM\275\0062\324=\243\230\"\275\277&(=nzd\274\362\373]=^\324\364<\032*\366\275bK\021=\n\0078>\342d\255\275$\302\214\275$\366=<\264Y\215\273\025S\r\275\241\224\020\274\315(\022\275a\377\031>\201\306F\274\263\340\346=siF\275a;\322=\033T\207\275\365\346\312\275%\005C\275\251j\221;\352\252\016\275\324\344\000=\277\321\n>\032A\205\2754\353\026\273f\222b>y\265\206\275M\037\316<\354\340@=DAz\2757\321T\276\024\270\265\275j\200\\\274\221\367\335\275\'\2475\276\336J\242\275\251\306\320=F\336u=\"\244\324=\336\227\253\275\330\350\370=\003\346\320\275dAr\274Xx9=\233\030\376=|F\217=Wf\377=v\275\226\275\177ED=\000,\346\274\214\204\214<\252\021\212\275\241A\304=FC1\273>o\204\274\272\210+>e\345\367\274\2475\247\2748\023?>e2\033\276\371\361\211=\014\226\024\2753\362\215<\266\260x\275%\022\267<\210\014\224\275}\'\251\275\n\336\310=]u\013\276\032\240\026=\244\344&<\305T\t\275$\3629=\354\265\010\276\027\315\232=\034i#>~x\272\275\000\377\023\275J\312\023<\377%\025;\331\233\300;\320\302\330=m^\241\273S^\227\275\211cE>\201\217#=\347\255I\276y\333\037\276s\275\314\275-$\">\223\322!\276\025\331)\275;\037\351=Uko\274\323\250\017\275\272\345\311;\237\301\314\274L\024\003\276\2209G=`\363/;\177W\226\275mH_\274\002\3438=\263\305\251\275\264\344\200\274\311\215\035=3\375$\276\300\'\234<0\352\016\276\200\241\312\275\227\253\361=\023\006\264\275\362\346\340<kB\320;i\325\220=V\331\221<7\215$=?\316\212\274;\314\276\273E\2201>\037r\243<f\2478>s\342\355;\237\321a>\232\036==\213\304\251\275\007\025\024=\363\365\200=\375\333\037=\212<\013>\312\301\027\276\343\315\215<\314\223\235\275J<\346<D\332\213<\333(3\2755\001`=+\024\020<(\240\362\275\216\370f>NK\031\276y4\324=\316\022\332=&\305&>\"\"\225=b\375\312\275m1\311=6\"C\275\035\226\253\275\301\024\221=\025\341\203;\263\200\221=\360\316\222\275#)\030=\267x\211<\341\336\204\273.\247\266\274\000\2568>\202\261\250=@\330\005=zR\026\275\210\244\254=\201?\305\275\347\212\314\275\005x,=2M\001\276\326\202\271=\035@j<f\252]\274\000/\334\275\356\306K>\240\371a\271\254\3213\275\335\017\253=\241>\017\276Y\266!\275\217\0361\276V\232U\274?qR\273\267@S\275\246\000\254\275\325\306->\306\366\230\275\245n\236\275X\232T\275:\014\326<\230\201\353:\335\026c\275\241lL\273\244(\333\274)\260\214\275\225\207\211\275\034\337K=\201L@\274\306\252\006\276\220\033\203\275\356\244|\274\212\353\n\276A\300\311=\313\357\361<\353D7\274:\276C\276g\2165>\327\035\346\275)\355M\275\324\202\271=\264<\237\275\215{T>\312\277\231=gx:=\037z\032\276\263\373\361\274\\#\325\2731\t\274\275-\235s=\232\310\214\275\335\000g>\032\034\246;tP\323\274\266P$\275\302\264%\275C!G\275\376/\004=7pZ\275\215p\231\275\341\014D\2755 \246\275\364\266#\275k\340*=Ac\256=\3370[\276Y`\003\2761L%\275:\034\205=J|\204=\332C\334\275\037\001\031=k\237\337\275t\301g\272#?\274\275\237\032?=bU\271\274\2607)<`>+\275\355\234\320<@\263)\275\313\272&>\203\036\353\275\030\265\024\276\005\\\303=\245\224#\276>\351\214=d\232L\275\034\315\210\275rK\236\275qx9=qv(==\252\220=CMn\275\263\230A\275/ED=(\347y\275a{\364\275\\j\336=\026\025:\275\371Y\002=\347!n=\237L\230\275\204\246@<C#\341<j<P\276\230\270%\276\'I-=9\252\005;\372\277\212\274.\2039\2714\200$\275\331\030\235=6\211\037\275e\205\002\276@\350\032\276\250\360i=\322(\312\275\334=.\276\276WA\272>**\275T\321\322\274\201\264\016=\212|\017=|w\240\275\323}\365\276\027\036\023=\301\232\014<\302+\250\274\325\242\324\275\251\242\323;\263\035\262\275Fqh\275$\245\373\272\3246n\275\340b\357<f\007\000\276E\2650\275B\274J\275\364F\305\275G\224h\2756\031\365=fA>\275<\344S<\201\331\001>\271\267\014\276\037\203\223=\344\210\300\275b\215\274\275\3502t=D\031\201=s\246\035\273\261qi\2757e\356\274\023\314\375<\211\202\252=(\376\004\276\267t\353\274J\227+\276dC\224\275\014[\257\275d_\253=\033\247\262=\252N;=\260\275\252<T\273\265;D&z\274~\214w=\327+\333\273T\374\306\274\212=6\274\201\035\267\273\212S\002\275\246\005\316\274\300\361\025\276\261;\344\275\316U\236\274\362W\255<\017\301\343=\2300\341\275\020\264\350\272\231\225,\275QZ\302=Y&,\275\315mj<4\350\362= \276\035=\301D\365=\323_\032\276\370\221\005\276\330\345\336\275\221\272\213\275\271N8\276!0\013=\031x\356=n\277\245=\000q\236\275\005\226v\275\3628\273\275\010p\273<\262\026\313\275\303\030\371\275t\354\242\274VV1\276\203\376\023=\366\331;\275&\'\261\273{\357\004\275nC\231=\"T\022<yc\203=\345\245=;[\304\271\275\266\250K=|0\221\275\313\257\246=/\347x<$G\325\275$~9=\021\014\217=}~!=^+\235=\010\237\036\275\276\320\014=\335\3313=,\340\265\275,\345\224\275\252\355\013\2752\3655\275\212\303\200=\207\324\225=\335\rM>\220s\242=\005B?=\036\177l=\233\007\253<D\236\304\275\014\212a\276m)\227<]\037\233=4 D=p)\314=hoM=GT\304<\265<\333\274\036\013\305\273W%q\2753\024\335=v\361i\275&\006n>l\246\226\275\236\341\016=3\242\000\276G\037M\275PV\334\275\341~F\276vC\272:U\202\260=.\304\263=\267>\340<d\313\007\276\016c\372\275^\372\314=\243\235T>e\263\214\275\367\347\206\273\206;\306\275\235\355\002=\261\222\n>\375\340\306\275\032\\F=8\035>>\326\237\337<\371\267,\276U\372\243\275\200\003\375\275\331\337\341\275\271\002\022\276\226\304N\275\317\226\272=9\201\340\274\021\202\214=$\331\245=j\342\265<*\266\245=\016_.\275\214D:=\024o6=\332[\256=<V\374=@\343\250<m\361\330=\374\363\">%\\\377\275\000\031\033<X\301\037\2753j\037\276\242\264\216\275\316\323\031\275\346\260\300<\214\001r=\2251S\275=\320\017=\326\3222<0\335\234\275\243\222k=\257\263\264<w\253=>c\256\260=\300\3264=\216\027\226=\275|\250=\224\254\345=\372\265\037\27614\017=\360\303\226>\000}\244\274\214\215\264\275\362\370B=i\357\377\274\357\356h\275HXO=\373\'y\275\201\376C\275\257\350\t=D\205\025\275\262[\362<\370\326\032\275\374z\376\275m\247\257;k]\202=7\365\221=C\355\032\276\270\361\371\275g\220q\275\353\222\215=\340\205\006>\201\323j=\254\231\342=\216\341^<S\005\226\275\232\201\017\275\020o\331<\036\360\233<\217w\016<cg\232\275\004\233\224\275*\327\250=\203\370l=A\353y=b#\215\275\210\350\t>\025\253\331\274\201\253\251<\316\346\\=\017\310\266\275\213s\037>\347\273\360\274B\313\007=~$\005\276\221\"\010>\243?\207\275R\022\353\275J`|\275\270\257E\275\355\277\032\276\327<+\275\341q\357<\345\214\264<\3027\264=\026\270Z\276c\277\025>\231?K\275M-\245=\236\317%>\222\372m\273\242\036\300<\3774r=d\206m>}\3143;WV\202>Z\204\t\275\346\2545=\346\244\034\275\204E\344\274e\005>\275G\021\344\275\232\023\260=\226\215#\276\325\261\321\273\333T \275\367\002w=\013\'V\275d@\260=1\363\007>\025\005\344\275\006T\214\274Py\336=\376\212\314=\372\202\357=\220\240\252\275\325\241\215\275\371%\206=\275\336\356\275\306\332\323\275\314\"\027>\033\302\031\275n\243Y=\037\354\372\275\226\324a\275\017\004\334\274y\n\372\274\023)\327<\320\266\236\275\204\372\317=\036 O\275^\301\266=VE\370<\257\205g<\207a\314=]\\\276\275N\231\010<R\357 \274\234\307\211\274A\257\222=\265\235&>.-j=|2\200=)\2423\275\022[\035\275\005\016\213<\265\300\">4t\201=#\324\217\275\256T\005\275 A\275\275\t\260=\275pq\036\276\265T\014\276\\\372\311=\021\315\203<D\201\177\273\3253\014\276u_\325\275\333\n\n>i\313\252\274t\tZ=\r3\027\275\314#\001>\225\265\316\274{\373\245\274\013\323M>,\215\372<\323J\017=C\311Q\276\212\206\270\275\360\376\213\275\024q\325<$\204\255<=\252\253=\346\233\311\275\032\275\212\274\222\307\t<u\247\352\275\037G\216=#\307\202\275x\212\215==\266\261;\256\240\261\275\277\213\014\275\300-\333;\032\r\246\275\203o*\272\370\'\206\274\212Q\224\275\211\256D\276\033\203\203\274\201\376\266=\234e6<\376\007\210=v\313\204<\240\302\254\274}\205\310\275\3253\342=.\221=>\261\333J=\336\200z\275\253b\376<\256j\256<\220\205]\275\243\362\251=\225\3532\274\251\275\374:-V\330\275\370\314B=\'\310\366\274\000\220\203=\332\315\207=:\305\264=\242g\033>}4A\276U\"\357=\276\375\\>\367]%\275\276\323\023=\224\\@\275\254\350\'\275n]I\275b\005\334=!I\366\275\000\240\003>\306\247\302\275\244Lv=\034S6;\256n6<\370B\247\275{\037\327\274\204\324\365=\255\031\217\275\264\214/=b\317!<0D\233\275\324\305\262=K>\346=\302K\210=\331\324\260=\226\367+>\230\310b\275\014bP\275h\351\362\275\337\2453<$\335L=\347\354\210\276\000`\216\275P%\255\274:`O=\256i6>0]^>\006\271\035\272,\213\337=v\300\317\273\232\"\013\274cJ\001=\321\274\206;Uh\037\275V\212\002\275\363\274t>\251\356\212\275\317\355f\273\232m\344\275\300.r\275\026\234^;\277\242\233\275\326u\276=b`\225\274\365\033\235=\004\016\254\275\231\025\271=$\241X=\226\267\205=\361I\363\275r\267q\275\305\304\267\274 \216\216\273d\363\037<\007\225\216=h \034=\372\210\013\276R\224\021=\310\302v=BY\024\276R\013\005>\343F)>\017\\\024=\221\3060=Z\306\247\275\013`t<AZj>/\317\343<p\020\316\273\250\331t=T\207\010=f\202r=X\277(=*h\240\275\325r\370\274E\305\212=c\201\216=\324\225+\273_[\235\276\375\035\204\275\245\3559>\241\r\027=\'s\307<\301\326e\275>\354\355\273+\\\220\275<\311\330\275\236\323&\276\025\363\310<\233\267\370=~&\031\276\261\225\276\2753\366\026=78\325\275.B!\274i\213\022>\260\001\257\274JqN>\263\372\240<8K\353\274\377\216\310=\033Z\361\275J\\\'\274i\002<>=\201\312<\276\370\014>2\276\277\274\262&8\275\312\273\304=\323\026\300\275\244\274\220\275}\\r\275\230\331)>1\260\305=sz\245\275\316\272\247=(\003\233=\256He\275\033\022\223;\010\026\251;]M\374=\302\230\306=\357\232\007>\3457\344\275\367=\232=\324\002\n>\210\nc\275\025Q\263\275\240\234\307\275\303\026\360=\306\005Z\274\222z\252;3z!:\201\024\007\276JD6=\035\336A\275\025\016\311\275\023\274\023<\245\030t\275\276\302a\275lQV=\201%\216\274\025\014\037<\252\216\334\274\202\360\245\275\335.\202=\331o\216\275\277\325\034=\256C\203=\321\202\261;\013\345\334=\314\245\020>\227P\r\2756O0\274;\371\347\275{D\353<\357l\302;\207V\005\275o\245\010<r\335n>\214\225\224\273\235\350\244=\340\254->\274\340z\275\032\307B=3d\311<\033\264W>\333\257\276\275\242\226\212>\000\032X=L\246 >\027\002\007>\324\331\002\276\324/\214=\n\321[\275p\030\254\274\233xY\275j\214R\276\302A\215\274.Y:;\214\300/=\212\320\245\275\001\003F>e\035\201\273\'\036\233\274Y\237\237=\201\330\246;#\264\216=C\306\371==\371\331<d\235\004\275\024\220\362<\322\242p\276k\202.\275\303\304D=\327\346=\276\351\371*\276G_\324=H\351\037\272\035K~<\266\344\001>\206o!\276u.[=\027\345O\2755\005;<\314P\2759\271:,=\3645\226=Ce\005>\235T\004=\375\254\343\274L\306t>3\264q\274\245\260\343=\002\276\236=<G\020>M \004>M\217\275=\277\363\367<\221oR\2753\207}\275\030X\003\2769\320p\275R\207y\275)p\370=\031\272\210\275gN\203<dl\032=\315\300\267=P1\310=xo\361\274\335\262\226\275\2057\020\275\313\031-=%\213\032\2751o\220=%eQ=\234R\222=p3\n= 8\205=\270s|\274\2730!\275\245\271T\2754\336\261\275t\326\313\274\350\371\031\275Z3&\275)\231\275\275\0039\220=rt\024>r\335\355\2745\312q=\214)\327\275YM\224=\227\212k=(nZ\275!\025\023\275\304\305\027\275lU\377;\026\024\305=LrZ<<X\355\275\371dd\275\207y\305=\325\354\301\275X\242\277<\240]><\350:\363<\010\027]\275\305\032U\275\331\260\372\274\347v\371\275\317\035C=\020u\332\275\266\"\242\274\033\267\023\276~\337\363<\274\3164>\250\t\327\27518\321\275\000\010\347\274\311[4=\272Yz=\357\203+\275\336x\267\273\204\3065>\372\007<\275\016\247_\276\320\025\202\275\247S\350\275O\231 =\210>\333=\203\027\"\274\214Q\200\275\004s\351=\237\336\271\275\352o\036=*\334\374=:d\246\274\317s\301=0u\374\274O\220!\275\302j\241=G4\300=\375\325\254=\326\342\200<d\260\004<\252q$\275\307\235\276\274\353\324J=\341\343\234=CH6>F\302\240\275h\031\267\275z\235)\276\341:\302;R\235\037>z\227+\275}\253\236=\241\341P>\250[-=\343*_=t`\353<d\002\346=n\007\022\275\300O!>\357\372\035\274\002.\251\275\225\260R\275\375\366\240=-u\273\2752\255\300=$\343E\275\263R(<L:\031\275\301\252\016\275;\210\223< W\315=~\223\030\276\250\275\252=\344\341\362=\267\221\222=\363\360\013=\231\3733>\006\361\t\275H\225\004>\314f\346<\032W\331<\2705\215\275|\333\246=\352\206W\275\227\227\263<P\036X>Z\316#\275\243\243\327\275\254\234\223=S1\275<\200\020R>\216\372\035<\234\330[=\002\301\256\275\273\271y<\244\n\032<\343\024B<{\245=\274\013R\204\275\245\375}\275\203\356o\275t\003\375\274\373;\363=\333\315P\2754f\363\275&p\310=P\265\303=#\002\037\276\356\322\325<-j\242=\016n!\276\"\343?\275yyA=\327\320\220\275O\312(\276\237\013\300;G*\215=T\005\232\274\02252\276[\347\220=\305\223V=\200\013(=i\343\246\275\244\246\336=B\027\r\276\333t\364\274"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7115148
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
