node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 400
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 830093
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "\207\206\310\275\nm\035=\022\322\240\275l^\333\274?E\337\274X\336@\275\245\004\327=~\356&=\372a:>!\335\027\273\021\330\343<q2\236\275\367z!\275\312\314t=\tqj\275\017\234\226\275\374\343\342\275\000\325k\275C\224\312\273\021\032\220=\014-l\274,\232\231\274\207\001\255=\217\345\274\275\016{\242=\210a\032<\303f\256=\013\214C>\20089=\307\257\301\275.b`=\213\234\"\274\003u+<\r\245\215=\252\302\n\275q\312\204\275\020\252d\275\202\356\302=l\311\344=Bk\344<\332\325\230\275\226\316i;\227\342q\275@\267\234\274\031=\366=7S\257=\037\247\216\275V\004\257\275A\314\016>\031_\016=}\276\370\275G\334\304=\375\023\333<\310\"y\271\3511g\274p}7=\201\363;>\0057G\275\300T\211\274\0048q=\365\034B=\375\030%=\017,\004\276$MQ\274j\220\n>\366Z\356=\202,\t\275\206\346\242\275\226\327\222<\027\r\307=\210\302q\274y\376\016=\200\337\366\275\007rm<\373\367\324<\254j\242=\257]\000=c\241\n>(\265Y\276\200\n \276!Dh=\274\371\247=\335\325E=\266>[=\372\2155\276\t\237\035\275!.\007=\232. \275w\2377<v\233\213<\266\277\232=\221{\220=\2108$={\342\366<\321\204I\276\224\007\024\276\252\215\217\274mtS=\274\3376=\201\304\004<\214,\013<\354\2749=h\227\220\275\231\244\001>\030\212\207\274J\362\204\274\247\337/==B\210\274\275\242T=Z\037\253\272c7\273\274\360\244\";\266a\365\273\325\314\214<\346\025\024=2\305\177<g\202\310=v\350Y\275gM\355=\327\220\366=\372|\001=\210\367\027\275\330\0231<)I<\275\265\0106\276\204j\243=\311 \307=\020z\301\272\200\305\351=w,\213\275a\035Y\276\021\t\232\275\242\337#\276\357\010\305<\327#c=g0)\274\257\014r\275v\232\215\2750<b\275+K\336;\331\222\035=\370>\225\275,\224\320\274\205i\236\274\261\227%\272\264bU=:\000\227\274\204\261\276;G\021\006\274\225\310\214\275\033\216\302<\313\256X<\337\260\031\274I\321@\276f\250\001\275\243\340\246=\234\371V\275\034\264\202\274\241E\021>Q\361\016\276o0\237<\006\313\245\275\334V\355=\261\317\207\274WR\n=\nY\364=l\303\352<\031\247\033=;\270\277\275)\177X\275p\262\256\275\247\245\034\276\252P\204>\330\322\233=\314\215\323:\347M\353\275\036\024[\276\010\177\344\275V*\225=\203Z\223;\r45\275\025\032f<\255S\274=\371\312\276=\351\313\263\274\355F\212=\211\3629<U\247\000=\334z \274*\333\376<\271\354\207\274\277\327\346;\2660\363\275\326\372\245\275\230OP\275=\200\261=]h\t\275G\246i=G\261\206\275P%\245\274\330Q\322=\346\277\263=\261\207\'\2754E6<%Qj\274\027\372\212=`q\206\275\276\377\327\275\035\363\002=\014)\002\276\234&\272<B:\022\275\323\021\345=\341\020;\275\232\346G;>\264\214;\230\312\025\276:\232\266=2\214\004\275\261n\270<Y\277\266=\345]\343=\355\t\230<Th\342\274\004-`<\0017\230=\353\255\224\275\004&V=\337\201\253\274Zs\313<U\3503\275\365\376[\275MK\327\274?\312A\275\310P9\272\362]\217\275\352\t/=X\2226\274\324On\275\251\177j=\036\\\010\274\322B >q0\005\275#{\223=L\032\210=\347\356\313\274L\006\217\275\246\004-\273\375\267)\275aS\241\275\300\322R=\253\257\217\275\201\240\330=J\353M=:\366\206=\320\305V\274\354 \302=lj\270;G\350\001\276~{\374\275\326w.\275\026\373\000\275%\222\024<-\337\023\274\377!\273\274\323Pj=3v%>\251\003\321\275\033\347\311<\367\023\256\275\214\361\206=\372\362;=\022\201\251\275\356\216\227\2752\035\035=\244c\301\274F\tY\275\352\255i\275.\341\355=\222\342\310\2745\206.\275\013`\007=Ka\320=\373\333d\274\316T\000\276n\265m\275\332gK=\030`\346=\375\\8=\317\017\346=<\310\310=\261\360\211=\"\227\242\275\324d\335=\026n\034\274\305\204\205\273\205\236\254\274\262\204L\276lA\032=\000\275\037\276\030Y\301=6\371\356\274\314\006\265=\371\361\212\275@\317\033\274\262\232\323;\344\305\363\274%g&>\313\227\355=^K7>\t7_\274\275\251\n=^\033\257=\345\216\300\275\307\274\310=2\261\034=\257\001K\274k\343\025\276\013.*\276\311f\371<\t\327\274:\326\377\201\274iH\354\273\236r%=w\272\372\273^\020\013\275\377\037\260\274?\262*=\267\244j\273{\321E\275%\215H\276\225i\214<# \016\276\312\261a=\222\307\263\2750\252n\275P*\005\275\262\215\232<:\204\267\274f\355\232\275u\344\216\275\240\322&\273\004\306\314\274\241\244I\275\356\3644=R\352\321\275=\375:<\345\216%\275>\264\240\274}\325^\275_\211\253\275\335\0356<\037[n\275\271\002O<\3544\230\274\31305\276\301\001\265\274\216j\246\275T\360\212\274\315\346\213<<\220\317\275\236\332\271\271r\003\254\275u{\247<\357\261\n\276\232 \351\275_\344\001</\204\337\274\002\246\256\275\2164\006\275?%\316<\342\377!\276\233\367\271<\037\034\321\275\305\323h\275\273%\375\274\002\340\024=\'g\005=\216\0163\276a\257\207\275E\212\225=\353-,>p!\337\275zk\226\274k\0325>\375\360\353=\365\274\241=C\005\304;yL\007\276\204\273\001\276\001\315\307=#\241\224<0\241\237\275I\306\244\275v\337\276\274\351i\306<D \234=\200\2317\276\036\360\220=\317\326\202=,\363\013\276*[\262\274Cn\327=2e\220\274C\203O<\024_u\275\207]\017=_\301,=\300y\231=\030\270Q=\245\177\333<P\237J\275?\3720\275\201\272\265\274~\020\001\275n\210\024\275\262\277\203\274\316X\222<%\020^<\016\n\271=\265\223\235\275\370\007w=\006\216\221=\251\377\314=\237\027r\275\363\326\226\275\366\325N=\224K\343\275\005\256W=\026\3754\275\r\271\216\275\303L\224\275p\311\273;\245P\372=\263\313\262\275[0\021\276\224e{\275\276J\332=\231\362\273\275\024\001\231\275\321\006=\276E\312\256\275\344\036\343=x\323\267=\267\314\353<\265\205\340;8\336\314=\250\313\322;\221\200\253=\363\322\032\276(\205\210=\007\343\002\276P;\345<\320]\237\275\0341\320<&`\"=>\031\035\276js\217\274\335\265\360\275\177\003\345\275\343\371z\275\210\232\324<;\343\310=6\364H=@\376\210=\310\032\266\273\212\306\221\275\235D\211<\206\027D\275\326Yi=1\016P\276_\231\346<\rT5=\235x\373\275\203\026\244\275>\377\267\274\313\310\217\275\240\200\234=\373\353\301\275\272\275P\275\202>!\2749\310U\275\373\326\341\275\213\320\225\275&\221o\274\301a\203=\206\nY=\343\326\013=\326T\220\275S\'E;\335\361\300\275\251\302\270=5\234\016\276\252g\231\275j\030\032=\020-\372\275M\023\332\274\246\201\220=\226\014\272\274\257\202\332;\341\252S\274\017\242\332\275\021\277\362<\205\314\016>\347\303\201\274\347\250\236=\036^\317\274\203\300\317<a\310\267\275w\301\016\2745\314y=,\002\205<S\202C=G#\242\275\232\n\252\274\205\323\200=n\321\234=&H\023>{\270\232;k#/=\356N\217\275\3442\227\272\301l\224=}\236\340=\351b\013\274W/\001\274\037\213I\275\244-\201\275\321G\002>\212C\255=\342\274\244<\271j\002\276\030\374\351=\023u\270\274\334\367\027=.\201\342;\353\362\340=\366\324\325\275E\3630<\277\312\265<\316 \002\276;\256\262=\237\346\004>\032\255\000>\271%\n\276\251\246\"=\t\220W=;\332\251\275f\213D\275\250\340[=\270*}\274\"\035\273\275\357]]=\237=@=\355\264\365\275\013Y\034=\006s\214\273 \013e\275\005\364\350=(\nn\274:\367\t=?V\003;\330\272\251\274\222\303\375\275\312~z\274\022;e=\376!\006\276Y\030\256\275\'\262\340\274.\357\225\274Q\364|\274A\260\361\274\212\034E>\246\361\356;5\331\243\273\2566!\2745\221\325\275\341\236\336=\335\260v\274\356B\362=.\rM=\222!.<2\344,\276\030\033\002=\375\263\250\273g\371\303=HY\302\275\315\343\r\276D{\006>%\335\213\275\227\211\237\2737S\201<\213\'G\275\235\007\265=\"G\r\276\201d==\365\263\026\276\322\214R\274\340\202\273<[--=\306\271\272\274\t/-\276d\336\003>\232 \310\273\r\202N\275\303\'2>Bjg\275\247z\355\274\326H\250\275z\241b=d\216\000\275\025\342\333<\240\364\201\275-y\262\275\'Y\375<\267\261\002\276DV\254<\264y\333=x\0212=\262\302\342\275\027l\330\275\342\007\225\275CLV\274\0325o=\257]\005\275my\314\273M\261O\275\031\023,\276\366^\242<G|I>o\026\017\275\225H\254=\306\264\321=\235}6=\315\243\375=2R\270=k\317-<G<\214\2755b\256=k\244\177<Y\241\355\274\010\264{=-\260\010<\220FT=\243;[<\372\002\n>,\004\262=\014(\315=\275$\002\276\204O\301=#\2220\276\241$\325\275\205E\361\274\345\255\r=\363\241\003=\221\013\242<\347@O>\032K\311=\273\302\371\275\037\362\341\274eFM>\r\323\276=\310\203\234=U\216\"=\333]a=!d\n=\350\006\247\2751!\217\273\033\003\217=\347\320\204\275;\320\221\274j\351\005=\024\236\026\276*\226\200=\370\322,>n\250c=T\303\200<\010(\004\275Bo\257\275P\027\033\276\210`n<:\006\271;\343 ,\276\337@\206\275\355\375|\275\255!\351\274\022L|=|%\032\275\034f\010\275p \225\275\022Uv\275\246Q\262=l\213\226\275HD\001\275\n\004p\274\227\350\374\274C\340\312\274_\002\262=\013\277V\275\262\225\275=\326B\216=\332\021\215\275\260l\034\276,h\025\274\31317\276JEa=3\\\017\275]\244\243\275yW]<i\rn\275$<\037\275v\301\305\274J\n\222\275w0\271<\202x)\275\234S9=\036\022\340\275\000I\370=\357\243\240\274\200hK=\002\367\204=\233\260\272<\000o\301=\255\223\303=\255\307J\275r\350\275<\030\2050\275\334\210!\275\321.\221\275\0178\346<a\021\322<\362\336\314\275e*g>rb\250=\232a\330=\n\310\n=\241\300\324=(0i<\244\022\200=\221\203\334<\265\037\331\274\020\203\371\275p3#\275\247\365\370=rKl\275g\363\232=z\232\240\274\357L.\275\334\273\220<\357;\212\275\313\250(\273\364\341c\274m\"\323;\021\016\276=\232\370\037=\244\213\225=\351S@\275\353\334L>\337x\255\274n\265\246;\234\250\225<2:\325\275\356\251\220\274\247\031\326=\360fI=\2500a\275_c\221=w\020Q\274\374{\327=\224\267\206\274\345\356I=T\2705\276\201\260*\275\3756$\275\317@\207\275F\261\274\274[\375\234=c:\206\275@\330\220\275B2I=\334~\255\274Wi\035\275\226\264\036\276l\343r;\372\213\200\275h\005\214=\213\026\235=\242e%\275\007J\304=\276\242}\275\301\305\301=\2655\271=\350!\260=\273\315\342=.s\241\275m\267\032=\010r0;\242/\215<\032\357\220=\222\035\351\274\356$\022=oS\210\275\344\213\261<B\247\303<\230g\014=\273^\033=\323\033\\\274e\301\025=\277]\002\276\035\270\260\274\352u\216=\260\374\275\274\276\3413<\3010\211\2734}\366\274\351\036\227=\\\307\034;]t\237\274\004\031I\275:h\367\275\272\322\320\275c|\023\275\371J5\276\367\337\001\276-\333\356<\001\342\226<\345\362\"=\244\220+=2@\257<\376P\343=\007\275\006\274\377v\230=\323\301f\275\006ao>\353\204\023\274h\275\032>A\246\251\274\211\3551\275\007\337R=a\276-=,\222\331<\\K\002=\210\342\200=#r\\\274\021t\227=\360\033\226\275=\211k=`\224\213\275\003&\036\275\370\nU\276@?\242\274\366jv\275{\344e=\257\373\312<.\213\244\275\017\367\022\276\030\264\346=\371L\306\275`\266\013=\236}\210=\244\020\020\276\326u\207<\326\372\316\275\220\250\007\274\223\276h=7\313[=^\227\005\275\305\307 \275\352\237/<\317\020@=4\037\026\275O\014\210\274\213\303\022\274-\343\005\276n\371\235=\020\351\'>\356\027\231=.\250\366=\023\025<\275\033C\204\274\r:\031\275\033z/\275\014A\344;\364\200v=yy\017>)*\004\275\375 (>2\005 \273\252\373g<\014^\266=\256\2625>\311\361\r\274\247k\307<\241\273\256<\375\010\230\274\256\312\000\276\257\252\267<\226\273\263=\251E2\276\345p\344<CL\377=H`\304;\024\3134\275\276o\211\275\334\224\202<\374^ =\323e\322<\220D\247<\3375\360=o\004+=\023 .\276G\252\256\275\232\340\270\274v\267\275\275b$\313\275\336\030\037=\353|\031<,\311\000>\226\024(=\253\255\301=\324{F<`*\320\275\257\032\246=\342D\r\274\374Pn=M,\330\275\026\314:\275\021\276^<\236Y>=\314\031\232\273}\224\226=kh\n>l\250\353\275\316\222E\275D\3315\274\217\320\206=\314&\232\274\277\240\305=\350\222\005>\325\214\375=\232i\301\274FG>\275\302\346s=T0\"\275\357J*\275,N\264<\344~\250=\326s\341<\367\223+\274\326\0022>$a=<\311f\312=\021\'\241;\253>\030>\333\264E=\220G;\276#\224\030\2746\240\331=\215`Q<\247C]\275\255{\307;\3125\255\275o,\212<;k\241\274\225\265\307=D\300\034==-\027\274\202\342U>\364\323\324=\211\223y\275h\n\245\274\337\350\022\274\311\177[\276\247\027\234\274`\347\323<\330\014\346=\035\303\330<S$\200;Qb\360=\373\026\014=\257\325M\275P~\033\274C5\331=\303\375\220=\373nu=\273%`=\224\336\206\275\336Y\315=)\264\311;\207\226\306=\216J\030>\322\367\206:\257\344\002>\216B\010=:?}=t|K<YBY>\334.\220\274\206a\241\275\010\333\203=&e\014>\241\240\232=\005\274!\276K\017\t=\274(\216\2754\312o\275\007\312x<,\370\245=g>\264=)!-\275\0306\377<v\210\027\275\234\031\305\273 \274\023<\344;y=\006 H>\257\021\203<V\321\322=4v\274=\251;\336<\330\255\270<\353\353q\275X\374\361\275\330\232\273<\000\254\004\276\325\205\277<\326C~=T&n={\243\030\276\023\245Z=(E\264<\002\321\354\275\221\257\230=WV\234\2744\037I=.e2\2746ky=1\257\024\275\321\025\347\275nh\315=2\026\353\275\311Y\343=\207\326\336<0\376\326:\307\334H=DC\350\275D`t\275\037M\256\274\245c\201\274\350\346*\274lo\205=/\276\261<\010\205\357\274\003\023\203=y/\312\274\312\017\220\275G\211\033=\256\230^=2\357\322<\304\375\247=B\333\200=.+\263<EP\366;\000\204\020\276\005\002\211=\255\343\220\275\364AQ\275z\313\204<\016$i=8\261\031>\220+\257\275\013\340\362\274\tp\264\273\233\237 \276>\333\354:\217\250\357\275K\334D\275z$\377=\214\275\031\275\345\265\330\275.\235\t\274\216N\331;b\033\306\275{\304D\275\243\332z\275\230\266\211=\004\251\246\273\230\327\234\274O4\367\274\255\255S>\201$\005=N\205\220=\\/\n\275Oo\214=\341\\9=\356T\277=\310\313E=6\233\262\275C\2101\275P\324-\275\027/\340\2755\032\346\273\360\326\302=B\363\005=\302\033\231\275}\360\021;\273\247\373<F\232\036\275O\014M\275\txS\275%\277y=\356\tF;M\254\227\274&\350\327\275~\325{\276\376PL\275\306y\332\275:\327\351\274\353TH=6\006\332;l\217\367\273\247\003\307=\260d\242=\332\364y=\247\247%\276\002Z)\273y\005\002\274\022\222\200<>l\245\275\"\204\006>(^\004>\204Y\231\275\314\211\273\275a\257\000\275Y]\341\275pep=I\235\024>2X\266; /\321\275C\253\372=2w0<$\236\263=\004F\024\276\310g\254=u{\233\274\264S`<2\232}\275\225\354!=\322@\r\275d1b=sp<=\350d\333\275\302-\263\275\244\014\354=\362s\260\274\037~*> \361\r=\240\036A=:\330\216<\335\234c\274\342\261\207\275x\250\345=\236:\247\273\207d\201\275Xi\036>\262\350\217=\316LU\275\211z\375<\341\0031\275\341\331\254\275sS\303<\006\310\034=F\247\200\275RVh\274\0013\242<\222\346\025\275\356u\277\275Y}\010=\014+\323;!j\001=\203r\341=i\342\333=\273\345P=\026\352\035>5\330V\274\303\207$\276\003\213\026\275$$B\275\376M&\276\324\231\275=\317\366J<\027@\340\275\3660R\275\311\253%\276l\3713\276\t\257x<t\365\251\271\354\261\035\276\177\356\250<\214\266\321\2751\254\035\275&ZY\274K0K=|\030\230=\235\277p\275\n\t\007>&X\247\275\331Q\272=>\377\373:Q\225@=\265q\365=\225\352\362<|\242d\275u\210\370<K\272\013\275F\255u\273\355\346\326\275\006/\333\274C\034@=\004x\325=BHh=Y}\377\274!\306\212<K\303\271\274Z7\277\275\035V\206;\002\301\n\275Y:@\275\351<\'=\324\210+\275\331%\221={\350\373\274\220}\037\275u\017#\276\357\276\215\275>\347\304\275\335\330j\275\376\t\326\275\027ye<\201^\003\275/\246\233\275\357\005\275=3\022\005<p\267\313\2745\327\230\275_\304`>\030\273\252=\236\334\301\274\201\\\014> 12<F\014l\275I\010\331\274&\343\336=rf9;\225\244\320\272\006\205\033=\362hd=\255kn\274\200\311\\\275\203-8<]:\324<?-?=g<\324=\013d\021\276\223\244\237=0\344\273\275\027\350\360<\013\343(>[\"\255\275]\371\235\275H\257\207\275GT\342=\350\364\005=oI\313=\237\177\322<\203\200@=v\343N=\234\330\234\274\353xE<c\303}\275J\021\233<\177\036\344\273c\305\217\275\000\223{<\225k\335;\205\355\236\275/\307\002\274\342\023\r\276\377#\230\275\354\037\244\275\240\356\013=\037\007{\275\t\227\021\276\035\341`\275*e\323\275\035\334\356=X\306.<\361Z\310<\275\315o\275:&x\275M\014\376=+^!=\224W7\275\220\346 \276Y\024\020>\022\205E=8\307\020>\352@3\276\001@e<\323\374\r>\2758r=\312\271Y=\307\202\005<\341\214><\300wt<\225/2\274f\325<\276\221X\337=\376\312\335\274\323&A<xO\271\275\3621\274\274\204b\334=\376\351\370\275\251\013\373\275\201E>;/\3222\275f,\213=\\D\253\275y_\204<\302\375\330\271\352o\'\274\030:,>\263\213\031\276\202\210\247\275S\037q=[\260\215\275T\017A=\016^\237\274\017\272\306<\354N\235<\345\272\232;\246\344\302\274\366j\337=\035\306W\275\247\003X;hy~=\236I;\275\307L\255=\305/\266<8\254\267;\"\247\034\275@LX<1\226\216\273\370\213?<\276\027e\275r\303\224=\021\200\'>\252J\221\274\031\303\3658\261\230\347\275\275\345y=\331\036#\275\323\210\035<w\032\216:e\364\345<a\\\2459}|\030\275@ f<\002\331\006>\033#\331\275\026w\374\274<\\\356\2748\217k\275/\341\226\275UPc<tn\333\275\026\002i\275F\266\355\275\216\347\207\275\255\020\235=\252\335\332\274\367\212\213=\202\003\373\272\263\260C=\212\224\354\275\200\242e\276\312a5\275\260J~=t\035\000=\001y+=\022\324\226\267\326\252\201\275\035;\347=\227\333Z=\261?\253=3\001\320=f\371\247=\253h9\275\216^\206<)\310\235<{O\367\274\275c\230\275H\007\276\275\321\237`\2743!\332=\204s\242=\036\357P\275\231h\215\274|\330\002>\346\366E=\002\325_=\037\334\034>\311Rw<,\016\\=\206o\253=\353\000E<R4l\276^\333\263<\"\210\016\276m7T;\351r\323\275f\252\213\275(\235\321<]\264\214\275\267\242\240\274\224|\237\274e9\230=2\363z=\272d\324\274}\247\242=\327\231\372=\222\037\372=\211\374\246\275\037\353\r>ff\022=O\014\004\276\200\336M\275\241E$\275\266<\202\275\215\223\235<\220\203\253\275\357\245 \2759\265n\275\366c)>P \227\275\303Z\200\275\203\215\325\275\0320\n=O\300n=%\330\317\274\t\"\212\274EiL>\022vJ=\346^\315\274\244\374\342\273\306\223\314=d\275\321\275\235I\272\275\035\'\234\275\200\243\010\276\313\226\205=\024\275\014\275\305BY=\212\355\271=\236{\205=\253\227g=\236\275\021\274\2753\306\275\322j\352\275q$\271\275 r\363\274#\346:\275\234\030\224\273u\271\021>\235_\017= pA\275\2303\">@\356&\275\030&\010<]\307\220\274\375\343\304\273I\n\345\275\256(\315\275X\233G\275\362*\001>=Q\200\275\271\021:=\257\345@=i\301F;\255\343\031\275J\306\226\275\001\260\266\274-\207}=G9A=\035\3468\275U\253\003=\251\361p<\365\332\301\274\267\t\234=\016t\345\275d\206*\276\036\224I=X\273y=\265\365\017\275\272h\272\274(\340\021\276\272)\215\2750\035\325=\'\335V\275 \250n=B\242\277\271\263&D\275f\277\017>\342\"\230\275\357\330y\275M\276$\272\375>\277<\233\262\234\275\356\205\272\274/\333\344=\2332\264\275\362\224\036>@6\261\275\202;\340=LN*\275?$m\275a\317h\274[\024\264<\367\244\271<\251s\273\275\253\331(>\257\266Y\275N\262\204=A\361A\276\264\366\262\274\360\"\254=l\032\302;\356\226B\273.\345\003>\251\364\376=x_\236=\t\"r=\372>=\276\005\031\306\275\221\3704\275\027\024\371\275\265\363\356\273\266\021\302\2742\371\022\275\024\222\264<j\314B\275\331\307>=\201c4=Y\376:\274(\313\256\275\262v\305\275\017\013\371\274\224\240\321\273\331\253:\276\332\305\252\275\002\'\301\274\t\220\265\275\357\014\214\275\372\376\215=k3\016=\272\323\311<\366\323\332=\331\262\r>\211KN\275H\252\275=j\313\350=\255\332\242\275\346K\233\275\276k\307;-\236\350\275*|\323\273\360)y\275\235\211\313\274I,\n\273\276\267\t\276;?x;\022\252N\275\336x{\275\224\227\031=\327_\260=\3448\241\275\322\305\017>\370\3343=L\213\257=\335\237\345\2750\017Z\273\256\026\276\274\366@\177<\275\031\305\275l6P\274-\243\257\275\013\255\024\274\253%s=\032\352\213;\244\023\226\274b4&<,\346\305\275\"\243\030<\261x==\235\004[=\304\232/\2756\'Q=\366^9\276ku\375=^~\255=\3322n\275)Q\211=\321\225\001\275\230\232\200<sC\346\274\304\305\205\275\370^\214;\322\341H\273\026\003\022>o\263\216<\272\251.=O\355\256\275=\355\251<\366\212H\2750)\244<\342&{=\355Q\001>5&\376<\352\215\307\2751\202\036\275\266\255\220<\267\207o<8\304&>8\3338\2753=\365\275\030\374\013>a\254\373<\340\037\331=U7:\275\346\270\360\275>\317\322=\332\305\327=\246N\350<\261/-\274\332\017\215\2749pZ==\211\203\273)\237e=SM\210>\207Z\252\272\231\355\253\275\004A\304=\341)\361;8p\000=\360\274\000\2749~\030\275z\'F=T9\303\275?\263\242=+\200\202<z\323\276\274mg\323\275@\267e\275\364\005a=O\366\265\275\225\327\247=\217\306,=T2\242\272C\014\334\274\325\000\220\275\026N\263\275\002U@=\204\026^\272\2014\226=\274\365\362\274\352RL>q\025\207\275\254\\\303=[G\324\275!\001\263\274\306wM=w\020\026\275\312\321\357\273\241\032V>)H\326=jF\331\275\204\270\351\274o\264\270\275\3175\302\275\210)\001=\\m\026=EM\263\275\371\373\375=\362\263\234\2725\260\354\275\375\210\010;\363S\021=\'\267W\275?\030\354\275\r\310\007\275\327\357\342\275:\313\203=\331\024c<\253\010\266\274H\354\244=?\351}\274Q$\232:kt\271\274\337\215\204;h4A<\305I\033\276\372\020-\275\177>F<\372\243\014\274l.\210=\256\330\227<r\273\223\274\223\210\375\275#x\324\275]\364P=\005gk\275\3225\236\276\213F\301=\273\317\032=\013=-=\376\372\222=\310K,=\307\212\005>\t^h\275&\037q=\257\026`\274\030L}\274\241!\370<nm+\275\226%\317\275*|o\275\211\3545\275\261.\210\274yv\010>\350\366\375\272c\222\272\275\375\315\266=\347& >s\027-\275^\303\014=\032\216\220\274\250L\366\275\373\320\342=\263\363;\275\315AT=Q\\J=\264\021!\274\027\225\244\275x\357D=rx7\275\301\227h=\363\275\235\274#c\370\274\272I\214;(\006\234\2745\037\227=\224\002\225\274\272\016\001\276T`\021=\374\326\r\275\317\256A=\023\014\205=\343\321\276\275x09=\235q\023;\351\272\321\273\223\334\333\274\005\300\317\2759\357\"\273\210\027U\274\334\274\233;\023\231#\274\326\331\253=\004\211k>\232&\000<\246\215}\2750\276\037>1\204\023\276\362\352\031\273%\274%\275*\377I>\r)J<\347_\246\272\374v\031\275\375u\314\275\002\262\374\274\353\364\366<)l\370=\263\034\222=\"\371\370<\315\037\237\272\353\346\373\274\242\345\215\275\370\353\n>\260\260\225\275\320\350\001>9\215 \274J3\236\275\376\2116\275\032s5=\357\205\034=E\037g\275\343#\006\275V\016\005\2755C\\\275\273m\211=[\014:<\242\326\203<r\'\372\274\320pY=\336\320\030=\342\353\210=\001F\324=\211\331\212\275XY/<\317\233\010\276\240\275\016>\221\026W=\245\261G\275\\\020\320<\346\003\232=\206\302\000=>]\326\275\233\347\030\275\2465\364=\371\355,=\023\003\222\274\306\212\277=\035X\301\275\231g3\275\251\322\226\274db6<\000\316\177\273\275\361\360\275\361\260\303\275v\360\200\274*\376\344\274I\366\004\275\231\334\235\275eh\t<\253z!>\235\244\276;\3132\274=^\263\203\274,\014{\274\374^\373<\305\244v\275[\311#=\313M\265=\306\306!\276\200a\010<\243\340\312\275\261\032L\275;\224;\276\364\271\017\275\r\016\375\275Z\374\026>\326\202\266\275\242Sn\275\267\254\t>\2722\274:\200\341\016\276%\177]>\027\247e=\271&\357<-\360\201=\001*\304=\024T?=\002\265\220=\363\222\014\275\256\2412\276\355=\300=\270\275\027<H\374 =4\305K\275\220\021\240=S\330\306\274b\234->w\305A=\374\002\377<\230\376\366\274\352O\010\274\302\356\034\276\220\277\006\276)\'\253\275H\247\311<j\034x\275\nL_\275\305\335\227\275\214\016\340\274M\263\330<\253!9=1\205\245=\377$\370\2752\200\025\275_\037}\275\201G\227:\243\231\312\275\277\010\215\275\336\241\341<\231\255[=\262\251\032>&\002\210;\372\273\311=\210\325W<\025)*\275\343\241*=\024\022(\274\324\007\212\275\351\314\000=\241\333\372=\207A\320=\225\341\276;\\\227/=\323\264\217\274c\002\336=B\361\377\274o\033\306=\373<\210\274\324U\202=LZ\323=+\350\367\275\354\247\254\272:\336\014\276+E\025>\354>\363\275\266\201\247\274\334\237\314\275\312]\272=\306\231\350<\344\203\205\275\206]m=\300\341\341<\"8\313=\342k3\276\036t\337\275I\376\254=\216R\276\275\271\341\004>K!A\275\307\253\362=\357l\315\273\034\245/\274F7\000>\261C\026<<\352\320;\242\004\246\274+x?\2740\257J\275[\004.>\2563\246=\201J\261\275\226\375\352\275\254\364P=Wz\020\275_\314\312\275\026=\323=\034\243\207=\242\026\323=\261\274\237<\353\r\n<\247)\312\274?hg\274\361]\006\276)%|\274\347\363\020=\216z\026\276\033$\300\274\036\242\314\275\250\027\203\275\277\024N=\\\261\003>\330\343\337<`\357q\274Qa\272=\300\016\313\275\017\362\254\274\016\313\312\275\006\213\211\272\246\026\217\274\245\243\007>Q\215\360\274\347\333]\275u/\014\275v\030\031\275\253\000\367\2756\360i\273\362\3304=I\340\261\274\372K\013\276\005\216\200=\227\317\330<\257\316\324=h\301\027<\tU3>\273\343\013>\364\030\211=\023q_=\212b\357\274X-\350<\272\322\024\276*\247`\275g\272\017\275U\002-=M\317d\275v\251C=\231\315\345=\340R,=\266\245\206\275\310Q\261\274\223\016)=\301!\306<pys=yw\210=\266Qr\275\001\324\311<Y\372\222\274Z\3715\276\203d\325\272eZa\274\265\315\2358cF\214=n\204G\275H\307-\2758{\262\275^\205\236\274\371\226\211=t\344\250=\2176\010=[\001\006>\220\336\275\275~3\342\275\304\376\207\275\346\364\303=9\\\213\275\300\005)\275\265\207\013>I\332\354<\225Z\371=\323\224\215=\314#\235\274\nTd==\336\356=S\237\'<\274\235\244=\006\032\377<>\027\345=\035\035\217\273\030\367\203=\261\250(\274\324\307\331\275\334\343U\274x\023U\276`\367G=\367\370\273\274:\213\216\275\n\212T\275\320`\024>\326$\013=H4\350=\267\374\177=\020\374`:?7\227\275\3348\031=T\2134\274\207\252\252\275\303\247\364\274\276Xz\275F\277\036\274Y\240\000\274\232ie=\221\177\013=aP\002\276\030\226\\\2759\034\376\274\203M\026\276\326d\361\275\272A\276=\366\325\253=\336x\226\275\2659\203\275u{\355< y\210=\001!\260:F\014\241\275%\244s\275\321\240<<\365\177c>p8A=,\305\010>\373\261~\274B\036\377<T4E\274!\t\275<\316\330\355=K\253L<\314\317\277\274\346\006\205\275{\276d\275\234p8\275B#:\271\350\320;\274\2440T=\245j&\274\231\240\272\275Vyi\275\220\036\251=\261]\025\275i\321\217\275V\267\261\275F\215\035<\252\303,=\026t\205\275\302^\302=\373\230e>\357\345$=\310~\365<\354\334\332\275,m\340<\301P\226=OFd\275M}E\275\304\254\247\274O\325 \276\332D\341<\255/\356\275\327\333\344\275y\346\333\273\006\177K\275\352\354\215\275\2501\351\273\t\264\363\275Y\260\033\275\250.\302\2757A\321=\377y\377\275\354g\331<DGP\275\001\345\250\275\212\325v;\013:\324=_x\225=\332\027\362\273\255\214|=Z\314\200=S\213\311\275\037-\266<\216J\310=\3559\267\275\303\254[\275z[\327=7\264\255\275\032A0=\033T\235\275;\353?\275d\241\251<F\316Z=Xrf<\307T\022\275\250F\027>\262\275%=\211\260\334\275\356\037$=\227\\\204=\014?r\275v+c\276\216<\320=\357\365\232=\025\304\253\275\315\371I<\001\357\001\276;\220!>\373H\245\275\033\370\323;P\223\313<\177>\271\275\326\025\262=\224\0338=\270\025\033\276J\362\203\274\000\353\213=\311\215\247=@)\240<\027\233\200=\031<\022=\034\367\220=\346\n\275<\035\312\r=\363\237\275=\221\312\246\275_\266\001>n\342\017\275\260\032\222\275\270\240\356<\004\373\343<\027e3=\375\243\033<\325U\263\275\323\210\007\276r\221\311\274\272H6=hEO=\246\007>\275\257s\002=7\036b\274_\327\21399\232\370<\224\036U\275C\205&<\305-\t\276\377\210\027\275\017\026\264=T\355\352\275\016Q\210>@\304\230\275\350E\271\275\264\364\207=\270\025\035\276\227\257\254\274\033\302\333\274\306\021L\275\210\222\210\275\027l\242\273gE\303=\362\022b=/T\226=\316\3752=\3574\217;\221)\372<\t\324\335<<l4\273H\252\304<\370\325\355;\006|\203=XZ|\275$\204J\276\337\227\267<\270\232\014\276\232T!\275W\035g=^\007\213=\312V_<GD\314\274\3569\216\275?Q\033\275x\3622>T\242O<z\333\247=\206[\374\274f\243\353=\240\326\032\275\342\375\332=\340\270\310=u\237j\275\300\253\327\274\334C\231\274\022\227\255\273\033\220\326=\"K\010\275?\221\266=Z\347\014=\276\306o=J\314\201\275\342\n\277=\253\340\010\275h\325\341<\327\010\026<N\227\216\275+\260\215<\304v\316\275\262\373\275\275\3477g=c\205\310=f\252\177<X\230\250=\330\217\030>\032\357\032=\344\355\025=\205\350\237<\351&\211<\007e\027=\274\005B=\\;\026\276\312\271\222\275k`R\275\021\035n>:y7\275\325\001\204=Bs\010\276\022\361\320\274\236#\251\274\313\277[\273]\221\300\272B>\"\275\3510!\274=\345\344=\261\215\263\275\300\020\311\274GR\317\275d\322\372\2756Z\036\276\025N\233\2752\314\265\275\3276J\275\306\037K=t\222\250\275\033\\\377=\024\003>\275\300\002\204=\204K\376\275\n.\243<T\017\231=w\2738\275\031,\"<\3668\362;\372f\272=\342$c\275\323e1\275e\316\037\275\001\244\371;\034X\246<,:a\276=\004\307\272\236[\000=}{\034>1Ms=\331\3350\276K\3169;4\035\262\275]\241`\275Q\220\364\275\001\274\270\275\355\271~\275\025\376k;\320!\035\272\272Dn\274\364\034\027=\0353\314\275\204\"s\276O\216\254=1\2474=\211l#\274\212\tA\275,\004Y\275?\337\252=\314\205\013>\004\305<\272[4\302<\0052\001\276~ON<\034\001\300\275\2124\224=\232\016\263\275\2774\222=\000W\001\275\321\0244\275f\275\004\275\276\361\343\274nb\237=\360\205K\275\334\334\t=R\360\"\276\360\277\214=\0211h<\350\255\325\272\'F\031\276\371rt\275\030\227v\274\322\307Z\274M\334\202\275\274\230\373\274P\375\r=\323\004\261\274{\304\004=rH!=\270\n,=\332\347\367\275\340p,>E\234\211=Z\213\320=\"\021\252\275\253\246\023=\370\254|\275\224Wt\275o\211\024\275\337\307\030\2748\257W=\375v+\275\214ZJ=7\005\"\274\327,\255<\306aA\2759\367\220<\362\014{=\311N\207=\341a];\347)\026>\371\367\002=S\302#\276R\366\360\275+<N\274&0$<\374\327C=B\020\203= >\215\275\331\205\262\275\322V\374\275\034y\231=|\350\221\275a\373p\275\00064\275\224\224\220\274fB\3269:\037x=\205:\002<\316\253\017>P\301\001\274\213\220\206\274\220\342\263\274\302e\224\275\201\270\231;\025f\226\274v\262\330\275\375V\223<\242\0078\275n\242F=\226\030S\2753\020g\274\324K\321=\3513\220=f\r\250\275Hge<V(\247=\3008\363\275\206\037\260\275R\312\023\276\310y\234\275\375x\325\274\2629\275\275\315t\332=d\357T>\302\341\033\275\337\221\217\274\246\326\215\275\000\271\355<\014\301\004>\201FG\275\274\377\016=\351\317\017<\005.\221=\377-\030\275\333/1\276\343\271;\275i\356\315= \022Q\275|\005\221\272\263\247\355\275\254\250\t>L\317\\\275\177\231\013>\365\027\270<\232\257L<-\333\232\274\312w\224=\337\235%=k_\340:\273\3760=\177\341%\275\202{\302\275\363\260\270= \204\314=\0253\221=lT\"<\250\342\210\275\324X\357\2759\256\247;\r\n\370\275yM#\275\356q/=~\314\351=\325j\022\274#m\226<h\213\243;\3038%;\321\363\003\276\371\031\362\273 |l<VQ\371=\324\352\254\273\t\350\003=\222\251Z<\202ev=iG\332\274\241&(\2767\237\356\274^\250x=\027\334p;u\0373\276`[\036=H\224s=\307&A;\225W\320\274\276\234\271\275\230#5>\270\200^>FX\031>\274\302\177=\302\233\315\275\"\311\361\275\224\246\263\275k\357\273<\254\273\201\275E\247\211=\230]\372=\360\204\204=\214/>\275\026\237i<\206cF<\tb\337<\352\227@\275\002\213\302\275\010u\001>\225\357\201=\271\265G<:\217\276=Y\034I=\036\327!\274\252\',\274\375\\\314=V#\r\276\010\300\312\275\233~^<Q\251\321\275\324a\203\275\312\016\256\275\333\255G<\207\024\256=\016\251\035>\021M\177\274P)\211=\336\031\274=\254v\036\276\244\245\030\274\261k\207\274h\326\216\275\217=\220\275\343\300\210\273\306\304\361\2737\0253\275)C\212<<S\225<\305\206\325<\363\253*\275\220\024\360\272Jq\247\274M\366\311<\375\207\376=^\212\236\275\357\204\016=\320%8=\020\351\262\275\300\371p\275\005\373\321=\n\247J\276\0079\223<\347\256\212=\r\373\334=\210\327{\275\267I\215\275\036/Q=\212\027\365\274@\316\003\275\3007\032<~z\276;QBZ=\236\312\221\273\2215\221\273P\010\032\275\345i\220\275\257R\346=\202T\035\275\274\312\002>\335M\331\275\030Q\000;\275G\031;%<W\275\352\345\224\274\262\244\221=\255\033\243\275\365n\177=m\342\304<\255\243P>\233\327\003\274\240Q\014>tr\336=\324\310L\275i\302H\275\027\n}\273\354\035\013\275+Z\000\276\314\257\000;(\351K\275\252\223j=\353\270&=\331W\270\274\002\000\254\275No\245\274\323\333\260\275\365+Q\273`\231\002=Y\340%>\324\354/\275|\276[\275\355\205\014<\220\010\265\273Lpu;\313\264\350<>\230\314=M\317\377\275`\226\225\274\326\303Q>\355{A\276\317\200\005=\031\243\030\276\236l\204\275\275\202\244<I\244\230\275\322\037\000\276\007\230\246\274\250.\250\274\022\247x\275\222L9=\001\242\213=\303\302\324\2750M\242\275\216\021\272\275>\236\336\275\313i\247\275\037\373\234\274\016\266\010\274\214\035\374\274GWb\271\342\201c\275\321*L>\371\236S\275\257\237 \275\212\244\200=\360\014G=\365b\002>\267\315\005=3\354}=q\371\327\275\365\007;\274\001A\203\275\354\302\200\274\026\215g\275\366\316\214=jh\266\274?\356\214\275\267X%\275\263\014\311<\016\262&\273&\203\273\275\332T\265\275\231\235\014\276\002\021\310;aFS\275\255\346\204<\n\257\022\276\303\307\006\276\242\256\004>\247\215\357<\257:\266\275\323[\t>\247\262\337=!\236\217=J\245u\275\223Y\236<s\246j=\234\322\027=\034aP=!F\224=f!\020>\204\326\313</\205P=\367\313\002\276\264\223!\274\352\251\246=\221\372u\275.g\215=\327\263\304<\201\335\250=C(\270<\256\334\300\274G\224I\275\257\355\037\275]\0246=\"\037\027\276\3323m\275\231\t&>)a\000\272\377\267\234;l\226!=\322\312\217\275\205\205v\275\322 \010\276\022\372\275\275\375\310\360\273\324+z\275\364\307\232=/\330\213=\251O\374\275R\203\263\275\210nh\275B\300]\276F+I\275l\236\224=\316\372\241\275<m-\274v\363\274\275)\r\335\275\230\357\342=\036\010\006\276\241\343|<z\217\005\276\3000\021\276\001C\2317\035\2573=1\016\246<\311\204\267=\303(\327=\232\301\257=\256W\277\2740\301\212=R\0225\2747\306\024\275<\000>\275\243\376]\272\322j\274=y)\027\276\006}\245=\250\227\215<\231\265e\274\253\364\255;_\354\251=z\251\021\275\017-3=\0020\231\275\271L\320\275\024\352V=\342/+=\233\321\315=\275z\256\273\211-\263\275\007G\326\275\251Dr<\342\032\234<c\027\370\273\333\252J<]\271\004=\347p\222=\371\216\374\275\"\214\310\275\0010\003;B\343\304\275\265\235\356\273O\210M\275d\267t\275u\205\234<\222\300\354=R\026}=\021\260\315\273\271Q\364<#\325\273<\307\215\010\276B\022\244<OG[=\354C)\275\253<\366\273\013\014\300=\232i\237=4j\234=\006\301m=-\305\022\276\232;\300\275\205\232\024>$\2730>$\371\312=\300j\212<9&\370=tA{\274\253\223\305\274\004\371\003\274\210\235\276<\247\000\010=\212\314\270=\347 h=)s\211=`\336\023=m0\004>\244\351\372\275\274\356#\275\013\023\353=\007O\032>\265\301\340=~l\003>\334\274F=\306j\233<.\366\360<p_\255=/\033\225\274\177\225\001\276\031n\202=\367]\244\275\367\365\235\275\341!\005\275\021\356K\275\354\366\333=\330\201\r\275\036\244*\2757\375^\275\177\177\352=\210\336\330\275\230\264\335\275\3603\373<\377Q;\275\236\212\010:\022\201?\275\327d\275\275\356\006\034\275O\2152=\232\002\334=\351\'\363\273\235Y`\275\251+\332\275i\206\034\275\271w9<^\212d\276!\205\036\275\216\220k\275\272\226\351\275R\305\305\273\327\254\306\2755x\271<@\357\270\275 D\365<:7\252;Q\371\004>u+\010\275\261&\030\275Me&\275\301\236\376<\245\n\204\274\233\312\375<\016]\035\275\032\022\"\275\230\203\240=\357\274\254=\377\363\010\275\002\215R\275\221\3139\275KAy>\\\337)\274C+\310=\361T\333;\027eQ\274T\204\331\275m\233Y\275\327\336\363\274\256\317]\275\302u\354=_\203.\275\036*\276<x\233Z\2751A\261\275\254\327\317<\001\220\374=\010\213\356\274\315\244\357\274S\034A=$L\320\275\255\200\200\275\037\022\324\275\341\363\306=\270h\262\275\244\243\204\275c\2741>,v4<\367\315\313\274\336+~=\274\350\254\275\032\305\323\275\374r\311=\022\213\331\275U\206z\273w\313&=\241\257\211=\264)\200<I\230\344<*\037\003\276!\341K=V\204\352\275\302\321\345=p\237\330\275V\250\227<\3754>\276\020ll;\312x}\275u\375\244<;a\226=\373*\361=\221\216\013\275\223\336\321<\266\330p=\312\312\304\275\356\374\227=\361\003\361<i\355\344\275\262Kx<\022\241\200\276\273\373y=\236)v\275\014\361\n=\207~\022=\365\241\236=\320\302*=\341\263M=\271\330\334\275\352\"\313\275\227c\246\2750[\035\275wA\232<\376\"\217=ln\006>\024\343\021>\007A\201=\326\300\313\274\003\0331=\031\347+\275#\251\003\275\005\373\262\275\303h&=%\203\244\275\001M,>\231\201\322\273\177\214\264\275\276x\355\274\356\252\273=\250V\220\273E\332g\275\231\327w\275\357\366\303=T;\\\274\360\010\220;>x\334\273D\336\251<g\343\200=\362\007\260\273\372\363\031\275?\3129\276\001\272I<\321\014\016=E\2018\274\003\275\276=\277\335\337<;\207\341=\250\235\372\274\033T\367=\210\260G=\204\312\347=\323\335\227\275\023]\372=\267\221L\274\233\215\223;Uh\312=M\032W=\257\032o=\360\027\300\273\330C\221=\235\244\201\275\376i\334\275\207\r\245=I\234\207=?w\247\275O\207\001\276c\004]>\263W\250\266\213\365\273\275\210\221\315\274\006\212\371\274\024S\266\274\260\314\211<\256\231\267\275\000}Q<d\302\214=\233\311\273\275\221\332\276\274\214\031f\275D\270K\275\233:\354\273\304\231\016=\256\210\220\275U\036%\276\220H9\276\377{\036\275\231y\240<\322_X=\t\316D\275._\322=\276Z\257\275\305Q\253<\246d\232=\033J\303<\352\010\014=\216_\265\275\245\030\007<#\225\205=Q@\222<r\303S=\372\027\325=\323D$\275m\233\017\276\264\267V=wr\222\275r+\006\275\t}\036\275\206N\231\2743Rj\275\360{\367<\233\3029=\217|\224=|\351\343\274\345gr\275\205\326\002\276\340\013\212\272}l\275\274\266/\224\273\210\320\203<\321y\216\275\263\014\032\276\240}\247;\267\233\007>\031\265&>\246\236\257<\336\336(=~F\250\275\006\323\201\275\307\313\265;$e\022\274\372\347\331=\t\025\t\276\366p\253<\312J<\275;\354_\275\017\347\316;\320\017P\276\267w\205\275\343\365\331=\241l\266=D\033^\274lO`=\037*;\275\246\325\223\275\013\225Q\275\340\336\005>\304\242\227<S \343;\226c\331<\342\377\275=6\3352>\331\230\314\275\254\321#\276w\353E\275\262o\341=\337?V\276\343\326\341=\013\320\020\276\025:\264<\006b\270=\222\262X\274\"\206\257\275\203\232n:%\251\313\275T\023\370;\320\350\323=\217]\021\275G5\033>\023\003\226<\364\240\301\273<d]\275\202\361\373;$s\221=0\220\370\274\024\274\201\275\203+\237=q\220D<\2461\204=x\026Z=3c\035\2752^\'=+\314\t\276Z\314\033\274P4\213\274\366\002\225\274\002\t\244<y\241T\275\263{\301<\000\345\254;\232^\342=\232\007\\\2743p\270\275\304\214\215=9;|=\254`\317\275\320O\217=\325\232\361\274<\374\022=~Q\020\276\312\317\177=\031Q\362=R\003V=\267\316\350\2751\2641=\306\022W\275\312\345\021=>\312:\275 \265\230\274\351)\377=\3544n=\037\3447=5\030\024>4\376\245=*\213/\275\004\267\347=y\003\320\275\2656\333\2755r\027>^x\224=\346\211_=.\221H\275\344\031\005>\367\200\314= =\313\275d?\246=\346\277.;\244#\301<\223H\362\272\337\371\251=\032L\334=\236\033\362\274\235\276\320=\227T\007\275\363J\325=\246\3276;\243\0205\275\014\246=\275\266\234\t\275\007\345\275\273-\353\340=\354\026\202=\214\312\264\275\270\331\007=*Q2=s\035\273=\357\024\224=3\306\364\275m\252\"\275/\340\237\275m\332?\275T\361\332;\321\360\330\273\226\227\226=/\267\032>\250\230\336<\350\264\340\275\322YE\274\314\322\301=y\214\252=y\374\263\275\266\360\201\275\222\216\252\275!eP=\322\035\237=\235\221\266\275\253T\305\274\257\014\207\275\025H\221=9\"\020\2734\230\330<\027!\215=\305zT=\233\356\342\275a\336\360<\355\275\376\274G\363\270=\0301+\275\345y\266<f\335\360=\215a\213<\177\325\007\275c\177\010\276\275iL\275\3277\363<q\244\220\275\222n\373=\256(\017\276\003\tW=\231,\340\275\354I\223\275\027\364\306=<\352\336=\206M\223\275#\367\267=\236,\327=\373=-=\022b\227\275\032L\237\275Gs\222\275_\013\343\275\273)\276<\315dv\2757W\223\275\215?q\273\267\336\207\274}\277$>\232B\013>th\014>\314\' =\037\200d\275\332\217!=\242\323j\275C\215\216\275\355\226\017\274`\034\257<Z\022\315<#\216\026=\031A\377\275\241x\241<\317J\327\275v\372\346\274\351\325\236<\253\346\212=\270P\305=\375\"\326<\n\326&=\335\252\227=-\245(\276#\236&\275\203\251\353=\314O`\276\255\237\'\2741\241\022\275\212L\303<\031\013\036\276G6\346\275\370\301\027<\3645\266\275\316\032\315\274>#y\275\374S\332\274\230\341\307\275\201=\207<\230\227A=k\202\025<4\215\362<\354k8\274\304@y=\202\275\214<\007\371\212\273]Q#=zj~;\374\330\341=\336\210=>\314\222\352<<E\302\273Q\261\001>\323.)\274\361\n\377=\254\371~=\372u\256;=R\224\275j\241\221=\230\254\032\275$t\000\276w1?\2756~\233=-W\257\275a\230Z=\340)\207\274\205\021\021=\004l\330\275F\275\260;G\343\301=\225B\255\274I\331\217\275R\360}=\237\ty=u\306\307=$\2166\275\202\'d\275\274\210\247\2751\204<\275\220\253\247=\340\213\211\275\316\365w;\353\315\002=\331Wc=\017\216\240<9u\271\273dR\315\275L\367\277\275u\322D<\020\323D\275yk\266=\254Z\264\273\227[\037\276\350\230\177=c6(=\007\'\317<\360A\224\275\370\303\316=Z\037s=[\004\013\275t\250\207\274\'\331 \275j\036\205\275\031g\032\276\252\373\334=p\205\001>\001\342\331<\312y\342\275h\234\262<S2\237:^H\022\275e\t\355=\213\241\001\276\237RE\274\265\037\355\275\007\253\265\274`\033\006\275\315\023\371\272d\\\350;\0100\346=\005#~=\"\246\024\276\331z\200<\201h\324=\313\347\251\275\301\250\321\274\250\322\227:Zm\212=\376\307\372\275\025/O>.\300q=\342(\354\275P\331\014=&\252\351<w\036\217=M-\234\275E\240v\273O\003\345<\266C\'\275\277\350\321=:\240\230\275PD1=i\372\351<\223\207!=?n4=\010\373\266=D\025\265<\3208\030>\311Jt<\311\232v=X\013\232\275QHo=.z\031=0\364\031\275\241\037\275=\234\'\216=SaO<>\223\r>\347M\254\274\025\224\370=\200\302\004=\207\376J\275\347\323\332<\242\215H>\377\021/\275\005n6=\226\202K=S\353\224\275\355-\301=\010\230\023\275\240\356\235\275h\364\\\275\241s\256=\346^\241=\212\030H<\365\377\013\275\017\214\366\274L%\312\275\313\233\204\275\036r#>Mb\217\274}\027\013\276}7,\276e\035\300=y~B>\245\215\365<H\226m\275\302\252f\275\224\216\025>\300R\006\275\262\356\343<\321\376\274=s\235G=\026[\202\274\n\312\350;\212\377|\275\237\220\345=\276\372B\275\234\207\255\275.\344C=eL\r\275\241\320\323<\262G\307<\212n\220\275\367\277|=\351a\365\275l\"\267\274f\247)=\251\235\324<\0340\007>\200v\t\273RF\365\275\200\253(>!n\256<\245\243\022;\211\343C\275E\216m=\005\351\351=\242[!>\326\"\032\275\233.%>\347\366c\275\210TE=\325\265\344\275\337x#\275d\310\037=\341\276\000\275+L\031\274\342\023\227=\273\267\223\274xHD<A\251\210\275\361\353\023>\326\277\233\275\031\251\313\274\340$\242\274\354\375\206;sD\251=\300\305$\275\025.\034=2\205\206<[\205\327\274\343L\211\275\r\264\353\2730\306\274\275\312\253 \275\"m\364<\200\222\002\276/\366\177=98\216=\207L\346<\037\027\306<\261c\332=\217\341\355<t\205\324=\352\n]\274\035cL\2767\035\253<B6V\275\264\356\">\037\212\322=\3411\252<\262\301e=\005\327\013>6\237\230= \001\257\275\322m\037\276\265Z\226\275\365\322@>\177\r\200<\000ZC\275\275\215@\274n\314\221<\201\372\240=r}m=;[R;\365\236\210\275\343L\355\275\271\013\232\274\276\242q=\351~\327\275\304C\030>6\366[\275BKc=\'VR\274\324\277\n\275\021\207\376\274\251\024O=\371\016\363;\301\321\345=\000\016\231\274\342\247\'=\312T\013>\003d\326<\007\361$\275b\320\243<\220\0334\275C\332\252\274\231P\222\273]0\240=0\033\221=4_W\275\t6?<\3427Q=\027\252\266\274o}\016\275W\201i=\255g\354\275I\214\367;\221\354\231\275Ly\327=\230\277\002\276\316+\243=\334\263.<wd\245\274\251\333\276=g\177#>\322\242\275=\347`u\274C\3030\273+R\231\275\366\010\377=\3107<:\311\205\306<\034\241\232\271\261\226\263<,3g\275\213\224\347\274\n)\027\275,h\271=\037\026\365=b\254\226=\026\003\036\274#\367\233=yL\344=\363\210\247=B\322\273\275\321<\001>\005d\215\275\037r\017\275\314\226z=\245j2=\207\272\350\274B\365Y=x{,=i2 >\032E\013\275\363\265\220=\227*\030=\345\241C\275Y\233\274\274\261/P=\232\307\237<\374W\372\275I\277\000\275/\'\333\275B\277\225=\375`\225\273\226\370\007\274\023o\211\275\007 J\275\357\322#\276\2533X\275\301\360\332<\033\321\313=\306\326\267=\375i\025\276i\255\350\274`\000\374\275\361\276\334\274/\034\317\2750\001\202=\265\224F=\006\243\177<\322<%=\'1\271\275\251il=K5\361<\262e\362\274\354#+\275\250\371\204==\001\255\274\230\341-=\334.\027;di*=sk\245<\342\326+=+2)\275\303=\006\274\354\302\210\274\213\310\240<Q\266\316=y\032\002>\360\"\250=\312\305S>\357\375\206\275p3\245=\227\215\205\273\030*\323\275i\226\254\2757/\035\2757\2430>\002\336\264\274l\327\000>\325\363\277\275\010\'\332\275}\006\\=J#X=\022O\245=\246EA=M\315\361<\334 \014>\013\327\204=\014\303\307=\265\352\211;\273\004\266=U\2356\275(\177Z>\363\335a=35P\276\336\353\257=`\216D>\200\\\265=\00093={v\256\275\215cd;\202\0164\275\331\205\273=\346y\222\275T\242\253\275\260\013\n\275\017H:<\354\001\331\273\350A\005\275\005\364\377\274\313L\260\275T\251\364\275\332\t\266\273\300\255\202=\261os\275~\010\306;I\340\365\275X\303\221\274\373\2200=o\235\022>\272\336$\275\347r\036\276\007\253x\275\344\r\365=QK\212=N)\217\275X\276\022\276\233\211\325\274\223n\013\274\201$\201<~\0332=|y\322;\257\033>=\222\020\262=\346\"\311=\r+\020\276\244\273b\275*A\240\275\036\251\237\275\217\355\324\275\225n\277= \223o\275\267\'@\275.\327\360\275\373\257c\274e\010\225=\341\367#\276*Ml=\007\304\230\275[1\257<}\244\254\274\020\023\274\275a\375\245\275a&\"\276\331l\005\275k\005\260\275\206(\204;\260$w=9WU\274\263r\027;^!_\275\310\226\332=\314\336\000=,\r\300=\005\354\302\275v+\223\275\031;8=+\344\307\273\256\300\251\275\244\312\360\274\373:1=\260I\247=\333F\006>\244\201>\275\304)\323=\226\256$=\221\2019>\252.\36282{\200=*\250\357<\\\216;\275\216r\217\275(4\310=\371\246\360=a\366\t\275a\350\355=\250\230\225=\361\217\017=\272\212\221;<Q.\274\333\211\000;1\331\315\274\267\276\366\274\212lE\275\322\nU\275\322\227\024\276\231\336\001=\377\270\255\274e\367i\275tu\304\275eQ\337=B\226G=\2730\022\274V[\241\274\023\226\205<qz#=\371\240\'\274\271\276\003\275{\020\217\274\337\305d\275\203\260\270<\276\026\213=\227Y\034>\016\256\327=\240\365\374\274\320\t\r\275\034\242\210;C_\027=\373\241\026\275\020\216\002\276\204\326_=xE{>\230\373\035\275\250\202\236\273\263\326\344\275\002,~<\0161\377=\264\277\243<\003\332\360\272\212l\377\275\351\253D\275ipa<C\274\024=\250\353\334\274T\'\207<y\255\217\274\240\256\333=\314\352\211\275&s*\276\326\317\315=\257\355\210=\243\022\321\2740}\253\274\311\230\237\275q\275\031\275exI>G(\213=}\306=;\360$j\276K2\017\276\'\032}\275C\221\225\274Jg\267=\245D\r\276\346m\336\275\374\024\243\275C\374\'\275\372\010\201\275\017T.=\3746*\275%`,\275\331\026\361\274\322K|\275\353\206v\275{\017t\275\342W\260=\314:5=f\315+\275@4\246\275\355\377\216=XD\261;\371\275\025\274)\327w=\327\300f=\345\270\204\275\271\3104>\275\003\227=\245\373K\273h<\002>\374Y\020;S\254\006\276\306T\267<\317\247q=\272\342f=%\231\277=\205\347\357<\205\013\350\275|\213\311\274\213\370?>\365\370\212\274P\3223\275}\032\275=\340T\267<\365\3009\276\352\346\360=9M\222=L\243\263\275\310\030\247\275(\345v\274\370\260\345\273\234\261\361=\267U\220\275\336_\361\272\376\340\272<\370X\377=4\254\310\274&\343\353=S\035\204=\262\373\262\274.\350\310=t\206\334\275\353\023\022>V\345\001<\203h\023\275\226A\237\275\246\326\333=\321{\004\2768\021\006>1\222\327\275F\231\267=\030!\253=\005.\246\275\263\322\274<\245\017\036=4\013\004>M\237\241\275?\300\202<\356\330\352=(t\353=\351\005\201\274\r`\340\274S2\223\275\237y\210;\221\260\366\274\336\352\233=\275\t\311;\355\\_>\351\314\372\274\242\333(=2\261m<\r\344\326<\025F\241\275N.\267\273on\231\275\310\364\205\275\213\231#\276)\340\267\274\306}\230\275\207^|\275\251\205\256=\225\035\353=\365\345\253=U\343\246=+H\000<\254\217C\274%\3266\275\177\257f\274-\2110\275V\214\206=\037\230\200=q\010\250<\210H^\274\350\n\020\276\255\340\241\275\004-\004\275@.\377\275\2335\341=\210A/>\331Pv=9G\024=\021\020)=\274,^=\355X\361\275\207\266}\274\207\251\311=\256\276\343\273\335y\204=Y\250\306=\342e\342;\305dD\275\030\333\214\275\'\270\010<\177\023\266<?\360\030=\331\032\310<*\370\323;\032(/\274\325\374\r\275\004\371K\275\022\355X\276\242\255\213=\323H\234\275Sz\357\274G\205\247\275\270\023\001<4\342\021>j\313\020\275\255g\315;\247\t-\274:\355\347=\340\221\203=\177+\235\275\367r\003=\345y\207=\215n\212=+c\247\275,\356J=[\255\217=\256\226\006>\206\345\256\275\350Bt=\225W\240=.\037\001\274U\232\215\275rW\307\275\035$\211\275\364\013T<X&\317\275\000\2157=ZiY\2759\037\353<\345q\022>o\262@\274U0\266=\242\207\006<B\334\236=\325i\344=!\033\035\275\rx\203=NT\317\274\227@\022\276u\037\225=8b\213<n\342\316=`\305\356=R\177\013\275\334\216\232=\001\000\301<;\251=\274\250p\321\274\270\010\215\274\022/\306<dR\235<JS\325=\311\332n=\262\272\253\275\241f\271=\300^\026<Y2\216=\t\220U\274\'\224\031\275$|z=\346\367\360\275\t\321\355=1\306\265=\'J\316<\324\277[<\365\302\225\274\324 \241=\211s\276=~\373\344\274\330\367\343\274\301\205\213<\254\201\321;\331\364\277\274Y\306\021=\353\232)>\220\216\340;\352\324_=\272\303\310\274\247+\376=\362\364q\275\010\321\244\272<m\204\274\310\330\031\275\275\030\254\274\002\031\362<M\303\234<\342\030\323<\211J\251<\r\203\301=\265!`=\344\r\034\276b{\016\276\2532\342\275`\254\323<\201\221\363=\362\200\221\275\267!\031=w=\270=3\026\234=\307\"\266\274I\363+\275\nJ \275\243|Q\275\306q\201<\006\004K<\330\322\235\274\257~4=&C,>\262\332\277;\310F\346=\010\276&>A\037%\275;\256S\275\375]\202\274m\257\\\276#x\341;M\354\316=\002\300H\275\227\361\004=\001\207\260\275\233\370\230=$\233\002=\354Y\r\276D\251:>\351\251\323\275i\370\232=\266{\016>\337\372\030<h\000\001\276F#8=;V\226\275\361\366\305\275\204\210\221=\037y\304=!\334E=\332\324\341\273\251~x=\267\0230=\362\272\264=\\\212\234\274\006I\267\275)[\024=\275\362?>@%\265<\322\260\004>/\376\337\274\313\312\357\275F{\345=\301\326\214=9\2649\275\357\263\344;$@\227\275H\345\201\275\260WV\275\310\342\336;em\271=\\y\372=\307_F\2756H\217\275eJ\025\275\240#\227=\341\206\177<f\360\211\275:\276\216\275\256|\305\274\215\315u\275C\334\024\276\314\265\241=\345\231\264<9\205\217=u\320\013\274\205\004\034\275\327\307\013=\222R9=S\300\322=<\256\213\274\0060\356\274\030B\210\274\3060\300\275\257O\300<C\010\037>!\3769\276^*\336=\037\265\013\276\207\312\241\274o>\351=\343\025\337=B\260\336\2745h\243=s\271\031=\242O\025\274\250\305e\274\215\354\241\275\021\212\311\275\353\366_\275\365\311\\\275\373+v\275g\326|<\010\177\251<\233\265\027>Z\244\373<\365\375\202\275\207\244\037>\332\306\036\274\022\346\214=Y\240\210\2756m&>\235\234\205;\377\253\303;\245\340\213<\317\352\261\275c\206\035=\300\212E=\214\325\024;0\227\362=\241\310\212\275\tu\016\274Z\273\024=\342\333\256<\321o\244\274\306;\236=\244\217!\274\277A\356<n\037Q\274D\254\216<+\301\224=$g5\276\230\255\223\273\305~[=\310Z\261<2\352\256\275\247(\315\275^k\264=?H\000\276D\277\262<p\366\205=\327Y\226\275R\332\225\274\301d\223\275\324bV\275Nn\272=\214\035\331=[\214@<D\347\027>\264-\342\275h.\014\276\244\305\316\274\226\241#\275\304\330\331:`q3\275kD\256=T\374\222<\302U\257\275\344Z\203\275,\364j\274\004\317\356=\250\315\337\274\267^\224\275\3447\300<6\1776\276\317\301o=\247\314\250\274,h\'=\020\350\322<\310/\004\276\305p\211=\002\034\362\274N\017\322=\336i\226\273\276\344)\275\267\223]\275\177\2548>\301\266\216\274k\256\033>i\002\221\275m\376\222\273\243\340\200<\214L\230\274\366n$\275\213\342\000\274Vcj=\234\256\307;y\324)\272\302+\021=p\356`=\310a\311=\221\221\271\273:\210\357\275\303\225K\275\226\236?<\007?\316\275\260\241\207<4\232\301<\355\221h\2756E3>\\\212}<k\243)=j\031\r=\352\217\221=\271\214\017=\365\017\321\274p\3253\276J8?=\305\"\235\274L\210\211;\177G\316=b\363\"\275\224\302\315=[\223\251=8\340\201<\334\341\322\273\231\332\314=\230\240\272=~\371C=Py\315=\370?\270\273\250\276\036>\202\262\242=B\301%>Q\\\253<T\017\207\275\353/\257\275W\234\312=}\024\361<\304\237\346=\007(\220\275\3530\230\275\244\330 >s\0209\275{\247\220\273^\025T>\013E~\274\2061\240=6z)\275\3474\'>\336\346\266<\271T\207=\231\313\353\271\333\377=\275v@\260\2755\276\262=.\322.>\246\247X<\2404\017\2752J\016\2769\341\275<\366\345g=\313\010\243=[/\230;\211O\333<\256<\221\275t\343\341=\367\252\326\275=d\317\275\033\027\206\274\007\r\210\275\350>a\275\021\353)=c\306\273<8i\257\274\327\353\362\274\316\377\327=\300\'\256\275\327W\223=\242p\202\275\216\005\215<\317\255A<\021\367\277=\216\325!\274\233_\014\275\342\246\207<\354>\337\275G5]\275f\337V>\221|\207\274\023(\232\275\343\032\333<\274g\274<\332\345\364\275\367\323\217\275\355\270\023\276\344\361\033=z\343\305=\005\035\355\273s$#\276`s\352\275iU\250=\302e#\275\355\352\036\274\006\254\323\274M\250X<\217\000 >xCb=\356\357\311\275\010c;:f\210\277=\351\255\246=\300W\362=\0101\340;\347_\262=2fg\274\221\306\343\275\211\375A<7\244\346=^\310\225=z<\345=\275\001\n>\3176\313=o\013\361\275\376]\016\275F#\331=O\234m\274+:\300\273\034\305\236={ \234\275N,6=\236\031A=?Z\214\273\204ol=\202\204\365<I$\247=\365\244\301=\237\021\341;\312\307\242=\340\332\305< v\"\275\033Y\337\275\243\230\314=\352\367\014\276\243\225\002\275\026b\301\275{8\325<\263\000\235=\244\214\236=B\r^\275\346\331\375<A^:>\204\232\010>yb\036\275\362\221\226\275\236\340\'\275\003\"\327=\r\307\340<\234o\233\275\254\346%\275<\216P\275\203\240\235\275\2048\374<\255n\216=mU\267\275K\370\252\275\'\351\254\275+8\221\275\321\347L<+r\020\274\206+\313\275\036L\t<z\247D=\316\363\362\274\033\303\216\275\357\315\321<\330\342\250:\223\016\030=\220\333\211=/1i=\315\231\365\274?\211\t>\270\177b=;\340\003\275\2763\263\275\211`\244\275\033l\307;\276\016\357<\025\267\304\275\304\\\362<b\243\240=\271\371\370;\272ul=)\302\002\273\216\233\372\2752\304\304<\027\322\263\275\317\357\265\273\303\336\217=P\027A\275E\007\304\275\026\"i<\212`\325\274J[\272=\205*\033<\201\314Y;\037\220\221<\376\002\233=\355\216N=\220\244\220\275eZT\272\234\243\001\276W\265s=&\241\215\274\265\030[\275\274\326\215;\226\0163>Q\026\022>\301\020\323=]\002s\276\365\034\274\275\036\345\210<\200[@\275\277\024:;\205n\253\275\262M \2760\244\321\275\266\377S=x6O\275X;9=\205\347\\\275\200\230\343\275\277\226\357<\235\332\276\275\031v\374=\251,\274=\006l`\275\377<-\275K\265<=\274\333\t\276\260D\246\275\336_\226<O\225\314=\313\214\334=b\244\236\275\227\031G;hb+>\ryp\275\330\3538\275*\212\267\273\022\230\272=\244s\233\275\235\013\364\275\250F\223\275\030\246\240=\370\014\260<\031p9\275\203\267\343=&\234%<K\245\362\275\301\017\301\275>\324Z\274ee\317<`\313\321\275-\312W=\356\251\217=\304\312\362=\373,\263=N\024\347\275\262\"\216\270\360!Y\2753\330\360<\254\216\352\274\307\307\032>\217\035]=\236\247\227\275\212\346\222=\252\246y\276\311\2723\276\3316o=\361\006\201\275\355\033\262=\036\226:=4\016\233=\255f\341\275c\326\235\275\223l\245<\260<,\272\017\276E=\373\223\206\274\014\233R=\356\366\245=\340\314\352\275\277\370\246\273o\263\242\275N\001v<#\302\373\274\201\264L\275\247\340\246=\035\362!\276(\031\013\2733\205\355\274\024\355\246\275?\270S=,\351\333\274\275\262\222\275\277\3747\276w\216\366<nx\211=\371~\233=\260\305\032=E\202\216\275[\367/\275v\323l\273\013\362B9\017\317\253\274\241~=\275\357\344%\276\325o\t\276MW\302=\n\262\n=\305g\025>\233\372\313\2754\027l\275\213/\277<\002!\303\275&\212\266\274\300r\232\274YZ\350<\010N\370=f\223m<\351\307\020<\001=1>5\201!>(\351{<\003\257_=q\254\237\274\254J\026\275\306\330_\274\2224\305\275\025Q\216\275\256\353\224;\371\274\327\275\274f\322\275\317m^=\205\\+\275;\030\352;\240Y2\275\321\034\275=\251\320s\275\234\'\307\275}\006\266\274P6N\2759\351\022>\002\311<;\326\267\030=\274\202\345\274\n\235\315=\215\351\000<\rU\207\275\362\262{=;.\336\275\214\021\020\276s~\343=]\344\026>\320\241\232<\037\376\013\276\361e\013\276\314\021\260=m\364|\275)\210\326=Ip\025\275\326\212\2439\331\201h=7m\211\273\332\304\261=\033s)>\223Z*\274\313\035\266<Vq\303\274\003o\n>)k\211<b\367\310<\253RZ\275\262\223\373\272\234<U;\231\211\372;\221\241\207\273P\300\264\274\0161\007=\350\017\322=\215n\224=\376\341\035=8\2654=V\200\353<\317v\235=vuq<q4\315=\245\351\374=\245\211\033=\002\271\261\275\270\327\224=\360`\276;\004\027\037\275\337d\255\274_\216\337=\273\036\346\273\252\027\230=\373./=%$\247\275\023\256&\276\343\022\026=1\341s:\231\0259>\327\266\266<H\'\266=4\013\201\275\217`\305=u\354}\275\346\372\355=N2\343\274J\204\240\273\177\317K=\027\350\265\274)CS=4\272q<\226\245\n>\233b\337\275<\025\\\275\206O\233;\034\254&:\377\374\031\274\236\271\360\274 D\323<\347_w\274\"\037(\275\232b\020\275m\303\322\274a\261\301\273\020\314\223<[Ka\275L\203\223\275\026\344Q=\205\356\000<|\247\313\275\257\233j\275\267\264\350\275H\347\r>\217\0344=\016\021\323\275@|T\275\013s\r=\\I\312=\003\330\022>t\247\273=\242z\220\275\257\366\010>\023\004\n>\000=\253<\2132\n\276\023\233\223\273\006\213\016>i\357\230\275\306\353\004>\234l\223\274\210\361\312=h\363I<\320\356\312=\302H,=]3\014\275\274&\315<\227d\236\275\003\201_\273\266\324\275\275\327\023\247\274\r5\225\274(\302\300=\036\030U=\252\363\263=U2\224=\207\332\215\275\243L\326\273zG\305\275\017R\344<\007a\014=\271J\347\274`\025\250\273\365\273r\273b\276\020>[\r^\274\263\231\033>\362\271I\275\2277\207=)\337\216=I*\203\274p\266\227=\315\022=\275\357\001\217\275\371\274X=\307\261M\274^\014\222<\377\004:>\236\340!=\271\024\266=y\350B<\016\264(\275\024\230\344:\240\327\217\271.\366\377\275P.d<^\332\001\274\347\274>\274\342=\314\275\272\351u=f\037\337=\213B\354\274\351\216\307=\027\230A\276c\017\262\275\200\r_=}\2708=\203\237\315\275{a\200=\020\307\307\274\317\253E\275\302W\334\275\"\231\376=P\265\302=^\000\370\275\375)|\275_NW=5\002\210\275\315I\t>\014\334\032\275\235\365\256<\377\350[=,\033\260=\340|\026\276D\302\365\275\035\327\006\275o\002\230\275 \0059>\035\353\246\275c\236\352<:\305\246\274\203\031U\276\214#\214\272+\256\346\274J\322\345\274\305%h\275\020i|=\253\005\014>y\233/\276\345\326\037\274\2723\225=\237\201\272<\325sp=I\315\316\275&\014\264\274(\364\017\275\344\345\347\274\265a\374<\273;3=t\215\230<B\257\271=\226G\212=S\032K=\364\371B==g\220=\024+q=\223\300\214\274\017\'\027\275\267)\250\275\2732\256:\202k\222=0S\320\275H>\365\274\001\023\355<iz\303\275r\311\020=\367\341M\275\027\230?\275\2279\026=\360[\014\276\002\224\216=\256go=\262\210\r<\352\025@=&\374Q\272\247\017\014\276)\245Q=\034D\334=\214\035\340\273\371a\n\276\327\020_<dx\323\272\202\001\257=b\221\257=\034\211\256\271\376\271:=\304\\\010>\375\310\325;\323Z.\276\222F4>\345\346\323=\036\206\317=X\347<\275i\260\010<\333E\205\275\214\272h\275HU\364=8w$\275\333\331\253<(\275\250<S\341\031=\267k\202=0\254\026=\321mz<\\\377\262=\000\344f\275q\361\215\274\013K\236\275)\326\310;\227\3427<\0177\275;\2408c=]\240\035\276?n\255=C\013\326\273\262W\205\275S\307\375\275\260\022\007\276\374n\376=\004\311\033>\315\273d=\317j \276\275\304\351<\334\027\267\274\277N\020\275\032I\006<%\217\031\276&\236\205<B\223*\274\304\262\036\275\2348K=\275\216\373\274h\366\006=\362N\000>he\023\275\276\245l\275v)\364\275\306\316U;\246\026\313<m\341\210=G{+>\3023Z\274.`\303\275Zk\240\274\342\324\310<]\303\001\275\223\372\n\275\267\021/\275\301\242\334\275\273\205\233=\213\274g<\253-(\275\353\352\t>%\253\021\276\331\326[\275\377}j\275+7[=/\230&\272 \272\210=\273 \033=\315\023\034=Q\230s<\364\347\331=\245\372\246<\316\357\260\275W\256\006\276\2542\227\275\374\035g;\306\366\376=\021\2027=\207\242\232=nT\250\274\017B\300=$\036\276=\231ID\275\303\234\337=Gz\024>\203N\333=\270\376\310\275\007#%\276#6\243=m\212\312<\305P&\275Dh\242<\031\304\001\275x\\\225<\203\357\205\274\222u\351=\2775k\275\246H \276\252E\014\276\006\207\310=\"%\234\275b\031\207<\224\363Y\275\212\277\027=\341\352\002\275\237\235\345\275\374!r\275l\231Y=F\367\206<ebj\274\371\3353=l\237.\275}\313\210\275\020\276\240\275\202\000\204\272lEB<\000\235\032\276G1\207\275<\347\255\275^\372\265=\362\374\n=6\006a\276\367)\344\274\274`\371\275\224U\020\275\005/\002>0,\354\274H\233\230\275\023H\310\274\272\365\310\275\303\0309\276X\\\202\275\304\371\211\275\374\275\270=_\201\245\275\345\360\252\275\035\017\310=\274\306\207=C4\013=\375\374\323=\010S\303<\376\234\t\276\313\312z;\005\300.<\026\231\347=\276\202\275;(z\010\276\265\232\357\275\210vM\275$\232\257=V\2359=\330\025\014\276\346\000&=\334\267q>\310\226,\276\231d*>\366\277\350\275\275\370,=d\225\332</\341\255=\037\t\267\275;\207\251=\254\225\n>Wr6=\225=\266=\203\255#>\237pk\275\017\331\037\275,\307\267\274\365\360\302=\325F\206\275\256)\221=\254:}\273\246\023\324=\205\331-\275\215\t\310\274\323\370\336;\331\376,=\266A><\272J\320\274\373d\027<\230\346\366\275\265%\312<\023\376\r\275\303\261\006>/v}\275\274\355Y<\354\373\025=G\033\333\275\323\020\003\275\365\346\257=\353d\032=9\203/=\0269\203=g{v=\177\347\000\276#7n;g,4<\340\371P=\275\220\200=\022Mc\275c\271\242\2740\350@\274b\255\314\275\002Q\372\2753\222\004>\356\263\216\274\213\333^\275N]>\274\000I\321\275@\036\340\275\316\223\231\275(\225\244\275\375\327\005\275\231\375t\274v\216\251=\214\300\016\274\367X\307\275+fL<\335 C>\363A\001\274\310\225G\275\203\333\315\273\203OS=\347M\304\274\007\340\024<\330=\301\273\231\366\017\275%\326\024>\223\266\253=\244c\367\274\265\240\017;\211\305\252<\270\237\017=\375\203F=\342\230\270\275\216\220\254=7\306\252<\270%\020>:=\223\275\244\344\270\274\327\303\371\272\344\2128\275r\316\205\2754\244\220\275\3625\256\274:n\222<M\233~\275x_&\276\305\016t=\342\373\201\274\233\311\233=\313\267?=R\2422=x\024N\274\\\227\235\275\330j\327\275\213\377W=\\\330\023>\3505 =\016\331\255=y\320\205=\361\244\221\275\350\347\016\275\276\227j<\'\017\001\276<\232\310<\323\251\266\275\320\247\204\275\366\312\223<\3677\237=\342\315\332;~I\242<\340>\242=\201\237\005\276D+}\275\364IK\275m\323\232\275\200?\024>\001J\273\274\324\026<=\215T?<\312)Y=\262\324\237\275i\353\270\275\254h\021;\024J\355=$n\360=\202\277U=+\3733\275&\267\214\274\010\315\236=t\364\257\274\305\016\241=k\351\240=\013]M=Fc\010<\035\304\226\275\311p\303<\230\201\360\274\363j\342\275\320xt\273\366\031\230\275by(\276\266\030\217\275\274\277\334\274\360\2543=1`3\275E=\001=s\n\026\275=\361\214\275\033\224\036\276i\301;=\277DF>\222\2274>\3471c\276\372lb\275\324\200Y:3\233\207\275.\320\226=\374E\361\274\2224\236\2758\265\233=\017P\232\2744\257U=g\321.=FJ\217\273\214\325\351==\262e=\256Y\334=\005\3363\275:v\022\274i\327\264\275\350\2211\276\355\377\202<+\261\222<\321\221Q=sB\005\275\025\005\214=\267\205\005\276v\212\n\274\007\213\021\276\327m\026>>\262\361\274#\211A\275\330{r=\313\033$\275\3344\253<gs\343=\366\372e\275\307\010\271\274\036\023\312\274\240\344\310<^\005\004\276n\035.<\313W\341<\330\005\362;\017\243\002\276\215uE\275\360\252\344;\006\001\221=N\315\n=\200\3273\276/\237\020\276x\250f=(\366\222\274\215\347\367=\341\266\016\276\377\233\033\274\007\3473\276\001\010k\275\031\360\277<!V\260\274=H\216\275|\366\316\275\013\245\341\275\200\200\230\275D\374\272=\310\013?=\374\356\267=\206)8\275\353\326W=\210b\210\275\213le\274\374\037\230\275\375\337o<}\234\210=\357\274\246<\335r2\276\001r1\275\n\206j\274(\300\313=70\244=P[\031\275)\016\217\274\266\334\237=\334\251\231=\347\245\246\275W\"k\275{\264x\274\370\033\005\275@\211\307\275\274\271n\275\2009>\275\350V\004\276~\244\201\275\273[}<\306!U\275\275\211Q=\005\314\237=Y\307\031\274a\017\221\275=\017\233\275=n\035\275\222\251\252;\305\252\213\275\021\276\014\275\345\376\233\275\310\267\353\274\313\372\223\275^\016\233<\222\272\301\274\363\026\025\275\275\327\030\275Y\243\'>nRO=C\300\260\274h\316f</\231\370\274\371\211I;\304K;\275\213\340\314<%N\307\274U-h>\357\252\253\275\370|\354;\237\372\327=\246\354T=\037\307\253\274z\317\017=\210\324\035>\313\333\212=\301\177\310\273-w}\272\321a\322\275\213ix\2752\265\265\275\354\n\375\274\251\307\237\275\227/\312\275\372\346\351\275\224\272\247<S]\037\275<+U\274\366\023\226=\332\254\220\275\214\2410=\367\303\220\274\025\351\207\274\250\206\216=\022\345}\2752\267\351=89\001>J>v\275<\221E<\212\023-=\306\225\267=\201\206\221=\032!\024\275\204Y\007\273 \244\006>?D\001>\243\302\020=\367OL7\3466k<\342\245\262<\222L\'\273\031\021;\275[\311\326\275\017U\220\275{L\236\2744\221\265\274\234\234\231=0\r\306<\274\215\306\275\347\314\233\2749\207\273;\322S\364\272cY\314\275Gv\004\276\001 \303\275_\207\250\275\017\363\236=;\327q=\336\024\264=\014\367\200\274Kx\266\275\254]p=\024\325\001>\341\"\260\275\366P \275\206\000\231<\355\030\301=\037aR\275\272\026\023\276\276\017\367<\277\244\r\276\273\222\217\273\221\026\212\275\376\262M=}K\021\275\353\326\247\275\202b\032<g~\204=k`\332\275\n\277-\275\373\300\313\275\337n\016\276M\255\346<u\337\265\275\2415\206:\030\241\275<\251.\367\275h\265\327\274-f\260\275\365\371\272\275\'t\261<*T\331<fK\013\274\361\302\311<Z\371\000>\035\300\004\276\365\360<\275\025\212\231<&\237\032>\006tC=\261\3240>\031\234\201=\031\307\362=\201C\324<\337\275\032<\343+h=\351;H<\304q{=zvQ\275\262\026V=\224\233\351\274=\331\025=L\226\305\274\037=}<\274O\245\275\262\032\027\274\247\273Y\275\337\267\213\275\335\023\217\275\317\332;=\235\030h\275\320\264\311=$\237\020<\013\266\226;\306\326\315=C<\237=\340u}=\215\317\006\275\356\022\225\275.o\004>\342\203u\275\334J\351\275\017A~\275\010\027G<\264\003\333\274\364\373o=G\274\225<\216\234e>\260\346\023\276\320b\245=(\305\000\276\230w =\206\336\342\275\331Lj\276\202\225l\275\226\363&>J\263\323=\302\302\372<\035\005\021> Ii\275\376`\307=\346\351\261\274\327\310q\275\211\272\262=\236\r\r>\261\001\367<\024o\224=\001\273\335=]\227;=+\013\220\275A6\003\275\216(\006>\277e\200<\002\253\216\275vv\021={\260\341=\365\316\341\273Zc#=\005^\312\274\257d\220\275\356\326\255=\261\237\303=Dy\306\275\005\t>=\013\031\232;\217\"g:\310\003\224=\2520\233<\036\'\262\275\353A\030\275\304\323&=S\006\n>g\345\331\273q\234\344\275\250;\246=Q\004\252<\272\3407<\324\177*>\007\021\350\275\242\\1\275\032\302\266\275\273nZ\274\024\227\265\275\324\234\023>\214\226\202=\321vU\275\316]\262\275\363\317\346=\364$\227=\263W\207\274ju\302\274\356s\023\275}\243\t\2765i\315\274\014\004\263<Y\323\231=\320\326a\275\306\250\242\274\244\n\\>\377!\203\275_`L<t\003.=\227\035\331\274EF\264=gdF\275\212(\013=W\346\004=\276D\212<\203{\260\274\326\036\344\2736\271o=*>\322<\025\254\203=\212A\321\275\213E\360\275\323e\231\275\350Wx=K`\267\274@\264\352\275p\222\300=5\340\273<\003\324\320<\251,\351\275\271W\355<%\334\316\275\325\320\\=P\220_<\371<j\273=s\270\275\\\263\263\274e\221\303\275\212\216\347=\240O\006\274HPL\275\221\347\206<;\330\016\274\360\326\t=|q\337\274\274\237\271=V\326\334=\3018\232\275\277\306\215=\361\001\356\275)\361Q\274\036\243\321<\3366\324<\001\024\227=\354\234\223\275\360%\225=X\346\373\274C\361\316\273|\002s=Y\307@>\344\363\344\275\363:\005\276\320g\240=\334]\232\275\0308\241=\315\243W\275T\271\207\275\350K\352\273\376\264d\274\225n\013<cF\223=q\325*>\376\214\333<\374@#<\274\031\360\275\354\213s\275\262z\363\2731\335&\275\207o\007\276$\250\204\275Kx\227\275\361\242%\276\365\024\200\2757\361\253\274\253\005\030=\022\375\215=\354\335L>\245^\357=\254\361\020=0d\335\275\001|h\275>\261\\\275\332\366H=L \324=\252\211\264\273Gb)\274\300kl\275\0223\017\276\014H\275<\357Z\020\276[\206M=\370\301C\275\272\341\221<\302\024\236\275\273\3374=\372\3146\275\272\351\310\274\376\017\022\275\255\221\215=9]\002=G\273->\223^\201=\230-\201\275I\223\225\272t\304\206<6x\247=\345\024\">\222f\232=m|\025\276\006\253\251=\260\312\000\276o\205\231\274\327\000\351\275\311J\013\276\311\213\n>v\023\027=o\334\004\276\307\337\006\275u*\267\274\205!\212\275\360\245\031\275O\312\221\273]H\211=4\244\350=\203l\221<\336\000\227\275\270\343\210=S\342\003>\013\267\332=\24096;\005\221\013=\017\301\215<\334h\223\273g\'#\2736\275,\276\3053\260=2\303\220=\202\374T\275\205\364@\274\202&\323\275\217\240\262=\327\236\020\275\344.\346=\3073\'=\007G%\275[\"\202<#E#\275\366\350\336\274(\247\300=\017-a\275\332\245\010>m<\025=\250\215\006\273\306\204\016>\240\212\201\275\346\247\210\272X\243\034>\006w:>\231\243\016\276\355\"}=\210\237l=\232\350\236=\225F\240=\372\253\220=\025\217\264=s\251B=\204\230\274<9|\n=\325\323\237<*\256\256=\240]d=\013\336\232\275&/W\274o\246\210=+Yt\273\3212\022>3m\221=\325\227N<Le\347\273\335b\375=\354K\021\275\310}\236\275\3437\013<\272\021\020\276\210\240y<\002x\201=/\n\247<\221\342\342\275\0353\357\275\356\177G;\305\\\'=1\257D=z\310\026<\314\347@=8\240\032>\260\304\311\274\"\270\374=\322\360\207=k\000\355=\013\005\247\274\225\250/\274G\330\'<Vz\000\276\002\332\274\274B\324\340\270\026\326\003\276&\252\252<\214\335\212=\\t\273=\314\373@\275\207\317\363=\320\206\202\275]#\333\275;\t\322=\366-j<\274\016\316\275 \333\357=\370\276+\275\025\354y\275\265`;<B\377S\275\216\025\263=y\341F>\000\242\016=\207\301\217<\214\010\254=\035\002\256<\346\000\3007\010\332\254\275gM\210\275T\031\240<\207q\317\274\355\323\030=\246a\026=\335\230\271\275\200\030D=\234\236}=\236z\317\275\206\371\326=\225\242\253\275,\177\365;@\370o\276\323\204\342\274\254\237\275=\242D\272\275\266\375\233\275H5?=K\251\030>%\206\002=f\313\230<g\026\014\276\321\270\311\275\237\230!\275q\035F=\300\374\247=\250\335\214<\323\0324=\325\372\014\276a\317\257\275\036n\'=?\330\036<p.$\275`\333w\275\3039\025\276\\~\026\274Ie\313<\r\212\343<\376\035\311=\267\030d=\370!\211<\246\021\373<\234\010\323\275x\276\222=\211re\275\202}\316<\177uO=\r \004\275\3110]\275\265k\001\276gu\"\275\347@\001\275\367\331\262=C\032\351\274\2307\270\274?{\001\275\341\202\216=\367\251\303<\356c<<c\020\231=\346\\\276=I\361\210=x\013\005\273\214\337\025\274<\033\026>8\017\316\275\272n\212;\304e\002>_\272\337\273\034\231\023\275xm\371=Eu\266=t\210}\274\035c\257\275\024\017\301\274\360=\000\275\274Q\016>9\246\335<\264\377#\276\265\346%\275\003\231\224\275\005\225\222<\2170\022<\241s4\275\206a\320\275\206\017w=5\242\237\2746F\210=\351\200\355\274<yT\275\331(v=\237m\227=\375P;\275\362\233\007=\311\3422>\007s7;58\252=wf\345=\270\321\"=n\276\212\274\245\335!\276\245=U\275\351\322\274=2\216\205=\372\000\320\275\331\224\256=\251\370\277<Cj\321\275\311\263\201;\251\263\262=\204\313N\275\232\034\277=\320\314_\275&\342\215\275\362\361\345;K\"z\2754\234j\275\370\022;=\210\325\025\275\221\226\375\275k8\001>\306\035\316=\3475\235=6H\267\275\222\322<<\215\274\251\275\367@\250\275V\247\217=\365\323\007=g\313\250\272\362\241Z\275$V\205=N\327\262\274%\266\341=#\307\037=2n\344=\212J\n\275\010p\261=\222\371\340=\023\262K\276\275\227\026\273\023\273[\275\351\361b\275\273\037\232=r\203\301\274\363{\003>Y\006\311=e\365p=v\367\266\275\000B\267=\326\3310\276+\033\030=\374\205\031>TD\236\275n_\014\276(\301\314<,|\232\273\2658\235\275\376\256\274=\320\202\027>\361Z\363\274\210C\312<\241\214\232\273\3673%=\204\366\237\2755\244{=\365k\333\275v\243\344<\375\205\216=\315m\333<\340\250\004\275\274-V\275\232|\212=+\366\036\275\231N\001=\201\013\371=\355\261\024\275\372\270\332\275)\2729<\271\\\033\276\206\227\203=\\~\251\2753\314\224=Mn\010\274$\354\377\275\016\243\273\275\227\000\217<T\346~=#9\372\275r\200\270=\362\217-\275\n\010\000=\002/)\275B^5\275i~\253\274S\202\275=\342\2736=\177\232^=4\357[>sc\322<]*>=oA\026>\237\010\347\275\233\376\321\274\346=\222\275\3748\213\275\320\305\035\276i\016\201=>\260\265=\372\3113=A\0171\273@\341\254<\341\375\200=\215\316\210\275\234\027\265=\307\\\307=\230\255H\273\030\203\025\276M\206\237\275\3516\235\273P\023\214=M\2558<oP\217=\377\201G\274\372d\311\274a\224\241\275\340\255\326\274\372\"\321=\211\211\262\275\313\311\210=0\377\037=\017\312\003\274\033\3276\274H\322\363\2750\000 <\317T\203\276\236\020\314\275\336\315\263=\375\325\307\275\252\303%\276@?\236\275Wn\202\275Q\314\034=\260\370\027\276,G\234<xj\004\276\222\250\346;\232\316\337=\001\264\014\271\001d\177\275\251.\177=\213\312\035>\346\0376\275`\205M=\007\203\200\275\206\r+=\026&\232\275S\243K=~D\n>zgp=\026\321\037\276P\"\242=:;s<\254\260E=\364\210j;/vq\275\374\2510\275\313\262\304:\337\361\214=\274.\311<\271\251\322\274`Z_\274]\214\315=ZS\022<:^\226=A\241b=\321\214\371=a\375:=\202\242\264\274\t\322\252=\361\004\026\275\317\275<\274k=\300=\242\033\250\275D\220\274\2757l\242\274\224\355\225\275\236t\027\274\233\025\241=-\302x\275\352\353\010\276\230\240\310\275\351\206\\\275Y)\323\273\377\031m\275z\214\267=$}\266=T:\014=\371:\022=gN\227=;n;>\203!\252<w \024\275:{\017\276Y\0234=\034\375F\276hZk\274~T\202:\330f\350\274B!\215\274\001\251<\275T\027\3369\275U\334\274S\345\330\273y\257\212\275\215\374v\275vg2\275\360&\323=[\2058\276\235\372(\274U\237\200<\"\274\342;\272pm=x;\203=g\010\r=\023\370\266;Z\312\352=T\270a=G\256\265\275\247\213j=BQ\312=y\220\017>C\210\021\273\310D\331=*1\201\274\007\272\021=\253\331\016\276\201\224d<\340\246\246\275Y\326\266\275\300\221\233\275m\242:=W\210\327\275\371\016Y\275\251\022u\274\243-z=\r\347\302<n\326\033=J?\236\275\314\006\246<N\262\003\276\005E\204=\334\234J\276\235}1>\277f\373\273\360\221\203;\315\013\323;\257z\017\275\321\303\200;\2470$\275\336\201*=\235\221\213\275\276to\275\220\220\177<\'\371\250=\374\333\272=\202\323\001\276\201\335\350<\335\230\275\274\345#b\275\211\244\357\275\234\212\256\274V\366\022<\016\335\033\275\345\337I:b\227\201\274\323\010\203\275q8\351\274`\302Q=\270\271\306=\363\307\004\275t\266\000\276\377\026\310\275$\255\337<;o\356=E3\330\275\337\243\351=\371\234\311\274+5\247=\257\032\205\276V\326t\275\030\232\253;\243\316\263==Q\007<\305{\215\275\316H\334\275\272\212\344<R\303\322=\335\263A=\307@a=\2621\255=\252m)\273.4a\275\377\254\205\275B\254\230<\r\306$\274\000p\334\274\206\204\017=\351\331\335\274}\353\333=\271\206\315=j\212(<y\005\307=\325\311\242\275\312Iu\275T=\377<\325\257\235=\334\324\256=)\210\270<\302\331\306\274\312\177\230=\366\326\036=\256\025\207\275\222}\026=\331 \027\274\350\223\022>_\226\250<\221\375\031\275t\026P\275\030\332\r\276\0341\253\275\300\304\303=\t\230\254\275\370\240\016>\367n\265\275\252\325\360\275\275\347M\275\017\363V<M7\350\275\242m\236=\033j\013\276\246\227\010\276 \305\323<4\353\322\275U\223\312=8/\225<\261\325\207=F\347\037\275\273\344F>\265Q\223=\360\033D\274\235\t\201\275\377\210\321=~\253y=\005r\013>\201\030\317\275\365\"\034=\003:\202=\023E\037\276vo\261\275D\230\205\275pS:\275|tE;\214\241\241\2754\351\210=\010\245\302\275\363q\205\275PV\226=\367\234\247=\177\210\311<X\264\321\275\006\352\330\275\300\255A<\346\322G<\252\360\261\275\331\023\034=\213\304\247\275w@\025\275Q\320M;\022\360\363\274q\014\377=\331\356\345\274\016p\213<4\320\324\275X\311O;\335\273E\275\351p\323<\357\240\354=\353\256\260\273\020u\240\275\206\017\302\274\016\022\302\274\014\230\025<\271`\214=,L\034\276\302k\303\273\233;U<t\356x\275\371\2763\275\026\204\354<\225\266F\272\016\240\n\273\2435\263=\216A\025>d\310\007\276~\000K\276\220-\036\274Z@.=\311\357\020=tx\230\275\016\037\331\275\014\264d\275\321\214\233\275\214\240\317=\3363\324\275\3470`\274\225\3352=\027\210\n\273\264\221\007<\010\005\271\275`\346_=\230\316\375\274\031\214\004>\256k\213=\364\336\250==\360\214;\355\003\262\274\033\314\330\274\312Z\314\275\230L\214=\263\241E=#a\250<\276\363@=\035\324\327\275\364M\365\275% \331\273\357\336[<O\374\203;\377\2544>\010\322J\273\322\177\234=!\352\023\275X\317\010\274\\\315\207\273\267\367\212<\345\223_\275\346C>>-Z\t>\n\3045\275B62=\027v\315\275\372\366\014=\253\257\325\274I<\r=y\306\037<\340\332Z>\3265^\275\243\201\232=\364=\200=\226\315\241<\0057v\275\201\264\"\275\212H\271=\013\316R<Ju_\275\005H`\274b\345\321<\3579\254\275\217]\035=\217,\240=\022\345\224=<\030Q\274\006\304\241\275-\357\232=z\264\370\274\270\341\'<}\'c\272\272\375<\275E^6=x\222\226\275\235\347\316\275\225\033*<\",\256=H\240\271\275\373\003\177\275Rw%\275\207\264\305\275\024oO\275\014M?>\305\275\002\275?\273 >r \212<\014u\235=\036\206H=7\270\326\274\016\352\274\275\035\3714=\250\355\343\274\337cM<j\261F\276\007\217\233\275\020\257\r\276D\350\022\273\343\231\224=\225\277{\274\027rj=<\374\252\274+\220}\2751\207\266=\227r\010>\353F\363\275&\266\337=\247_\210=\"a\212\275\221\003\345; \272\231=(\313\030\275\266\337\230\275\340\201\361< U\240\275M\002g=\360&\346\275\177\242\341\275\'\000\234;VG\322\274g.8\275p\362\311\275\224M\342\274W\372\256\274\026\004=>\301\322[\275y\234\243=o\014\221<\230\343\301\274y\354f\275Y\034\271;\323SZ<\350\017\300<0\200\330<\003\316#\275_\274D<\305a\321<0\257R\274\"\037\025\275\007=\031\275\025\004\273=\2248I<Q\006\223\274\260\256\364=\223j\226=\340JL>\376|\304\275\202\304\301\275J1\365=j\022\270;\353\353\326;$-\033\2743\026=\275]\350\360\275\212\230Y>~F\223=\217K\205=<\206~\274:98<%\206\265=Z\026:>R\215F=\374\316\203=\341X\251=*\354\316\275q%\025\27623R\276o\332x\275\027s\252\275\037\310\343=\257(\031\275+\020\373\274\016\317\246\274\007\004\241=]\247\255;XI\213=!\014\014<\005[\024=\225\006(\275\017\251\272="
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5589758
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
          dim {
            size: 160
          }
        }
        tensor_content: "r\361\220\275UZ\324<0\202\020<\223\373y\275\256i\270\275{\036\323=+R\r\274\366]E=\351\311(>\251\010!>8\314A=\t9\202=2\367\207\275g\210!\275\374\333C=\274\324=<\333\325\245<T-\307\274\342\214\362=\3052\244\275U\262\371=\233\376\246\275\357i\352=P\3532\275\265:\314\274\343\324\374;\252\257\241\274\333OB\274\310}\260\2759\337c>\006\374H\274\211<\036<3\0359\274\315\200\333\274\225\360\316=\301\276\264;?@\t\275:\312l=\023\233\005<\254]==\034UQ\275\266\345\234<\302\310\030\2741\263\033>Em\344<\351G\177<\331\330\n\2762\036\360\273\323\026\001>x\205\312=\322\321\265\275\270\201\006\273\201\231\256\275F\344f<\351\037r=SyY=\221m\025\276\001\033\227<At\224=\267\241\347=\336\234V=\302\242F=\213\331?\275\r.\372\274y\016Y=\032\362\005\275\253\275m\274\335\307N\275\232tY\274\261\367\241\275\020_\234\275\020\t\002=\226\250\320\275\030\021j<\330\302\"<\220\226n=\020\304\377=\354\203\247\273\355\027\366\275\361\337w=Y\240d=\254\320\374\274\236\375\004\274\006\025\257=\261\372x\275\277G%\274\316\362\217;\016\364\265=;\005\210<\330\315\352\274O\3372<G\332\367<\0310\205\275\200\\\331\275\355\022\371\275\251\343\200\275y\314D<\346-h\275\327\360\334\275\264L\254=\026B\372\275\271\263\243\273y\257\005\275\362\207\261=$q\362<$\272%>\035\004\017\276\267\227T=\310\342\t>\251\'\276\275\035\313\350=_\345\207<\252\2269=\010\304*\274\240F\231\275\007ln>`\203\026\275\253]\303\275\222\201Q\274\313\331\021\276\202\243L;\366\302.>\372t7<\306\303\270<o\243C\276\033\014\224\274\023\357\311<\031\262\010>\337\255\260=+O\242\275\234\252\010\275\254\201#\276\327\326\036\275\356.k\275\005\373\216\274e\355]\274\252?\301==d\215=\2625R=\3672\336<\370\330g\275\017u\336=A\271\006\275\263\017\366=\014?n\273LR\211\275\016K\330\2756\006\'\274Xd\n\2759#\267;]\242&\275\236\030\303<\213\345v<\032\377C>\241\251/\276\357Mt<\277\364\222\275\214\375\027=\273\006)\275R\311\340<\004\300!=F\255\226\275\342\n\216\275\036B\300\274\234z\250\274\356\226\231\273\353\222\245=-q\277\275\357\017\361\274\003$.=\231\256\265=\377,\360<\325\027\210<\323\215@=<4\336==Y\315\274\257\364\345<\355\205\377\273\221& ==\207\322:\202P\362=\237jL\272\001\344\307\275\353pK\275!\277\247\275h\305\032>\252\264\221=\231\331\316\275\236x\321\275\277\032\246\275\377\344\373=@\250\271\275w\010\371\273\025\250\241\275+\"s=\3158\007>k]\002\276nY\352<\227\025\223<\263\313\261\274\"\222\246\274\256\336\352=\270AX\2743\207\212=D\367\312\275\357\332E=\346\325\220<\0374\014\2755\201(\274\361\325\241=\260\232!>\347,\335\273\252\240\206\275e:\242\275\232\354Z\276v\252\337=*M\026=\336\023\234\274\260D\314\275\243G\020=cL\364\274\037\343\345=\365\004\204\275\277Q\321=\3712^<\033\201\242=\344\331\263\274\236\250\362\274j\202\006=Q\240\302<\216E\014>\333\364>=\340\233\361<f\306\214=bN\202=\337\336\026\276\331]<=\320\344F>\204d\272\275\014\020\017\275\031\211\347=\325(a\273\005\354\356\273\014|h;\307\3739=V\311.\276\2468\r\275\t\327\224=o(\033=4\311i=K\246D\276\216\220\233<}\2025\276\036\020\022=*\221]=\363\020\035>\177\013\207=\034\240I=\344\251\316=lx\305\275@ua;\013\214\304=F\335\275\275\037)W=\201\300\300<\256\005p\274e\263\224\274g\302\033;\305\006\237\275\266H\361\274\273\232\226\275\346\353D\275sJ\320=\344\024\036<\360f?\275\303S]=\211j\t\276|\213\325=\241\263\003\274\265\216r\275\313@\256\275m6\200\275\306\025\321:XS\205\275LN\251\274\257\350\357;\372r\367=|Ch=\006\235E<\321`J<=\003\224\275\241\237u=>\3640\275o\244\272<\312+\313\275e\341k\275\250C\227=\277\'\267:\377\257<>\236\366\332\275U\371]=\307\004b\275\330f\363\275\005\346\006>5\266d\275l\235p;\266\270\003>&\360\204\275b\257A\275\331t\261\275{\035\240\275\257\001\310=\315\303\236\275\327.m\274\014\326\311=0\n\330=\232!\204<u\257\007>\320\231V<\201b\213<\327Y\022\274\363\317F=\303\342\265=fM\267;\207\371\311<G\310\257\275\332=\343;C\241<<d\001:\274\321\0315\275<\254\352\274%\306\022\275\243W\004>\244z.=\300\322S=\311c\010<\362\213r;\001\320\206<\260\\\t=\267\367\016>W\271\266\275\360\362\223\275\025\201\035>\214\030\274\275\004\350\340=\004\230P>\177\373\342<\263Z%=4\007\356<V\025\363=\215\332\025=\252\374\376<cN\357\275\265\262\r=\352x\007\273\253\335&\275J\3069\275{\027K>\364\300\366\274$\375\342<\007\360\023=X(b>\032\203\346\275_:\221<\251\340\253=L\303\017\276{u;\275\302\216\013>G\322\200\2735RL:\312\254\'=w\204U<\2106\004\276\026\362n\274k[\032=52}=(\235\330<\214\202f=\001@\345\275\247O\216=W?\264\274p)\246\275\"t`=\340\030\\<\310l\031=!\210h\275r\335}\275\307.B\275/b\265<^\350\221=mM\264\275\001\316\007\275d\372\212\274UQ\334=\007+\'=|\222\206\274\353\214\033>}\342\371\274\247\333:;\233\317\233\275\356\201\227< \'\360=Q\000C>-c\356\275/\032\216\275 >}=\013\203\312\274\014\356\007\275\317o}\275\324\333\233\275\251\313\017\274\336Og\273-\325\207\275&\2013<)`l;a\316\200=\332\246Z\276\326:\016\270\3537\023\274}\232\033\276)2\255\275\320\353\005=\337\203\004\275<\032\010\275\373F\372=\223\004\374<\037\261\366\275\240L\370\275\004|\025\276\325\372I=\225\201->{o5\274\261ou=\315e\366\275\3726!<x@u\273HL\336\274Y\241#>\r\355\235\275\347n\t\274L\275\276\274\034Lq\274\020\214\360\272\213\367\251;w\307X<\006Cl\275.\226[=\201\350%\275\204\335\247\274L\010\240\274\332_\222=x\277\033\274\367\375?=g\227\n\275\273v\007>e\207\000:\007x$\275\316\347R=]\231\334\274h\362\016>AD\340=\2072\006\276\277N\023=X\014[\273\262V\035\276\374!\320\274Q\265\271:S\r\325\275\321\337\246<\014\233)\274\317\t\301\275\274\334\226\275\003\000:=\310\017\253\275 \354\271\275\331\026\237\275$\357\356\274\202\304\312\275\345\003\'>\321\356$\275x\211\020\276~f6=\346 \262\274l\020\203\275\2139\201\275\247{\032>a\246\361\274[\224\227\275\312\322\227\274\325\325\231=\355\177K<\021{\236\275\326\325\007>\340\\\017=\255\215\267\275r\213\344<\270\326\245\275\363\253\357\274\036\220H\275\235\202\377<\0312\253\273\227\342f=ND)\274\330|\200\275i\376]\275\216\3103\275c\334\177\275\263\032\017=\225\334\004\276b\036\343\2739\014t;\313\277\352\275\306\251\337\275B\021f<qV8=\223r\354<.\271\247<\230ht=\206\216\241=\245\034F=\222=\026=\257,J\276I:\222=\3724\343=Pj;=q\340\361\273\315\305\377\273\261R\223=\337\032\215=\003{\262=\207\'\'\276y~\271\275\022a\177\275\335\034\210\274C\027\005=\260\010\201\274O\344\233\275\213\265\232=\026\310\262\274\227u@\274r.\333\274n\035\232\275\335\313\377=8\324\230\275p\027\306\275\331\2022>\233\2226>\362\311\221\275(\203\"=\026y\212\275)h\325\2759\325P\276\036&\327\274\307a\216=\2177f=\2561&=\252\037\253=hi\321\275\316\215\311<\017\247\256:\216|\327\275-:\216=\275\2269=\023\202\213=\203\014\245=\245.\304\275O \002=nM\216\275\377\213\013=\334\177\233;s\3426\275#\010\255=\370\250\000\276%\202\332\275]\021\255\273\203;\232= \377m=\220.\035>\364\237\243:\337Y\307\274\'\206\027>\247\010\213\275G&\345<R\031\205=\001\233\264\273\265`\210\275\266\370\013\274\364\276\005>\240\315@\276\210\243\205=\352W9<\'%\312\275E4\001\275\357j\001\275\327L\007<\225\003\270\275J\324\310\275\264B-=\200+\302\274m\332S=\301\364<=c\231\350<3\206\336<\207\367H<;\237\261\275\031\020\016>/\247\324\275\223\006><C\331\360\274\242\371x<\326\2722\275\274n\272=\376?\035>.79=\362>e\274\262\"\020\276~\365\366\275\244\0264\275\315\301b\275n\tK=\326ae< \016\2139\233\347~=\036\266\256=\312\326\022=\312\177D\274U\363\312=k\033\320<\207\331\010=E\311\271\275\276\316O\275\035G\002=qVi\276\324\301F=\2361\331\275\212-*<\"\212&>\025\341\200<\322l9=\264E\355\274\214\205\362=T\236\211=\030\226\r=\257t\224=+\307\244\2754\225y\273Fy&>\244?\240=\005\312\244\274\230\025\277<h\346\256=\322~P\275\007|-\271C\262\r\275\030r\227=n/\025>%\034\035>{\303\206\274\312\364\211\275\262\274T\275\033\222H\275\001*a=Y\224}\275\303M\263=l6\222<\330PH\275\334\330\203=\205\036\264=m\220\221\275JQ,<Q\355\006>\277J\232\2758\230H\275Z\300\321\275hx,>\254\362m\276q\231\246<\001\245\250\274\221\2035<v\177\246\275As\335\275`~\202\275\331z\346\275\330\327\271=\204\364\022>\327`0\276\003\327\305\274t\257&\275\312\037i\275>\005-\275q\345{\275g\322+<\365\240\377;\207\254\274<e/8=)+\325\275\366\234\356\275\233\215\014=\217\025*<\003\026\354\275\313\264\320\275\031\264\227=n.m\275\031\303\227\275\363)E>\314\"\350\273\037qb=\204g\013\274\342M\277=Gj`<0(\223=^\302\021>s.1=\275\261/\275\316T\212=@\204\311=\351\\\313\274\303\333\350\275\350-\344\274\016\360\302\275\207\000\010\2750j9\2757\333\333=\227&\210=\263\256\001>\344\361\200\275.\250\212=\357\2655=\031\265\205\274\214\316%\275\004\356\010\274\272\3439\274\252\345x=\014\000\204=\331\244\202\274x\212\351<q\375\312\275\031\025\277\275Q\026\377\274\3440\322\274b\325\302\274\324r\231\275!\324*\275\257b\377=M2I\275^\310\365\275\243\025\n=\321\013\204\275\333H\005\276S\271\260<v\330 \276\252d\252\2752|\024>\226\277\002\275\257j\025\275\227\025_=\335\374\260\274\340\251g\275\343\026\376\275\350,h\275\261\355\226\275/0E=$\351#\275\0245\302=\316:<=Qi`<.Q\006\275\306\262\223<\263\2047;\034\234\001=29\306\274\236S\342=CN\353<}H\276\275\026\032\033\275`-a=r\032\236=nA\232=\330\215\223\275\016B\211\271Q\335\251\275\0143\264\275g\262\360\275\241\241\036>\010\020\263\275\220\372a\275}c\'=\305\271\254=N\025/\275\352(\"\275y.\240=n\320\013=\r\227\\=\274wD\275\335\020\352<Ia\023\276H0\244=&\031x\275\203\343\313\275\355\253\260\275\352\323P\275\206&\241\275]\354\377\2725\231\210;G\341\313\274\032\014_=\342\030\21097\314\334\275\036\220\310=\353\275\231\274\250\317\227\275\346\022s\275\314\205\251\275m\361\364\272\247\217\335\274hH\000\275\233k\007>\014\306\253=R\226\250\274=)\005>S[\231\275\023\307\203\276m{\341\275\215\352?>\320\347\377<\001\\\224\275\250\353F=QS\214=*\034\325\275\340)h\275\017\376%\275M\364\242=\273v\231<\367C\030\276T9\266=\300d\274\274\313!\262\275\321o\t\275\001tF=\331vW=X\210^=g\265\231=7B\215\274\247\032\301=o\263\347\275\036\264\211\275\367\005E;\377\277\017< \217P=M3\337\275\211\277\263<\327\261-\275\005GH\2752\002*><\227\250\274Yk\226\275!\205\210\274\311\033\206\275\216\200\267=\003z6\275iM\377=z\357\242\275\251\177\024>\366\\\023<\251y\346\275!\217\207\275\304\235\024<i\013\303\274\356\200\240=\306\225\212\275J\252n:^\2606\275\201\242\221\275\352\272\030=\336\336M\274$VH=\231U\032\274\250@\r<\030d\232=\034\276I\275=\020\200\275/\213\367\274\\-\221\273\034uv\274\324U\320=a\257\225\275U}\014>{-\343\275!\n\340\274\236m%>\276\247{\275\372\r\305\274&S\346=\365\235\255\275\371\212\267=\306\327\212=+*#=\367\214`\273\264\257\202\275\000\354\233<\306\265\177\273}\227\370=mFz\275H\\\203\275=\274\245=/\2077=\3516c<\270p\360\275\272\2048\274\006\360X\275\202\305m\275\246\037\025\275\005`\247=\357bi=\354\350Q\275_\277w\271Q!\354\274\342\321/=`\257$<0\243\004\276\003\247\014=p:h\275\315\356$\275\025}\246\275\211\"\002\276\300G\250\275/\262\036\275\316\'\037\275\032\342M\276n\271\341\275\356w\r<\247\031\014\275\245\247\r>p\366\242;z\214\224=16\030\275\232\0222>\334\315r\273\253\313><v\006F\275\301c\033>y\001\220<v^t\275|\371\213\273J5\302\274\013\240\350\275\245\216\025\275\320\223#=8I$=\377\233b\275x\251\001>\275\\\014\276\371\226\207\274\241#\340=Z]\273=x\255)=\243\346\274;d\240\014\276\261I\260=yt$>QI#\276\002\356?\275\317\233C>\215\003\t>t7\367\274|\020K\276\230\304\221<1\250\010=\212C\267<p[7=\363\261\004=\277\031\256\275\213\006\212=\300dM={\377\276=\241\343\014\276\261\307\240<\033C\020=\346\245=\275a\373c\275\353\333|\275\374.P=\253\027<\275`\245+\274\235\232\325\275?\023\260=)\305\346<\315\024\213\273;^V=k\255l=\317j\250=2\211\300\275\220\024b\275\203\375\305;i\007K\275\373\324\212\275\220\037\030\275\317>\336\275\263F\026\275\2516\270\275\227\252(<&\261\014=\020\264\202\275\221\245\321\275M\373\355\274\013\332d\275{z\037=7\267T\274A}->\002\331\343=\367\\\010=v\203\323\273 t\211=P\230\331\275T\324o\274q!\027>o\357\270\275<YP\275\244Z)=\200\341\001\276\270\304\031=W\236/\276tM\310\275\304W\370<\373\177\210\275C\316\372=Q\245\r=@\343\333;\004\223\250=\360X\374;\325Of\275^\373}=pO\221\275\373\"Q\275\312z9<\375\262>=\234\262\300\275ux\354\275\277\310\336=\210]\237=e}\016\276h-\202=\265\2153>\200\t\224=O\026\323\274\307\"G\274E7H\275\302\261\205=\320\347\235=\243\243\003=\346\256(<\222\331\031=\253\234\274<\203\366\220\274\360\033H\276\250\303\243\274cD\347=\010\360\262<\265n\360\275\267\312\234\275\'\2374>\021\205\322=\310\347\203\274\332A\256\274\326\365\274\275\366o\314=\277\274o\275\216\023\205<\371u\344\273]\260\217\275\367\006\342=Y\362;\275HL\313<\347\3174\275cK\000\276\243\034\020\276p4\276<\016e\346;<x\033\275;/\014=\020\261y=\017:w\274\035`\260\275\"\276L\276l\014\231=\002A\254\273\305\3610>\'\330%<\201\251\024=\230\236\336\273fO\242;\024N\325;\262\3504=M\010\250;\r\"\036\276\214(q<\210\210\322=\322\202\300=\344\277\232;\222\005\031\274)\2351<;\342\\\275\313O\305\274\234\302@\275U\373\340=\213u\344\275\001\027$\275{m\272=\254\374\314\275\302+\347<\342\013\237=\372\235\205\274\306\202\247=\246\315f=\372z[<\274\246\373;b\r8\275qJ\204=\3556T=\353\347b=\350\311\000=\252\350p=\005K\'\274[\360\306< \310\023>\260\024\300=h\010\372=\361GF=\344U\273=\\>\246\275;[\244=\324\343+=\273\265\303\275\372\335\215\275\035\264\320\275\177Ki:\000\234\024=}Ji\275|Io\274\327C\362:\261-\207=\266\007\264=\362Q\220=\275\305\334\273J\245\306\274^\302\351=Z\004\022\275K;q\275CI\262\2754\370\222\275\335*d;\323\261\277<\r\027\020>\272\317c=#\027\033\275qW+\276\013&\204<\020\244\n=\001B\334\275\273\001\364<\2141\311;\221I\312<\332\203\t\274\217\270\314=\323;\263=\013r\017<waN=@\300\250\2754X\320=l\274\032\276\331\022G\274l\214\230=b\314\361\274\316\n\200<\260\334\036=\030\222/=\306\322\317\274W\276\001=t\307\266\273mC\306\275\211\000\217\275\026\207@\275\267u:=\320\035\000>\376\000\226\275\356\326\021\275\236\325\013\275l\331\370=\007&Z\275;[\233\275\214L\236<j\304\263\275\234\361d=\212F\236\274\251\235\351=\372\004\303\274\025\362m=\354\022\355\275\314a\024\275\3753.=\317\360\226=\372$F=-z7=\216O1<\025\002-=\247\334\264<X\035\320\275\305j\330=\204\372/\275\330\334\226=\310\027\242=I/P=\311+\254=,\222:\275\026\006\331\275\365dw;\347~\342\275\2145\272\275\210\327\004>\317\003\030\275\211\305\364\274=w1=\333\010j<\334\342\033\274V\207\220\275\327\337\014=\205\352\254\275x\260\277=\271\374\023>\213\2446\275\035\302\202<\366\267\254\2751\336\242\275\203\230\021> \016\022\276\207{\313\275\026\n\016>5;\244=|\273u\276\n\036\336;\372\363\336\275\264\337l\275\001&\033=\014\321\340\274E\006\026\274\217\266\300\275\266\313\222\274\231y5=\236\n\030\276\004x\320<\253\273\264\2750\221\234=\215\216/<9r\346=\245d\033>\371\345+\275\035^@=i\325\366;\342\350,=\334\237\264=\221\0232=\217f)<\316ax=\317\326\034=xY\n<\373\314~=)e\037>\243/q\275\206=\023\274\"\276N=\024i\220=\\\275\217=\007~\273\274\322\356\202=\331\351[\274\237\367\024=.&V>\nG7>\017\2069=\316FV>A\246,>u\034\343:]\271;\276\251*\006=M\265I= S\245\273\306_\010\275\241\313h=\320\205\300\274\014v\335=r\337->\023\326\026=\334\260\301\275b\323\233\275\260J\307=\017m\256\274\251*\210\275\005\315\246=\314\243\264\2734a\220\275\033\006\231\275\235W\014\276\260)G=\233\311\351<\303\n\370\273s\3345>qF\240<bb/=JP\325=\303\347\010>yml=_B\246<\326\250M=|M\010;\222~E<\360\335\n\276\340\026U=3\374O\274{\020\200=\024J\310\275\307\026g=i\220\352=\231ri=\003\366D\275\334\226\327=\003\367\267=\202\246\243=lzu=v\206\222=\371\307\001;]t\310<=\334\352\274\350y\365<\260\254J\274\225\206\211=\220o\002\276sY\274=_ :\275-\271\361\274\351a\315\274\\\366\342=\002\0032\275B4\n>\375\237\003\275\304\216\207\275t\371\257\275N\213\375\274\342X\212=/Y\364=Z\243\332;.|\312\274=&m=\312\304\255<r=E\276\242\307\216\275\276\215\200\275\020\252-;\262}r\274!\203n\274q\372\177<D\020\213\275\t\212I=&b\303<<\312{\275\222P%=r\353=\274\257\022\336<MJ\221\273\\qR:\177\252\243=\252\210\266=\243\214\244\275\017\242\336\275\305\241\264\274\273\244\245=\316\237\r>K&(>\214\221\222=\252\256\031=M\324\034\275NY\214=\3137;\276DM\304<t\021V\274\2514\272<utD=\377\275\357=\306\334\357<\225\276\313=\025K\360=0\351\225\275\2565\005\275\314.\276\274\016\253\211\275\350\237\177\274\354\211\245<\\\246\031\275BG5>\032\\\266\275t$A\275M\361/\276\000\321\003>\201\273\270=\324@\014\276z\203\200\274\372\313\033=z\376\217<\026\313\314<\351p\213\275\246\343\250\275\2618\206=D\'\262\275\332&\273=\315=\321\2758\376K\275M\306\354\275\255e\274\275\244g\217\275b\203\263;\205\265l=\236@\016=\351\317b=B\362?\275\313\t\300\274\005\\u=\257W}\274v\3457:O\3030=\244\257\256\275Z$\236\275\\2\356<s\356\2659\275\351\301\275~\236\311\274P\241\336\275\271M\025\276\353\275\252\275P\031\031>\334\325\365\275\353tI\275f\346!<sK\013\276pa\326\274\017\370v=\231\360\242\275<\214b\274~U]\272\312\312\207\2758g\010>2=\200=\271!\261\275V\203\221\275Jw\n>k?\302\275PK\363<\017\345\225\273\302[3\276\243\221B=\3322\375<\024\317\036\276\262\336\r>\273\232\353=\030`A\274F\214\236=\345\227\032\276H\267\305\273\344\'\245=\261\332u=Z7\242\275\355\r\341=\273\006k;7\r\321<v\306\225\275]\214\252\275.t\323<\223\307r\275\254\037\350\275\252\301\207=h\332\332<H\023\222\271!=\244<\274\354\330=w\234\267\274\002\001V\275\203h==\n\232_=@\000\353\274@\342\322<e\035\000>R\312\215\275\204~\335=\313\003\242=\231\241\036>\360\357><\310\224\224=\270\034\320=\374\000\270=\276\343\201\274\236\247M>\325a\214\275\2622\332\275\270z$\275S*\244=\2323\366\273\304\204!=Ku\267\275s\226\217\275(_^\275\220\032\260=q\2575\275\373{\300;\340Hq=\224\355\324\275E#\200\275\347[\272\274\322J\203=\320\273\r\274\3315\301\274U\212/\275=\242\321\275P/\236=\'\321\304=\212\177\231=\031\361E=^\007\033=\331\302\303<bJ\234=\315\026Z\275>\336l\275\347\363J\273\201\212\336\275M\0211<,-\025\275\3218P=\270\t\274\275$k0\274)\346\271\275\336\352\314\275K\027\343=\211\021\037=\001\302\007<0\017K\275\315\302\027\275A\225B=H\343\374\274yN:\275\302\225\221\273\310T&=X\372\334\274y\373\254=\031\320b=\332\360\301;\367\006+\275e\177?\275\025[\332=\301\213R\275\2563\017<xt\356\274\227\2058>\351&\204=\324*\215=I\376\251\273i\nv=).\207\273\246\021a\275\257\335Q\275\222l\307\275\'6C>\340\267\003=\023\375\267\275:L#;\215\251(=\266\326W\275/\376\003>\r\322\211=\227\212\201\275\226\336\221\2756\334$\276!q\003>K\216\336=\232H_=\371\232z=b\316\270;\314^`:X\304\234=\201\227(<\010\372\003>(\236\007\276\310\355\331<\025H\212<U`\004>g\351&\276\223o\030=\230\273\034\2758\223<>\223\331\202<\\\260h=cC)\275\233\353\272\275\"[\000\276\202\340\021\276%\370D\273\3223\264\275&h\346=V\'\237\274\343\376\013\276~\247n<=i\342\274/\215I=\230\344%\275}\370\002>_\260U={)!\2763;\253\275\351\276\220\275!UA<\260\022\235\274u{\271\272\345\266\t\273\017l\231=o\223\022\275j!\347\274\372\t\r\276U\337\\\276q\254\026\275\361\203\242=h:G:Z\365\000\276Q\024\253\272\2571\206=\257g\245\275\026\007\003\275\233\374\3508|\032\214=\357\002\352\273}\331k=\306~\214\275\200\3034\275~\373h\275\230\'\215=.CX:\207b\t\275\225\372A=\217\010\335=A\231\r>\017\034\n=\'\332\236\275\276P\016>J\262\305\275\010\'\r\276\334\035\032\275q\233\303=\361H\2639\213\010O=\013\263\253:\323\306\253=\203O1>g\375i\275%C\335<EQ\256;\360\205x=\326r\267=]JQ\275bj\221\276\311b\212<\335\036\3479\354\230\203\275\320\263\234\275\025\374\273\274\001\277F<\036\214,=\374\231\335=\374,z\275\225\310\263=\031\341z\273\000\272U\275\007\366 =\250\221\246\273`\360v\275\356\274\272\275\324T\365\275\036\304Y\275\022\205\350;Q\016\017>A\nD=\346[\252;\201\036\201\275\036V\001=rF\216=*\344\002\275O\336P=\277\255]\275.H3\275\026\225\262\274l\204\262\275z\252\004\275#g\273\273\347\2547>P\365E;\314\034\303\275\305{\013\275R\217\332=\370eM=#=#\275\221\2737=\361P\220=\324\220\261\275\017\006q\275\255H_\274\316h>\275\037\226\002\276\352A\222\2744j\215=\331l$\276JY\352<H\213\213=\354\232\364\274\311\245\215\274\337\346\305\275s\0310\275\265\r\277=\213\264\370\274\246>\355=\345\345\363\275Iz\243\275\236\"\221=\raD\275\343\340\021;\326\254\211\274\221\016\032\275\261\302~\275\335S\270=\247\026\001=\nME=\301\342\t>\251\303\205=\031\230\005:C\317+\275\\\357\007\276\216c\311=T\270\323\275\233%\250;\35227=!\314\231\275\035\225\256=e\023\354=E7\226<2\2677>l\033\027;\"\2732\275\232\023\323=\210\344\033\275\003oG=\221\375\220\275\020\2143>\2523\030=\224%\223<\213V\022=\010\"3\275\227\253i;K\014c\275\352\210\363=\337x&=\014\031\200\275\303\305\350\274\217@\262<\201\327\375<\032\220\233=\307u\027;\250Y<\275\351\272\376:\215 K\276a\364\331\274\005\r\317\275\266Q\274<D\014\307=\274\335\264=\312\266t;SmK\275\232n#:\n?\034\276\331\200\361=\237\220g=\266\214\023>\300\235\000=\355\025\266=\273\254\371=Z_t;\217\207\334<\030\0146=\314\313\210\274\312\006\022\2747\210\010\275k\330\022=\351\336\313\274\3053\021>\242\\\272<\343\360\243<\256\362`\275qa\216\275\247>\306\274Y\370\305=M~&>O\235l\275\340aU\275\364v\272=\274j\017\275=\266\021\276\3466\307;r\213\205\275\030\250i\275\301\370?=>P\010=\236\253\226\275kW\362\274\372)s\275\221\367\262<\3358\210\274\346\341\314<`u\255\274I\027\204=\251K==>W{=Uo\000=\313f\342\275\207AN=\246\212\210=\236o\244\275\243.\014\275\270\005\320\275\212\371\261;\207\370\264;MC\034\276m\305\211=\177\024\264=\301\367\005>\204\024d=\361\002+>P\340\331\275}<N>\317!\005>b\346\374;\226\350\021=\253a\375<\337\377\034=*\022\267\273tm\240\275\343\222\375;\2264\300\274\331\236!<z\361\020\276\231P\023=A\367\373=$~\257\273\037\034\006>\363\250\375=\340\r\274\2749\275\032>N\232\205<\315A\364<2\340\305\275G\326\311\275Vc\340<\020g*\273\017\007`\275\227\211\027\275CSz=f:\014\276\035\353\250=s\352}<\010\373r=\237\003\"\275\204P\307<P\216\024\276b\3145=\033\017A\275\n\313r\273\304\226\327\275\366\362~\275\010)\r=\345\022P=,\235\021=\347\256\005>\334J\037\276\356\377{=\203Is\274\317\272\260;+\350\000\275\205\037\315=\362\3514\274\241\221\224=\366\247{=\301\244H\274x-\357\275\246\261y\275\220I\032=\211\324\265=\014\024\220\275+\216i=2f\235=u\224i\276)\273R\275\312(\227=G\023\335=>\337\247=\341\315\276=\243\356z=\367\264\213\275\246\344\212\274\2027\211\275m[\255<\212R\375\275\330\002/=lra=\341\353\006\275\035\007\366\275fL\205=\201\356z\275`\243\215=\243q\005>ME\245<\371\256\332;1e\005>\335\201G=\221\225\210;HA\274=\236O\272=z\350]\275u\354\227<\035!\250\275\010\366%=\2049\226<}\336<=2\213!\274f\342\237\274\025\245\001\276\001\317N=\217\025\204<\362\307\205\276+\211\000=\177\005m=\207\\-\275_\334\020=\366c\310=\361d\231\274\262\033\236=\033\261\362\275e\203F>\177\333\207<,\247}<*\220\260\275G\000\216\274\t<\021=\373\004\206=\241l\263<\337\010\373=\346\002*\276\361\353\010\276\347^\245\274\2050\030>\344/\243=\'=\237\275\216I\023>\345\304\\\274*\357V\275\323\254]\274W\'@\274\361\266\004=\364W\001\275\377!\203\274\202:4\275{\313\\;\033\267\303=\215F\224=\335M\377=\331\320\230<\340\364\031\276\337\000\006\276\0058\226\273\037\232\240\274\216\010\005\275\201Jo<A.\366= \240\260=a\251\276\271M\0108\274>R#=\"\375\336=\027\355\270<\210\247\333\275\207\233\035=s.D>GK\276<\224\020\231=\236yI\273\344\343\202\275#\266a\2754\361\320<&\240\206=\340gF<\354\336\233\275\004E\213\275\225\241=<K\335\300<\221[\305;;\333\333=\323D\363\275\346x\202\273\273\240\376\274ej!\276\261\274\226=\277\304{\274Y\205\242\275(\325\244=\263\"\340\272}\331\234=\\\364\300;\007\201\326=\351\247@\275\323\334J=mW\311=W\315\002>5\312\223\273\305b\274<\250\0014=\263\234\255<D\3073=\236\2628\275\'9=\276Q\250\017>\014\321N=\255\255\366=\333\3035\275z\365\243<\346\315\021>v\230\221=\221\010l=\217\365\261=\337\343f\275\366\301\t\274e\231v\275W\310\206=M0\027>\337?#>\3630M\274\022\014\301:\345\236\021>w\320$>:V\270=\277 \305\275\003\'\220\275\021\210<\275\277\342)\275k[\262\275\236\262\321=\231\345\300\274\325\347A=\025\006\024\275\"\270\005=N:0=\350\354\334\274\266-\030\274,v\223\275\226\340\247=4Ux<0\231\024\275\327\322\325=$\364\332\274\211\370\315<\013\254s=\233G\014\275v#\371=\3716l=?\324\254<\225\263V=\301\256\230\275\230\004\211\275Y\360V=\200\330J<\035\217\253=\316\023B=\214f\026=\336\000\241\275\010\3528\274\013N\305\2742\274\310\275?L\241\275|\005\235\275\032~\242\275(\"v=\205\223\013\275\243\267\223=\3718W\274\304\364\312\273\310.\351<\276=\302<\240\264r\275 \261\n\275[K\000<\321M\021=M\222x\275\201\351\021\276\031\337\276\275\221\253\211\275\333\206f< y\204<\224(#=A\004\334<(z\243\275\023\316\370=Z\257\202\274A~q<b\234.>\2007\302<}\0144\276>sq\275\262\206\002\275\330\251\312\275\366q.\275\340n\236\275.\304\214=aeJ\275A\334\035\276w\200 \275}\374\307=\316>y<\007\351\004\275\34672=\320\351r<$e!=^\376+>0hK=\273\316\337=\326+:=O\034\033;\362\353\321\274\'-\300\275\223N\251=\263P\026\275N\204h9\233\261\322\274\242\236\273\275L\227\230\273R\366\254=#^H=\2210\256=\312Q\033\276(\005_\275\261\325 =\210\236\233\27592C\275\314\265\371=\245\321\317<%\021\222=\340L#\274\256\026\255=\260\370\220<W\014\315=\326\274\265=\024\273\257\2758a\203\274x\372\202\275Ut\362\275\336y\363=\327E\226=d\005\000>4\016\233\275_<\323\274\301\233\271\275\214\345.=\022K\356\274\373D\271\275\350\262\306=\354\215\361\275\362\363\235<r\323Y=\370\013\177\275\014\315l=X\031\301=\355\001\364\274\263\317\267<\224$O=\022V\307<\355L\361<}\367\214\275L\257\020=\233\021\231=3\217\336<\223 \336\275\246\300\037\275\212E.>v\341\352\275\202Cl\276\264\031\356<X\250\262\274\336@*>\316\305(=\347\352\271<T`\023>\264\237\220<\306\352\017=\327\354\207=\002|y=\372\350\242\275U\225\016\276O\016\323\275\216~\006\276\017\222\223\275~\234\240=\216\262\312=,\234F=Bh\321=\022\341\177=\022|:\275\027 \235\275\345\351^=9\301X=\315\'\276<Ah\270\274i\364\216\275\021\211c\275\361UD\276\335*\376\275\370\322\017>\252tI<\2775\254=\225\226\020=\261\302\254;\322\2039=\324V\013>d\301}\274\301a\313<\3447\360\275\247\232\214<\332\220\002\276\375\221u\271\203\035\010>\361\271\256\274,\010=\273\317\006-=/0\254<\245?D=\\ \364;\364\225\003\276au\303\275\272\351V\273\210\0243\275\204F\224<\204\323\375\274E\232\301<\216N\237\273K\356\007=\304\206\342\274\301\251*\275\201\272\022>\264\235\217=g\3072\275\252[\035>hI\325=1\335Y<\274-\354\275\214d\244\275w\251\272<\334\320m\274\366\205\272\273\352c\037\274\323\222\212\275-b\335\275!\266\371\275\235\343\033\274\3058\032\276\304k\363\275\202\312\'\276\327/b\275\024\332\234<,l\010>\3340\354;\3117\331<[\324\261\275\031\325\344\275\031g\347<B!&\275sv\026>\270{\300=\244\226\324\274\210k\251=\271\212i\275\343x\006=\354\021)=\245\273\344=~\221\207=\251\217\256\275\327Pd\274h<8\275\203~\002<N\211\007\276\365O\032\275\227T\247\275\026`\345=\343\220-\276{\207\326\275\027\277\241=\254\027\320=\355n\263<\310@k\275;\357\234\275\361\267\036=0E\320<\366[\214\275\307cP\274\200\266\310\275\261\r\222\275a1\023>c\230v\273~N\302\272I\376\277\275r\205\277\275ZM2\274\026\020\377<a\322.\2759\024\302\2752\336\025\275-\320\224\275\353\025\014=\003\343N\273\303\360\352\275\340K\254\275\212]\016=G\272\333\275eU\216\275\354e\227=\363\376\032>\331\207%\275M\254{\275g>\222\274\333/&>\0322\233\275\n@@<\200\337\272=b:\216\275\252\245\305\275\257\034/=\2664\225;\276+-\275\273H\311\275\021\034\342\273\365y\255\275@\377\006=x\3038\275\026`r<\221\317\242=\342\304\341\274?\350\352\275\320-.\275\n\005\355\275\2541d=\254M\232=\350\322\220\275\350-9\274\036\203\034=\213\331\365\275\361\021\030=mI:\275\"\004\233\275\231Ws=\212\232\271\275\t\321\252\272a2\235<4:\227\275NZr\275d\0000\274\202\005\202=tU\010=\204{\231=\024\242\005\275A\334Y>\260\275Q=\320\311\360\274\343QR\275I\212Q\274\215\003\340< S\013\275\275\303\273=\300\005\263\275\3053\344\275\315j\212\275\021\256\035\274\036\311\265\275<(\223\273\331\004\322=\365;\006>\236#\343=\230\220\267=\340(\205=rd\'>\323\266\n\276\255P\373\275\245!\227\274{3E\275\377+\024\276\366\275Z<{\372\340<\\\255\t=\000\226\360<\362C\t\275\364j\030;\364\202\314<\260\2363;/\021\200\275\372W\371=M\201\206=\334\370y=\347\2242=\347.\224\273\223`\026>\256\355\323\2745\342\245=\325(\335<\213\354\201\274\014.R\2758\343\252\275L\344\215\275\351\224\260\2752\206S\275.3\350<\252&\351\275\242OZ\2750\2149\274\355\022\274\273\013.2\276\306\237(\2752\250\366\273|\351\032=h\216D9\306\213,\276\361\204\306\273\301\032z;\336\345\307\275\032s\307\274?#\007\276\351\343[=d\350V=FB\022=op\253\274\244\230\240\275\330\226T=.\334\000\276\342\353\315\275\325F\366\275\362\0322\275\332;f\276\021\331\226=\006>\032>j\344\246\275r\rn=WG\225<\340\026f=L\352\372:\361\276\253=\353\320\230\275\3555\365\275\231\305\200\274\270\364\232\275\030\306\320\273\201W\033;\r\332>\276\364 \n=\001\332\002\275\273\237G<\030Q]\273\0216\217=\315\007f\275\014\363\315=eb\237=\365\204\247;:{f=\335\013w\275\354T\022<L3E=\205S\207\275\237g\256=\367B\300=\350\245\017>\\\203=\275\014W#\274!\357\276=:\273\272:\226\344\260\275/\331_\275Q\324\001\276\345)\221=\013\275K=n\227\337<\020,\001\276\001\211\324=\370\342\337\274\363\260\003\276vxT\275\303^\271\275\002\212\267\275\236\331\005<\240R\202<@+\330\2759\016:\275\235Wi\275j\272\035=\351A\330\274\'\347`=\275\345\304\275C\221\353\275\275\355\205\275\025\214\002\274\243\344\006>w\255\004\276\033\356\200=NZ\206<K$\265=. \236=\206\374\270\274\275\251B\275\223\374E\275m\210\217=\310J(>\310\205\035\276\002\302\226\274\333\264\303=\t\241\272\275\036o\006>\334=\222\275N)\024=\'zQ=\335q:\275\'\231\022=i5==\242/\231\274\236\010\321\274\206\332\024<\346\177\204=-~\334=\3609\242\274,\332\206=\rV\325=\262\213\271=\"\030\t> \215\023=^Om<\277\374<<\027(\006\275\274ZN\273\216\256\364\274\201\243\346\275\022\212D\275\352=\304\275\377\333\227<\271\010\377\275\207\360\214>\014\222\350\275W\016\372<\351\364\366\273\336>\225\274AM\220<\"\301\023\276\006G\211\273;\302\025\276\356&\212=wX\302:q\200\376\274+\351T=j\253\214<\334T\r>.\302\237<\303\342\364:n\277\006\276i<\035\274\217>\315=C\007\014\275\251\357\017;\272N\326\275\373\303\315\274\275\030z;\332\031\265\273&\033\212=\264\006$=\337\241\022\275\257\241\215=K\'\240\275\032\210r\273}\264\373=d\305E\274\317sC\275B\240\037\276\313U\033\275\373QF\273\262\244\237\274\371\302\324\274\276\200\213=O\370U>\022\035\244=~\367\002\276rpp>\337\270\255\274D\324\340\275\220\213\010=+k\243=\017\243X=\313\372\252=M\206\r>\033\363\t\276\206\211\221<\244$\262\274\331\260\242=\r\216\221\274\231\207e\275\024\253\356\271{J\230=\260Y\260=\204c\235\275\345\017T\275\232\265\265\275\267\211\032\276\222\214w;%\201\360\275w\002M\275l\334\326\275\036\330\013\276&@T\275\252\2628\275\332\214\242\274^\305\201=cgT=\3703\360=\332^\304:\001c\335\2754\316\201=S\001\377\273\205i\224=\244q\326;\267w\241=\214\0004\274_\030P<\014J\263=Jgp\275\232\241(>;`%=\032\360\277=\374X\001\275\007\310l=Nx~=\005\013%\275\303\300\256\274+D\265<\352\356&=\005\331\215<\237\336\254<`#\327\275s<\332<\301\306\202=\314\252\243\275\204\020l\275\036h6\275:\246\267=\002\325z<\230M\251\275\241\007\024\276\356\251j=+?\205=(`\342\274F\034\\\275\226.D\273\023\213\013>\'kX\275s\267\262\275y\303\031\275\261\\\026=\035;\317\2758\324\300=\300J\034\276\250\022\347;(\306\026>W\003\233\274M\2477\276H\251n\274\3410@=Bw\360;t\272C=}\276\253=\245JA\275\253\363\017<b\010\333<+\223\363\273[\346\307=\006\010l\275\005\247\330={\013\264\274\312\252\";\tb\223\271%r\013\275xJ\227< \324(\274\3328F\275\203\220\203<\214s\n\275v2i\275\240\020\226=\255R\375<I\3160>\222\200\362<\033\375\337\274V)J\274;[\371=~\352j=U\226\257\274\246\004->\302\362\030\276|\033\303\274\356%\020=\333\330\003<\210\231\213\274\335R6>\220V\007\276\210\345.<t\322Q=\250\323\"\274\372]5\275\362\303#<\252\340\022>\371\254\037>\034dN\276Z\255\031=\215-6\275\010\027\032>\235\n\232\275\021\2716\273\377}I=\024\272V=\014\265\236\274\215\303\234\274\237Z\365;\214\3515\275k\210\315\275\314\233\233<\321z\271<\023w\\\275t\257-=\020\323\351\275\340\322\261\275@c\256\275u\265\261\275\1770\350;\351\232\010=r\337\021\275\257\340\027=d\314\177=\362\234\033\276V@\214=\036i\350\270O\201\010>\271[\207\275\343\253\305<#p\336\275\214Y\323\275/3\373=\260\010\332\275\230\355\"=\'Oc=\276\316\315\275,8\212=>s\246=\243=\034\275FG\235<C\251;\275`\t\004>\312\027\210\275\345\271\267;L\346\345=\017\352\307=6\334\250\272\330\000\271\275\357\2629=G\344\013=\233\024\023=\223fe=\256\2507=S\226\264=\306\264N<\350\362\204<^\2303\274\237\013E\274\267J\277\275Ega\274mm{;\271t,=\353\337\372<W\340\r=Xa\215\275\035\376\277\274YUm\275\021\375\003\274\205\272d=\302\'\233=\316\236L\274\276F\263\274\362#Z\275\261j\215\275\314\376\354\275\006\356,<\207\324\335=%\201m>\327\354\032\276\375\252\306=)\264\212\275\341\030\334=\362\251d=\261\374X\2754iQ=T\004c\274\\\1779>\367!\325\2741\322\005\276MJ4\276\246\270\n\274\223\333\301=/@\302=\334\254\237\275\303\211\304\273\353\r\"\276\225 \t\276\277\236\266;\013>)\276\205\226\221<\230N\226=\214\362\361<\014n\321\275\343\022d\275c\004h;\260\001\020=\246\177\237\275\342=+=D\364\260=_v\311=\3636\215=2\2640>:S\317=\030\357\340<\353\245\020=\034\003\005\276\337\324\311\274\272/\017\275\035\360\333\275\377\261\355=\222\034\232=$+\251\275p*\2319\004B\266<N\242\000\275[\0317\275\352\036\235\275\366\301\365<.\325\236\275\277\276\237=h\261\272\275\337\177@=3\025\230<\216\375\t\275\270\347~\275\335\203Q>\214R\233\274\347,\031<\036=P\275\334\023\301\275C\037A\274P\006\241\275G\346F=j\205\r\274\217\236C=\321\310\235\274\373\242\375\2734\343w=`\rs=\232\262)={B\314\274\251\330\033=\233\005\034=\353)\377\272y\222\360<\016\205\\\274Y\007\373\275d\364\351<\024\027=\275M\203\254<\030\025\224=\252\002\276\275\277Ep\275\204<\222\274^X\356\275\326\363\305:\311\"\217\274\020\316\203\275\327\333]=\205\305\332\275\340(\247=\r\256\273\274\227\251\377\274C\213\223\275\177\202!\275\007-\350</\004\026=:\234\001=\362\2117\275\242.\021=\266\356\274<\215S\021:\036\013\004\276x5\241\273\016\306$=_\317\212\2756\216\370\274\344\'L\276\014-P=\343\363\200<\263\013\006\275\032\347\214\274\274\366\257=!\256\201=\004\317\037<\'=P\273T\202F\275\n&\207;O\276g=\354\035\346<\316\273^\275\000I\302<;\210\250\274\301\206\004<7\322\020\276}\0231\275\273\337_\275d\377\031>\261;c\275\346\3253\276\203&\006\275\247\334\010\276a\242\312<\177T\036=\270Z\346=T\021\325=\030A\226\275V\314\372\274\352\"\245=\243\235,\275\'\217\013=\360\310\301\275\\z?\275\031\0047\275\222\337H=\256\252\023>\204eq\275\244\337_>:2_\272\276K\313:}T\335\275\350J\232<\031\352\032\276F;\207\275\256_\212\275\241`\326<\3058\326=L5\014=\370\232\313<\004Z\215\275S\217\202=\030\347\206<\003?{\275fF\357<\211\260\226\273>\320&=\376\026\354\275\317Kz\275\275\344\217=P\354\306\274\312\002\353;\301\305\212=\\i\225<e\026\243<\355\356\027=\235U8\276\217v\277<(\301\234=B\276\362\273\271I\242=\312\303z=N\002\346=\231\016\026\275\375\210\205\273\216q_\273\222\313\304\274\003\362\310\275\336\343\331\274 \377\025\2763\021\221=\352\007:\273\324\364F\276\215\006\314<\034\\\235\275\325\207\330\272\205\004\363\275GhS=\354\323\271=\235\204\242\275\216G\264\275t \017>5\014\243\275\327 5=\322j\366\275d\027\t>q)\032>\272\357\277:\r\376\350\275\312\026\302\275P\274\231\275i\333\021=\000\214\204=\0308\256\275\376\272\335;\264\212W\275z\237(>\215\313\201<\354fy<\252Cj<\330\316\016\276E\352\246\272H=\030\275\223\337.>\265o=\275\335\206\037\276Si=>Z\014!\276\004\376\355<w\360\222\275\037\371\232=\221\"\202=\022\271\332=\246\304\316\274R\366\371=s=\205\275\366_L=\303\r\314\275\362\242\370\274QuT=6\013\371\275\250\364\226\275P\273\020\276\333\027\206\274\343\016\325\275\330\002\342\2735Z\204<\226\026\243=)\207\352<H\211\004<\242Rh=b\036\316=\311\n{=\254-V\275\355^b\274\270}\007\274\367\037:>\3612I=\303\227t=\025\322\003>\333\310\337\274\270F\243\275\257\206\262\275Z\343\302:\324\262|=\001\'\016=n\320o\274\216\356Q=\370\343\326\275\r\373H;\303o\206=\311\237\346\274\007\375<\275\312%\234<\335r\035=\205)\307<f\210\304<\366\357*=k\032{\275\016*r<\234{\365=\222J\355=)ab\275\267_\034\276\376\003\247=m<L\275\270(/\274\321(X<A\331\234\274Q\375\362=\325\253\265=\330b\3629Och=\212q=\2742\266\026\276\032\267\234:M\221\224<\352\301\030=D\373\212=-\337\017>\010,\252\275\330\314N\275\007w\034\276qZ1\274#$\266\275/(\t\276\t\003\033\274\254\342\326\275\274*\351=\333a\t=\037mQ<\241.\342=\210\343\037<^\226\005>\313\037\023\276\254:_<\314\230\320<\332\216\241=\030@\220=4\345\214=\220\007J\275\311\360\312=\336\322z\275\243{=;\007\377\257\274 }t=*(\202=\002\215\361\275<+\213:c\350h\275\207R7\275\023\201\203\275\327h\025>\374\350\027=.?W=\261\021\313;<\371\000\274\343\017\t=r\n_;\265R\253\275lY\236\275\013\'\244\275\014e\367\274\223C\341;c\224r>\367\355\307=|v\352\275_\244\366\274A\227\325<\\>\340=hY\031\2759\335\033>RaE>\020\250\257<2\241\326\275\302\343\326\275\236s\257\275w}\313;\336\021\276<\212\252\367\274}\005\277=\035\001\236=\264\001\241=;\313\003=\247\227\220<f\331j=%e\022>(Dk<\210\275\335=\332o\202=\200h\276=e:\265;jom<\277\016\234=\244O\332=\212\031\233=$\214\210\274\234\336\372\275\2462=\275>T\373\275\371\341\260=\224Hg\274P\223\234=\006\356\266;\266\345\270\274j\004\230\274\367\207\'\273\346\201\235=;P\034>Xg\365\273\272y)\276\356\007\211<\270\016\356\274\261O\366=vU\273\275\320/\311<\377\376\310<\265\323\235\275R\230Z\275\366\226N\276\367\271\002\276\034\331\220\274\214\274|\275\010\007,\274\241\335\026\276\004\344\344<\303\257\217=\001\223`\274\035\323\235<\347\343\210\275\211c\356\273\352\220\032>\302g\334<\177\332\324<J\241\200\275\355\372&\275Xs\247\275\240\314\255\275\024\177O\276\253\341\262\274v\250\223\274\257\234\013>e\320$>\324%\256<\330\240D\275!,\254\274\035o\227\274e\007F>\356\210\324\274\246l\016\274|\244\312\275\245\206\233=\345\363\215;>\363D=\';\274<\254\001V\275\367Te=\002\252c=i\334\207\275\215\024%\274\366\r:\275E3a\274\250\267\025\276x\325\244\274t\255\234\275m&\\\275\330\255^=\0207\361\275s\000Z\274\277_j\275g. \275\251\202H=\332j\r\276\211;\032=\223\307\025\276Ah0>\304%\036<\004$\255\275\357K\313;4r\206;\230\220D\276_&\020=_|s<C\354\254=\301\355\366=6{\314\275\362\0319=\276z\211<\366h\220\274\004N\204<C\255Y\275 \025J\273\241b\243=)\240\212=\373`(>\032\235\374\275R9\007>\002aD=dY\355<\rEh=\023\035*\275\356\204\004\273I-\003\276\316|\312\275\t\250&=\264\005v=\361x\250=\332a\274:\r\230\207=B\324\017=Vl\242\275\232\346\001>\017\214\337<8C\341\274\010\276\301\275\036\337\t\275\017\233r<\016\305!\276\177\001\305\275L\245\326=5A1\276\347\017\364\273\257\270V\27494\000=\232\251\355=\310\315\216<\237\260\334;\306M\203\275\336\255\266=\227\343\377\273\366\034&\275*\002\204\275P\335\246=\226\355F\275\216\3169=\340\024&\2755\337\345\2730n\033\275\177\340);\005W\353\274\335\336\216\275\233\013\210\274\221\324\025>\374/W\274:rZ\275\335\363\367\274\314\036\352\275\222\324\254=\316\334\323\275\344\213\032\275\240W\244=\331\325\272\275\272\316\307=\033\200=\275\235\240\034\275\200\242$=\353\367\320\275\331\245\315\274\376\000F\276\211\000{=\356\000\310\274w\2333<y\021\330\274\rs\005=e\350\030\275B7\374<*\225\311\275O\000\374\274{\006\354\275_#\201\275pBV<\323\377/=\356Y\354<1\362\226=\320-\203=\270>\356<7\311\371\275\3206$<S\216\201\2756\357\254=\tU\312\275\005\300\t=vN\343\274\211\036\220\2752I\244=\354\2774<\322\251\365<\306&\025\276\234N\001=z\n\264\275\223\265\316\2757\035\375\274[\\\221=\272|#=i\212\273=[h\277=\036\335\022=\253\227\354<b\217+\275\034z\356\275\244w}=\'.\233\275\030KI<\2524\200=\316\311\203=kw\006>L\203;\274\276\251\242=\025\004\213=r\226\006>\3331\215\275\003\356\236<.\226\\\275\343\023\001<>\342\262\275\327\342_=\2519J=\205m\n\276\333\177\032\275\330\374\026=\376k[\275\352\242\001\276\\H\327=\256p\321\2751\237\036\274B1\222\275\2251\323=\305?N\275\300\230\261=\032\020\272\2752~\254\275\">\003\274|\321\246\275x=\242<\262QA=\362\200j<\217\371\"\275\304\336c=\321\333\272=b\253W=C\310t=\226\267D\275ZJ\307<9i\375=\227-\205=.^W\274\363s\230\275\004h;\276\003@N<\207\tC\275\367\274R\272\343\275\226\273\235E{\27539\002=\370\324\202=\225\306\362=\315\347\251<\221\335\255=\320\\\301\275\352\3148\275M\377\r>{OR>&j\n\276\264n+\275\261I\325<\303\213\027<\253o\035>\203\017\337=\'\273.>\330\307K=xLT\275\241<\301\2758/G<\027\262\246\275\016\036%>:j\n>\354r\'\275\334\243p\275\272\327\272<y6\001<#~\035:\226\342`=\245\032f<L\370n=\004K\325<\266#K={\351k=\250\n\325<Kk\224\275\304\366(=\217\'\222\275&\356P=\025\215T\275\236`\213\275\233\365R\275\365.\001\276\305\210\234=\016\330\005=\323\267\263\275H&\231<\005\360\363=\371\021\032\2743\032%\275\264\022\232=\3364\263=\217@D\275\331\243\324\275Yw\263\275L\303\270=\207\215\033>i\216\321\275\207IM\274t\200\362<D\371B>E\203\231<\004\341N\275G:\237=\334\314v=\3775J\275\375z\341<\367/\355=\3438\203\275\201\242\'\275z\t}>e\243\217=c\346\307;\261\216\003=\r\210\203\274T\315\275\275\244o\236\275f\307b<\265\002\'\275\344SY\275f\302\372\274yH\311\275 fN<\216Ba=6\370s\274\027s5=0\003<=\252\322\221\275\031\266\007\276\336k\033\276f\337\322\274\020\006\254=\213\334\337=\312\334\365=\023\000\274\275|\241\345\274J\222\003=\252$\327\275Jt\242<\367\234\013\275S~\274<~7;\274\366`\303\274(\312\311\274C\201\230\275\025\232\221\275\202\330\233;\200\346\362<\022m\230<V%]\275\361\245\307<is\007\276\250\031\241<\322#\207\275\013\1779\276\024\rr\275G\006\216<\010\014\357\274\020xS=\326\367\n>\026G\275=n\340\256\2750\3629\2713\324A\275\346:\314=\3729\275=<5\254=g)4\275\204\206\002\276\332\376\177=T\016\310=j|\'<\330\005\312=+\035\320\275\365\233o=\241\373\"\276\253&c\276\265\322i\275QC)\274\275z\243=CP\215\275d\304l\275(\302\250\275X\337\361=\255\221\257=\267[+\275\274\336/\274\203\021\345\274\367\242\264\275 \262\221\273\377\277L\275\331X\313\275\304\376\321\275\2476I\275H\017\r=G\021\031=\022wg\274_\027\222=\266\2334>\035\036g\275\377\253\001=W@\210<\350l.\275_\tX\275\013,\271=_;\375\275\006h\241\274\244\006\246\275\277\243<=7\354\323<\020lJ\275U`#>\315\004\203\274\214\370\003\275\377\024\223\275X\206\202\274&\025\205\275\224*\275=\347(\260=\261.\023>\314\260\214=\304*\254\275=x\003=\001k\213\275\004O\336\275\303\212\020\275\242\3255=U1\205\275\372\330e\275\36203\275\312\370#\276\\\214\212<X\003\363\273\350\274F=\242o\t>\2663)\275?1\265\275\325]\353\275\205\212c= \215z\275\325\0315;\273\235/\276u\373\320\275p\320\362=\241_F\275/\013\234\274\236\001\303<\265\366\037>\026\263E\274#\227 =\002l\006=\307\307\014>e\311\004=\326\251I\275\007\343\335<\240\217\224=\342\343\345\274\306S\256;1\352\216=z\207p\274\021{)\276\217h\347=v\035\236\275\234\036>=5\212\300;\001\n(;\034\335\271=\210\201\335<!\226\002\275\242c\t>*\023$=\202[*\276\310~\235\275Dz\332\275\264\343p\275\336\311\312\274\031l\010\2753\035\362<\346\004\342\274\366$K=9\251\341\275T\021\316=\003&\320=O\rb=\316\222\322; i\304;\342\237)>>\376\360\274\320\275\357=\r\007\251\275\035\227\231<\277:%>\027`\n\275\254e\234\275\344\346\245\274\363\022\312\275\243h\005\275`\r\000<zV\006\276\206\210&=\343.\341\275\351\234\023\274\225\265\242=\0335\036\276\304\031\212\274\302q\005\276\210;\273=\361s\261=^\000\306\274\342\177+=[\364\006=9\032\250\274+\272\327<\332\250J\276\324\273\\\275\304g\260;\212\251\234=Tx\257<\316\212\252\274\"\021u\275\226\220\222=\0166\036=\262\276\033\275\235\021\001>%\371D=\322\177N=\276\030\263\275\360\273\002\2738\030==\324\n\317<\344\332\250\275%o\350\275\034\003\214\275\344\243\226\275\303\214C\274\371\304\212\275\031\314>=\245\261\014=\247\t\021\276\331U\257=5\347G\274\306\013\201\275[\033\304\2740\033\232=\305:=<\211\221\361\273\320\'\335<\312\277 \276BPh=D\332\337=\242\003 =~\032V=y\331\216\275\311l\320=\t\266\257\273<x\360\275\343\202\311=Rn\207\275\374Q\367=\360\205?=\017e\254=3\351-\275uH\232\275\032/B>\034nM\274]\033O\275\335\004`=\205\001/\275G\356\014\276\023\r\227=8\211i\275<HM\275oA\262\2743]\237=D6%\276\212\336\314=\350\033\203<R\0138\275k\032\027\274\357\346\231\275\'\302\013=\267m\304\275\n\352\024>\2461\306=\241\025,=\266\267\200\273 \016\025\273A-\312<\223\3752\274\275P\037;\376\353#\276\242\203\366\274>\020]\275c\371\264\273\327\253\036\276\216.\232\2755\275h=)\2725=\224\231\306\275l\362G=B$#\276\353z\214\275)\276\021:\364\211.:\275\320\007>\272\357\211\273q<k\274q\237\n\276\221\213R=A\277v\275\203\336\212\275\006Px=\231>\004=\022:\311=\270\340\033\276^9P=\221\026/>f</\276\356\263\033\275\225\030\035=\" \204<\007\247~<\002\350\234\275@\361\222\275]\235\311<\352\321e\272\344\224\311\274\203\013\026\275\366\\\353=ed\257=\244\323O<f\003\370<6\366\270\274\005\324\242\274\247\2574=\002\177\235\275\303D\260\273/i\374=U\300\326\275\235~\271<x 6\275*_B\273dn\255\273T\314;>bT!=\016d\227=\316\374\002\274\177\200\265=E\241\007\276\315\303\337=\014\355\314=\334#(=\242\336G\275C\255\301\275l\347\253<\353Vr=R%*=y`x:O5l\275h\235u\275\330jo\274\016\341z\275wK\263\275N\245\265=\'\301\'\275\023\250G\275\022\231\343\274\030\373\206\275\\f)=\226\317w\274\\\360\210=\242\'<\274\376t\317\275\"\377\340\275\275\327\035\274 v\216=\203K\356\2741\324`\275\244\221a\275\035\240*\275\367\016\341\275F\034C=\372l\221\274\257\247d=\321}0\273o\353y=Q\177=\274a$^=\n\242V\275O\212n=\376$\201\275\200%(\275\013L\226=2\256\033<Z)e\276\220Vr<H\352H>]8\002\276\337\010\034>K\300\327=\216\216\276\275C\256\230<\326\232M=\263\274\304=\014%\263\274\333\2375<\355\233\005\275\210\303<\276\005\304\036>\370\310\266\275\347\371\223=\365\371I=\265\373\017=\217?)\2740|Y\274`\177\001>\360\243\355<-0\216=\020JY\274\006\2464\276\353O\031\275\300\354\202\274%\245\322\275x\334\210\275\0134 <<L\306\274~\022\311\275\006N\260=\n\366>=\341\260k\276,Q\266\274\247L\327<n:!\275\356At=\263\214\371\275\263\274<=\273\207\264=.\240\225\275\351\275\352=bC\322\275\rj\327<\366qc\275\345\267\300=9!\000\275?\'\232\275\'JG\272\335\324\254=%&\227=\3259\t\276\310\013\236<\324\213\254<\330#0\275j)p=\254\344\274\275\304y\251=\310\'\021<\333Eu=\361\310\373\275$;\024>\034\305_\274\316%}=\354R\340<5\020\300=\010\n\007>\311\004\200<\302p\244<$\013\215\273+41\275W7\360\274\256\315B\275\3262\213\274_\2122=+\246\364;\227:\361<\234J\363\274\340\314D\275p`&>\210h\346<5%\221=\205\352N\276\307S<;&\337u\274\234\200\337\274U\216F<\211\220l\274\371z\220=\251\266F\274\365-\220<o\300\003=\033\3220\276q\266\350=\305\376\022\275\371\266\217\275~K\030\276fQ\215\275\342\360]=I\353g=\205\247y\275\342\203\206\275\330\246a=\000\271\263<g\343n\274\020\276\005\276T\341\305=\327\220)\275\213Eg\274\263[\034>\233\216$\276\243hJ\276\347\353\010\274on-\275\302\024\273=\333\364\014<\346\005\321\273OM\300\275\337\371\254\275!@\253\274.\231*>\'\363$\276\033\0178\275@\267G=p\001\205=2\375\000>\342\262w\275V\230\301=\313\r\024<\020D\224\275\261\253\342=\263\332\242=\007/\340\274\217\"F\275\017\006\351\275\325O\240\274\201\256\260\274\261\302\213=\220;\t<\274\201\023=\213L\213\275\226\240\226=\212\351\243<G\213\031\275\232\215E=\214\337\216=\242>4\275\030-\035\276\025\nK<pB\200\275y\230j=\236DM<\034\r\223\275\245\201\267=\230\025m<\027{\177\274\352\227\307\275\'\356\204\275\213\002\005\274\313\315\220\275\024\335.=\300jv\275%\305\305=\204\216&= h\026;3\217+\2755\237\340<$r\"\275\031E$\274N\021\237\275j\251K=\331u\375=F\305\032\274\tw\216=\025i\213;P\227\367\275\031v\320\275\351\273\365\274\323\2039\275\017Y\253=\303\242\377\275[\345\327\273e\220*>\007\354\310=V\323\363=\312\273\033\275\240\257-\275@\217\t\275\177m\251=6\317\222=\330\361\241\275\224\343P\275(\323\223\275\354\223&=\333\300\n\275\261<t\274\352\227\302\274\201\030\374=\267\204\327\275\265J\346;\0232H=\206!\026>|S\230=(\372\236\275\222\320\237\274\024\230\025=|$\024\276(\351\002>&t\031=\263\255\031>`\367\227=H\r\226=\363P\231=\2770\231\275\244\\z\274\340 \246\274D\033\273;#\231\212\275\357\007N=\\\270\357\2750^8\276\376\346w\274\"\373\207=\214\243y\274>\301\325\273\004\005}=\240yZ=W\211@<\\\024\267\274\363\030\324<\326[d\275\212\005\225\275\362}\223<\337\003O\274\252\026Q\275\263\257S<2\371\205=\026\273\301=\366\272D<\365}\345=\331\223\277=\360\367\275\274\035A3\275O%u=\353:^\275\234*\035>\351\370\177>\241\032z;\357\273\244\275e\032\306\274>R\034\275\272Y\022\274\000nV\275LQ\214=+U\320\272AW\026\273\241%0>\017Y\037=BM3>5C[\275\234y\232\275Xa\327\275{\3500\275I\023\021\276-\330,\275\326\347\262\275;P\247\275\034\177\260<\331)\216\275\r\317\004\276}M\000=\363$\310<:A5\275\213\341\303<cY\363=\303\333k\275\206\316y\275\344\245Z=\267\345\027\276\211\245\245=\341\233\207\275\257\007\312\275q5\215\274\303\314\332\274]~\360<\216XA;\213\n\322=\352\304\217\275\312h\n\276\207\306A>b\2208\276\301\354/\275\240Y\252<[R\227\274\006#\340\275\023\252\314=\222h\024=\327\346\"=~\220\001\275\307\014\300=\006\"\207<\006\357#\276T\nP:h\020\326\275?`+\275p@\350<y\277k=\307\242\214<\236\202\243<\232\3554\275\252c\205=n2\222\275\361\035\226=\323\241\241\275\371]R=b\020\351</F\316\275T\0043>\026\362\"\275\002\216\332\275\244\354\213\274\235\211p=\307w\013\276\203\030\346<\355LF\275\346}\274=Y2\023\276\0026\254=\250\324\241\274*F\031\274@\366\255\275a\014\261\274\363h?=\275\260\300\274S[S=\200\000\267\275t\341+<\371VR=\026\242\322\274Z\210_=nX\340\274x\222\271\275\005\363U\275W_)>\221N\213=\017u\210\274\010!%\276\337r\024\276\275\253I\275\344xD\2769\305\230\275\227\245.=\252\227\277\275OV\024\273/\2318\273\203\001\364\275\027\375\013>\017\035\n\274n\226B\275\356\341\235= \336Q=\371*6=om\361\275\247=\247\274z\210\301=\202\247x<K\311\347=f\277\307=\360\332\351\273\200\030\373\272\331\223\000>\013\375\310=\020\373\371=\377\272\t=1V\016>H\001\203\275V\006\332\275\246\214\362<\032\354\354\275 Z\250\274D47=\301\325\363<\317%\266=J\005)\274\355\206S\273\023\353\214\275\271!\026\276p\244\322\275\222\261\317=\357=\370\273@\265`<yM\236\275\347 \030=\370\340\362\275\326\221\232=\253\027z\272\276\320J<P\332\035>\036\257\313\274\272\234\014=L\304\004<U\317\366\274\004\2710=\361G\315\275\337\004/\2730xi=]\322\256=\326\270\260<\001`[\275Gh\177=\365\220X\275L\353\276\275\034\265H=i\344\211=,\275k=\252\2215\275\215:\351<>?\221;\262\000\201\274(\256\274=M\022&<@\207+=X\301\250=\030\272\242=_*G<\020}\202\275h\030u\275\031W\243\273k\233M\275\247\217\310=\357\210\363<\351d\234\275\276\306\224\275\340\317a\275\371?Z\275\027\224\211\275\321\216\031>44\202\275\362\375H\274\327\366A\2759\245\035\275iM\n=\300X\270;\330\221\371\275?/\022>\014\263b\274h\223\010>\201\304\336=\t\213!\275\276\324\214=F\277\177=%\023Y;\363[\320=j\013\254=c\013\204\275s\260\313=\314%\306\275V\007\033=\270|\001<m\251\314\275\352\331\022=\222\007\027\276\372\036M\275\202\340\033=`\274\226\275\253x\272\275\266\252&=\350\342\321=m\270\246=\201~\316\274[\025\247=\207Y!=\tX\371\275)4\014;Ep\321\275\354\274\013=m9@>\373P\037\275%\221%\275<4\332\273h`\032=\"\247\332\274\370\241~=\336\231\205<\353\332o=\231\331:\275\234\312\004\275\367\005X;\343(\371\275\374\366\207\274u\302 =\314\324+;x\004\300\275\324\353T=7\277*=H\331\034>\226\356\305\275M\345\223\275`\362#<\340h\254=`\004\313\275\r0(\2766G\014=\021\243\361\275]\017@=\374\220Q=r\014\346\274\214>\335\275\032\334\322\275\324\017h\273lR\204=E\242\207<\300\312\210=H\022\010=\000\223\365\275.\224!=\241[ \274\270`\274\275l\n\247\274\241\243\351\275\025\303\222=\2139\224=NR\354<\226B\275\275\347\232\246:%,\021=\203\n;>y\230\024\276\315\300\005\2753!X<Og\363=\254\350\266<S\"\336<R\010\346<\344O\214=\356B\204=\335\nn\274\222\275\311\274($\004\274\026e\036\276~\n\202\275\265H\311\274h\003\315\274\345\"&>+F/\274\001O\375= 8\365<_\2045\276\341\r\260\275\274\274\034=J\014\312<\036\262J<\304\010\356=\352(\003\275\304@\005=\221\337\216;\003\213l=\344\247\024\276N^\237\273P\340\'>\365\333\213<\3272\362\275Y];>\024bT\276@\014Q\275+$\004\276\330\236\300<\336\326`\275\326T\207<!8+\275w/\004=\226MI=\250\254\302:\244xH\275b\002\213\275q\216\000\276\273\271 =6R\242\275\233\207\262\274?\361\337<\266\334\'\275\342\007\350\2737\247\301\275o\301\211\274\312\313E>y\262\230=\272\336\244=>\212n=\'[Q=\003\025|<7O_\275\020\246\201=5\300\254=\2031k=lM\322<\264\267\211=Jl\360\274\251\316\256=\375v\377=\312=\020>J)\021>\r\247X\276\276\265\210<\260\376\262=\361W\374=\243KU=g\216\321\274FL\010<\242\025\025\276\031\201\227\275\025\221E;&uI=Mv\345\273\237\202\353=f1a=!\2675<\271%>=\222\330\022>y\250\354<\221\304\202\274\300E\301<\301\252\240=\337t\232\2743aR<3q\322;W\327\252</I\200=\302)\336\275u\3410\276\275\316\226<\307\235\"\274\347\201\220<^\265\303\274\351c\203<\265\246\016\274\240C\360=\343\2751=\353)\010\275\210)4=%\n\007\276\030A\207<\237N\350<\241\313\210;\216.-=\r\347H\275\\\235\321=\360\226\300=\235\271\305=qv\227\275\263\315Q=\261ej=\365M\211\275t\250\006>\'\247\256\274\t\357\354\273\255\352\263=\'\307\017>\016+\364=\027\022\255=X\235\332=R\301\243=\234\324\276\275\373\237\213\275\312o\325\275\315\002+\275\216\372\213\275\257\361\252\274p\345\'\275\204\332\335;\243\252\222=\273y\362\274\216\227\204;-\312\002\276\330\332{\275T\026*\275\000\255\001>w\231\004=\0008\206\274;\0259\276p[\345\274c\215[=1\031@\275\206\272$=\272\265\302=)Io\274\345D\205\275\251\203\273;\342\210\245\275v\341\206=R\035\322\275\2624\206=>\013\010=h\366\313<\\\277*\2750\355\362=\006!\227\2735J\020\275-b\365\273\313\321!\275\203\376\236\275\035\177\006>\312\220\305=\tC$=\0071\204\275\036|\370\275\326\365\005\275\206\014\257<\260\372\230;\363\373\217\275\236\001\371=q\245\206\2752\342u=8\305\250\275\232\340\231=\256\031\034>2\225\211=@\326\032\276\336\336V\274\234\235X\275\"\220\276=\257\026\356=\356\317\026\274\327y\275=\001\251\367\275\361\366\264=\361N\220\275Nv\360\274M\267\376<BP\273<N\337\363<\201\317\344\274\342\262\366=\201\210Q=\026\360\272<\266\'\270\275u/#>\323e\003>T\336C\275\225\033^=)j\224\274\225\014\027\276S\237Z<Q\353\024=\tN\325\275{\n\306\275}e)=9\3649\2749\325B>\322u =\364$2;Q\347\305\272YB\235\2752t\277\274b\353\031>\210\266\010=|!\000\275\244\301\215=\201\024\237\274\251\340\027> \345\232\275\335\374\316\275c@4<2\232\202\275G\3042>f41\275} \337\274g\\\225\275\006rW<e\231\301\2750\233\272=\3143\335=\037)\206=\345\203\274\275\337\",=$~\303\2747\232\322=t3_=Kh\361\274b\\A\274\037\030\025=\210\251\211=\026k\244\275\002\3753=\037\353 \275O\316\300\2747]\300\275C\230#>O*_\275\006\374\336<5\375\204<\206:\261=0\242\310=\ng3>t\335V\275iI\206\275\021!\341<\344\r\235\275H]\226\275\342\220\021\276\375 \341\275\002\366\223\275-+\213\275\373\255\236<\331\315\017\276\310\t\224\275F\021\205\275E\262\242=\364\214\335\274\222\010Y>@\205\214=[\220i=}T\342=U\374\356=\005\332\271\275\363\\I<\247zl=`\r\260=~\322\017>\306!q=B\232\241=\205\242\347\2754\274\177\275\274\244\010>6t\207\275\351\033\344<<<Q\2746\304\250\275f\005\220=\246X\341\275\226\247Q<\356w\260\275\tZ\037>\302`\335\275\351\351\324=u\335\020\276\002e\220=\300L\263\275\223\303\205=\314$N=\204\356h=7Kl=R.;\275\\\0134=\371\264\235\275&\222\364<J\351h\275\023\320\206\275\375\214\001\275\360\220\006\275\274\200\246<,\nQ\275JQv\271\344\337\002\275\r\234\265\273>\021\021=\232Q\035\273?I\033=\026\267\237\275\2218\n>4\006~\275E\022\r=j\014\233=\216\203\216<\235jN=]9\363<\331\276\203=\036\003\376\274\243E\215\275\2557\245=\024A\335\275?\341\353=/[\262<|\372\213=\365\3104\274$\033\341\275\021\255Q=\335\262\037=\\\361\212\2757\222\355\275o\032\274\274\207\222\200\275\004\332\275<\246\367\203=a\202\036>p\000\215\274\275\344\237=\200J\376\275\200\302\230\274\320\315\003=\271\222m\2754\0074==\221\245=\201\246R=ceB=)w\221=H\243;\274@\222\232=\213/`=a~@\275\317\332@>\025\331\206\2747]\235\2743H\'>\364\322\265\274\342)=\276Z\205\237=&a\310=\305I\033=(sS\276\357\007\257=72\025<\254q\325<\r~J<\341\316\023\275f\036\223\274\220\216>\275\361\374\303<k\375\267<dk\302=\256%\006>\204\276L\275\367 \201\274\303n\001=\302\263(=\331k\303=h!q=2#\233=h\026\036\273\243\014\355<s+ \275\031\013\303<O\360\310:kr\037\276l\242\206=\025\320\324\275p\265\207\276b\324S=9\001\217=\247o\332\274I\274\004>,\006)=\302b*<\246\326K>\257z\335\274\255Br\275{\300O;\010\014\301\274%T\327\273.\204\275\275\306\006\245=_\022(\275\372\325\220=\262mM\274\\\303\r\276\016y\326;J\346\377\2759\"\252=\345N\030=l2X\275\356\333\372<\274y\214\2737\006\266\275>\023\202\274\347\345\335\274\247qR\275V\r\272\275\334\360(\275\225\317\243\275\370\304t<I\212\232=\256W-\276\\\240\241\275T\020\247=\260\'\305=8@ ;\252\324\223;\232- >\331\320\360\275{\322\254\275/\261\214=\366\257\240\274 \340\223\274\227\370\207;`&\220\275\354\217\n\275\213\254\214\275\364\255\257\275\251\3365=Ywo=\204\205\373<\211]\022\276\263\024\365<\177QL\275\331wk\275\t\275I=h\312\347\274\022\270b<\360\271\245\274\316\242\243=\251\352\365<l\263\000>\337\037\036>\330\231B\275\355y\n\275\375n\037>\351\016w=0\271\207=\"\022\301<;}\231=\320\017\264\275\037\031\334\275Dp\244:\217\326\204=\343\340\204=\277\356\203\275\210\344\206<$\356J<\232\316\030>\316|\276\275m\253\204<^\236\234\275\374=\026\276IL \276\266\342\307;\243s\206<\240{\017=d\275\000=\223=\022\2756\374\274\274a\272\270<\273\267\204\275Y\231\001\275\221\354\322\275+\305\342<W\223\335\274\347\300\035=\252\357\363\273&r\223<\357\346\227=Qx`\275\2105\230=\271\207/\276\025o\032;U\346v\2744\310\251\275\033,R\275\222\255\347\274\006\217\033\275\302\377\372=qG\017\275\200\2600\275\270\271\312\274\311\251,<\214\254\010\275\322\001/\276\2367\005=\223\315n=\004\237\023>\261WB\275\301\022\243=\247H\230\2757aj\275:)?\275\373\030 \276\245\223\256\274\351M\311\275\n\266\210=\325F\027=\001\361\265=\276\354\000\275\025\037o\275\221\231\331=\356\353\004\275\235\344\307=\214h\227=7fT\275\217l\212=\233\213\272\274\366\272/=\246\272Q\275\362k\034\275mb\231\274\274\235e\274+,K<)\312\355=\\\241\231;xj\200\275i<\020>\366\023\253=r\021\241;\257(4\276\377!\320\275M\226\"=q;\371=dqS=\330\037\377=\tv(=k\0033\275~x\303\274F\375\255\274\347m3\275\253\221\260<VK\356;\322\216\003\275@s\024=\300}\270=\356[\220<5\3101\275\353\236\021=|\361\277\2753kU=U\252\237\273\306\317\267\275\255P\263=\346\"7\275\240\247\356\274\267\231 >\356N;:\213|\324<\344\362\306\274o\252r\275\242\337\363\274\373\352\r>\312u\312=\246\333)\275k\206f=I\327R\275J\235\203=+_\222=\031\026\263=k\000\363\275`\023\336=\336b\026<\004\345\302=\021U\322\275\r\270\374<\365\006\342<%\310\006=\305\377\272;\tgf\275\321\302\310\274V\302\313<\277x\222=\270\037\257\275\347 \202\275\323\0073\276\013G\022>\373\230P=\256.:=G\212v>\360,\271=\207\273J\275!\275\t\275\363\347\321\275Y1\372=w\246\020\276r@\010>\226W:>\336\213\266\275\361\005\220=\251\320\225;i\354&\275\264\3348=\273\307\311\275\234T\3559=\351\010\275\217\241\366=\243Q\346\274\tl\267=\227j\216=\017/\347;\316\021\254=\3674,=\031N\001=\346\340)\276\306\n\341:U\337H\274\245\353\200\274\206\003,\275\r\344\032=b\331\326<\255\003\366<\r\347\016\275\206\320w=\007\337\002\276\021xI=\330\263\201\274\244\247\026<\320\205\372<\231Z\357\274\314\374\236=\342\343\343<\226*\253=\253+\237=\254\273n<\202\243\375=Q\311\025=Z\001\361=\255\373\345=\340i\365\275\361\200\221=\235@H=bl\261\274^\010^\275\365a\201\275\265\234\261\273\363\210:=kb\032\275\017\222\217<\243\332\305=\326\2309>%\3416\274(W\327<Z\240\237\275\201\241|=\320\256\023\276\203ux\275\340\314\342<\333A\031\276\004\271->\003e\222\275g\311Q\273\241{G=\360\300r;\362^\303=2\3227=p\322\277\274\242\256\221\275R\216H=\341\233^\274\324\3515\275j\3723=\023\201K=\'\022\222=_\224\353=j\263\004\276P\241\250=*\345\367\274\361\0056\275\250\r\205\272\270\'\302\275>`\340\273c\257*\275b\013\264\273\333\302\221;\302\344\243\275\222\262\301<\007\023\277\274\t\264\201=\232X\005\276$\333\230\275q\354,\275\251A\223=\254\334\222;\322z\000\276\254t\326<\214#\256<\225\023\357:L\325\234\275\t}\"\274\322s\002>8M\257\274c\264s=\030\250w=\252\232\360<\343\375\322\275`\237c\274\230Ag\275\353\177\277\275\262+\224<\036\356\376\274^\203Z\275\t\265\277\273\037/\317=R\205\242\275AK\364\275\177\302h\275\270\304\004\274\251G\013>k\232\244<Z\372.>3og\274K\357\010>\343?\025\276\\\024\254\275`X\377\274\260`\'=W\0259<\241\316F=\216\203s=\340\262\245=\320&\320\275\247\r\352<Q\302>>\375\363\"\276K\025\222\275\220O\031\275\2720B=\037\021d=\373D\300\275\032\217@=i\331\276\275\272\356\021>\333\003\306\274\254H4\275\202\213z\275\000Ao<\276\311\"=\212K\256\275q\230\302\275\366\233\370\275\\9\001\275\247\277\236\273M\036\364<\372\017\273\275\360\354\372\275jP\327\274\203\343\254<\353\333A=\273\322H\275nk\215\275\236\020\021>\214\222\t\276\355\267]\275p\201\211\275f\260\"\276\367\217\276=54H\275H\220\360\275\241\013\360\2758\357\2479\341B+\274\352\217\037\276\270z\274=kG\304=\260l\n>\371\004\213=\332\2446\275\324G\240\275\304\342\346\275\327 :\275)\021\221\275\037\023<=\264t+\275g\271\312<i\336\031\276r\213\360\275(\321\310<a*\263\275w\261K\275&\n\204<\224f\024=*\223E\2764\225G=h|\244=\303V\232\275:\262\006<\365\263\321;*9*\276\024\341;=\026\316_=\252\307\240\273+a\017\276{\n\363\274\006\341q\275;\3140=\223\224\005>\326<\202=\\\311\213\275>\224\314\274w\311\000>\036\034\274=l\266\222\275\245:\\=2\255\331\274\n\262\030=\315\021\330\275\357\373\315<\027\017\035=\250\266\007>&[0=g\2666>p\360(=\373u\202\275\026R\021\2762.\222\274I\260\250=P\033u=\275P\233<\264C\211=\250\360 =4\002\351<\022\2427<\214\362!\275\304]\347\273\356\371\306\275\202\033\232\275\nl\306\275H\225\034\275\230\\\017=vw\310=\254\320\226\274\265\t\264=\324@2\276$\363\013\276 \252\204=Hfi\274Px\350\274\005\036\204\275\370\365\214=\221\002\232\275u\220\236=\275\353\252=\342\361\266\275\2771\242\275Ox\271=\204\370\220=\326G\220\275\022\342\345=\222Y\007=Y\344\006>\307\274E\275\250\260\202=L\273\211<\377\223\216=\365\2445>yd\014\276\233\256\355;q\223\200=\351\242;\275<*4<#\255\225\275\217>R\275g\r\203;\232$\253=\366.d=dlE=\370\354J\275\365\316\252=[\331\037<\347\025\207\275\205\260\344\275\023\312\010\275\311\322\240\275\370\"\006\273j\357z\274V\351\337<\310\244\034\275\355\022F\275\036/\004>\327\242\013=\023`\242=\016\324\363<G\275\325\274W\365\354<\275\205\016\276\237\305\260\273\206\202\335\275\377\272==aFZ=\300Y0>>\237S\276\256k\217=\304\223\"\275\240\337\035\275\r^G\275\'>1=\250\314\033<\020>V\274\246\230==\207\242/<G\267\010;\020N\241\275p5\027=<\311G=\023\307\017>\223{\332\274ba\202=\203G\307<\014r\004\276\305\225\r>)\205s\275v\360M;{_S=%\213#\274\256\325\010\275H\307\217=\027\0102=\227\237\223\275\360\312\356;\374#\207\275+\306k<\000\265\366\275\016pK\275\\*\331\2758\331\034\275\007x\373\274\215\275a>\315&x=\026\200\212=)\033\027>\210\344\351\275\366\223\206\275\036\312\235\275\343\017\301\275\014s\375\274\264>\377;\036}\331<~mw=J\307{=\nL\330=\327\215\002\276j\352\210=\356\275\215=j\374>=-O\344<\243\312\321;{W\234=\337\362M\276\027\350(>V\3261=\2055\240\275\216\343\026\275F\305\210<\370vM=\341N\037\275G\203\215\275};H\274\233\367\010\276\246\030H\276k\202?=\306\254%<\202\005\025\275`#B=\232L\246=,\262\215\275\311\367\013=\352z\201\275\201\351l\274x\264=<6\245\027\274x\'<>\255\\\005\276\\\264\r\274\347\346\021=i-\365\274M\330\373\275\376\213\022\275^#A=\003\215\r>\017\226!>(G\311;\323%\364<!R\300=\206\'\251\275\250\255\234\275\002\021\205<\022\244\002=\022B\232<\377-K\275\311\\*\275\'\347\254\275\302\255O=\033(G\274f1i<\324\311\220=b\021<\275\223\313\300;\025\306\337<\353[\006\275\307$\322\275gA\234=\217j!>\332H\244\274(|\030\275M\003\273\275\227\372e<zA\234\275\037\365N\276tc\255\275\242\017\256\274\322\265\350<:\317\376\275\3309B\276\213m\261:\020\302\200\275\334\256\374=o\275\t=\277\255\201=G\245\217=\201D\331=\201\002\300\275\264\025Z\275La\310\275\274\017\315<\005\204\311\275\236>\t>\271TX\275\205\205\236\275n\0045\275\026\242H\275\217]\007=\021\004\330=\264>_\2754\232\242\275\023\275\371\275\331\376\226=\327\017\222<\3157c=Xr\244\275\322\225_\276\267G\324\275\334Fz=7\372\230\274\'\215\237=\361\026\232\275\023\3343<\233\255z;\013\375\034\276\013P\337\2757\263\243=S7\202\274\003\226\t>\201\364+\275\200\353\367<\033K\301=\277R\274\275\374\273\210=\230\351\315=W\232!\275w\232I\275S\212\330\274\353`\021=\216?\222\275\024{\222=\233\311-=]\327k\274\n\351\032\274?i1\2757\361)>\263\355|=S\267\334\275\225\205\334=\030\2167=\010\235[<\212\033\335=\241\357\215\275d\365E=\327\305I\276\tC\234:\311\014D=\361\342\213<\317z\031\275\361\373\212=\311\272Z\273\346\240\024\275\306a%=\345p\261=B\227\353=f\324\305\275\030\336\335=\215\203\344\273\260\241\343=\032\231\344<\227S\035<\032\301\032<\340c\226\275\220\264\303\275\363W:\276\001,\341=\265s\n\272\t+\031=,\350\007\276\005\372\006=\'$\215=\236\231E=\354\010\366<\370T\t=\005\027\007=PrA=\243X3=`r\207=\271\323\221\274i\313\301=\'!\213\275\274\327K=\315T$=\363\217\237=0\262?\274rt\347<\354\364\306\275&b\266\274\236\205\341<\337\306\374\272Zz\374\274\322\203\231\275\214P\331<\211\214Q\275=\267.\275e\200I\275\310\323\232\275\267\202Q\276\314\215\247<W]\324\274\277\037\262=\213H\353=\343\202c\275\330f\331\274\342\007/\276\206\305\325\275c\021\211\274\201\242\225=\241\016\263\275\362\231\211={\204\222\275\010\215\270\274\001\201S\275\251\325\253\274\265\033\252:\355\003\230\274S\177\203\274\357\275\214=8ZA\274\037wQ\275\377\316\000>\224\316A=&\0331=v\300\311;\252\274o=\276\213\022\276\305\2377>0\267Z<\017\344\023>\255-#=\364\022\205\274\231h\215\275)F\263=O;\000>\243\2130=\006\343\331\275\003\273\366\274d\333\273\275\363\247\324;\362\275\361\2751\024\022>\236\370\217=\235\227y=\021\177\246=\201Y\016<\256\222\r<\305R\307\275\034m\252\275=\323V=4c>\274\020\270\276=\257\tv\275\221\020\357\275_\230\353<\251\357\014>+\251\221\275P?\013\275\200\276|\275g\333\373=#\304\255\275\223\\\001>5\234\276\272\302\254\375\273\323\311\202\274,q\351=\337\247\354\274.F\312<\362\023,<\260}\317<\237\216\242\275+M\014\275\316\206\373<xL\326\274\355\032\237\274\244GI\275)S\271:\222\253Z=b0\336\274\236\314\215\275\351y\363<\312\0178<\324\205\315\274\246\002,=\211}\001>\305b\350\273=U\n=\343\2713\273a~\336=E\016\004>\036\205\321<]\377\'\276\214\357g<h\311\242<7\366\243<\001\260j\275\361\302\253=\010\3414>\006\236v=\177\347\021\275\237k\'=\001\"\027\276 \233\220\275\177HS=m*\217=[/\300\275\235\247$;\272Uj\275n\263K=\273y\325=\326E\240\274\276\2553\274d\201`=\340q\244\274\333g\276\275\236E{=A\302\027=\025@u\275\312:\204<\376\224\203\275\350\361.\272\217\350\202\274\2032!\275\313\321\224=\200+\235=d[y=\263e\000<\257\261\207;\320\022B\275\221\357\001>S-\006;*\3361>\351(.=\364\200\304=\345 \336=aX_=*/\245=\020_(\275\222\035\320\274f\3051\274m\225\226=$\315\000=\361iF=\305Y\200\275\221\244\372=\313^\333<\000X\370\275\264\256\002\276?\314\214\275\270\t\300=\354M\216\275|0\213\275\337\301<\275\204Z\367\275m\t^\276\020b~\275\347>\222=\016ZU\276\3367<<\"\004\030>\303\024\225<DXb\275\027\227O;\373v\005\275u\370\237\275b\354\357\274\231:\245=\025\037h<P\352-</\301\010>\305\034\323=\275\n\343=\232\r\217=E!\004>\266^0\273\215\251A\275\t\266\033\276\305\244\006\274;\275\n\276p\304\232\2749\311s\275(n\217\276j\026\223=\000/\213\275a\350\252<*\366z;\035\240\016\274\370\017\002<\0360\256\275\332\355@\275#\362\004\276pXw=\223\277\213=\274\007|\275\235D\265\275\376,\007<\240Z =)\006\262\271\305\r\234\273;u\207;\177V\001\276\032@>=\221Z!\2759\344\234\275\2213\003>\254\362`\275\211\230\254=cPS\276\316\003\001=\007\257\014\276N\tn=,\377\010>\3571e=T:\361<\270\326\n\276\231~\267\275\2459\003=\372\275\246<\315G)=\022\315\207\274w\257\007>\264K\222;\261\tC\275a\224\320\274*\323\262\274\006$T=,\303\226\275\267\371\312\274\350\344\212=\230\203\027;\247zo\275\375\200\324\275\351G&=0v\343=\006}\320\272\031\303#>H7\227\275Q</\276ZGP=\256\226|\275\325\036\273\274\007v\376<T\377\002\276\001\273\366\274zK@=(\245\233\274\rGK=\005C\361<\222\005\013<\335(\326<P\365\'=~\255\231\274~\006*=\360\207\032>\231\375\311\273\231\357+\275h\227u=\371e\215=/\317\265=Z\005\271=8\271\342<@/\021=\266\025&\276\203\305\336=\360|\026=\3233\226\274\341I\017=Zv\340;\322\206+\275j\306\033>\256)\021>\3751\206=\363HG\275i$\n=\31198=\316}\272<bA\211\275\351\374\351=\021\006o<\035\254\301\273\237,\222\275\206\217\252\275\004\031\265\275\035\333\261\274>\177r;\215\310\213\274\214x\037=\321\031\347=3\017\214=*o(\275\336#\346\275\352!\256=\265\253\253\275\346\222\036\275iS*\276]E\212=\031m5<4$Y<\301K!\276,\220\240=\357\255\334<\3166\243\275\330\035\266<M!M\275k\231\363=\366j\n\275W}\004<A\236\261\275\221\331\365\275<_\266\275\235\361\'=\313\014\303;i)%=\r\303\202\275\210\222\332\274P\235\356=\'\344\260=\347\240>\275\362\336\320\275\2228\205\275\213\027\201\273w\207T=\246\030\353<\275\010\027\275\214\272\203=Q\330\377\275=\227\304=i\337H=\204\361\371\275n\340\253\275Q&\223=W\243\314\275\326\277\024=\247Lc;G\317a=\257\2558=Q\262W>\024\327v=B\210\010>\2402a\275\242\321\226\275\354\344\266<O=\031\272\306u\232\275\346\257\221\274\213\014\212\274\227^&=\032\020\205\2755\320(\276\023\274\372\274\276\247\272\274\013J\333=`+e\275\204\340\315<\221\007{<^\326\354\275r\346\301=\271\204\037>\240\t\277<\225-\240=\253\330\217\275\231\260\242\275\201\377E\274\276\205\022\274:\225\212<\245\033\206\274\215:\267<*\247\217\275\335\004\233\275\007\341\357\275\255\035}=7Z\271\275sP\262=\241\032U\275\211\232\274\275\216)\024<\245\213\237\275r\211\245=}+\322\275\373\320\371;FD\216<;\034\216\274\034_\367\273b}\002>\206F\304=\307~a\274m\360\351=?^)>\226\224\252=\352V\014=\r\177\351=\367\213\324<h\033\024=\352j\223<\006\321\237=5kt=\267r\010\275\275\266)\275\3731\305\275,\353\244<\301\004I<\265\363\300\275\360\005w\275J\210\007\274\305\2164>N\375\263=\231\251\235\275\220\023E<\260\230%\274qJ\313=\026\247\376=/ \217<\256F\256\275z\246\274=\320\315\312\274%\326\203;-3\017>\230\337\356\275\275\250L\276H4\322\274S\354\302<\356\036f\2759\263\n>\330\232\261=4\3700\275\010\305m=\317\002\260=\026\026\252=\342\375\233\275\337\257\306=b\211\266\275\252\226\201\275P\254\332<\010B\200\274\277|\342=<p\300=\376\340~\275\372B\r\275\'\254\201\275X\224\312=~T\210=\276\005\227<m\230\305\274\347\334}\275:g\200=\007\250\367\275\276\n\323\274A\001\206\275A\355\025\276>\377\003>\2536\221<\"\263\205\274\021f@\276\021\001k\275\035\306\322;S\034\t\275\233;\255\273\035c\346\274\3173\365\275\207\332\270\273j\0134\275\230\201\374\274,o\021>G\017\245\275\335\210v=R\037\032=\263\036l\272\262BV\274\361\014I\275zt\026\274P\025\027>_\\\374\273\234\005\t\276\250\'\024<Z5\263=f\372\035\275\237\262\360\275\224\202\023\275\275\233\241\275\231Y\016\276\010\310\362=\276\332\251\275\356\237\001>s~\322<\003\321\370\274\223\2414>\r\261\324\272v\250^;\305\3553>\324\034\331\275T\353\376=\020\323\037>l\211\177\275\263\026\214=\253vh=\376\376\262<\362\214\033=\200eo=\030[\314\275\356\230j<\236\3072\274\317\225\000<\003\210.\275\t\367n<w:~\275\300\244\220\275V\374@>v\345\330\272\344\022|\274vI\377;\330\343A\275.\262\271=\241]7=\270\200\272=\244\231\202:\002\326Y\272\320u\026\276\200\340\230=b\033\017\2750!\375=\r\231\232\275 ;\233=\206\314\257\274)\244@=\205L\204\275\261\027\232\275i\277g=a\314\377\275\305\254i<\245\361i\275\315YD<J/j<\217\300\036\27511\274=\022\305&=\354\205\033;2\220\247</\240?\275\ta\253\275\323\025\346<Hy\356\273\337%\243\274C\230\204=\245\003\334= \351\363;\351\033\267\275q<V=\324\215\256\271<Z\320\273\257\204\037\276Op/\275\256\260r\275o\033F\275\335\346\200\275\343(\334\275LW\256\275\0372\333=\206i\357\275kRF\274\246\275\255\274\313\255\001\276D\002\215<\254\256/>\252\033E=_\032\2749\251\243E>\206\2706\276\332\370\036\275\036\343\330\274f\370\301\275|\212\247<p\035\034\275\243\302;=a\200\233<H\340\224=\021\242)\275\016\362\352\273\204\375J:\312\033\006\275Vp\363=\031\333\234\275\033h\277=\026\002\351:\201@(\275)O\035>V;\236=\344\332\033=\033\321\227\274\256\202\231=\025\364G\275\204\341\205\275A\204\024\274\003\322\256\274w\r{;O\r\200<\304(\307=B\025n\275M\356g\276\367WP=;\t4=<\223\006=vJ0=\366\216\335\275\276f)>\266\231:\273\"\226\343=\020\226\270\275\033\324\034<\210Y\027>\272\374\332\275\307\300\030\276\211\346m=o\355\253\274\265\263\212<\231\276\370\272\232\211\261\275\177b\330<HnC\275O\014\267\275\254\357\023\274`_\350\274sO]\275;\326\226\274\nq&\275=\3632=\246;I<\272( \275{+\240=\204Im\275\210\3448\275\257\241\252\275\273\357\221\275\366\300r\274P\"\374\275\230\277J=\357\323\017\276\3509\347\275\271??:Y\236\364\272/\200\364<\355\013q=\313}\001>\221Y\207=\203/\233<>\354\267;\340\253\\=:\257\245\275\016M\303=]?\000\275.\276\377<s\204\002\2769\310\304\274\215\307j;\007\325\213=\030\"\277=\345\233\327\275q,\267=\030\330\262<\305\013\307<\010lQ=\020e\212\275\211\227(\275+0\266\275\260\325\227=\0022\256\275t\177f=\230D\033\276r#d\274\231h\220\275\312\001\360<C\"\310\27420\246\275wu#=P\310[<1\323\022=\225\335\262=\303\030E\274\307U\217=\035\267\216\275Wr\335\274\366J!\275\2223\027\276\'\215\024<\033\202\222=W\366\273\274P{\355;/o\214;7\276\037=\365\317\267=\014\253\336\274(\236\347\273\341jC=Xb\337=Vs\300\275/\374\253\275\240N|=\205\276\013\274\372 \265\275\370\013\260\2743\273\352<B\017M\275\351f\201\275\266\231\030=\361?%=\000\241\016<3\363%>g]\367\275\034\000\200<\363\207\311<\001:\273=&\t\020\275\227\237\224\274\264\202\264\275r\345$\275\005\032\222\275rX5\275c.\223=\2570\203<\353\247;>\'\2413>\276\372\031\276\024\223\373<\231\325\261\275\354\023\203\273\343p\333\274\327\230\027\275\227\326+\276^\301\004;\3443\030\276\345\251\203\275\010\211.\276\224\276d\276\036\333J\275;\332\353=\225K\211<+\021\013\275\306UY\276\364\227\033>\377K\365\274b\020\232\274\223)\177\275\336\243T=W=]>\312%*\274\370\357\362<&\227\201=>@\346\274`\3557=_$d\275\254;\340<\025\214\351<3@\360\275\271\344\377=\353\2333\275\214#}=bO\323=\024#>\275\'!y=q\210T=\325_\257\275g\265\363<\371\255\007\276\213\2534\274;\212\016=b\231\216<\270\372\214\275Qa\207<\232\232\265;\206\337(>\300\353\373=\325\240\020\275g\016f<l\273\310<\215x\263\275\177\304\261=z.\367=\313qK\2762\250l\275\\R\277\274%\232\204<\356\267\034<\261\033\341\275|*\032=0\032\257\275l&\230<\307\034\035\276\031\326\347\274\312\312\007\274wG\205<5Im\274#\310B=\270B\017=\251\367\002=\230BE<\367\266\214=!DI=\263g\014:\313\006R="
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 120
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1178451
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 26
}
