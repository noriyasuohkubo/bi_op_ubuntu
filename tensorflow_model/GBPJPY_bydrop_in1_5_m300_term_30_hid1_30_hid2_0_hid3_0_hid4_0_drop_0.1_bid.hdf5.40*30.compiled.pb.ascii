node {
  name: "bidirectional_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6134824
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/forward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_normal/mul"
  input: "bidirectional_1/forward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\002d\343=\362\356\033\275\224\245\223\275\261\353\353\275\303\307\010>\266:p=\271\366\224\275\300\233\274\275\203&\314\275\242\211\310\275\227E\352=\224 \222=\321\371Y=\3676\021>\311}f>\204\")\276\3133F\276\221\'\362\274\007\301\030<\232\370\032\276,\032\254<\364\216j\275\343\237\330\274\377\351\303\275L\311\010=\204\275@\275\221i\233\275\213\3574\276\220=\363\275\376,\210;}\024s\2752!\260\274\272\266\215=\354Z\253\272\253*\200\275\335\372|<\331\261\371\273q*\030\276oc\342<K\200u\275\224\\\200\275Ob\203=\3048]=\315\262\307\275\364A\370\274\236\201\274\275Z`U\275e\377D>-\335`\275Dm\322\275N\314\337\275)\036\002>h\240S\275\320\177\"\275\365\214\242<,\375\244\275\017q\355\274\227\033\201\275XUq\275\202\247 \276o\337\262=\364\371\366\274\257\271(\275(\364\256;\244\"N=e\312L\275\263\371\033\276\253l\201=\304@\320\275\343\014\027\276\270\227\361\273@A:\274\037C\221=r\322\270\273\343:F\275\230\242\206=\2768\350=S\001\222<P\370d\275\325\216\034>\203\237\220=z\213\376\275\223\331\201\275L\264g>\210*6>u\271T>L\250*=VV1\275T~Q=;\206\213<>$\367=\275&\212;\036\000\036=\n\200\215=O\210\260\275K[\245=\347\255\371;|H\265;q\247\371\275\377\367\202\275\017\201)\276d\032Z=j\220>=\357%\004>\372\234\316=~\343\361\274\334\2553<\277\242\315\275\270\t\360=\270\361\010>\341\327\232=\345\276\242=\024\232\t\274\347\022:\275\351\324\365<\364a\235\274\270@\217=\020\036\213\274\363I\311=I^\366<\356\363\364<\241\365\"\275\002\341&=\332W<\275\242X\350<O.@<\323>_\274,\001v\274X\016\243\275*,\345\275\332\372\303=\346\377\231\275\245\222\270=\233j\260=dO2\275\312/\207=:\023\037;V\224\371\275\353\274\021>\300\306,=\320\232\202\274\255|\332=\007\303\014\276\244S/\275\270\245\356=\276\034g\275\365\224\361=\327\212\254\275\235y\333\275\177\347]\276\377Pv\275S\335\222<\252\257~\275\367n\017\276\371@\204\273\342[u\275[\217\362<\354#i=%\022&\275\222\215\006\275t\267>\2767\"\341<*Q\300\274\265y\263<\340\300\207\274X2\330\275\217\317\275\275\343\340\n\276:s2\276h\244>\276\261k\014\274\365\202m<:FU\276\377\364\367<JU\005>\227\250\351=\245J\350=-/\013>\304>\361<i1Y\273<h\341<PW\361=\237\232\355=j\214/>S\366\267\275\377\272R;\333\272\020\276\024Tt=\260\026\227=\323\300F=\243W\203\275Ga\241<\213\376L\275b\270\215\274\213\252`\275\2707\203==\226#\2761\003G\275\032\342\317\273\233\362\374\274\226\305k<\257\324\224\275\377\232K\275\370\021\232\275\027\365\202\275%\312\223\273*\216\206=H\377V>\216\363\256=\'\317\"\276\345,{\273\332\373\233=\2560\210<S\332\275<\022\212\365<\303_\332=\366\367\004\276\361\234/\276P\202]>P4h\275\262\321\021\275.z\240\274\305}F\275\330\002\205\274\257\3732\275\037\370\252=\215\233\245\275\373\272}=\374\031\253\275\343^\341\274\356iK\275PAd\275\203\214a\2753\034?\276oV\262=!\271\265<\031\357\244=\024c\213=\243\233\347=\327\240%\276\322\305\034\276\257\261\n>-K\261=\356\331\006>\330F\310=\345#\037=K(\304=\265ov=\242x\237=\027\216\373\274Y2\320=\364\335\340\275\355\3663=\313\006==\336\213\035\276\022\267.=\337\333S\276\345j5;\300\221\000\276\306\315\233\275T\356\032\276\033J%\276\033Y\251\274\244\001B<\242\210p=\232`R\274T\204z\2753Y\026\272\343V\200<\352w\r\275\271\243\311<\203\302a<!\227\350<\267_D>\014\373\026=\255\210\205\275[\"\255=]\204\007<\263\037\r<drf;v\006^\275\000\026\263\275\200k\261\275i\006\334\274\2269\332<\245\221*\275\245\312\367\275\222\016\250=\377\347\370\275\313\231L<D\207\016=\302\245\n=\305\356\210=\244\2450=\375q >\030\332,=\235H\373<\352\032\333\275fX&\276\3572\302=\207\254\340<5\342\205<:\222\321\274\333\326\016;ts\026=\253{\372=)\2659=\270\002\007=\243?M\273\201\274\326\275)\213\245<\365\236\244\275r\333~=>\277\031=\226\210\017\275\374}%=\323\220\322\275C&=\276\206cf\2758\3474\276R\271\005>H\333@\276\021o\215=\261\265\304\274n\270\357\274Ed\201>\205\231\223\275Z\324\234=\372,\261\275\301\r\254\274X\'\365;\013\005\002>y\250\021>09\220\274\031p\022=\324\327\353\274|X\347<\\\272D>\000-\301=\324(D\275\327\035\271\2748%+>@\006;\276;\252\250\275Y7\365\274 \365\241\275{\3715=3o\001>C\370\327\274\276\346\001\276\007\223>=2\300$>HW\377\273\034\323)>YE\304\274\224\\\322=k0\244<\204\000\031\275\335)#\275\311\343N\274\200\025\203=\330\240\027=\221\254\336=\323\261\243\275n<\256<\316\265\224\275~)j\275\t\314\021=\261\322M>\264\372\t\276\232\235~\275\207(D<\310\304&=\027\206)\27565\323\275\016\364w\275\215\210h=\235#\222=D\365\010=\rU0\275x\276\"\275!\213\003>#x\261=4D[>\327b\022\2748\004\301\275\323|?\276\347V\222\275#\275\264\275\306\245\257\274?[6>\222Qj;g\\\336;i=<\276Y\016\373=\001m\277<2\256\027\275V\342,\276\263~g\275\010\005\354\275\247\351\305=%\261\010:\373~\203=,\035\033=\365\343\360==k\265<x\010f\275>\"\256\274G\243\373=\362\371q\275:\334\006=\312#\354\274\037\0045=\'\241\373\275\035\370\017\274 \204><,\037%\276\224Cl\275\243\277e\275\344\350A=w2\301=\324W\250\275\010}!=\262\334\252=\376\200(\276\236\316\213\275S\221\006\274\',@\276\273Q\232<\235\\\242=\362\001\314\275^@\261\273Tv\036\276\006\333\305\274\205\347h\274\003\270\274=9u!>\302\026\025\276\200\016%<\000\337d\275\334\032\212=A.\274\275|S\363\275\201:\273\274C.c=z\\O\275\374\270\000\276\352\275k\275r(e\274\262\177<\275U\345\333=8x\317\275[\004\356=C\260\255=~\322\217>t C\275\243n[<\230\271\341\275Z\343\027=\030\272\024=M\225\007\276\365\366`\275\313\261/\275\241\270\035<jW\332<\306\017\212\275}\333\t\275\3046\241\275\210\332N\275\n\302\215\275-\226\222;\0167V>\314\233\205\274\003\272\305<Q<`=\214\202\010>\310\014\275=\303\252\324=\361A\353<\252\273\031\275\255\247\032\275\324~\262:$z]>|\177\353\275\373BX=[\332\326\275\020\371\262<\201\010\367<\213@\030\275]^\203=\226\250\330<!\003Q=\243K\335\275\274\313\220<\237\200\373<x\235a=S\250i;\246\326r:\013\000u\275\354\311\030\275\272}\016\276\325?\246<\007\272\314\275\223\346\001\276Y\205I\275\326\217\231\275\211V\234<\201\241G\274\026\241?=\005\217\225=\226\207\003\275\263\203\246\273\216<\204\274DlF\276?\'\207\276\227\206\373\274\315\363,\276\033\353\237<m*\311\274]\337\005\276\244eR>*!/\276y\222\210=omh\276\002bl<\353\025R=\337\366\027\274\'~c=\307\244\233:\027\346\264=x\234\265=\254\214\332<\325\000\203=\354=\342\274\310\035[<\256\307\246=\202\024v=\256\262\200\274\352\263\340<\251=1\275\201\343\272\275x\037>>YF\250\275\332\341*\275\221$\033\275CO\t<aT\236=+\365\177\273\232\004[=\343T{\275\206\010h\275/fI=\265h8=\324h>\2752J\362\275e\365\337=>\330\030\276*\244\251=,\262U=P\246\230\275\355\204+=\016\302\217\275\3071F\274\037\215b\275\367\3623\274)/b=\301E\323\275\347\373\313<\226q\346<\242\177`\275<\270\204\274\336|\373\2751\217\224\275\034|\276=\202\301\375\275\253\203\\\276\216{N\276i6\231\275\244\364\306\275\ne1\275%\007\215=:\027\341<W\344\254=Y\241\262\274\373s/>e\016O=\310\033)\274\016*_<\212\250\311\275\344\032\000=\264\324\216\275\217\320\r>\342\005\333\274\014{\324=\223\004\273=\t\243\202=\322&*\276\231\026\221=\264\240q>\023~S\274\207%\016\275\023\377.>\274\221\305\275\n\215\252\275E\373\201\275o\231\266\274\250\211.\276\r\353\311=\003i\345=\213D =\300\224O=@N\005\275\214\222\242\275>J\254=\337\252c\2759\243\022\275\245}.\275\251#$<\3614\244\275\005\270h\274\374\324H\276\254c\325=\005Dq\275\340\335\277<\245aD\275H\030\322=f\214\327=\315[\316\275\302)\250< $8\275\221\253\225\275I,m\273\020e\243\275Z\222\216\275M\321\220\275\210\017@\275\005\337\310=\332P\t\275\264\233\372=r>e=@\333\032\276\301+\252\275J\353I\275\250\027:>\000\020\034\275\346Z\251=:\225^\275\236\267%>*\232\001\276\345\234\360=\362R\363;\033{\t=\244?\020=\215\022\016\275c\177|<\247\366\373=\314\000\035=\004X\237:\271\335/\274\226d\224\276t\335/\276\035z\261=T\234b\276\t\227\003\274\325\264\307\274Y\260\354=,]\r<.\354\027\275h\304\337=\214\261(;\234\\\233\275\001\t\302=\203V\251\275\240|/>\005\205c=\'\016O>\227WM>\002\320\034<%\'\026\274\214\013\314\273\245\024\316\273\3565o=\366\354\257\275\204\257\260\275Z\224\367\275\024=\331;\022\331Z=\345\031u\275i\376\213=\327\270^=\247\374\336:UMN\275V\023\264\275Eg/\276\2707\235=8\034\013>\343*y\2749\267^\275%\316\306\275W\322&>\023\016\267\274\350\361?\275/\377\270\275\306\347\232=n\037\314\275\016\251\302\274?\2656>\334-\350\274\244\365O\273y\240B\272}\2334\275Rd\326\274\302\035\004\275o\223z=WX\274<\236,\001\274\001^\344=b\016\"=\244\301\026=\0313\213=F\226\005\276\032\035\026=\227uS\275\275}\033\274=X+>\367A\005=\373O\261\273\254\313\221\274\245\325 =\213W\233<\212\275\021=\250\224\266=\232X!\275p\375\245=\273\316\253;;\357\346\274>\377\235<\243\343\217\275w\0028\2767(\321\275ak\237\2755+.\274\373\'E\275\371+\315=PY\204>A\t\254=v% \276\262B\026\274\332\246\014>O\313S=\214\r\373<\207\256\037>E\321H\274d&\002>\245\023\211<\331\326B=\252\371w=\216\343\373\274go\245<\000\371\223=I\221\336<z\351k=\334e\224= =\202=\322\032\332<a\006\341\275>\004\002\275MkR\276G\031?=i\340\003=\342\365T\276\036\302\227=\243U\032\276\206\215\356=\254\314\001>1\334\237\275\337w\262;\305v\021> \265z=rB\322\275\347sO\276\021-\212=^\315\332\275x\233\304=\223\216_:\352\315\022=\326\235\2718P\361\017\2764\307\251\274\336\330\312\275\035X\324\274m)A\275L\\V\275\330\324&\276\006\224\022\276\342Sn=\237\330\232\275\003W\216<\031\212\221\275\352k\212\275V\213\252<Ea\235\273\332\025\023=\314\263\271\274\217\376\010=\232\005\352\275\340\372\003\275\206$4\276\376\325)\275\370\213!<|\316\274=\200$E\276B\"\275\275\361\316\206=\010\252\266\274q\212\300;\026\262\201=\\\221h=\027}B<\244\371]:rV%>s\001\020\276\223\257O=d\350\222=\016\344\354<\034\245\204\275\t\\\031\276\247Nf<a\221\027\275\246\313\256\274S>\263\275C/\017>\034\257\376\275y\374\300\275^\273\027\275\t}-\276\321b@<>\314\363\274\343\235\232\275\223\010\006\276\350 +>\366X\214=\354\023\276;V\232\345\2756\222\033\274\247\367\222\275U\300>>\226\361\252<\232\363\200:\356\370\335=\244\256b>\030-\245\273s\274\r\276c\315\320\274$~\206\273\022\271!\275\347\311n\274Cd|=\\y\007>\351\266\007\275\326\366\202\275\335\322\263\275\357\357\'=H\352\036>5\275\373\274qq\023=LN\005=*\332\231\272\334\273~\276Z\251M\275\232\371\"\276\357\257\366<_\270\200=\035H\263=\232\235\314;\346\205C\275\221\024->\207\347\340=\202\314\312\274\243;\271=\2611D;\200H\224\275\246#A>z4h\275Q\036\376\274\223\034g\275\206\217\240=H\200\263=(`\361=E\237\014\276\206\200\362</4\352=E\005\033>\026\330\333\275\241\004\310\275:\177\267;\203L\023>s\007\335\273\026\272A=\222\256\340<\262\202\235=\375\214\016\276\261\017\372\275Hp\003>8\362\340<c\311\357\275y\234\027\276]X\032\276\365\376T=<\326\020\275\230>[;\010\301\252=\3160\343\274\354\357\310\275\273\256\233\272\321\373\254=i\200\375\275\265\203\013=\274\342#\275M\025\313\274\345\222R=\377\3244\272H7\230\275\334g)\276\265A\020<\301\337\376\275\205e\332=J\272t;9\341w<\3167\003>Oa\211=]\013\305=l\323T\276\276\340\230=\205a\215\27539p\274c\024\n\275K\335\322=\300\261\224\274D\207\025\275\004\362\305\274\307\327.\274\\6}<\230\217;\276^\276d\275\025\365\375\275\250\001\353\274\265x\005\274\320EZ=\267K\233\275;\301\022\276\322+[;tR\334\274\"\332\263=\227h\254\275t\332\'=^@\006=\007\322\210=\020\356\212\275\353\252\220\275\036\347\006>\200\021\214=\306\253\232\275\037\003\306=3\035\253\275\343\017\247;`\020\271<f\025t=\314b\367\275\\=\223\275T\030\377<\331|\320\2755Q >\025\336\017\276\262\277,<\201\326\222\275\267\357\000>\017\320\222=\325k\325\274\'\356C=\360\334\001=\035\206\247<\320\355\247=|/\301<\021\240I>!\324\373<\005\335\302\274\263\314*\276\330\206\366\274\264A\311\275\366\252\215=\004\317\026<\217\376\233\275\032\362l=\365{\304\274f\367`=\010g)=w\022\216\275o\261?\275\234\211`\275Wb\370\2754m\220\275\270\026\'\276\357\372~\275J\357\206\274\252X\020\276\303\232\262=z\2368>\326g\332=/;\274=(%\312\275\2170\303\275\216e\213\275]\312\020>\032#s=#\202\277\275\271\035\347\273\363\210\024\275\252\2147\276\233\033\r\276\265]0=\321\221\341<\033\335\223\274\010\373\356=p\314Q>(n&\274\205\201\025>\'7:=u\333+\275S\326\227<\223\250K\276\310\335\214=\236\344l\275\002\261\361\274\031\240\203=\303\031\'\276\330\tM\274D2%>\3372\335\275.\307S\275\2763r\275<\221\272\274\3022\354=v\0210\276m\035%\276B=\036=5h\005=l5\006=B\364*=\264E\262=sA\032=\3253\240\275z\267\010=P<\335=\254\251\206<2\370]\275\262\370\016\276>\374\225\275J\324\217\275\3005\364=\3578H<\367\322c=+>^=d\213A\276\240\315\t>F\016\377\275\031\273\347\275\331[c\275\310fO\275\230\214\026;\036\362\310;\234\033\001=\017\254\217=A\215A<X\303<=\250\326)<Y\227*\275i\353\024>\316L\307<\341<\303=\362t\310=\357\317\247\275~\3432>\325\202<<Q6\231=\262\321\323= )$<\0200\267\275N\221\234\275Wo\201=;~3\275=\320\250\275M\273k\275\2750\016=[\231\314\274G\357\327=\222\024\321\275\335F->\312\314\307;\036\3021>Q!\361\273w\301J\274\360^\362=*\ra\275\2527\357\275\204\027t=!\230n\275\304\214\200\275\3111\241\275h\242+<%JI\275\031\205E=\205\033]\276*\353\227\275\333\255\000= /\240=\246\301\207\275\2150s\274\350e6\276\n\021\331=\301y\302\274\375+\354=\013\212\022>(\365\014=\273A\005\276s)F<Q\326\034\276\376\220\n\276\376(\n\276\206Q\210<<\374\274<\231b\362<\035\227\343\274\360I\241<\275\322\275<\321\313@\275\264\353S<\326[\213=\210\367\377\275=A\245=\"\361\334\275\206R\262\27551\375\275\335l\327\2755\244\014\275SZ\237=3\350z\2750\335I=-<M<&\346\276\275b.\251\275]\337>\275A\033b\275\230%t<\324u\332\274\343e\321\275\347h\t>\343a\216=\267\267\262=\316\323h\276r\231\206\274\365\300m={uC\273\362x\005\275\3546\033>\257f\017<\006\230\345=;\354\020>\014MN=VB\222=\303\316L\275\253\200\017\275\027\300\023\275\327\"\220=\233\213\306\275+\374J\275\335J\344<>]\323\275\213\320\367<\332\375A=\206\213\027>\027)k=;\216|\273\365K\307=\032\'\330<\005\334\211\276\302]\257;Z\220\302\275L\367\263\274\320\245-\274;\303c>\024\331\357<\346,4\275\211\267\346=\212\242\325\274\365\010[\275\266\275\014>\332\271?>G\3454\275k\330J<s\200\021>\177w\236\274h\2343=\005\266\321=sh\275=\367\030\270=v\245\332:\234O5\276\354/\227\275\341\206\'=\264\373\220\276\327\264\231=4r\231\275\"1Q\271[\247\'=\313\235[\275`3\257\275\275\236\333\275\233\034\317<K\214\300<\360\271<\275t\266\203\275\203\0068;\341\013,>O\257q>\263\305\270=E\376\247=\345h$\276N\253\026\275&\'\003\274\303\321\020\276\245\215\277\275f\203\326\275LE\214<A\037\316<\342 \263\274>\232\253=\343\366\361=\006\351\217=\2019)\274W\251L=\361\304\307=\233C\014\276]\354\213\275\264\232\006\275S<\002>\225\3453=\345\365\013<D\303\203\2758\t\274\275|\263i=\255\227\017>c\346\021\275\256&Z\276\213\355\010\274d]\321<#\311\204=\027M-;;\315\225\275\021\022g<\343\207\037=D\023^<~\3355\275Sm\n<k\305\177=\267\3101<\277o+>f\0321\276\331\242:\276\333\247B\2751\016\362<\036\300\370=\221\242\227=\255\032\206=\177\267\231\275r\323\307<\\^J\274\373W\250\275YS \275\322]\234\275`\215*\276\376\337\227=\2217\325\275\370\260\235<\205g\257=\252\313\215\275\237\027\014\275\235\302\357;6\372\360\275\257n\247\274b\322\276\275\202\362\206\273\032>1=v\221\304\275\320y >\277\266\225\275G\304\341=\007\2008\273\273]\231=\356\370i<hG\221<\303LF=\357\247\037=I\323\307\275:\242r=_@\230=\233Z\262<I\\\013=b!F\276\022\211\266=\226\352\203\275i\2403=\345\377b<nu\\\274\t\363\362\275\243*\205\275;\312\324<\256\tX=\0352U>\t\272\024>\355\n\360\275\220\024[<\336&?=\363\375\216\275\224\367=\273\306\333\177\274\203\373\033=\022|\225\275Cz\230\2736\262\026\276\022\226\t\275\353\2638\275u\335\310\274_\305\375\275\024U\225\274XW\204\275B\333A\275Ry\261\275(4)\275\263\202<>Z\023\027>\235\240\005\274\305\234\220\274\361B\210=o1?\275].\263<\200\347\242=XK\265\273\301\345U\275\304\233\216=\211{P\275\016\235\357=\210\002=\2767\323$\276\361u]=\312\\\227=\351\337\227\275^\273\016\275\234\201\203<fF\307\274\363\023v\275\236\301;\275X\330\353==\334\026\276\372\007 >\r\324\333\274\265\265T=\214\323\016>\333\237/\276=\000\024\274\037{\"\276\225\325\232=\342_\027\275\007\260\034=\376\265\267=\305sx=\316\261(\275?0\241\275i\030B\275|L;\275\233\243\316;\032\365\017\275Q\320\214\2732\211\230\275\337DQ=\031\310.=\270\014f=\303\253<=3\2608>\250\377\276\274\246\353\021\274\214\210\035\276\300\'s\275\016\205\374<P\t\225\275\255\355\227\275\235\250\201=\323r\320\273E\310\212\274\362\363\354\274#@\305=|\0162>\224\222\203\274d\215j\275\231\000\261\274|\354\003\276\352\324\347<3\360U\275\307\003\330<5\336\002\276\360@\001>\355\006\273=\330<\020\274\021\264\025>\275Q\235=8\312[\275OG\340=t\251{>\266\226\n>\325\227\221\275\362D\375=\262\344\376<\225\304\352:<@\275\275\370\021Y\275h\'\202<U_.>\311\276/\275\020\271Z>\2631F>u\317\212\276\025\010\235=3y\354=\026\337\213\275\211P\035=\322\002\010\275\306q\n\275\314{Q\2746`\004=\367\3516=\251\\~=\036\246\346=\017\351\000>\260\326\312\2743\371\360\275\232\377\213=\246I\021=Q\226b\274K]\303=\251\225\210=\'\215\205\275/\355\326=9\005\215<\034\344\243=q\262\210\275\335\351\014\274\376\321\200\275\303\nS\276.\205\021\275\243\256\305\275\303p\013=\360\343\252=\222\212\314=h\3174>\241_\362<\213\242x\274\037\325\334\275\300\2516>\231\251\205=\26208=5>S\275@)\221=\216\312\351;\243\320\316\274G\206\353<\3057\213>\224\264\213=\275o\260\2755\373\261\274\225\301\256\275\242C\000\274\302\252l\275\233@\"\276\362\363\207\275\345E\272\275\025>\327=\346\242\327\274\345\024\302\274\"z?\276\231V3<\2326$\2764#\353=\306\027\220=+\031\243<\036\214\022\273\200\005\257\2741a\232\275\003y;;\270\361\353=\304!\016\275\251?\344\273\310\225H\2765X\355<\245%\034>\026\002\223\274\271\202\356=\304>\266=\346E\t>\263\351\027\275\005d#=:C\033<\240\342\256\274+\224\037>>\346\233=\300\272\265=26!\275\342%H\274%\341m\275\244\245\317\275\n\360\362\274<l\277\275\017\346\304;+\216>=,Qv=\320\303\013\274\376\322&\275\013\264\203=K\024\016>\226\265t<\250\210\303;\241\026/=IG\222=\n7\352\275\255\305\270=\033\027s\276\342R\236\272\2557w\275+\021\027\276\243\365\223\274`X5=\321\235\307\275v\343U\276\232]\305=\037\251\236\275\343-)\276I\364\034<K\337\222;\337\243O=\003E\376=\020\r\035\275\276\212D=\222g\245=\033Y\254\275\245\321\200=\354K\341<\325\267\021>\016\327~\275qC\256=\366\264\362=6\301\340;E\3260=e\356L\2754\327\235=i\2066=a\026\326=s\177\201=\316\016+=_\032s\275Gd\346\274\374\005\245\275\0301\232;\225\302W=yP\371\275i9b=\237\006V=\246\200\036\275\272\372\277<Hq,;\344t\222\275\356\022\020\276\362\351\342=\033i6=L\274$\276m\003C=A\204\027>x\233\337=\323\363\316=\234\371i=_kq\275\014\222\273=\312\032\221<\021e\002\274\310&\207\275P\302$\275\246q$>k,/\274\374\347I\275\315C\034<\2309\276=\360\224\322=\365\303\001\276\373\351f\275\033\321\265\274\227!->O\250\213\275b\2241=\n\003\026>$^?\2764W\223=e k>\010\247\303=C\326\267<u\032\232=\225\200\202\275\357\377b\275\240X\235=j\252n\275\373\254L=\035\225\210\2756h\375\275M\356\370=\302O#\275\230\306\353=\311-v\275\331Y-\275\365\257\\<v\033Z\273\212\267\251\273F\340\211\275\304\214\030=\350\307\023\276\361\226\003<\035\177\242\275Zp\331\275(\330\214=j\000_=\371\237\373\274u\026\003\276H\365\030>\216\306\313\275\n\240]=\347};\275\276k\247=\177+\247\275+\320\007=U\246#>\343o\261\275\003\237\361<\024\310\336<\262\212a=kF\r>.\033\271\273\022\345\247\275\245\214\266\275>\227\037\276\217\223\006>7\204c=L\\\336\275\252\370\376<\000\223S\2769\212T=\177\342\026=\211_\217=\252~-\276\010\254\363=#\356.\275\036u\321=\037<[\275\311+c=\347\341=>\202G3\2758\320\007\275\344\025\355<\301\363\277=\325Dx>\214\321\006>\232\222\356\274\271\216\002\275&\027\271\275\353b^<\256\274\305=\325\276\t\275p\036\"\275\373\213Y\275\220}\006>\330\303\250<\031\276\233=V\311\247<\207\'\010\275\312\263\210\275\223W\217<\370L\020=\023pQ\275\277\277r\275k_\031\276=\232G\275\372\322\351<$=\353=\370L\350;\3075\027\276J\0312>\356\364\354\275\267\007\215\275\227W\231\275\333\305\236\273\250\274\331\275)X\372=\240\345R\275\256\275\240=\305[\360=\343`\343\274\313\375j\275\246\230\025\275xw\212=\014\202\203\275\314\\\314=\022\205\332\275\202mC=\257\"\353\275\251!\036=F1\246<e\247X\275@\025\203=O\'\022\276\315D\325=\007~~=\244\316\370=c>:>\214\335\247\275x&\\\274v\375%=p0\363=%\217!\270\014\003\020>*f\324\273I\004\022=\254.\215=&\337\201=U\005\025>y\217\352\274\335U\344=\372\370\257\274\365\356\303=\016\206\300\273\312\271(=\256\333\000>\026q\316\275\202\201\016=w\305`\272w\263V>\214\233W=&W\374\275\217\351\330<BBW=\236\\\236=\271#\246\274\370\306\242\275\352\375\024\276\274-u\274\035\220j\276\002l\246\275\227\212=\275\361\223\222\275\233\302\232\275Rv\272\275[\023p\273\210t\021\274I\016\004\276t\201\272<Z\217\005\275O\267\252=\'\231\023\276\003\360\"<\243\262\244\275h\003\016=/0q>\363\266\001>\347\275\226\275\347\212\207=\233\332\223>\353\'\205\274\367\351\001=w\217.>\356\235\231=\\\373\301=\221\276\200<;\277+=\306@\233\275/(V\275\315\342\001\276v\337\216=\263E\206=\242\377\270\275\211\032,=\033Y\341\275\032>t\275O\004\221=\314\262I<\004\370>;p\206\247\275-\243\302<\241\025\035;\225o\367<\017`\220\275\321c\376=\266q\273:\213\245f\275\302z>==\024\357\274\274\227\211\275\247_\214\275\352b\252\274\203\\\024\274\t\002\226\274f0\314\275Ix\301=\335$\336=\214\364i\276F,\226\275\322\246\355\275\314Q\314;\027e3\276\261z,>ozY\273+Z \276\257\'\300\275\211\220\352=B\267\036\276f\257C\275\035\276\010\275\273\223V\275888;\372S\315\275\226B\257\274\320\025\275<\240\211\362\274<\007w<\265\267\344\274W\362?\275\205\027\227\275#\350\305=\002\347\275=\236\3652\274,;\247\273\020h\200\274\277\242\342\275\272g[\276\320\0258< \034(=\204\251N>\375\227\207=\357\264_=\352\275\205=\327\224\000=\310\001\302\274*9*>t\020B<\264\246\020\2769\353\032<#\300l<\226c\233\275!\310\n\275\326\200\367:\364p\002>[\221\200=KjI\275aO\001>\303C\221<\273\276s=\221\204&>\024Yw\2756\2201>w \206\275\354\003*\276z\024D\275\204\371\263\275\235\3105\274H1\370\275\326f\251\275\265\372M\274\215l%>\366;K\275\251\313\363\2758-\010>;1\007\274\372b\347\274\3334\254=\242\261*\275\362V\333\275V\247 \275\234\267\241\275\261\372l<\302\215l=}\035\335\274\337=\231\275\364\236?>\351C\345\275\273\367\225=_\241\322\275\206\366\001\276\270Qc=\035\375\322\275q\203;>Mj\257\275\365\266\203\275\223I\017\276\250\311\315=\007\344#=0\367\245\2756\312-= \220\277=\262C\240\275\214\264\021\275\360\235$\276?`\250\274\274\304\273\275\031:\010\275}3\332\274\3077\366\275\231\322\242=[L\226\275$;4>R\2609<a2\021=\201,\243=\022R\242=\2319\310<b\256\201\275Hv\215\276\221\340\216\2754 \200\275\246\326\017<\205\214\213\276\024p\364\275k\327L\275\375\035\272=U\251G\2745\357\006\276\357\374\303=p{d\275\206\337\347\274\212;\013\276\013\353\353<S\377y\275\270,\204\275Av\035\275\265!\217=\356t\312<\337\005T=q\027h<W\214Q\273\343\365\332=\244\351\n;2f\271\275\362\311\016>\205;\300;\237\204\212\273}\354\266\274\332\317=\275\325.\370\274G;\013\275w\022\333\274(\"P\2755\373\234=\257\341D\276^\031\352\274\035\305\360=SQ$>\212_\025>\023\276\241<I\245&\275\207\300\003=\252\344*=\256\320\255\2755\205\034>\035\010\000\276\273\376\365=\212p\266=w\365$=\0143\231=H\247\237\275\2065\314<\221@\371=!\303S=\242\307\004\275\303W\252\275\245\305\022:W\310g\276\301\232\251<Fp6<K\t\217<\335g\352\273\215\034\026>\003l\247=\337\364b\275\307\037]\275C\354o=\310\302\020=E\251\256=\312\177,\275+\027\310\2751[\211\275\272\335C>\236w\324=kt8\276\335\016&=x\354j=Fw\001\276\366\361\236=\222d\253\275\252\202\365\274f]K=\206>\'\275\352h/>H+\373=\267\004\341\274\002a\035\275\221r\r\275\360vA\275!S\307\274\326\330\245\275\234\332\244\275\007r\002\276\000\344$>k>\271\275:\031\253\275U\231M=Qh\373\275\222*a\275\3461\020<\311\020\222<?\325\225<\350+6;\311\0275=h5H>3\247 ==\272\240=\263\2542\275\336\315\010\274\2161p\275\200\353}\275\\t\231\276\353t\016\275\304q\r>\301\310\026\275\312l\274\274\226\330\261\275\272<\206\275c\224\222\275\303\264S=mj\224\275\244\301F\276p\257\237\275\023K\024\275\262v\343\273\2716>\272\244\224\t\276\363\022n\276\241\362\354=\244\271\302\275\245%\331=Vi\214\273A\3233=\225g\373=\007\031\267<\363 J=W1$=\016.\224\2759\220\246=\352\216\236<t\315\274=^u\352\275\306O\\=\333\024\211\275\030\256\345\274*\322\210\275a\007\317\275\367_j:\240a\034\276\376\033\002\276%xk<\336\255\020\275\373\201N=I\2472\275\375`\215\274P\0340\276\340\244\345=U\320\001\276\017\253Z\275\306\\\032>=\253\023\275\230\034\220<\357\035\351<!9\305=%_\352\273f#\035=0\352\205=/+3\274\002\337\036\276N\307\245<lK\353=\275\010[=\374<?\276\231L\332\275\267S\202\275\327\3261=iP\033\276=\021A<d\346+\275/\223\326\274\240u\027\276\376\241|=\355k\025>sV0\275\314\027\346=t\260\020>6v\301\275\257\277\200=\006)w\2753\250!=t\241l\274[\031\334<8\236\212\275c\202\306\275i\333\021\275\327\225\213\273r\323M\275\204&\251\275\251(X\276\245\220\212=\257\r6<\034*7\275~\002/=\206\371\273=F\247\362\270Z\324\027\274\377\262\215\275\353\222D\275\317_N=\273\315\214=\204\267\330\275[\234\002\276\330!\003\276\224\203\307=\356l\375\275\033u\003\275\353=\222=;\325A\275\225\007\016>\366\023\254\275l\252\364\275\354\313\361\274\234\010\354\275O~\223=O\035\272\275\250yN=\332s\232<\006\257\010\273\272\354\245\275\310\257\303=\351\374\367\274:\215\305<\224o\214\275\233<\270\275rs\223\274\025\'\254<c\242\203<Q5\031\274\336\006\362\275\225\304\252=\265\315\030\275\333\256\253\275s\307:=\354Z\321<\2031\037>\331\377\270=/\007\344\273iA\336=e8\213=\365\341\224\275\322\017L\2768\014\"\276\031x\025\275\301Y\306=\216~\324\275d\255\256<\313\335\364\275\366m\255\2746\245x=\266,\311=\373\302\235=\346\337>=#|\004\275$\263\242<\365\354\321=\366\2471\2746\225\313;ol%=\333E!\276\245sf=b\311.\275(m\224<Y\371r=\271\004\030\275i\250`>\304\305\364\275\025\264\342=\267V\207=\3745j\275e\001\017\2760\261\341\274Pq\361\275is\353\275V\025\333\274\325\266\240=\207\024<=\020\032\245\275\346\032l=\327\361\023=\364\247\023\276\260\370\264;\363i/<JMl\275\023\3544\276\006\335\336=\017\020\"\2750U\211=\205\370%\275\273N\334\274\362\005\032>]\355=<\317\350R\274$\027\317\275\274@o\275HBe=\024p\254\275\321(/\274fAz\276\226\237#\274\347\352\200\275c\334\221;9%\352\275\002\271\316;\346\341\217\274\311\034\234=\r\315\226:J\232\027>\370\370\344\275\321\re=V\256\'=\266\365\300<\236\346]\275\225\270!\275\024\210\324;,{!\276\t\022-\276\002o\322\275\'\376\377\275\273x{=\271>.\275#\006&=\317P\035\276D\026\307\275\334\307I\275O\215\002\276\247\3012>\357\373\265=\336\200\252=\251\243\016\276M\213\013>X%z=\254\025\323\275\337\333\306\274A\375\002\274\257\232p\275\206\362\\>\r\211\302=\"\371\243\275\222\2549=\372L\032>\001\006\027\275\324\007\022\276\206E\225\275Q\267X\273\363\276\257\273{q\020>\276<\242\272VY\013\275d\364i=\204@\345=\'y->y\365\344;\213D\037\275\325\211\021\275\336\342\215\274\231\217\233\271\237Y\307\274G\222\202\275\333\341m=\035\314C<\216q \276\365u\200=\0237\017\276J\236\014=~\3210\276\221[\037\275\314\232\314=\210\3739<\215+s>\016\r4\275,u\271\275\326\274\337\275\255\307\324\275\235\177\233<\350\267\212\275\006\272W<)\261\026>WW\230\2759\307;\276\335\n3\276}\243\"\275\244\037\034\274\307\373\351\2752\277\324=\312\357@\276n\201\310=\376\320\216=\322\303\030\275\312\274\251=\221\036\276\275\316\023*=+\212\014\276\001\241\275=441\275\rC0\275o\200\347\275e\326\227=\263^C\274h\301.\275\2461\266\275\240`\270<\265}\273<<\227\264=?\205I>\020\322\353\274\275\277\035\276\301\343\016\2740\230\036=\215\022{<p\033I\274\017d\363;\316Di=\032\017\367\275\354\n\037=\253}\232\274\371%\021\276\325Y\220=\251\220\334\275\367\340\210\275o\032\033\276\300\234!>\246\237\002>8\307<\275{\231`<\303\3722\275\365\334\222=\340U\235=\\R\327<^g\260\275\200\264.;\351[)>s\264\337\275\351\340\213;\003\375\205=\025\230\237\275\352_\362\275\321p\034>\253T\227<\"{\345=\355\370\220\274\"hn=\317\333\344=\313\205u=\216\344\002>!\235\327=\033wJ=\235\237\363\272\311\210\007\275\327\223\210=\263\001\035<\314\"z\275+\275\">p\310U\275p\247\005\276^\\\303\275-\375\200=uO\224\275\312;\210\275\020;\n\275n\n\002>_\265\245=\017\231\263=\376\005\356\275\233\232W\275\014j\347=\205$\302=\324\306\256<\364|\250\275\267ch\275\237\232\220\274\010\213{<YD,\275\227\000\010\276\026\265\310\275QO.>#\312\263\274Im\364=S,\232\275\377\255B\276\257\236\216=\364\246\003\276^\244W=\376\343\275=\260\342\005>\233F\353\275;\207\335;;\033\036=\321x\355=\014\n\261=l\315\265=\035g\000>\373S\013\273\272\345\n=|Z\036=y\030\303=qkw=\374\244\035\276~t\230\275zG\330=\211\020\340\275*\342<\273M&6\274\364\014\256\274wm#\275T\334\177\275\3653\223\276\001\273\322\275\024Fh\274v\257\306\275u\0257\276\355I_=\312z\305=RA\222=\035X$=\367\370\257\275\037\001\014\274\272T\005\275,\2268\275<\034?\276i\327\210\275\260\014/\275f\2778\275\016q\306\274\310\306\t=y\261\002\276\001\320g\272\242\375\n\276\372_\213\275\017\352)=\240\356\261=\301h\264<?\202\243=\304\t\374\275\036\016\263=\037\274+>\236\020\340\271\244\244\200\276u\260+<\034\237\243\275yIQ\273\177m\033\275\300W\212<\261\007\212\274i\217\224\274\351\033 =\363\023H;Q\222\275\275.\354[>\360\266\017\275\244&\301\2753;\245=4\222\035=\240d\321\274b\354\234\275\023J)\274|\215\324\274\242P\237=\326\201\225=J\302\210\275\'\3477>Ha|=h\261\234=[\376c\274Q\247\216=J\002\320\274\227(\210=\202\350?\275\253\326\271\275u\244\031\276Z\205\315=bP3=\2066\310\275{4\247=\250C\335=\035)\226=\337\371\242\275\035\337\234\275N\374\202\275\324\273\312<Z\255\254\275\240\350\217\275\003\245t;\260\2175\275\351\267\001\275\353y\270\275\326\315C>)\255p\276\331\237\254=\370\326\371\274&\261E=|\351\260\275i\rP\275\243\033O\275\262\010\342=\206\324G\276\263i\003\276\027\231@\276O\274\264\273&\346%\276A\310\322\275z\361\'\276\327\216\006=\240\034*\275\234\000\246=\361K\315:\305M\306\275\302\214\3219e3*=\370\234\210\275(\276}=2\353\234=\361\335\200=.%\330<\334\027\310\273\027\256\310=\315c7\276\207\221d;P\234h:\371\205\025\276\246\245\203=\363\347\005\276K\203\247;g[\216=\036O\220\275\375\225\032\276\022\246t\2754\255\252=\265\200\313=\370\025\221=\312\207\013>#\272\330\275q\001\334\274c\367\246\275\241J\354;gP@\276\314\353\327\274\274\331\347=!\007\257\275\371\323@=\225\212\220=\r\277$>\252\0228\275o\340u=)\263\177\274\017\231\261\274\204u\000>\333\241\037\275\t\213A\275r\373\006>\221\361 =.\334\227=\265\251\023\276Sg\202\275\373\022\250\275\357e\374<\031\254\177\274\231\216\244\275\207\r\354=\334\242\237\275\000$\360\274F\200\220\274\022\376p\275\264\346R\275\224\270\001>\331\202\317=\274\010\326\275D\367\351=^O\013>\357\005\365=\276[)\275K\362\214\276\321#\324\275\270U\245\273\234k\307\2754\340\225=>V\010\276\367VK<\331?$\275\315\3529<?N\225\273\205\363]\274%\246H=\014\306}=\263\335\343\275\025\251\330=\337\323\306=\245\274\262\274CZ\235\275\360\245\353<w/\211=\\\377d\275\320\347\'=\035\204\004\275\351\325*\275\374=Q=\307#\010\275#\351\216\275\352v^=\264\216d\275\030L\016<\305\321\200\274a_\217;\240m\332\275P^\372=\233J\231\274\026q\343=\260l@=\244:\004\275L\313\271=\310\225\323\274\024I\002>\010\204\241<\303\237\221\275\007_8\275\374\366\005\276\306\311$=Q\2326=\276E\345\275\nsR>\201\373\236\275\002\324\302\274HVY=o\351Q\275S0#\274\326\177X<\224`o=\310\241\025\275\322K\300\275#y\325<\016M\\\275p\215Q\275\037>\256=\316\373\366<K\235\026\275\300\256\236\275$(\236\275\002`D\275\320\341W>+M\n>\200\354\240<7L\232\275\277\207\232\275+[,>~+\301\274\376\034\277<\203\304\330\275\200\'\310\274\225\276\321=\267\003\374=_f\200<\r\374m\276)\373\t=N\222e\275\216\225\313=\010x}\274-\376\206\274\340\223x\276\003\"\346==\353;\274\342\246\020>\201\224\243<\341\341*:&\323\n=\331S\272\275\001\021\310\274\345j]=_\253\315=\326\344G=\200u \276\350a&>\311\205}\274a\372v>\253A\267=\253dk\2738@F\275\325R\220\275<\3735=\260\312\264\275S4\032=:\261\360\275.\257n>;,?>\342}\366\275~\357\n>\340*N=\371*\232=P-N\275\033\022\362=\202\253\341<C\222\352=0\213\205\274\021\030\217=o\274i\275\252\316,\276\361uj=1\355,\276UfN\275\013\222\377\274yh0\275\n\324\324=[\036\223=.8\277\274\200\353l=\264L\242=\361gK\275\372a\273<\024\345\032\275\310\237F\275*\211\177=t\347v=;\277\034=\257\216\260=%N\224=p\036\256=Joc=7\355\322\273\325,\323<\321\272\235<\245\365Y=\253\037\347\275\023\025\206\276\333\245\217\275\340S\002\276wE\205\275\371\301%=\330\014\214=A\235!>\000\\\302\273~1\353\275:db<\341N\256<c\346\331=\304\2561\275\333\361u\275\345w\270=\213\301\234=i\202)\275b\325\374=\r\001\014=\314\275X;\342\265c\275\313\033)\275\307\306m\275[V\"\275t\346\206<XS5=\033 \306\275\266\005)\275Y\201\215<\004b\255=\220o\256\275\362\336\237\275\306\255\010>\303\334;\276%`c=[\314\330\275\\\212\177=\337M6\276%\204\026>\325Gz=6J\245==\021X\275\217~\201=x;<=\253t\253\275\332\374=\275\234\275P\275\340\267\276\274\006`1\273\232C\247\275{\022\222=du\032=\rx\222\274\237F\235\275\321\305\004\276\003c\332<\232T\300\275\274\022`\275\245\264f\274\177\021\023\2760m:\275\245\017\216\275\016.\256=\352\274\225=H,\252=\246\020\266=\321\374|=#&\211=H\215\247\271H\217e\273X\221\272\275\354\223\355=\3348\317=G/\320\275\324*\330\272\226H\347\275\357\200\2559n\257\020>\233\350\016\276\030l\010\276\312\223\234\275\364\305L=I\002\342<\211\357\016\275\2773l=\216\321q\275\255YX\275\r\352\365\274)+\265\275BF\n\276\260\264\270\275\02434\276\266\227\304=\275\375\226\275\014\222\266\273\177D.=\351\227\236\275\255\206\242=\031\261V>a1\346;\037J\030\275\342\350Y\274xh\037\273\231\000\034\276\270h\260\275~\005\220=\356\202\n>\243Z\006\276\246N.>\236T\205\276\030|\005>\241\032\313\274\216e\243=\210a3\275\013\315t=\364]\\=\007\007\241=6\215\345=\030nh=+\274\251\275X,\372\274\241X\000>\252\2079=\002\201\240<pi\301\275\032\177\034\275,\021\226=\004\371\357<FK\342=\343\213t=n\245\214\275\373,\347<)\032Q>\377\177\021\276M\350\003=&\332\251\2745\365\327\273\020\206\0049\200\264=\275rz\031;\014\034\334\275\372\350\253\275\036m\365\275\314\271\205\275\235^\323\274\304\332\327\273\3328\206<S\324\021=\002\226\201\276&\261g\2746e\301<\344\213w=hQ\325\275\366N\266\275\027\240\364\275\241\271%\274\200\363\364\275\021\200.>S\271\037\276\2674o=R\341\322;\367\214\267=5r\322\275\367\216\263\274\271g=\276\000\234\006\276\301kd\275cy\033=\207\310u=\033\207E=\033h\202\275\203\224==\005&\376<\340*t\275?\267\254=\220\270\254\275.c\301\275K\0320>=\240\224<2}\351\275\361\322\367=\202\235\037\275\306\375\002>;<G<2\274A\274Zz\336\274\307?\335=\177\342\267\275HB\233<?\354\354\275\224\316\221=\003\007\204<\006LN\275\322U\030\276#C\224\274\266$\365=\300\037\356<BR\256\272\241\306j< \323\000\275V\311\322\272f\236T=e\037i;\371\255\006>\210\300\232<\322&\312\275\201_\256=\235\215\335<#\t\227\276\3217\"\276\377\2421>t\263z\275\006\246\373=Ps\002\275\027 \377\275\250K\272=\210\366\016\274b\224\323\275\r\265!;[\n\035>\211\250\273\274\203\314\2179#\240\026\276[\025\316<t\226\206=\243\000\201=O\336\244=g\267\361\273\035\234\276=v\024+\275%h}\275d\367\006\276\245\324\"<\035>^>7\354\014\275\366\303\325\275\371w\010\275\030Ct\275\212\376.\275y\245\276\274`\007\367;\017\360\203\272\345&\277\2732F\027=k\205\246<\210b]\274.\345\027>\236\r\206\275\005\264\223\275}\327+=\317\345\352\273=\224\243\275\005J\033\276\030\361\026\275\376\0278\275\371\2677\276N\231\265=N\253\351:\225\274+\276\364^\246<\254|\362;\306\327\017=d\021\346\274l<);\017\027\n>\354\350<=VS\221\275\002y`\274 \370\032\275bx\201\275\301\316\253\274<\224\212=\341^\376\2757%\312=o5O;\237\270\001\276\213\265\000\276A\032.<\\2(<\032\r\315\274\030\377\372=\205\364\320\275fo\035\276\356l\234=\264\244\026>\003\241\005\276\305\000\335=\215^\201\275\236\376\235;Y\310\024\275Y\365\264\275u\354\016\276\336\0332=\321\020\302\275\326\"\223\274qR\304\274\233\304\247=\014\263z\276<U8>n$\r\276\341:O\275\247?7\275G\006d>F]$\275\337=\037\272*\276\020\275\001\023\362\274\002\357\345<\233I\026>\035>\030\276\t\224#=m3\006\275P\333\016=\0369[<\300\340\310\274\342\037\233=\367\217\017\274\027\032\304\275\315\235K<c\023\337=5\nC=\263_L>\213\326\035\276\262\271\037>\362\032(<\376A\212=/jS\275c\305\342=9\354\326=\261\364\355=\203;\231\275\241\2612\272\201\220\010<}\343v=\343\316?\270\224\321\322\272\322\257S\276\252\023\300\275\206\033M>\326l\232=\253\001\236<\203\3273\275\265\332-=xk\327=\261\334H<?[O\276Y\'\022>\340\202\317\273T\251\354\274\254\002i\2754\313\316=\377\374\354\274<s\252<\275]\010=\225)%\276;\3432=j\375:=&\026\341\274\367\253\206<\243\320\240\274\3526\315\275\274\265\325=p;\277=\334\2213\276\np\025\275\334\256\351=\376\366\275\275\367\300\014>d\261c=\264\361\260=L\337\252\275gd\247<\031\375\211\274\316\267\224=\242\236\325\274%w\252\275\254\305\307\274\"\371\265\274}|\243\274\262I\312=D%\350=z\354\366\275\032\256\234\275\333<\316\275\303\275\217=\256i\026=m\217\030=$C\002\275\022;\341<\216\253\236\275\231\226\024\274\335\323\234\274\373\230\270=\r\367\206\274F\3200=y\210E>*@X=\365\320\"=S=\271\274\353\034\200\275\010-\212<\375\306\035\275$\237\231\272\255\017a\274\273\251\017>\261\225\003\276\317\\I\275\314\360\354\274\025\264A>\300\213\035\276\371\372\347<\330\033\023\275\322\031\376=\342\025]>\211\375\365\275\244\304\036\276\r\033\330=\221\233\224\275\326\241Z<\220!Y\275\307\351]\275\311\265\036>\245\264\223\274Y\010\213=\243*\361\275\213;\022\276\317\333\256=ExM=G\022K\276\345;\004<\202\311\332\275\321~\244=\361\177\207=\022\213\340\275\347e-=\324!;=;\224\253\274\3473\033\276\202\203*=9C`\274\000\317k\275\006\235_;\241&\247=\261\032\376\275\265\373A>\360HZ;\r\310\240=\323U\364<\000\261C=\027=\031\276\257^w\276\370\213\205=Ck\306<BR\006=H\\\214=4\331\351=\213\260\237=9\343\347\275/\272\037\275\250\250i=\264\315\026>\177\263\224=\325\200\242\275\003\212\026=\337\027\270\274\304\241[\275UO\010>\222jT\275\356\\,>jM\016>.\"\236\275\243RA<\332\353\233<a\220\254=e\351\302\275\355[\240=c\256E=\374t\032=K\032\200<\000\222\343\274\307\221\270<\306T\253\275\364\3772\275\371\356\007>d\203\304\275oR\251\27566\027\274\216\327\221:)\034\242<\034=\260<\305d\256=\027V\205=*?\237\276&J\177>\222\265Z\275!\005X\274\224\337\213=\324\235\206=w\352\334=rP\n\275LF\333\274\025\372U\275\275U\250\275\252W\352=\266,\334\275`\000\261\273m\r]=\\\362\177=\322Mi\275\022\273\303<\251\357\307=\274\211\'>\214\003\272=\317\237\220=\332\002;=\264\263B>\2247\374\275^QX<\r\'\350=3\301\303\274\361n2\275\243\335\241=\037\"F\276\035U\351\274\233U\234;\224`\310<\266\301\005\275c\375\033>\033Z\003\276\222T\220<\031#\000<z\017!\275\304\310+=e^?=?x\230=V\240\322=\345m,\276\372\270\235=\253\263Q\275\253\357\205\275o\267\211<<D\026=$~)=\317\313\273\274Ln\241\274*u\363\275\033\024\354\275\033\227\360\274\010\0031>pHm\275\370\373\352\275~\007\325;]\374;=\teI\276\273\034\022=h\333\216\2757\245\027\274\303\332\344\275\205x\335=V\337\307=\236B\371\274\357\365\017<\275\216\250=\274\234]\275\365\354f=k((\275q\177\026>\022\210\301\274\262\032&\276;q ;\344P%\276\352{R\274l\372\334=\325\206,\275\314\370\337\273\006hH\275\346\220\005\275\264\032F\275B\336,<d\177\375\274P\023V=#\360\263=+\3153<\347%\035\275\337\346\214=\257y\224\275(r\246\275\3232L\275\374\257\035=_\216+\276(\240\357\274\t\000\367=\305\263\257=\204\272\307\275\025F\325\274\347\341A\276\316\201\261=\016v\236\274\274\222.>H\034\330=\374\032\034\276\346\031\235\275\n\316!>*}\304\274J\035\210=\323\265\204=\221\014\010>\271bT=bt\341\275\221\016\r\276\262\024\007\2759\320\326<\317\271\025>*V\342<\330\211\274=\024\032\030\275\023+\004=\250\255O>44\254\275dMS=\r\346\253=e3\256=\320\265\372;\215\260\225:T}\206\275\351\356#\273\302\265\365=o\035.\274\210F\321\275\210Y-\276\214\345\350=POg=\324t,\274\321\322]\275D\261\253\275\376&>\2755\001q\275\002\350\226= nM=\373\365\271\2751\000N\275\330\231\\\275n\307P\275m@\'>\315\376\000\274\304\n\354\275\306\271\302\274Nf\357=\375\036\204\275\342\365S\274Tl\010\275\017W\003=,o\r=\025\251\322\275\203\2639\275\246\014@\275\366\r\254\274x\241 =9\276\220=\367`\350=\222\377\300\275a\263\255=\372xD\276\242\367\250\274\031\306\304<\034J\\\274R\315\245\274\356\030X\274\274e\003<\305\2110\276\334\306\275<H\'\337\274N\n\016>9\324_\2741\003Z>\243\361\234\275\232w\275\275\322(+\276\241\260\033\276\"\355f\275\032y\037=\347\010\226=0\376f=\014u\260=\036P\264\275\213s\261\275[-\261=\004t\215=\336\303\000\276\370\253`=\330c\300\275\302\214\370\275\364\370\342\275\367@\337\275\031B\307=\370\227\237;|>/>\356io\273!T\236\275ei\340\275\333\376\226\275\214\322?\2768\275U>\332\207\035=iY?=a\005\316\273\t\352\337\275\223\251\014\275\246|\322\274j+\231\274\322\205\233\275\242F\216=\353\246\001\275m@\260<?\257\267<e\317i>\335\355\265=\3175\304\275\032\226\021\275b5D=6\200\021\275=\344\177=\232\360\007\274\344g\267\275\212v\253\274C/\256\275Fc\356\2753\320\362;z~\001=kG\035=\374F\344\272\341\010c=\r\250\001\276\312\361\026\276ksH\275\221\033\207\275O\031\315\275\340y\004\275\351:\257\273\353\245\200\275\010\266T\271\242\014 >2j\250=\026\302\235\274\231\200\357\274\334`\260\275\257M\202>\236\244?=9H\376\275\0103\373\274\337*\235\274\026e\023=\000\370v\273#\265:\275\007Z\223=\313ma\2748P\262\275e\334\002=\244`\251;\253\305-\276\014\344\256<\366\374\027>`gI=T\225\247\274\013\016\t=\230\227=\275\301>\033>\207\037\000\275\344Er\275\007\002$\276\226W\321=d\253\373\275\350\315_\275\002\317[\275\333\205\022>\365\032I\275j\272\263\275\021(\002>\'\272\206\274\246\022X<t/C\276\227z\343\275\344\337\257=\220\222Q=T3c=\237}G=\215\213\277=\376\004Z>\207\0345\276\227\204\244\274\013RU<qm\302\273\000\356\250<_\377\323\275Q\327V\275\331\245\352=\212\373.<\026\241j=u\301\251\275\327u\213\275\333b\303=8\025\021\276h\003X>\351gZ\275,\222\203=Z\255/\274\341&\301\275\271\247\240=%\245C>\251\275:>\217T/;z@\303\275\232\335\212=~+7\276c\\\342\274+x\t\2747\211\211\274\227~\303=\013w\377<\273#\263\274\016[\226\275z\303\232\275\244\\J\275h\230\216\275\220\316\320\274\261\004\252\275\222\320d<\247\355H\276\005\367Z\275\301\217\037\275\005\006\227\275uN\300<\330\272\221\275\036\3566=\352{6\276\023\317\270\275n\001\232\274C\320\000\276\0046\010\275\222N\002>"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1033322
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/RandomStandardNormal"
  input: "bidirectional_1/backward_lstm_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_normal"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_normal/mul"
  input: "bidirectional_1/backward_lstm_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 120
          }
        }
        tensor_content: "\226e\"=\323\377\214\276tUJ<\004r$\274\236\273\022=\313=\361\275B\222\207=\310\3336\276\331\241\024\275\340\275.<0\344\332<\255?\317\275O\316\232\275\272\227\t=\263\272\2659-\026\351<uX\201\274\362\207G\275\321Vh;\373?4>y\235\271\274\036Y\013<\262\360\234=\230\306_=\243\350\016\274\276U@=\311n\270<V<\251=\3740\276<W$M=\340\255k\274\364\320\025=\322\206#\276\352\242I\275<\021\321\275\254\356\016=TV\230\276\361\322\246\275)\243\311=\322d\013>\274l\214=\265~\023\276\266\333\324<=\212\000<\322@_\275P\004\307=\212\362f>\205Z\n\276\014(T\275E\326H;\363\212U<\350w\330=\306| >Qg@>\374&\361=9^C\274\347%6=\206\207d<^\205!\276\332\020F=\2205\013<\243\304<\274E\373\317;\335\330\352\2753\322y<O\270\311=\277~U\275\325\222?\275L\325\274\275l\363g\275[\262X\276C\2643\274\332\210\227\274%\304*=A\336\217\274\260\t\353\2745\026I=T\213\201=\200\332\210\274\377}V=\375\236q\274\330\315\300\275\227\266\016>\363\270x=J\300\266=.Hp=L@\271\273\336\226_=\337\000\031>\303!\225\275w\315\016\275[\233#>s\260\026>K\333\215\275\356;\241\275[\300\034>\246\331\306\274V\244\203\274\344\252\366<\236;\331\274\245\371\"\2767\347\202=\244E\367<\254\031\327=5\002F\275j\213%>\014\371D\275\253\r\320=\017\274\264=3y\214\274\371a\021\276^\031\323\273f\234\010\275\035\230\260\275.&\001;\247\260$=O\246\001>\240\370\276\273\004\232\263=\231\316\200=\357\362\025\276[\276\246\275Rq\024>\375\366\263\274u\367\023\275$\215@<\235\260\225\274\355C\031>\373c\031>y\'\226\275\226R(>\227\306\013>~PS=\351h\236\274j\032\336<\253Q%=H\"]=\244\353\005\275\334\251V=\210\315\247=\035\t\003\276\313\346\002=kb\210\274\013\370L\2755\377\205=\3043[=Q\235\033\276\005\351q\275\020\025\305\275\201\2718\275#\210\261\275\\\031n=\024d\013\276+[\345\275\275\327\224=\363\006\257\275\221=\222\275Z\257\340\272\204\367`\276\264\253\222\274\206\313Y\275\t\326!<\356\203\230\275Q\023\314=\020\312+\275E~\331\274`\346<=c\214:\276i\\\227\275br8>e\277p\274\307T\023\275:\217\001\276\216\200\007;Z\305\356<N`\032\276=\t\n>\326\253\250<v\370\000=\314\242\355\275\251N\t>\363\343\247\275\210\262\262\274^F\t\276\305\215\311\275\3779\034>\\\004\371\275\260\265e<\313b/\275P\002\370\275\0033\247<\027\261\342\275pjt\275\\\201\031=\305\022\224\275\223\216\223:\305q\271=\357!\243<\324pC\276\363>\014\274K\266\024\276\207\275\026>M\335\202\275F$\305<\352[\323\274\347\257\030\275O\314\303=\371\371\010>\266\035,=W]\033=\212q\276\273\255Q[\273\250\373%\276R0\354=\333|\377:\030\242\376\275\250\030\310=\3413\004>\227\203\215\275\321o\016\276\237\220\333\274\211\360\000\276\247\300\255<\237\205c=\346\217\260=\364\362\223=\364\034\214\275B\033\216=\337\256\220\275\276\230\272=\231e\327=\"X7\273F:\215\275\366\021n=\001\214\303\275Z\210\017\275\004;\225=\360P\005\276\226\241\371\274\305Q\034>\257\271\212\275\234\232\370\275s\374\023\274\212;\215\274\342\020@\276w\233+>e\336?>\037\251\263<\037\253\303\274\245~/>\264\200)>e\"\327=\220Y\030>\214II=\234h\231=\2118~\275t\022\362\275^\374o=T\n\024\275\347[\032>\224\341\337=\376~v\275\211\317Z=HH\003\275<>l>\t\341=\274\244\030\037\276\372\223\014\274A\245\312\275m\320\310<\245\227 =\304\363\000>{\346{=\302\020\304\274\314&\323=\346\205\306:7\022\002=\204Z\215\275\347j\204=tT\r=\254A\273=#\006\202<?\267h\275\373\300l\275\235\334\216=q@<\274\323c8\276v]x\274:w\335;\014\034)\275\r5\004\276,xc=}b\343\275v\305\371\273\226\024*=\177\262W\274\363\356A=_,m=\224\2346=t\260E\275\230\272`\275 \003\247\274\244\017\267\275}\352>=*7\024\276\213\216\222\274\331\330\302\275\304\365\303=\323f\024\276\'\246\367=J\374v\276\336\031\'\274\306\360\362\275\031\223\377=C\353K\276,\352*=\035\377;\275\335\271\261\274\323~6=YSF\275\t\0366>\333\244?\274\2245\221\275\027`\014\276C\t\243<KY\363<Zy:\2759p\227\272J\241\260\2758\362a\274\341\245\021=\323\235\317;\236\3045=\350x>\276\034=\214=\0044\026>\240^O\275Y7\351<Q\365\351\275\032x\026<G\256n\275r\203\217\2756>R=\351\361\247<N\230\006>\"\373\373\274\033\315\301\273w8\357\274\277\035\302=\317\025\014<\035\004F\274E\353\022>B\034D<\247\005\037\275\253\343\004>\326\0352\275\336\210\005<\254\010%>\256h\234\275\032Ht\275\332xU=\232\274\024>\030>\314<\221\264\264\275W\346\251=\t$\n\276\310$\316<?\037R\275R\337\203\275e\032\206=tb>>\037L\000>O\263\021\274,\262$\275\345i7\275\331\306b\275\343\377\367\275\036\337N\274\004\262\352\273!p3\276s\001\326\275\2158\356\275\233l\020>\252\2205=\344\036\002=\310\323\226=>>]\272\340\251\241\275\320\304\251=\274\303M\275\355\n\r\273\254\345)\275F\361\005\276i\255k:|3%>/8?\276\242S\233=\267\251\305<\363\260$\276\213\330/\275\346\241\013\276\'\244(\2756\252\207=>?\032\276\002\232z\275R)\"\275\005\322\025=\000\013\373<\371R\304\2752\233\256=3\010\210<\340\361\316;\342|\340<\242Y\315\274lH\030\276\2622\000=U\203\224:\365\017I\275Q0\035=\'\036\270=M#\201=\2252\004<\036_~\275\340\347\010=\215o\013>\373\302\253=\274\246Q\275\357*\250=T\200.\274t\260?={B\271\275Nu*<Z`\237\275\327\221\t>Z\250\013==\025\334<\326\357\204\275\020\274\313\274\204\354\017>nq\213;:\036@\276x\263,\275\304\221\211=\331\236Y\275\215\204o=\025Bz>-\321{\274\002\347B>\307r\337;\311.\355\275\027\027\252\275\030\211Q\2749\003\002>L\r?\276Q\221\227\274V\233\211=\006\314\376<\351\374\315\2751\356h=\261\256\027=C\223\036=:\0064>\311\367\024=\235\237\002>\233n\357=\275\343V\275O\252\336\275\027/\311\274.\271\033=z\253\016>o\3668>>@b\275,\005\321<i\236\245<\010%%\276\010\345\273=\340>\304\275\004u\376=\177\037\034=^\370\016<.\246\223=\024\210\241=\246Hy=o\221\263\275N\350C>\246\260\235;B\261l\275\367\023\254;\027$\202>!\311\264=l\004N=-\013\332\275\343\272\315=\\\246\023\275\225\357{\273\241]6=Wcd=\031\312f=\260}y\276C.\222\275\376\021\004\275\031\356\026\276c3\342\275v,\r>t\313d=\327\263\221=\024\214~\275\3071\326=~G$\275u8\361\274%\210\r\275\005-\t>[@\r\276\362\371\014\276cFz\274\226B\206=\025\t\271=J\027\253\275y\010\004\275\r\356I=\204\315!>\031\326\373\275\343a\225=\201\263\274\275\2522!\275)i\260\275\331\270\221\275\022-@\2751\266\000\276\316n\313\274\352d\311=\264\372\340<>\354_\276\330\317\245\275\313\340\334<^6\361\274\21209\275\343\241\250=\025\224\317\273e\215\251\275\344\035\353=\200\330^\275\264L\230\275S\313|\276K\010\203\275R\210\345\275\360\317\242=\001\344\326;^ze=\254\240\267<\214\2326\275K[d\276Q{,\274%\215\204;\362e\343<DG\222\275\034\005\223\275N<\316<\215\221\222=\377\255h\273$\276\312\274\033V\317\275\344\325A=\327\3774=\261\240\311\274e\"\364<^\220\215\275\342\253\034\276\323(\325\275\263\255\370\272\376U\001>\265Z\\\274@lH<l\312\001>BQs\275\333\330Q\275i8\240\275\363\304\271\275\234\357\223=\256-\244\274\006%\252\275\370~A=\377\255\242\275\030Q\027=\005?e\275\252\023\022\275\266 \310\275O\021\240\275\332\206\232\272tu*\276\347\010/\275Ki\255\274\0108\270=\243\210\230=,\341\235\273\372(\322<\337C\323=\266\255\363=\236\242->\304>\336\275k/\245\274:\334\220=\265\357\223=\312\305\035=\246\325/=\347\354\032=\357 \225=\213\374\236\275L\341\217\275\324\034h=\263}\231\275\177\203\014\273\034m\256\275\226\231\201=\351\200w=\302Q\322\271\224\222\001\275\032,\230=\203\271\020=#x\362\275\343\304\270\275<\373U>\320\353\037\276\274\235\242=F38=\317\322U=c\210\275\275^\201\346=\373\375\026\275\311\305\310=]\271!\276\335\037\336<\274\003\313=uX\232<\351\326Q\275-\230\034>\034#\271<C\3544\275\031\354\376<\200\013[\275>\325\320\275\0056\330;R\320\236=N\014\204\276\356M4=x\222T\275@\224\346<t\247\322\275\027\277\327<V\300G\274\036\251\320=\214\201\027>\363\202\354;`y\006>V,\'\276v\367]=\245\255\027=\253o\246=~\036\216=\301\264\237\275\000\273G\275=\204\032\274F\0160\276t\320\317\275\200\236\367\275J\177\273=\030|\035>\364\327\272\273*\372\304<CR\203=\314p\310\275P]J>\006D\304=\324M\355<L\024R\273jM\300\275\341\276D<#E\r\276\366\237\256=\237\000\245=\3201\324\275x\310\030\275l\262\270\275\241e\314<\332\276n\275\367\000(\276j\235\351\275\3470\376=\263\247\013\274\317;\306\275\247\233#=o\250\340\275\">\020\276\323\324\257\275\203R\365<\352B\230\275\215\001/=WV,<D1y=\323\250\261<\320\337\346\275\235\2569\276\373\275Y=\274\226z=\265^\243\275\030E\251=\2371N\276\207W\277=\216\253@=\232/i\275\366gN=\260\326\207\275^E\005\276\177\034\343\275h\317\t;+\202y\275g\2568\276\205\217N<\010\"\t\2757\316\253=;l\232\275\377\352\024\276\rs\354\275\205\273\213=a\342\224=\207o\314\275z\342\207\274\276\312\360\273\2566\022\276\023\313\024<\207\232\253\2731\035\324=\342\317\275\274\253\024\366\275\t\347\207\274X\377%=\247\364*=`!\207=\254\330D\275\245 \253=\t/\353\275~\274\002\273\212I?>\030\213\256\275\210\033\270\275\214\357\013>\007N\">\332:\036\274\274\343\230\273\326\024\334\275\233\010\336<#\200\371=\227\347}\275\300Om=\315\267\352\274\331E0>K\300\270=\310\236\336\275\206\326\227\275\262\220I\274I\374\177<F\032\242=M\344w\274\325\371\253\275y\342\177=\2611\353<\366\260\031\275\301\240\201<,\373\310\275x\203\326=P)\t\275\215\365\206=x^\321=\027=)\276O\364\013>\223\351\215<\260\316\350<nV\017>.\214\237=\375i\351=\232\227\366\275]\326r\274\323R\267\275z\277\005\274\375\215\364\275\3461\215\275\036K\352<\0024\221=\031\302\333\274\274v\t>\240Z\030\275\260\210\335=\001\360\316\274\030N\034\276P\223\352;\374\304s<\303~U>\0066E=\264\007\200<\002\332$>\237\\\224\273\240\317\304<`#P\276\017\021\203=\263q\306=\302<\206<r\206\320\275N\257$\275\260\320\205\276\204\310\256;\320Y\314\274\3239]>\032q~;S\342\r>\363I1\275$,\325\274\257\214\200=N\007)>aP\310=\250\036\\=\323\177\263=m\326\362< \301\273\274\212\355/\272\021\334\030\275Sy)=\227\221\202\275\320\314R\275\304\336%\275 b\361\274\242\251&>|gy<v\261\250=\2607b=\255g\001<\363\217\271=\3417\r=\3218\327=\230\3056=1\2634>\370\345\034\275G{\357\275\331\302\277\275QW\307\275pz\033>G\353\233=OL\275\275\031\'\262\275\2225\023=\026\024\">\366\240\001>~K\247<\273i\264=\216\322\006\275 \234;=B,\336\275\236%\351\274\323U\321\275ZL\264=\324\267\330\273\237\275+\275\266\332/\276\370B\'\276\277%\037>\255\257\340\275[\337w\275p\260\264\274\364T\314=\333\244m\273\037\216\304<o\224\364\275\345\251#\275\341U\342;\345\034\232\274\002\373\177=0\375\272\275\246\323\270\275a\303\235=\035\245\017\275\262\002L\275\023x\003\276\207\255\273\275\215~\273\275\276\036\002\276\270\025\003=>\016\010\275\313\253\343=\257^\026=\005\201A>#}\260=\330a\300=\350\351\223;}%\013<\373\324\333\275Kon=\233t\275==\372s\273\303H\376=\333\004\365<-\030>\275:\317.\276\247\262\264\274\254\336q\273K\345e=ze\002>\322!=>|\350\315=/\030\213\274\366\214\344= $\210=}\256\270=\320\373\275<Qp\014<DJV=\\\034z<\352\0037=\001\004\266=\375y#\276\216\304\037\275\374\253n\275\355T\004>\277\2127>\003\361\035\275 \000\307=\212S\347=\370p\307\274\0266c\275\233+[\275\024\0349=\241\343\367=\351\204X\275\206\022\320\2755\321Z=\202{\032>2X\355=I\252%>\260\332C=\325Q\277=OZ\210=9\245\205\275\220\361\010\276\373HR<T+K\273\363|\244=Y\325\316\274\372\t1=\t\273\256=\201(\327\275\341\325r=\254;J=\221l\275=\366\224\035>/PC>\243\217\216\275\"\254\204=\246\036%\276\2621\276=\3028\033=\345]\"=\336\t\003;\017\274%>c\320\361;\372\016\243\273\232\3745\276\016\207\207\275\007\3641\276\016\340\330\274\360dV<X\333\231\275!\371\265\27579\'\275\335\263\324\275\005r\276\2753\201\r>\330\007\031>U\366\315=wl\321\275\370\373u\275\017\324*\276\320R\177=\224\021\023\275\350l\200\275\207\253g=\345\323\221<\220\t[\275\212x\325<\261\221\034\276\240l)=IG\224\275\014\032\032>\324\235\017\2763t\370\275\360\252\320<\343V\232=\370\200D\275`\264\250\275 \024)\275\005\023\032\275\3764L\275\322v\344\275\224A\250\275\317\333\252\275\004\035=\275Re\306\274\346\216\270=5|\001>\257\231\021\275\353\007r96V\323\275\\\rL\276W\314\364\274\357\336b\276\270\331\214=5!\n\276$\335)\275\347o\200\275)\342\347<\247rM\274\310\257\210<>0\360\274\204z\211\273\202\256{=\310\233,\276ot\037>\364x\255\275T\256\353<\305\312v>\244\350\033=\254\332<=v\017\031\274xmQ\275\325I\224\275S\373\306\275\306*\367<\212\267\302\275ET\270<Sn\027>c\251\"=\224k\244\274qZ\341\274Cw0=42\270\274\324\344\217=\023ic\274\260\361\217\275\0075\003>\317d\342\273H\031?>\345\342\320\275E\351\242=\217$\006\273:\270\003=\240Y\231;\331\3501>\007\000e\275\014T\004\276\313\306\207\274\341\370>\275I\353\274\275\243\344\025\276\346\276j=\016?\036=\374\017Y>\360\345\267\275\023\0328=g\240L=^q`\2753\330\210<\221\rS\275\023\261\323\274\312\230-\275\261\014N\275\226[\177=\335IV\275\356\324L>\211f\223\275\362\240\"<\014\334\366<\215\264o<.\214\017<\206(\230\275\334\252\212=\035\016\315\275\266\362)\276`]\245>N\312\026>\350\247\272=\355\3729=Q\356\333\274\337\212\033\276\333\310\205\274\342\361\026\275\304Kh\275\205\262\312<E\271\314=\267\236\'\275\340\003\270=\210\327]\274\335*\207\275Vt\000=yk\203\275+\217\211=\216\3242;z1\270\272.`k\275\304\036\204=;\203S<d\243\001\276\353\023\030>\242\306\035\276\227W4=\215\003\035=\375{\224=\257\370\354\274\304\033\321<K`.\275v/\001<\271?\330<e\216\214=E\271\224\275\346a/\275}\210\326=9\262\261\275J\304\344;\363\236\215\274\0061$\276\266\353F<t\0056\276o\257p\274=\306\326\275\311\215\027=\2504\010\274\231\014\275;\317Hc\275~\001\307=\':-={\314!\275\037[\214<g\036\202=\277\033\025\276nV\333=\326v\234\2751\353\347\275\374\226\314;\303q-<_\323W\275G\324\221=\337<\364\275\374\353\365\275u\234\007\276\204\371\244=\034\267\312=\345|\260\274\374\254\274\275\270\257o\275\025\231&=:\266\355\275K\370\221\275\033\201\354=\256\377#\275R\226\230=w\233a\276\366\000\273=\336{\200\275)\223\013\275\233s\211\275\204\245V\274\373\307\350=\231\014\232<\017\330\205\275\"\020\311=Y\335\202=\314 ?>\327\365\241<\260\256\244\275\022\014P>\002WZ<jO]>\026\355\276=3^\351\275\032Q\376< \247\035\275@9)>\302\201o\275\253(\031>f\335\331\275M\010\252=\225\242\213=v\346:=\2210\321<\221\222%:\351\210H=\212q\262\275i\2034=9\301\007\275\200\204\224\275\351\354\356=f\205?<\300\254Z\275\030K\305=\277\251\344\274\002?\251\275qe\264=\335\314\324:%6\340\274\320\227[\275\034\370\233\275\307\305\017\275Pt\026\275\335\3620>\346\\g\274s;j>s\371\271=E{\252=\330\307_>\246?\214\274a\210\001\276\346\024l\275\033Fk=\216\036\355\274\275\021\305={\312\347\275\366\246d\275n\257\214\273O7Q<\243\310\225\275\223\307\330<3\366\361=\t_w=\024\021\244\275\251\322j\274s\224\346<J\300\213\275\341\222t\274b\307\312\275\232\017<=\214Nk=\323u0>M\341\336\273\341|\t\275q\231#=\252\255I\275b\003\323=\263`v\274P\332\264\275\302\277!\275\245\331\035\275\2616I>AfH\276\025\177\t\276\340\020\016=:r\263\275\325[F\273J1\035>\207,\\\275\327\315k\275\324\275\024\275\367\2013\275\317\233\277\275\'\003\036>\177\"\260=:-!\275\336g\212\276\224\244\003=\027p\242=\305\3040\2753\323\340\275\207\223\016\276\335X-\275\246\025E\274\220\316J=\371\347\325\274#g\303\275\354\262!\275\373\230\035\275(\357\263\274\305\366\003=\333w\005=[m\250\275\376\003\016>\235\231\231=\354\307\225=\014\2109\275\251\016#\274\377\241\253\275\326\350\"\276\256\275W;\367\203\377=\340\333\326\274\"%\206\275)\250\211=\203Xj=z\327;>U-\013>m\351\032>\225\231\212=}]?\275\022I\224<+\233d=c\340\363\274\201*\230\274\014\265\302\275\332\232\t\275\2778@\275\002\360Q\274\236\301\224\275\211\3424>\235*>\275n\353$\275\343e\r\276\307\351\203\273B\272\274\275\207{\315\275\026*\373\274A#3\276\212\034\217\275\0253\330\275\366TW\275,\315\273=!\362\033>\244%`\275\204\243\004\276\004\375\t\276=\275\332;\251\352G=\035\375\352<4|\357<\205\003\307\275\026\272\220=\211\332x;{\251e\274\016\036\030\276\205\375,=\221\313\r>\215\017\302\275\350\312m><\301[\275jA+>\036\032\244<\303>\237\273\361\321\363\275\335\330\243=;\333\027\275>\252\020=\331Y\360\275|,\317\275\010*\013\276\247\236\'\276\210\311\005\275\306\354\201\275w,\264\273X\331\"=\317\325\370=j\025\256=\214\003(=\3460\225\275\033\330\317=\245\372\245=-\177-\276\016\344\351\272\0138\017>\317\332\271\275\371\360$>;\230\263=S\307^\2757z\326=\216\035#>nr#\275\224%k\276\245\\*>\t;\257=$\310\"=\022<=\275\362\335Y<\324o\276\275\227\343G:W\035\276=z+\262\275\302\203\227<\200\220?\275\206x%\275\250&\312<\205?\204\274W\243*>\301\221Z\275h2F\275_d\267\275\177\237\037\275\207$\210\275\331\342\306;\325]\373\274M@z=\nZ\350=\347\335\246=C\034f\275\n\314[\274^\306\367=<\254\267<+K\262=)`W\275q\243\244=\375\262\276=*\177\025>\222\261\":\227\035\013=I\270\254\275\263\320\353=\315\200C\275\211D\030<\301f\255\275\212\325}=\357#\027=\204\010\253\274\244\336\230\274p\250,\275\271{D=\211It=\022,\223=!\017\303==P\267=o\263\017\276\215\037\033\274m-\205=\344^\265\274=\367\336<I\365\370\275\374\235\251=!\246\201\276D\306\304\275\245?\227\275-\210\375=\260\0244\276\0065\310<\035\024\235\275!7\375=lB\t\274\005\377\026\275\352\215\324<\252\373\013\275!P\272\275O\023D\275\200\233=\275\033{C\276\370\263\376=TEH=Ci0\274\341\222\241=\013\026\271\275\033\001\240\275sU;=\000\301\303=\031\217?>sI\031\276\210\"e=\303\010\346<\377\3267\275\332\001)= w%;\223\376C\275fZ\321\275X\3228=g\313\300\274\214\270\365\275\375w\237\275\260\226\216\274]\274\211=\227\366\372\2749+&\276\321\341=<\257\333\361\275x\r\246\275RG\020\276\003\267/<\377\365\341:\243Q\n\276@\343E=#f\031=\363\023\">/Z\033=\036U\305=\033`<<aR\254\275\270\006\224=\222X\222<k[\363=\030\005\020\276d\304C>\3172\\;1=u<|\037\275\275q5\247\275?\266d\276\353\005\254\274f\221P\275c\020M=a\250\231\275\3278\351:\310\311\345<\313b\375<N\337\022\276\265\264\366=\337Zg=J\366\206=\333\241}\275\3404\002<@\211\320=\3031\270\275\2224\223=\367\267q\275\030\010\305\275>\234+\275#\024R\275\267A\001\276\300\244p\275\261\273L>\325\344\212:^vG>N\002\311\275\226\177Q\275]\272\227=}M\300=\"\337\375\274\203\364\224\274\247c\242\275MM\t\275\230\211\n>x\330\225\275K|\021\276zf%=_\263\r\276\320C\322;\246\327\240\274A@U\276\330.\033\275{!\251\275\230\032\232=\206\000\275\275\026\026V\275^\327\274\274\333\n\037=K\024Z\275\224^\010=K\2537;\221\037\314;*A3<\213\352$\275\272\370\005\276!\010k\275\007N>\276\262-\013\275\005\350\301\275\027\347\035>\310I\240\275\373\332\206=\353\236\260=\260F\264\2759\223)\276n\362\226=b\000\262=\372\376\310<\323\327\246=Ol\253\274\217\200\205\275\365\307\000\276%$\344\275/Xg\275\320Ep\275\024II\274\0060\\\275R\356\247\275)+\250\275\302\377\026\276\'(\377<w\211k\275e\346\340=\243\021 >\310\264\t\275pP\204\275\213\010i<3y\322=>\350F=B)\367\275\360\210Z<\236>\205\275$\301\002\276E\247\364=/$\310<\337\321\225\275u\265\241<\032\274n\276C\226\216\275B\370\014=p\227\024\276x\256\200\275Lvb<\354H\261<<z\225\275\306\337\031\275mpv>r\360\356=zA\314\275\272\372\314\274*\004b\275\266\350\000\275\321\021\246\274\302\325\010\276d\201\006\276\006\273\210\275m\2064\275\267\324\017=\340\252\275=\327\346\367\275\351\365\023\276\203\001\010>A\337\335\274\r.\212=\230\010+>g\337\250=<\360\035=\264\241\202;\0067G\275\250\313\332\274]\244\002\276\206\304\310=\267\031u<\243\324\253<\206RC\274cz\254=^\256\360<T\032\267\275\030\352H=\243\3373\274\234\221\364<\210\r\005\274\243\t\376=l\r\304\273\301\345\016\276\334\361\257=\010%\304=2\207\307</\272\234\274B\336\232=\235\002(\276\221B\236;\333\nb=d\256\010<\350\313\234\274\366\357->\016\014t=d\031\340\271\346\326\260\275\035\361\345\275\357V9\275W\364g\275T\220t=\326\210\301=E \211=:\265\263=\036\275\275\275\213X\036>\251x#\276\324W\300\2754c\337\275\236\001\025\276\317\025\330\275\004\310\261\275\243\027!\276\234 ,\276\206\2268\276\252\022\301=U\276\316\275\037\364\n\275\301z>=\n\221#\274W~\220\273F,\270=\274\337\353<6)\265<\236U\326\275dh\270\275\275\317\316=\037q\245=$\232\333=\021\261\225=_\201\270\275\213\310]>\201\032\251\274\342^\317=\346:C\275c\272\301\275\177$(\275\276\025\203<\241\3304=\221E`=\354\344\217=Nm\234=\212]\217\275\225\366>=\232\254d\275\235O<>\0372S\276\3250%=`B{\275Vy\344=\335\3757=v\025/=\316\333!>\303\017\227\275f\300$\276\2631\023\275\305\373\307=\331}M\2753\242\240\275\250g\277<\304\323\306=\310\332!>\373@*\275\000R\322\274\236\034\207=re\355\275\260W\313<-8\223\275*\227\234<\304\322\345;\251t\301<\323\325R\276.2E<,`\3478\364\2234=\311\326\375=Cq\301;\355_(\275\253\240\">\010\310\337\274\355\201\231\274\322B\365\274B\245\353\275|_R\275\326\031\022\276\253B\323\2749\027\360\275\241\270\026=P\331\037\275\264\372\355\2753\317\032\274A\325\023<\337\231`\275\210\013\234\275\"\261A\275\0310\016>G\365\374=\271\0217<\226\n\305\275\210\256\r\275\0057D\276\3605\301\275X#\243=\256\031(\276S\004\350<gk\020\275(\177j<_\263\017\275\377\325\365=\356\247?\275\241\343\270\275\001\352\333=\223\r\357\274\340\024\035>\217\027\273\275\200@0<\236\034e\275\213\036\355<\243\324!\276\351\207\315;\320\226Q<\272\303\006>\025\327\243\275\211`\007\276\336\251\227=\025;\372<\005\211\230\273\333\332\322<\2020\243\273\001I\362= \242\260\275?\353\353\275\224c\203=\\I\376\275\370\0070\276\2075B>\350i\217\275\272\326\273\274\034\006]=\"p\323\275k\237\360\274\016\001\223;\005\345)=\327`\001\276\276\212(>\000\001\243\274#\023\340\275\260\344\266<\013J\302\275\327\004N>Q\020\366\274 v\024\276Wa\252=\027\301\372=\327\2264=G\014\244\273\276\007\025\276p\314\261=\240\242#\276\213GL\275\241\340\273<\374P\033\2756\222\216\274mX\211>\360,\227=\327\316r=\336\021\032\276|R\315=\226Mf=w8&=\357\312\342\2741\301\014\276%\300\207<(\302\030\276dL\010=\312\207\322<\252\334\n\276j\354\256\273\361\372\212\275\232\275\274=L\242\226={,X\275\233$X:\357;8=!\306\266=\014\005X=\020\350\027>W!\316=\016aY\275\241\365\203<\220\210\305\275\2763\337\275\222\336\t\276\222\006\"\275B(\347=\377\356\317=\201\325\330=\243V_\2753p\372\275\254\313\017\274\010\257\305=\224\3120=\035B\270\275j\026\246;{\350\226\275\270\334\273=J{4=\364y\356\273`d(\276\034\201r\275k\3367=\206z\300=\220\376\311=_j\214<\212\316\026>\231\204\213\275\300`\233\275!Mx=9\214X\276\266\361\021=\237F\013;\361e\250\275J+\031\275N\'\267\275\'n\330;\022\r\034>}=\303=\212\317z=\235!\002=\276\323\200=\313g\224\273\347\356\330=\020D\n>\017\034O=\373\260\260=\251\034y\275\207AJ\274rs\220\275\246\013\362=\3357\245\273\315\004\212=g\2776\276\006\240\n\276a\331<\275j,\000\275\356;d\275\2642,\276\246v\247=\374\225_\275\244\361\361\275\024\354\274<Q,\310\272\375B\250=\241%\354=\014\242\316<\362+\227\275\017\354\346=BY1\274f\227\204=:\030e\275Z1\327=\364\266\244\274`[\013>\242\364\246=\370$-=\002#\204\275\246U\347\275\007\375\257\275\312g\023=\264F\237=\033\277\245=\362\000]=\2510\321\275\3222h\275/\351v<\315\253\314\275\003\271m\275\317\201\315\274\236\264\030>\t\3206=\325\037\274\275\3770\311\273\023\203j=\247\256\005\275\373\217\005>\244\\\234\273\263\017\344\274\245\247\222\275\212U;\275\334/\204=\212\353\250\274\306\024\207<pj:\276`\240(\275\372\362\365\275\206\n\200\276I]J\275\026~\262\275\245\261\326=\236=\006>Q\274E=\r\257r<\341/#=\370\021\343\274\350f-=H\265~=\222\033`=\177\006i=\362\213\014<4\325\360\275\277\240\235\274\035\000\304\274\364\330\356\274\3329\251\274\250\243\361\2741\216%\276K\214\231\272$\302#>~\302\022>\007`&\276a\037\314<\223N\265\274w\275\274<q\013\214\275\201\267\000=\216q\272\275\206{\224:\307u\372=\"\242\302=z\351S\275\206<\240<\365k\230=\267fr\276X\007\306=a\031Y\275s\004@>\217\305\261\2745\030\224\275\360W\025<\200\315\350\274\025$\t>\315j\330\275\335\206\371\275\r\224,\275~\r\214\275}!\355=\2507\214=6.Q=\265\214\000>\023(\203\275\274\r\222\275|\272\233\272\302\201S\275?M\247>\276\376(=\302U8\273)w\234\275e<\021<>\016\222=Z\313B>\364`\300=|X\205\275\311p\255\274\2658\030=\265M\005\276\206\"\332\273\326\314\252=\305b\353=\0360\204=\215\331\337\275\372\226;\276\331\252d=\310\306\225\275)\335\024=y\264\032>\'\034\232\275E\005$\274K\223\215\274\3174\205\275\370\225_=L\2071<\361;\234=\204\241\370;\036k\231=k\320\t=\345\373\350\275 \247\273\274\027\220\201\275MW$=\247\322\002=\251g\016=\177O\221=-\321\236\274|\233 >\226\r\031=\321Y\255\274\324\n=\274\032\334A=\304f\220\275\314\364\367<\347D\'>\374f\223\275f\273i>\036\013\300;\032<\036\276\332>\005\276\334R\262=\010\301J\275Bl\020>dV\025>\314V\312\274\227N\337\273\271b\250=F\353k=\217\213\227\273d\223\236\275\236v:\274\241\213\236<\324y\366=d\362\334=\312}h\275q\321\024>\017E\326\274\334\007\321<\243\231\022=7\007\251\274hw\241=\372\\\027=\031\271\006>`\n\257\275\203\025\036=\223 \357;\002\261&=]>D\274\177}F<*\236?=\356`%\276\357e\250\275(\340\325\274DK\352=z\342\354\275\243\337\005\275\220\366\217=\t\304\275=\212k\035\275H\225\262<\020=\301<T\371\004\276\236\310\306=>\371\013=\371{\365=\242P\003>\031\321\212\274D\276R>\3307\273\275\005rZ\276}\204\341=\244\t\226<[\277\225=\357R\301;\234*\275\275=+\240\274\022\270L=Xrj=\030\025D>\r\'(\276$\216\340\273OKV>\210\353@<\345\207\260\275{Lx<\000<\013\276\227\\\240=Sp\002>\361\230\243\275\205\323F\275\346\340E\275\311M\024\275\375x\274<2\322\207\274\2312\204=:X\364\275\205\365\354\275\356.\271\275Q\234e=\323\302\222\275y\227@\275\271m\203=\310\277\004>\204S\036>\250\261[\275\033f\350=\315\243\264=px\204\275PC\030<\177\347`\274\366\225\t\275\301\362>=\230\372\345<\037\262\353\271\364\332\227=e-h>Y5\370=^\2240>xF\023\2756ug=1\266\027=FA+\274*\021\330\274B\242@\276R/?=W\352\362\273\222\346\236\275\345\005o\274\323<\354=\034w\266<n\211\307\275Gj\222=A\013!\276]]\016\275`-\312=\017\031\377=\275\300H\274\177<\255\275\206r\377\274\335\037\013>\177\210\007\275\370\235\207\275\363\276]\274\311ND\275+v\272\275\241\332V=B9\002>\304\311\211<\356\333==\020\022]=\020\252z\275\320C\314\275y\376G\275\007+\300=\232\025\332\275j\204\204\273\220\327\266=\237\033\000=\313\337\215\275\350\"\014>J\006;>(m\'<\250lR=\344\004\275<\033\013\340\275\236\017\342=\340Y\034\275\n\310\372=\"\013t\273f\226M>w\337\023=\234\214\205<x\234\205=\200C\344\274\272\346\025==\336w=\001\234\301\275\264\367\034\275\310\255\265=H#\245\272}\210\377\275\263r\260=I\361\231=f\367\025\275o\242\351\275\220\253\352\274\306\343\257<\310\n\350:\325T\203=ss\352=Wp\324\274\n\247\236=Q)0=NK\260=s>(\275\220\221\224\274::\361=\265C\310<o\221\021\276\325\273\204\275\226x\007<\352\303\210<\237a\026>\274\376\207\274^}\316\275Bw\320\275\320=(<\007\367\033>\306\220s\275\264!J\276\260\235\204=Q\372\210\276\214x\337;sv\217\275\354*u\274fye=E\214\271\275\032\306\203=\373\232\344\2757\245\017\276ua\r\272H\267\317\275Zm\340\275\325,\316=I\263\243=\2674\021\276\302\254\320\275\0354\226=\375_\212=4U\204<9\312\254\275y\320\201>\244\036|\275\33754>2\376\004\276l\322x=\353\362];\353\306\356=\245\301\371\275I\377\352\274\376\331\026>44\261\275\247\314\007\275\007o\211\272\236\241b\275\224\014g=K\301F\276UUA\275\034\332\316<W\212N<>a\33096\376\001=\\\021\246\275(a\206=\326\346;=\217\277\t\275\244\216\023\275#\360\344=E.\222<u@\212=\365\204\025\276\214\036X\275\325a5<(\025\312=\214\241 =\t\262\007>\335\347R<\226\264r=\224;\245\275\r\352\202\2748\230\253=\230~\364\273\021\207\262\272\345\353\203=\0055v\275\340\353\222\275\363\357=\274#\3255\276\350\032\266<\005dZ>\210\344O\275\000\275\365<6wo=\t\251\024>\005<\362\274\246\352\202\275\2061 \276\262G\234\275*\263[\275\3118\310\275\322\350|=jY\201\274[\333\324\273\220!)\275\264\003#\274~\363\332<h\330\257\274\304ml\275}^\315=`\313\210=\241\"\342<\327\n\017>9a\244=D\032\320\275O\367\034>N\252X\276\304\232b\275\005N\304\275L\033\230=\017\030\216\276\267p\236<\323\211\344<mg\003=\337l\035>X>\261<\353V\345\273\n\034\351\273\022\201&\276\376\237\267=*&j<\225\242\321<\271\001\000>\253\262\362\275V\216.\276\266\204\215\275_\227\n\275v\333\353<\027v\314<\270\214\t<\205\031~<?m(=2\344\221=\2564\375\275o\321E<Q]#\276\367\\\003>q\t\243\274\215#\267\274\2224c\275u\353\365\274\r\235\215\274U\216\231=\315\350K=\251qK=t0\022\275(\276\326=\007\3174<\177\354\245;\334\327\024>\214\277\t\276J\333_>$\233\246=\014\3621>\233\222\225\275\"\354\331\274\227\274\225\2759\272%\276\237\017w\275s\257\030\276\243\353\016>\213\003u<\257\333\330<;\327@\275_g\035>k\034l=a:\243\275\377z\033\276\022\035\220=z\2309>AS)=\251\356\026\276\351\276\017\275\177\312\222=Tk\010=\204*\017>P\261\201;C2\367=\201\005h;MH\227=\024\335z<dyT=\313T\027\275\257@W\275\364bY\276!\366\344=A\352\177<W\324\260\275\246q\320\274\036A\330\273\214N)>\371-\273\270\347\270\026<hI\222<<\301->\267G\262=\363\323\027\276\"-U\275\2630\000\276U0N\275\001\257\325=\334/\262<\2560\323=\274\315\317\275nG\244\275\205\254\202=q\355;<\356\243\221=\252\375\214>\372\205\344\275 F\016=\003\327\t\276\033V\343\2753\203\310<\351\330\253\275\273\276E<\020b\365\274\211\254+=\203<\321=\341X\026\275+\364\351\275&\305\027\276\302\024\010\276\354K5\275\276\217\226\274R\031\316=\233\326\212\274\232-]=\256Y\370\275\235\207W\276b\245[=\350g?=\026\020\353\274\\\020[=X\351\007>\300!\203\275\r\250\003\275\010\205\347\275t\303A\276\271\376\246=<\357\207=\345D\304\275V\350l=\305[\226<\370E\224=\243\255P=\323\312\007=\257\232C=\034\312*\275T[:=\335\335\347\2754\326\345=\033\306]=\326P\274\274\253%`\275\250H\r\276\250{\205=\301\236/\275\2611t=\257J\221=\3545\266<8\217\030\273\370\021}=\365\234\034\274\351]\031\276z\301\367\275\036O\327=a\200\276\275\371\247\366;\024P\345\275IX\330=kS\313\275\'Q\003\275\370\230\203\275!\277\220\275\360A\374\275coi\275\240\375]=x\204\377=\023\226\201\274\333C\267=\275\275\202<Z\262\341;\222\200K\276\234\\\013\276*\'>\275\r\300\355\274\322\007\263=D\342\330\275\363_G=\365\217\231\274 \231\316=f-\304<\367\3756>\346\363\224=\223lg\275\321\337\034>\241\332v>\224L\252<5o\005=\232\261\314=;D\372\274rI\271<\316y[\274\361 \'\276\366\334A=5\335\244=\264_\273\275\2779n\274./J\275\213\362\245<f\353\211=\331\262\362=\002!\250\275Y\345\227\275\030D\231\274\3040(\275\352sZ<\006\231\005>D\311\305=\3568\266<c2o=\355Q\024\275\204\314\357=\030B\261\274\245\023 >\222\2132\275\322\023\033\276D\253\316=\037\300P=\354>W=c\365\025\274\257\024#<\267\031>>\366\326J\276\376\2778\274/_\003=\334jl=\321\372\003\275Qh?<\267\312<=\200\301\214=\375\357\315<\240\013\022\276O \347\275@\264g<\310\346\277<\2416A>3VS<\356/\300=\357^\302\275\002\322\004=\247\254W\275\351\023o;e\002\247</\230\026>\325\rT><*e=\212\010\210\2756\327\241=\324?Z<\306\371H>=\231\334<s\244\351<\001\033\232=\274\024\231=,\t/\276W3\305=\221\352\353=\350\n\325=\321\222\230=\'W\247\274\025.&\275\353\212\027\275\210\245(\276\211\222$\273\024\021\253\275<Z\344\273\277\207\312\275q\013)<\310\361\037\275A\360\037>a\r\326;\315\000H\275\034WJ>])\212\275m\"\352<y\201\310=T\017\246<Q%\034=\331\330\320<\340\367\374<H\347\232\275\0341G\276\230=\323\275c\003E\275J\006\234=\304\2745<\230\014u\274\r\357\266=\025\001\227<\352m =^\335{=s*\226\275\320\220\372\2748\326\017=#\026\n=\004=j=gL\014\276=\367\204=\0027\311=\324\331\265=o\013\250;E\022\304=\331\336^>\023*\250=kCu;\371\235\320=\206\320\365\273S\356.\276\241>b=S\212\013=\3431\241=o\353t\275\005\244\005\276\025\211\265<\030\376a;\031\034F<\210R\206\275A9\327\273\003A\245\275\343w?\276556\276\302\261\375=\374;\204\275\316\002\324\271z-\201=M\007=\274S\350,\274\202\276i:\331(\035=\213\334\342\2742L\014>-+&>J\2358={\336\010\276\365\202v\275\327W\377<cE\302=\316\243`\275w\345\036=y<\031=\314\305\003>\355t\013><\024\326=\221!\244=9\313+\274\'\361\237<L|\016\274+)\232=PB\021>\200\243 =\341\322X<]q\3447=yY\275>\314\366\275\355\034I\274|\363J>\223\356\014=\375Ls\276\266\201\233\274\354\300\330=2Yd\275\017+\355\275M\210\n\275\254\221~\271\013\204,\276\007\351\032\275,?-=r*\020\275\021/\203=\020\026\376\275\275\301\212\274a\362\203\275\274xM=,\327\264=\235|\235=\245\371;:\3221\240\275\344W\034\275\270\253\203\275\344\'\317;\003W\035\276\275\212\277<\2348e\273\'\021\312=\264T\240=\332\362\272\2746\270\205\275S@g\276\331aw=\201\327\317<X\2448= \327A=}\304\354\274\203y^\274YHB>\352\t\002>x]\006\274h\321!=\007\342\006>\375\372\032>@\240\260\275\321\010e>Z\210\345=\234)\243<\370\360&\275_\363\260=<\t\037\276\007%\250\275J\337\370\2748\221\306\275y\247\377=\231\n\315\275\377\200j>\240\264\033=\350b)\276\223\274\354\274o\032\033>\370 \016<\365\237,\276\320a(\275\025\274\344<\013\255\006>\233\025y<\335q\311\275Zk\210\275\336\215\"=X\026)\275\271\225\212<\002)\255=3\361\372=\361\276\007\276\272\315\235=?\020\327=\351/\222\275\356\010D>\264\222\310\275\371\250\224=\327D/\275\221O#\275\177\222\214\275Ov\342\275\021\260==\310\272r\275\347\r\327=l\213\'=S\370\311\275\3006>=\037\"\272\275\022\210 <\007\205e\276\266\211d\275\247\231\342=9\207\035<\353\374\013\275M^\031\275\370\033\002\276)\377[\275 \234\223=re^=Z\\N\275\270\334\215\275J%\327\274#\247\230\274\361\n\301<1H\023>Y\026<\274~\032T\275\032Pz=H{\023>\277\275\010>m\252s=h\016\207=\036\305W=\263?\363\275\330\251s<:\351\333=\3044\016\276\266D\346\275\310\031N\275\232\303V\275\025\210\256=m\370 \275\320\027f=\230\342\007\276Sl+\275(\355\342=|\206\214=`\227\222\274f\260\223\275j\023\245\274\241Iu=~\347H>\227\244\216\273s\205\342\273\317S\272\275\244\013\027\276G\330M\274\t\334\324\275\222Cr\275\036\371\333\274\005\341\202=\354\361\206\275\304\032,\276\202M\236:Rk\025>ub\357=\267h(\274|H\215<qy\230\275,\213\322\274G\242\243\275\255\232,\276[\262\230\275\202\306\257\275\217\022\217=\232Io=\031\343B\274\265\305\006\274h\314j\276g\336\265\274:!\016\273c\254=\275\274,#\275\331\202\244\275A\210\305\275\344\2271=\177%\260=\260v\246=\\\273\352\275\2160\273\275M\017\270=\224\274\230\274\021X\254\275d+\036\275\036q&\276\'\323\033=\376\302s\274\332\026\210\275$\346{\275Q\201\332\275\360B\373\275\363\201\336<f\n\233\275]\337d>q\273\317=j\344\373=\031\205\227=:\025\257=\315\225\021>\024#\n>q,\253\275\330l+\276\231\031\267=O\302\277\275\251\352F\276=\002\255\275\230\360\203<\025\002\214\274%G\031\276\000V\233<\264\275\013\275\375\237\345=_{C\275e\2134\275\010\276\303\275(I\316<\362\0173\276<%\204\275oJ\206=\316<Y<\231\276\360\274\276\030D\274\275\026L\276\304\266\005>\252r\227=\031\334\013\275>\360\276\275\274L@=\345\225\002>\306\010E\275\371\302\033=NBX=$\236)=\260\224\t=\243\327\t\275\357\366\353\275\205\234\250\274\004\213\321\275\347\215\230=v{B>:\337\216=\026\202\305\275\'\315\274\2752C\251;\275\367\317\274\355\250\361\274l\3672\275\003\273\n\276\332\272\203=\300W\000<\022\243T\275\267\203\232<\306\223\000\276\352n\250\274\341\311\242=\217\230\034\273C\252\360\275)Z\206\275\232\265^=\326\332\035\276\261\327.>\207t\014\275\216O\360<\316y2<\250d\217=\023\234v\275\276\341x\275W\316\255=\214\000\365<\367-\264\273\311\006\205=\335\217\014\275$g\005<+\253\366\274\021t\322<h\240S< \302\374\275\272\204\332=N:\320=\274\np=\357\001\033\275\016A\343=\361@\345=\2044Z>V!\343\275X\360\267=\020\234\360=v\226\231\275\355\334\221\275\035\256\210<\3326(>\'C\336=\275y\365\274\3034\277\273\300\003\004>=G\374\275\276\377Z<\222\356\351\275\310\251\205\275e\004m=\010U6\275\313\2654\275\376\230R\275]\017\266\275\254s\376;\010\203\354\273\t\242\342\274\237\034\376\275\277\001\022; 1\233\275\264\2021\275\232R\003\276C2+\276\322-\022\276\020\244\322=v\222\344=vy\020\275\014\317\"\275\221\021\035=\035E\n=\027s\254\275E<y\2767\001k>\312\033&\274\203\201\246\275M5\022>\027\006%\275\270h\351\274sk\347=\262\330\200\275t&\305<\372-\203=w-\026>\360\221\313=\243m =\0303\t\276\217\035\010>p}\214<\345Q0>\261\220\020\275\203\004\005>)\265\305\275+\237\244\274jW\022=r\306m\275\322,\224\272\333\354\254\2747\304\223\2750;\305==\317\223<,(\211\275D\250`\275E\220\026=\227\277\207\275\0322\034\275bh\302=\267\'\357=\244EE<\031j\205\273\344\363\024\274s#Y\275\002\266\t\275\323V\003\273\262b\357\275F_w=\327\374\345\275{H_\275\276\032#\276\037\336\361=\220\327\277=\362\252\220\275x\303\310\275c(\352=\030\2007\273!\301\212>G\231\306\275\207\316\023><\305\237=.W\246<\232\276\034\275\002\352\034\276%w\277\273\323\025\305:\244\347\274\2745J\363<\0335\200=\256\244\034=\t\226\333\275\361-\253=BwN\275\365=\240\275\225D0\274\252\016\311\272\016\032\324\275\266\260\031=\264\277\325\2750g\246<(\256\306\275\005\\Q<\205Na=\231|\272<\002F\365<s\305\243=/\263\r\275W\t\342=\203\031\023>\342}\351<q!\035<\265\2542\276\372\014G>u\320\232\275\024\242\323\275\346\330\016>\304\006@\275n\204\016\276\373\300\307\275\347\242\260<z\240\371=\225\222d<q\252 ;\271\252\006\276G839eP\334<\237\003\030>\240\030~\275\014uF\275\227{\r>\215>\247=\367\233\342=\321\217m=G\245\201\275\302)2\274\337L[=\0268\235=\220\256\350=0K\354\274e\321\210=0\265\263\275\246\366\314\275\254\035&>\246v\255\275\005u\343;_\311\010<nD\273=3+j\274\343\200\361\274\221\350\n=\032\314\212\275\277mZ<\000\010-=\211\222\024=\250\254^\274\214,\036\274@\216!\2746\014\354\274\261m\301=\345\373\373=b\255\346=\rE\255\274C\211\331\274\361\0306>\024\314\335\2747\024\007>\271\334\212\276G\201\350\274\205\232\003\275\265\366\004\276\313\334\233=\224\255\263=\265\022m\275i\007;<\347\314\332=\315\255\305=\207\035\220>\323\355\211\275\262{\225\275\374\210\246=.P\323\274EG\003>\343\272\311\274\320;\035\275\367\276\375\274\372\362\206=\265\005\353;\004\252\031>l\204?=\315\347\252:\270\335R>a \021>OT2\274\321,A\276H0\001\273j\375\364\275\336\007\240\275\315\263i\275=\210N=\352\214\366\275\226\272!>\261\014\027=}\343\n\275C\274\033\275\340\375\323=\002\037\033\274\344\no\2759te\274\031\361\231=\302\211\345<\017\206\031\275#\256\271=\363\320\014\276S!U\275I\356\272\275\325\313\230\274#\023\333\275\255W\305=\334g\">\362\177\216=Ml\r=\314\374==o3\263=s\277\320=\030#U=\300\333\010=\277\337\340;\023\322\244=^_\204\275gF\335\274<\334>\275\026\217e\275\037^\r\275H\0238\275\261m\035\276F\333?\275\215\261\366<\312\246\237\273\300\021\204\276?(7;\323P*\276v-E\275\310$s=\036,#<\200\025\267\275u\036R=u\274\360\274_Q}\275\342\210\026=`\216\236\275\276@l\275!\370\311=\225N\301\274\351\276(\276\361\3669\276/\023\374\274\t\177V<\366\177 =\230\217/=\2129\327\275\023\317<\275nl\006\276\270\262\247\275\201\373\303\275\355\270\247\274\333\025P=\232}%>Q+b=\'u\022>V\036\356\275\0068\225\275<\021b\275\355\2379\275\'\313\021>0H\350=\3122\\\275\222\033\214=\322\312\277\275X\004\002\276*?\033>\333B\316=a:\024\276\021\375\230\274\025X\377\274\323#\010\275\0303\313=\350\267\215=Y7!>p\231$\276\341\363\037>Yf\255=\n\215\236=\232[\002\276*\250N=\016/\031<\251DO\275{L2\275K\360\356\275\321\210q\276\207\272\202\275FS\217\275]oM=\351 \366=\33154\275\022R9\275|\273\314\272\203\302\031\276^&\233\275\021\313&\276\014\343\310=\320\272\206;\270\211v\275\272\330U\275\367\214\236\274\335\321g<.\031\317<\301\214\211=\r\232c\276\226RK\273 \207\006\276\276\330&=@\373\007\275?@\234\275\356{c=\273\235A<d\321\333=\001\232&>\270\371\022\276n\326\023\276l\025\336=\310q,=\\\233\371<*\211\034>S\177\200=,\007i\275\222\363\204=\035>\317\275\367\371\200<&\257&>p\343\003=\014\240\300\275D\247\227\275]\3017\276} >\2752\326o=\275\210\240\275T?A\274\255d\361\274\302\247z=\331\360\244\274\211\366\227=\020\237\323=\302\021\007=\246\267\373<\315\334\275\273\331\235\312=\307\244\263\274:\001\210\274\223%\260\2744\247\372<\355g\314==\247\317;\274\336\353\274\276V\002>\231\n\034\276\004/\n>\206U\326<1\302\273\275\214\032\344\275\273\332J\275\032\r\305\274L\350\242=\355\374\267\275\314\333\333<3\362S\275\177\366=<\007\205\345=\261}t;\277\333\240\275Q\247\275=\250\031}\275\247\014T\276b\201\':\033\334\344\275\376e\201<\037\001\303\273%\340\030<\360\232\340=]R\006\275\306$\346=\331\010\257<\205\226h\274g\032\354=,M\222=\225W\310\275An\223\275\377kw>\320%A<\356\210F=\362\003u=\360\272\253\275\345\006\372=/\014\325=\364 \016\275\007\035V\275\305X:=B\301\213\275\'\021N\275\372\0037>QI\177\275\276\016\377=K\332\255=*\233,=J>\n=\201\363B=\212*r=\273\006\372\274\215\304A\274\003R\376<\034\014t\275=\262\301\274D\025\034\276>\266\265\275T\361+>-7\312\275\270\243\252=\337\016\363\275\304\354x=\263*\220=$\371\274\275\371\324\306\275K~\214\275Bt\025\2765\341\357\2747\245\357<\340\376\201\275\034\tK=\355\":\275\277\226O\276N5&>\275Te\276wQ\244\275\2542\306=\346\335U\275\3233\033\276\320\026\220;d]u\275D\030\000\276py\206=\212\312\007>\300\216\200\275N\017\021=~<^<3\035\207\274\351\215\254\275\321q\267\274\312^\002\276\002e&\275|gi=j\271\001\275\017\242a\275^\336\364=\213u\010>\237\007\374<\306\201\">\223\321B=lm\261\275\326\247\241\273\310xM>Sb\004=\324\355d;\322\255\201=!\362i\275\301\374\033>\314S\325=\t\313\335\275\031\340@=mDT=X_\035=\231\237\342<3h\203=\233cy=\235\032\260\275\215[\374<\027\036@=\014}Z\273\214\3339>\326\315\253:\352\370\020>\354\271\030\276\305\226D>\342t\370=\214\000\243\275\237d\336\275\203\342\261<?\320\215<\004\272\271\274\235Y\316=\242z\213\275VO\003\274\342\321\214=\375\324\231\275\032\006F=\010#t\275\302I\255<0y\207\275\376\301\244\2759s\317\275\241\301f\274\356\305z\276\237\350N=}\032\\=\rm|>q\370\201\275\327\340\372\275cPc=\355\277\304\273\261\350\376=$\216\010\276\317v\204\275\365\376\026>Z\217\'<\306CM=@\\5;v=c<9\331\213<\'\317Y\274\n\366\344<NX\007\275y\316H\274\301Xc<\213\354\260<^\2534\275[\212\345\273\215\032\"\276\350\312\"\275\217\025]\276\301B\241\275J\226\327<\t\333\256=\017\336T\275KR\264=>v1=\211\331\000>\024\272\n>\267\326<>\322\266\317\274\254\203\244=\234\r\320=\337\270\r\276s\331\340\274\263^\274<\251\024\n>\232t\375\2755\035\265\275\"<W\275\271\373\262\275a\232x\273\347\201\014>\300s\324\275\222l\232\275\201Q#=-\262\221\275H2\263\274\361\007<\276\216\262\371\275$qK\275\220\252\031\275\t\3538\276\232\024T=\257\007F;_\210M=\377\362\332\274K\227\334;o\327\345\275\017\223\320\275n\354\310=\302\357\350<\315%\227\274\370\006\277=\017\212\341\275v\321\022\2769O\235<\230\362\226=\25162=t5\261<\307R\246<\256\237^\275\222\221\244\275\376\r\245=L\020\370=u=\264\275\314e_=\206\375\224\275|oc=q\372\344\275\034\251A\275qq\260=8\227{=!\025V=s\367\357=\341x\270="
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_2"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_4"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/Less"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_1"
  input: "bidirectional_1/while/Const"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_3"
  input: "bidirectional_1/while/Const_2"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_2"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while/add_7"
  input: "bidirectional_1/while/Const_4"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "bidirectional_1_input"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "ClipByValue"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_6"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "ClipByValue"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_8"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "ClipByValue"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_10"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/Less"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_1"
  input: "bidirectional_1/while_1/Const"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_3"
  input: "bidirectional_1/while_1/Const_2"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_2"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "ClipByValue"
  input: "bidirectional_1/while_1/add_7"
  input: "bidirectional_1/while_1/Const_4"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/TensorArrayReadV3"
  input: "bidirectional_1/TensorArrayReadV3_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "dense_1/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8010287
    }
  }
}
node {
  name: "dense_1/random_normal/mul"
  op: "Mul"
  input: "dense_1/random_normal/RandomStandardNormal"
  input: "dense_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_normal"
  op: "Add"
  input: "dense_1/random_normal/mul"
  input: "dense_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "activation_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "activation_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "activation_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum"
  op: "Sum"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv"
  op: "RealDiv"
  input: "activation_1/Softmax"
  input: "loss/activation_1_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/sub"
  op: "Sub"
  input: "loss/activation_1_loss/sub/x"
  input: "loss/activation_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/clip_by_value"
  op: "ClipByValue"
  input: "loss/activation_1_loss/truediv"
  input: "loss/activation_1_loss/Const"
  input: "loss/activation_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Log"
  op: "Log"
  input: "loss/activation_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/mul"
  op: "Mul"
  input: "activation_1_target"
  input: "loss/activation_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Sum_1"
  op: "Sum"
  input: "loss/activation_1_loss/mul"
  input: "loss/activation_1_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/Neg"
  op: "Neg"
  input: "loss/activation_1_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean"
  op: "Mean"
  input: "loss/activation_1_loss/Neg"
  input: "loss/activation_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/mul_1"
  op: "Mul"
  input: "loss/activation_1_loss/Mean"
  input: "activation_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/NotEqual"
  op: "NotEqual"
  input: "activation_1_sample_weights"
  input: "loss/activation_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Cast"
  op: "Cast"
  input: "loss/activation_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_1"
  op: "Mean"
  input: "loss/activation_1_loss/Cast"
  input: "loss/activation_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/activation_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/activation_1_loss/mul_1"
  input: "loss/activation_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/activation_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/activation_1_loss/Mean_2"
  op: "Mean"
  input: "loss/activation_1_loss/truediv_1"
  input: "loss/activation_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/activation_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "activation_1_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "activation_1/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "activation_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
}
versions {
  producer: 26
}
